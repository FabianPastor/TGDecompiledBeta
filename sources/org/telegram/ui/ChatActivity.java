package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.DialogInterface.OnShowListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.provider.ContactsContract.Contacts;
import android.support.v4.content.FileProvider;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.animation.DecelerateInterpolator;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.CountDownLatch;
import java.util.regex.Matcher;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DataQuery;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiSuggestion;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.ImageReceiver.BitmapHolder;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaController.PhotoEntry;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessageObject.GroupedMessagePosition;
import org.telegram.messenger.MessageObject.GroupedMessages;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.MessagesStorage.IntCallback;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationCenter.NotificationCenterDelegate;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SendMessagesHelper.SendingMediaInfo;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.beta.R;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.exoplayer2.C0539C;
import org.telegram.messenger.exoplayer2.DefaultRenderersFactory;
import org.telegram.messenger.exoplayer2.extractor.ts.PsExtractor;
import org.telegram.messenger.exoplayer2.extractor.ts.TsExtractor;
import org.telegram.messenger.exoplayer2.trackselection.AdaptiveTrackSelection;
import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
import org.telegram.messenger.exoplayer2.util.MimeTypes;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.messenger.support.widget.GridLayoutManager.SpanSizeLookup;
import org.telegram.messenger.support.widget.GridLayoutManagerFixed;
import org.telegram.messenger.support.widget.LinearLayoutManager;
import org.telegram.messenger.support.widget.LinearSmoothScrollerMiddle;
import org.telegram.messenger.support.widget.RecyclerView;
import org.telegram.messenger.support.widget.RecyclerView.Adapter;
import org.telegram.messenger.support.widget.RecyclerView.ItemDecoration;
import org.telegram.messenger.support.widget.RecyclerView.LayoutParams;
import org.telegram.messenger.support.widget.RecyclerView.OnScrollListener;
import org.telegram.messenger.support.widget.RecyclerView.State;
import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
import org.telegram.messenger.support.widget.helper.ItemTouchHelper.Callback;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC.BotInfo;
import org.telegram.tgnet.TLRPC.BotInlineResult;
import org.telegram.tgnet.TLRPC.Chat;
import org.telegram.tgnet.TLRPC.ChatFull;
import org.telegram.tgnet.TLRPC.ChatParticipant;
import org.telegram.tgnet.TLRPC.Document;
import org.telegram.tgnet.TLRPC.DocumentAttribute;
import org.telegram.tgnet.TLRPC.DraftMessage;
import org.telegram.tgnet.TLRPC.EncryptedChat;
import org.telegram.tgnet.TLRPC.FileLocation;
import org.telegram.tgnet.TLRPC.InputStickerSet;
import org.telegram.tgnet.TLRPC.KeyboardButton;
import org.telegram.tgnet.TLRPC.Message;
import org.telegram.tgnet.TLRPC.MessageEntity;
import org.telegram.tgnet.TLRPC.MessageMedia;
import org.telegram.tgnet.TLRPC.PhotoSize;
import org.telegram.tgnet.TLRPC.TL_botCommand;
import org.telegram.tgnet.TLRPC.TL_channelForbidden;
import org.telegram.tgnet.TLRPC.TL_channelFull;
import org.telegram.tgnet.TLRPC.TL_channelParticipantAdmin;
import org.telegram.tgnet.TLRPC.TL_channelParticipantCreator;
import org.telegram.tgnet.TLRPC.TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC.TL_channels_exportMessageLink;
import org.telegram.tgnet.TLRPC.TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC.TL_channels_reportSpam;
import org.telegram.tgnet.TLRPC.TL_chatForbidden;
import org.telegram.tgnet.TLRPC.TL_chatFull;
import org.telegram.tgnet.TLRPC.TL_chatParticipantsForbidden;
import org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC.TL_dialog;
import org.telegram.tgnet.TLRPC.TL_document;
import org.telegram.tgnet.TLRPC.TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC.TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC.TL_documentEmpty;
import org.telegram.tgnet.TLRPC.TL_encryptedChat;
import org.telegram.tgnet.TLRPC.TL_encryptedChatDiscarded;
import org.telegram.tgnet.TLRPC.TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC.TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC.TL_error;
import org.telegram.tgnet.TLRPC.TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC.TL_game;
import org.telegram.tgnet.TLRPC.TL_inlineBotSwitchPM;
import org.telegram.tgnet.TLRPC.TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC.TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC.TL_inputStickerSetShortName;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonRow;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC.TL_message;
import org.telegram.tgnet.TLRPC.TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC.TL_messageActionEmpty;
import org.telegram.tgnet.TLRPC.TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC.TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC.TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC.TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC.TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC.TL_messageEntityBold;
import org.telegram.tgnet.TLRPC.TL_messageEntityCode;
import org.telegram.tgnet.TLRPC.TL_messageEntityItalic;
import org.telegram.tgnet.TLRPC.TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC.TL_messageEntityPre;
import org.telegram.tgnet.TLRPC.TL_messageMediaGame;
import org.telegram.tgnet.TLRPC.TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC.TL_messages_getMessageEditData;
import org.telegram.tgnet.TLRPC.TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC.TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC.TL_messages_readMentions;
import org.telegram.tgnet.TLRPC.TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC.TL_phoneCallDiscardReasonBusy;
import org.telegram.tgnet.TLRPC.TL_phoneCallDiscardReasonMissed;
import org.telegram.tgnet.TLRPC.TL_photoEmpty;
import org.telegram.tgnet.TLRPC.TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC.TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC.TL_replyKeyboardForceReply;
import org.telegram.tgnet.TLRPC.TL_user;
import org.telegram.tgnet.TLRPC.TL_userFull;
import org.telegram.tgnet.TLRPC.TL_webPage;
import org.telegram.tgnet.TLRPC.TL_webPageEmpty;
import org.telegram.tgnet.TLRPC.TL_webPagePending;
import org.telegram.tgnet.TLRPC.TL_webPageUrlPending;
import org.telegram.tgnet.TLRPC.User;
import org.telegram.tgnet.TLRPC.WebPage;
import org.telegram.tgnet.TLRPC.messages_Messages;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.AlertDialog.Builder;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.Theme.ThemeInfo;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MentionsAdapter.MentionsAdapterDelegate;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.Adapters.StickersAdapter.StickersAdapterDelegate;
import org.telegram.ui.AudioSelectActivity.AudioSelectActivityDelegate;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotHelpCell.BotHelpCellDelegate;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CorrectlyMeasuringTextView;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.RecyclerListView.Holder;
import org.telegram.ui.Components.RecyclerListView.OnItemClickListener;
import org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended;
import org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener;
import org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.Size;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.StickersAlert.StickersAlertDelegate;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.DialogsActivity.DialogsActivityDelegate;
import org.telegram.ui.DocumentSelectActivity.DocumentSelectActivityDelegate;
import org.telegram.ui.LocationActivity.LocationActivityDelegate;
import org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate;
import org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider;
import org.telegram.ui.PhotoViewer.PhotoViewerProvider;
import org.telegram.ui.PhotoViewer.PlaceProviderObject;
import org.telegram.ui.StickerPreviewViewer.StickerPreviewViewerDelegate;

public class ChatActivity extends BaseFragment implements NotificationCenterDelegate, DialogsActivityDelegate, LocationActivityDelegate {
    private static final int add_shortcut = 24;
    private static final int attach_audio = 3;
    private static final int attach_contact = 5;
    private static final int attach_document = 4;
    private static final int attach_gallery = 1;
    private static final int attach_location = 6;
    private static final int attach_photo = 0;
    private static final int attach_video = 2;
    private static final int bot_help = 30;
    private static final int bot_settings = 31;
    private static final int call = 32;
    private static final int chat_enc_timer = 13;
    private static final int chat_menu_attach = 14;
    private static final int clear_history = 15;
    private static final int copy = 10;
    private static final int delete = 12;
    private static final int delete_chat = 16;
    private static final int edit = 23;
    private static final int forward = 11;
    private static final int id_chat_compose_panel = 1000;
    private static final int mute = 18;
    private static final int reply = 19;
    private static final int report = 21;
    private static final int search = 40;
    private static final int share_contact = 17;
    private static final int star = 22;
    private SimpleTextView actionModeSubTextView;
    private SimpleTextView actionModeTextView;
    private FrameLayout actionModeTitleContainer;
    private ArrayList<View> actionModeViews = new ArrayList();
    private TextView addContactItem;
    private TextView addToContactsButton;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond = true;
    private boolean allowStickersPanel;
    private ArrayList<MessageObject> animatingMessageObjects = new ArrayList();
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenuItem attachItem;
    private ChatAvatarContainer avatarContainer;
    private ChatBigEmptyView bigEmptyView;
    private MessageObject botButtons;
    private PhotoViewerProvider botContextProvider = new C23282();
    private ArrayList<Object> botContextResults;
    private SparseArray<BotInfo> botInfo = new SparseArray();
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private FrameLayout bottomOverlay;
    private FrameLayout bottomOverlayChat;
    private TextView bottomOverlayChatText;
    private TextView bottomOverlayText;
    private boolean[] cacheEndReached = new boolean[2];
    private int canEditMessagesCount;
    private int cantDeleteMessagesCount;
    protected ChatActivityEnterView chatActivityEnterView;
    private ChatActivityAdapter chatAdapter;
    private ChatAttachAlert chatAttachAlert;
    private long chatEnterTime;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private RecyclerListView chatListView;
    private boolean chatListViewIgnoreLayout;
    private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList();
    private boolean checkTextureViewPosition;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private SizeNotifierFrameLayout contentView;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected Chat currentChat;
    protected EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    protected User currentUser;
    private long dialog_id;
    private ChatMessageCell drawLaterRoundProgressCell;
    private int editingMessageObjectReqId;
    private View emojiButtonRed;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private boolean[] endReached = new boolean[2];
    private boolean first = true;
    private boolean firstLoading = true;
    private boolean firstUnreadSent = false;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private boolean forceScrollToTop;
    private boolean[] forwardEndReached = new boolean[]{true, true};
    private MessageObject forwardingMessage;
    private GroupedMessages forwardingMessageGroup;
    private ArrayList<MessageObject> forwardingMessages;
    private ArrayList<CharSequence> foundUrls;
    private WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    private TextView gifHintTextView;
    private boolean globalIgnoreLayout;
    private LongSparseArray<GroupedMessages> groupedMessagesMap = new LongSparseArray();
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private int highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
    private boolean ignoreAttachOnPause;
    protected ChatFull info;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean isBroadcast;
    private int lastLoadIndex;
    private int last_message_id = 0;
    private int linkSearchRequestId;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private int loadingPinnedMessage;
    private int loadsCount;
    private int[] maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] maxMessageId = new int[]{ConnectionsManager.DEFAULT_DATACENTER_ID, ConnectionsManager.DEFAULT_DATACENTER_ID};
    private TextView mediaBanTooltip;
    private FrameLayout mentionContainer;
    private ExtendedGridLayoutManager mentionGridLayoutManager;
    private LinearLayoutManager mentionLayoutManager;
    private AnimatorSet mentionListAnimation;
    private RecyclerListView mentionListView;
    private boolean mentionListViewIgnoreLayout;
    private boolean mentionListViewIsScrolling;
    private int mentionListViewLastViewPosition;
    private int mentionListViewLastViewTop;
    private int mentionListViewScrollOffsetY;
    private FrameLayout mentiondownButton;
    private ObjectAnimator mentiondownButtonAnimation;
    private TextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private MentionsAdapter mentionsAdapter;
    private OnItemClickListener mentionsOnItemClickListener;
    private long mergeDialogId;
    protected ArrayList<MessageObject> messages = new ArrayList();
    private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap();
    private SparseArray<MessageObject>[] messagesDict = new SparseArray[]{new SparseArray(), new SparseArray()};
    private int[] minDate = new int[2];
    private int[] minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
    private TextView muteItem;
    private MessageObject needAnimateToMessage;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    OnItemClickListenerExtended onItemClickListener = new C20094();
    OnItemLongClickListenerExtended onItemLongClickListener = new C20083();
    private boolean openAnimationEnded;
    private boolean openSearchKeyboard;
    private View overlayView;
    private FrameLayout pagedownButton;
    private AnimatorSet pagedownButtonAnimation;
    private TextView pagedownButtonCounter;
    private ImageView pagedownButtonImage;
    private boolean pagedownButtonShowedByScroll;
    private boolean paused = true;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private Runnable pendingWebPageTimeoutRunnable;
    private PhotoViewerProvider photoViewerProvider = new C23271();
    private FileLocation pinnedImageLocation;
    private View pinnedLineView;
    private BackupImageView pinnedMessageImageView;
    private SimpleTextView pinnedMessageNameTextView;
    private MessageObject pinnedMessageObject;
    private SimpleTextView pinnedMessageTextView;
    private FrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private RadialProgressView progressBar;
    private FrameLayout progressView;
    private View progressView2;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private FileLocation replyImageLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectTextView;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private FrameLayout reportSpamContainer;
    private LinearLayout reportSpamView;
    private AnimatorSet reportSpamViewAnimator;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private FrameLayout roundVideoContainer;
    private AnimatorSet runningAnimation;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition = -10000;
    private int scrollToOffsetOnRecreate = 0;
    private int scrollToPositionOnRecreate = -1;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollingFloatingDate;
    private ImageView searchCalendarButton;
    private FrameLayout searchContainer;
    private SimpleTextView searchCountText;
    private ImageView searchDownButton;
    private ActionBarMenuItem searchItem;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private boolean searchingForUser;
    private User searchingUserMessages;
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray<MessageObject>[] selectedMessagesIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private MessageObject selectedObject;
    private GroupedMessages selectedObjectGroup;
    private int startLoadFromMessageId;
    private int startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
    private boolean startReplyOnTextChange;
    private String startVideoEdit;
    private StickersAdapter stickersAdapter;
    private RecyclerListView stickersListView;
    private OnItemClickListener stickersOnItemClickListener;
    private FrameLayout stickersPanel;
    private ImageView stickersPanelArrow;
    private View timeItem2;
    private int topViewWasVisible;
    private MessageObject unreadMessageObject;
    private boolean userBlocked = false;
    private TextureView videoTextureView;
    private AnimatorSet voiceHintAnimation;
    private Runnable voiceHintHideRunnable;
    private TextView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private ArrayList<Integer> waitingForLoad = new ArrayList();
    private boolean waitingForReplyMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;

    /* renamed from: org.telegram.ui.ChatActivity$3 */
    class C20083 implements OnItemLongClickListenerExtended {
        C20083() {
        }

        public boolean onItemClick(View view, int position, float x, float y) {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                boolean outside = false;
                if (view instanceof ChatMessageCell) {
                    outside = ((ChatMessageCell) view).isInsideBackground(x, y) ^ 1;
                }
                ChatActivity.this.processRowSelect(view, outside);
            } else {
                ChatActivity.this.createMenu(view, false, true);
            }
            return true;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$4 */
    class C20094 implements OnItemClickListenerExtended {
        C20094() {
        }

        public void onItemClick(View view, int position, float x, float y) {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                boolean outside = false;
                if (view instanceof ChatMessageCell) {
                    outside = 1 ^ ((ChatMessageCell) view).isInsideBackground(x, y);
                }
                ChatActivity.this.processRowSelect(view, outside);
                return;
            }
            ChatActivity.this.createMenu(view, true, false);
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$9 */
    class C20119 extends ActionBarMenuOnItemClick {
        C20119() {
        }

        public void onItemClick(final int id) {
            boolean z = false;
            if (id == -1) {
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    for (int a = 1; a >= 0; a--) {
                        ChatActivity.this.selectedMessagesIds[a].clear();
                        ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                        ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                    }
                    ChatActivity.this.cantDeleteMessagesCount = 0;
                    ChatActivity.this.canEditMessagesCount = 0;
                    if (ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
                        ChatActivity.this.chatActivityEnterView.setEditingMessageObject(null, false);
                    } else {
                        ChatActivity.this.actionBar.hideActionMode();
                        ChatActivity.this.updatePinnedMessageView(true);
                    }
                    ChatActivity.this.updateVisibleRows();
                } else {
                    ChatActivity.this.finishFragment();
                }
            } else if (id == 10) {
                previousUid = 0;
                String str = TtmlNode.ANONYMOUS_REGION_ID;
                a = 1;
                while (a >= 0) {
                    int b;
                    ArrayList<Integer> ids = new ArrayList();
                    for (b = 0; b < ChatActivity.this.selectedMessagesCanCopyIds[a].size(); b++) {
                        ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[a].keyAt(b)));
                    }
                    if (ChatActivity.this.currentEncryptedChat == null) {
                        Collections.sort(ids);
                    } else {
                        Collections.sort(ids, Collections.reverseOrder());
                    }
                    b = previousUid;
                    String str2 = str;
                    for (str = null; str < ids.size(); str++) {
                        StringBuilder stringBuilder;
                        MessageObject messageObject = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[a].get(((Integer) ids.get(str)).intValue());
                        if (str2.length() != 0) {
                            stringBuilder = new StringBuilder();
                            stringBuilder.append(str2);
                            stringBuilder.append("\n\n");
                            str2 = stringBuilder.toString();
                        }
                        stringBuilder = new StringBuilder();
                        stringBuilder.append(str2);
                        stringBuilder.append(ChatActivity.this.getMessageContent(messageObject, b, true));
                        str2 = stringBuilder.toString();
                        b = messageObject.messageOwner.from_id;
                    }
                    a--;
                    str = str2;
                    previousUid = b;
                }
                if (str.length() != 0) {
                    AndroidUtilities.addToClipboard(str);
                }
                for (a = 1; a >= 0; a--) {
                    ChatActivity.this.selectedMessagesIds[a].clear();
                    ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                    ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                }
                ChatActivity.this.cantDeleteMessagesCount = 0;
                ChatActivity.this.canEditMessagesCount = 0;
                ChatActivity.this.actionBar.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
            } else if (id == 12) {
                if (ChatActivity.this.getParentActivity() != null) {
                    ChatActivity.this.createDeleteMessagesAlert(null, null);
                }
            } else if (id == 11) {
                args = new Bundle();
                args.putBoolean("onlySelect", true);
                args.putInt("dialogsType", 3);
                DialogsActivity fragment = new DialogsActivity(args);
                fragment.setDelegate(ChatActivity.this);
                ChatActivity.this.presentFragment(fragment);
            } else if (id != 13) {
                if (id != 15) {
                    if (id != 16) {
                        if (id == 17) {
                            if (ChatActivity.this.currentUser != null) {
                                if (ChatActivity.this.getParentActivity() != null) {
                                    if (ChatActivity.this.currentUser.phone == null || ChatActivity.this.currentUser.phone.length() == 0) {
                                        ChatActivity.this.shareMyContact(ChatActivity.this.replyingMessageObject);
                                    } else {
                                        args = new Bundle();
                                        args.putInt("user_id", ChatActivity.this.currentUser.id);
                                        args.putBoolean("addContact", true);
                                        ChatActivity.this.presentFragment(new ContactAddActivity(args));
                                    }
                                }
                            }
                            return;
                        } else if (id == 18) {
                            ChatActivity.this.toggleMute(false);
                        } else if (id == 24) {
                            try {
                                DataQuery.getInstance(ChatActivity.this.currentAccount).installShortcut((long) ChatActivity.this.currentUser.id);
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            }
                        } else if (id == 21) {
                            ChatActivity.this.showDialog(AlertsCreator.createReportAlert(ChatActivity.this.getParentActivity(), ChatActivity.this.dialog_id, 0, ChatActivity.this));
                        } else if (id == 19) {
                            messageObject = null;
                            a = 1;
                            while (a >= 0) {
                                if (messageObject == null && ChatActivity.this.selectedMessagesIds[a].size() == 1) {
                                    ids = new ArrayList();
                                    for (b = 0; b < ChatActivity.this.selectedMessagesIds[a].size(); b++) {
                                        ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a].keyAt(b)));
                                    }
                                    messageObject = (MessageObject) ChatActivity.this.messagesDict[a].get(((Integer) ids.get(0)).intValue());
                                }
                                ChatActivity.this.selectedMessagesIds[a].clear();
                                ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                                a--;
                            }
                            if (messageObject != null && (messageObject.messageOwner.id > 0 || (messageObject.messageOwner.id < 0 && ChatActivity.this.currentEncryptedChat != null))) {
                                ChatActivity.this.showReplyPanel(true, messageObject, null, null, false);
                            }
                            ChatActivity.this.cantDeleteMessagesCount = 0;
                            ChatActivity.this.canEditMessagesCount = 0;
                            ChatActivity.this.actionBar.hideActionMode();
                            ChatActivity.this.updatePinnedMessageView(true);
                            ChatActivity.this.updateVisibleRows();
                        } else if (id == 22) {
                            for (a = 0; a < 2; a++) {
                                for (previousUid = 0; previousUid < ChatActivity.this.selectedMessagesCanStarIds[a].size(); previousUid++) {
                                    DataQuery.getInstance(ChatActivity.this.currentAccount).addRecentSticker(2, ((MessageObject) ChatActivity.this.selectedMessagesCanStarIds[a].valueAt(previousUid)).getDocument(), (int) (System.currentTimeMillis() / 1000), ChatActivity.this.hasUnfavedSelected ^ true);
                                }
                            }
                            for (a = 1; a >= 0; a--) {
                                ChatActivity.this.selectedMessagesIds[a].clear();
                                ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                            }
                            ChatActivity.this.cantDeleteMessagesCount = 0;
                            ChatActivity.this.canEditMessagesCount = 0;
                            ChatActivity.this.actionBar.hideActionMode();
                            ChatActivity.this.updatePinnedMessageView(true);
                            ChatActivity.this.updateVisibleRows();
                        } else if (id == ChatActivity.edit) {
                            messageObject = null;
                            a = 1;
                            while (a >= 0) {
                                if (messageObject == null && ChatActivity.this.selectedMessagesIds[a].size() == 1) {
                                    ids = new ArrayList();
                                    for (b = 0; b < ChatActivity.this.selectedMessagesIds[a].size(); b++) {
                                        ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a].keyAt(b)));
                                    }
                                    messageObject = (MessageObject) ChatActivity.this.messagesDict[a].get(((Integer) ids.get(0)).intValue());
                                }
                                ChatActivity.this.selectedMessagesIds[a].clear();
                                ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                                a--;
                            }
                            ChatActivity.this.startReplyOnTextChange = false;
                            ChatActivity.this.startEditingMessageObject(messageObject);
                            ChatActivity.this.cantDeleteMessagesCount = 0;
                            ChatActivity.this.canEditMessagesCount = 0;
                            ChatActivity.this.updatePinnedMessageView(true);
                            ChatActivity.this.updateVisibleRows();
                        } else if (id == 14) {
                            ChatActivity.this.openAttachMenu();
                        } else if (id == ChatActivity.bot_help) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/help", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                        } else if (id == ChatActivity.bot_settings) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/settings", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                        } else if (id == ChatActivity.search) {
                            ChatActivity.this.openSearchWithText(null);
                        } else if (!(id != 32 || ChatActivity.this.currentUser == null || ChatActivity.this.getParentActivity() == null)) {
                            VoIPHelper.startCall(ChatActivity.this.currentUser, ChatActivity.this.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                        }
                    }
                }
                if (ChatActivity.this.getParentActivity() != null) {
                    if (((int) ChatActivity.this.dialog_id) < 0 && ((int) (ChatActivity.this.dialog_id >> 32)) != 1) {
                        z = true;
                    }
                    final boolean isChat = z;
                    Builder builder = new Builder(ChatActivity.this.getParentActivity());
                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                    if (id == 15) {
                        builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
                    } else if (isChat) {
                        builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
                    } else {
                        builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
                    }
                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {
                        public void onClick(DialogInterface dialogInterface, int i) {
                            if (id != 15) {
                                if (!isChat) {
                                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                } else {
                                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat((int) (-ChatActivity.this.dialog_id), MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Integer.valueOf(UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())), null);
                                }
                                ChatActivity.this.finishFragment();
                                return;
                            }
                            if (!(!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatActivity.this.info == null || ChatActivity.this.info.pinned_msg_id == 0)) {
                                Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("pin_");
                                stringBuilder.append(ChatActivity.this.dialog_id);
                                edit.putInt(stringBuilder.toString(), ChatActivity.this.info.pinned_msg_id).commit();
                                ChatActivity.this.updatePinnedMessageView(true);
                            }
                            MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 1);
                        }
                    });
                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                    ChatActivity.this.showDialog(builder.create());
                }
            } else if (ChatActivity.this.getParentActivity() != null) {
                ChatActivity.this.showDialog(AlertsCreator.createTTLAlert(ChatActivity.this.getParentActivity(), ChatActivity.this.currentEncryptedChat).create());
            }
        }
    }

    public class ChatActivityAdapter extends Adapter {
        private int botInfoRow = -1;
        private boolean isBot;
        private int loadingDownRow;
        private int loadingUpRow;
        private Context mContext;
        private int messagesEndRow;
        private int messagesStartRow;
        private int rowCount;

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1 */
        class C20121 implements ChatMessageCellDelegate {
            C20121() {
            }

            public void didPressedShare(ChatMessageCell cell) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        ChatActivity.this.chatActivityEnterView.closeKeyboard();
                    }
                    MessageObject messageObject = cell.getMessageObject();
                    if (!UserObject.isUserSelf(ChatActivity.this.currentUser) || messageObject.messageOwner.fwd_from.saved_from_peer == null) {
                        ArrayList<MessageObject> arrayList = null;
                        if (messageObject.getGroupId() != 0) {
                            GroupedMessages groupedMessages = (GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId());
                            if (groupedMessages != null) {
                                arrayList = groupedMessages.messages;
                            }
                        }
                        if (arrayList == null) {
                            arrayList = new ArrayList();
                            arrayList.add(messageObject);
                        }
                        ChatActivity chatActivity = ChatActivity.this;
                        Context access$28400 = ChatActivityAdapter.this.mContext;
                        boolean z = ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.username != null && ChatActivity.this.currentChat.username.length() > 0;
                        chatActivity.showDialog(new ShareAlert(access$28400, arrayList, null, z, null, false));
                    } else {
                        Bundle args = new Bundle();
                        if (messageObject.messageOwner.fwd_from.saved_from_peer.channel_id != 0) {
                            args.putInt("chat_id", messageObject.messageOwner.fwd_from.saved_from_peer.channel_id);
                        } else if (messageObject.messageOwner.fwd_from.saved_from_peer.chat_id != 0) {
                            args.putInt("chat_id", messageObject.messageOwner.fwd_from.saved_from_peer.chat_id);
                        } else if (messageObject.messageOwner.fwd_from.saved_from_peer.user_id != 0) {
                            args.putInt("user_id", messageObject.messageOwner.fwd_from.saved_from_peer.user_id);
                        }
                        args.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
                        if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
                            ChatActivity.this.presentFragment(new ChatActivity(args));
                        }
                    }
                }
            }

            public boolean needPlayMessage(MessageObject messageObject) {
                if (!messageObject.isVoice()) {
                    if (!messageObject.isRoundVideo()) {
                        if (messageObject.isMusic()) {
                            return MediaController.getInstance().setPlaylist(ChatActivity.this.messages, messageObject);
                        }
                        return false;
                    }
                }
                boolean result = MediaController.getInstance().playMessage(messageObject);
                MediaController.getInstance().setVoiceMessagesPlaylist(result ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                return result;
            }

            public void didPressedChannelAvatar(ChatMessageCell cell, Chat chat, int postId) {
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    ChatActivity.this.processRowSelect(cell, true);
                    return;
                }
                if (!(chat == null || chat == ChatActivity.this.currentChat)) {
                    Bundle args = new Bundle();
                    args.putInt("chat_id", chat.id);
                    if (postId != 0) {
                        args.putInt("message_id", postId);
                    }
                    if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                        ChatActivity.this.presentFragment(new ChatActivity(args), true);
                    }
                }
            }

            public void didPressedOther(ChatMessageCell cell) {
                if (cell.getMessageObject().type != 16) {
                    ChatActivity.this.createMenu(cell, true, false, false);
                } else if (ChatActivity.this.currentUser != null) {
                    VoIPHelper.startCall(ChatActivity.this.currentUser, ChatActivity.this.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                }
            }

            public void didPressedUserAvatar(ChatMessageCell cell, User user) {
                boolean z = true;
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    ChatActivity.this.processRowSelect(cell, true);
                    return;
                }
                if (!(user == null || user.id == UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())) {
                    Bundle args = new Bundle();
                    args.putInt("user_id", user.id);
                    ProfileActivity fragment = new ProfileActivity(args);
                    if (ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != user.id) {
                        z = false;
                    }
                    fragment.setPlayProfileAnimation(z);
                    ChatActivity.this.presentFragment(fragment);
                }
            }

            public void didPressedBotButton(ChatMessageCell cell, KeyboardButton button) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (button instanceof TL_keyboardButtonSwitchInline) || (button instanceof TL_keyboardButtonCallback) || (button instanceof TL_keyboardButtonGame) || (button instanceof TL_keyboardButtonUrl) || (button instanceof TL_keyboardButtonBuy)) {
                        ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, cell.getMessageObject(), cell.getMessageObject());
                    }
                }
            }

            public void didPressedCancelSendButton(ChatMessageCell cell) {
                MessageObject message = cell.getMessageObject();
                if (message.messageOwner.send_state != 0) {
                    SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).cancelSendingMessage(message);
                }
            }

            public void didLongPressed(ChatMessageCell cell) {
                ChatActivity.this.createMenu(cell, false, false);
            }

            public boolean canPerformActions() {
                return (ChatActivity.this.actionBar == null || ChatActivity.this.actionBar.isActionModeShowed()) ? false : true;
            }

            public void didPressedUrl(MessageObject messageObject, CharacterStyle url, boolean longPress) {
                if (url != null) {
                    boolean z = false;
                    if (url instanceof URLSpanMono) {
                        ((URLSpanMono) url).copyToClipboard();
                        Toast.makeText(ChatActivity.this.getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), 0).show();
                    } else if (url instanceof URLSpanUserMention) {
                        User user = MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Utilities.parseInt(((URLSpanUserMention) url).getURL()));
                        if (user != null) {
                            MessagesController.openChatOrProfileWith(user, null, ChatActivity.this, 0, false);
                        }
                    } else if (url instanceof URLSpanNoUnderline) {
                        str = ((URLSpanNoUnderline) url).getURL();
                        if (str.startsWith("@")) {
                            MessagesController.getInstance(ChatActivity.this.currentAccount).openByUserName(str.substring(1), ChatActivity.this, 0);
                        } else {
                            if (!str.startsWith("#")) {
                                if (!str.startsWith("$")) {
                                    if (str.startsWith("/") && URLSpanBotCommand.enabled) {
                                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                        if (ChatActivity.this.currentChat != null && ChatActivity.this.currentChat.megagroup) {
                                            z = true;
                                        }
                                        chatActivityEnterView.setCommand(messageObject, str, longPress, z);
                                        if (!longPress && ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                            ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                        }
                                    }
                                }
                            }
                            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                ChatActivity.this.openSearchWithText(str);
                            } else {
                                DialogsActivity fragment = new DialogsActivity(null);
                                fragment.setSearchString(str);
                                ChatActivity.this.presentFragment(fragment);
                            }
                        }
                    } else {
                        str = ((URLSpan) url).getURL();
                        if (longPress) {
                            BottomSheet.Builder builder = new BottomSheet.Builder(ChatActivity.this.getParentActivity());
                            builder.setTitle(str);
                            builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    boolean z = true;
                                    if (which == 0) {
                                        Context parentActivity = ChatActivity.this.getParentActivity();
                                        String str = str;
                                        if (ChatActivity.this.inlineReturn != 0) {
                                            z = false;
                                        }
                                        Browser.openUrl(parentActivity, str, z);
                                    } else if (which == 1) {
                                        String url = str;
                                        if (url.startsWith("mailto:")) {
                                            url = url.substring(7);
                                        } else if (url.startsWith("tel:")) {
                                            url = url.substring(4);
                                        }
                                        AndroidUtilities.addToClipboard(url);
                                    }
                                }
                            });
                            ChatActivity.this.showDialog(builder.create());
                        } else if (url instanceof URLSpanReplacement) {
                            ChatActivity.this.showOpenUrlAlert(((URLSpanReplacement) url).getURL(), true);
                        } else if (url instanceof URLSpan) {
                            if (!(!(messageObject.messageOwner.media instanceof TL_messageMediaWebPage) || messageObject.messageOwner.media.webpage == null || messageObject.messageOwner.media.webpage.cached_page == null)) {
                                String lowerUrl = str.toLowerCase();
                                String lowerUrl2 = messageObject.messageOwner.media.webpage.url.toLowerCase();
                                if ((lowerUrl.contains("telegra.ph") || lowerUrl.contains("t.me/iv")) && (lowerUrl.contains(lowerUrl2) || lowerUrl2.contains(lowerUrl))) {
                                    ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                    ArticleViewer.getInstance().open(messageObject);
                                    return;
                                }
                            }
                            Context parentActivity = ChatActivity.this.getParentActivity();
                            if (ChatActivity.this.inlineReturn == 0) {
                                z = true;
                            }
                            Browser.openUrl(parentActivity, str, z);
                        } else if (url instanceof ClickableSpan) {
                            ((ClickableSpan) url).onClick(ChatActivity.this.fragmentView);
                        }
                    }
                }
            }

            public void needOpenWebView(String url, String title, String description, String originalUrl, int w, int h) {
                EmbedBottomSheet.show(ChatActivityAdapter.this.mContext, title, description, originalUrl, url, w, h);
            }

            public void didPressedReplyMessage(ChatMessageCell cell, int id) {
                MessageObject messageObject = cell.getMessageObject();
                ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, false);
            }

            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void didPressedViaBot(ChatMessageCell cell, String username) {
                if ((ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && ((ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0) && ChatActivity.this.chatActivityEnterView != null && username != null && username.length() > 0)) {
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("@");
                    stringBuilder.append(username);
                    stringBuilder.append(" ");
                    chatActivityEnterView.setFieldText(stringBuilder.toString());
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }
            }

            public void didPressedImage(ChatMessageCell cell) {
                MessageObject message = cell.getMessageObject();
                int i = 0;
                if (message.isSendError()) {
                    ChatActivity.this.createMenu(cell, false, false);
                } else if (!message.isSending()) {
                    if (message.needDrawBluredPreview()) {
                        if (ChatActivity.this.sendSecretMessageRead(message)) {
                            cell.invalidate();
                        }
                        SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        SecretMediaViewer.getInstance().openMedia(message, ChatActivity.this.photoViewerProvider);
                    } else if (message.type == 13) {
                        ChatActivity chatActivity = ChatActivity.this;
                        Context parentActivity = ChatActivity.this.getParentActivity();
                        BaseFragment baseFragment = ChatActivity.this;
                        InputStickerSet inputStickerSet = message.getInputStickerSet();
                        ChatActivityEnterView chatActivityEnterView = (ChatActivity.this.bottomOverlayChat.getVisibility() == 0 || !ChatObject.canSendStickers(ChatActivity.this.currentChat)) ? null : ChatActivity.this.chatActivityEnterView;
                        chatActivity.showDialog(new StickersAlert(parentActivity, baseFragment, inputStickerSet, null, chatActivityEnterView));
                    } else {
                        if (!(message.isVideo() || message.type == 1 || (message.type == 0 && !message.isWebpageDocument()))) {
                            if (!message.isGif()) {
                                File f;
                                if (message.type == 3) {
                                    ChatActivity.this.sendSecretMessageRead(message);
                                    f = null;
                                    try {
                                        if (!(message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0)) {
                                            f = new File(message.messageOwner.attachPath);
                                        }
                                        if (f == null || !f.exists()) {
                                            f = FileLoader.getPathToMessage(message.messageOwner);
                                        }
                                        Intent intent = new Intent("android.intent.action.VIEW");
                                        if (VERSION.SDK_INT >= 24) {
                                            intent.setFlags(1);
                                            intent.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), "org.telegram.messenger.beta.provider", f), MimeTypes.VIDEO_MP4);
                                        } else {
                                            intent.setDataAndType(Uri.fromFile(f), MimeTypes.VIDEO_MP4);
                                        }
                                        ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                                    } catch (Throwable e) {
                                        FileLog.m3e(e);
                                        ChatActivity.this.alertUserOpenError(message);
                                    }
                                } else if (message.type == 4) {
                                    if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                        return;
                                    }
                                    LocationActivity fragment;
                                    if (message.isLiveLocation()) {
                                        fragment = new LocationActivity(2);
                                        fragment.setMessageObject(message);
                                        fragment.setDelegate(ChatActivity.this);
                                        ChatActivity.this.presentFragment(fragment);
                                    } else {
                                        if (ChatActivity.this.currentEncryptedChat == null) {
                                            i = 3;
                                        }
                                        fragment = new LocationActivity(i);
                                        fragment.setMessageObject(message);
                                        fragment.setDelegate(ChatActivity.this);
                                        ChatActivity.this.presentFragment(fragment);
                                    }
                                } else if (message.type == 9 || message.type == 0) {
                                    if (message.getDocumentName().toLowerCase().endsWith("attheme")) {
                                        File f2;
                                        f = null;
                                        if (!(message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0)) {
                                            f2 = new File(message.messageOwner.attachPath);
                                            if (f2.exists()) {
                                                f = f2;
                                            }
                                        }
                                        if (f == null) {
                                            f2 = FileLoader.getPathToMessage(message.messageOwner);
                                            if (f2.exists()) {
                                                f = f2;
                                            }
                                        }
                                        if (ChatActivity.this.chatLayoutManager != null) {
                                            i = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                                            if (i != 0) {
                                                ChatActivity.this.scrollToPositionOnRecreate = i;
                                                Holder holder = (Holder) ChatActivity.this.chatListView.findViewHolderForAdapterPosition(ChatActivity.this.scrollToPositionOnRecreate);
                                                if (holder != null) {
                                                    ChatActivity.this.scrollToOffsetOnRecreate = (ChatActivity.this.chatListView.getMeasuredHeight() - holder.itemView.getBottom()) - ChatActivity.this.chatListView.getPaddingBottom();
                                                } else {
                                                    ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                }
                                            } else {
                                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                                            }
                                        }
                                        ThemeInfo themeInfo = Theme.applyThemeFile(f, message.getDocumentName(), true);
                                        if (themeInfo != null) {
                                            ChatActivity.this.presentFragment(new ThemePreviewActivity(f, themeInfo));
                                            return;
                                        }
                                        ChatActivity.this.scrollToPositionOnRecreate = -1;
                                    }
                                    try {
                                        AndroidUtilities.openForView(message, ChatActivity.this.getParentActivity());
                                    } catch (Throwable e2) {
                                        FileLog.m3e(e2);
                                        ChatActivity.this.alertUserOpenError(message);
                                    }
                                }
                            }
                        }
                        if (message.isVideo()) {
                            ChatActivity.this.sendSecretMessageRead(message);
                        }
                        PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        if (PhotoViewer.getInstance().openPhoto(message, message.type != 0 ? ChatActivity.this.dialog_id : 0, message.type != 0 ? ChatActivity.this.mergeDialogId : 0, ChatActivity.this.photoViewerProvider)) {
                            PhotoViewer.getInstance().setParentChatActivity(ChatActivity.this);
                        }
                    }
                }
            }

            public void didPressedInstantButton(ChatMessageCell cell, int type) {
                MessageObject messageObject = cell.getMessageObject();
                if (type == 0) {
                    if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null && messageObject.messageOwner.media.webpage.cached_page != null) {
                        ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                        ArticleViewer.getInstance().open(messageObject);
                    }
                } else if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null) {
                    Browser.openUrl(ChatActivity.this.getParentActivity(), messageObject.messageOwner.media.webpage.url);
                }
            }

            public boolean isChatAdminCell(int uid) {
                if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup) {
                    return MessagesController.getInstance(ChatActivity.this.currentAccount).isChannelAdmin(ChatActivity.this.currentChat.id, uid);
                }
                return false;
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$2 */
        class C20132 implements ChatActionCellDelegate {
            C20132() {
            }

            public void didClickedImage(ChatActionCell cell) {
                MessageObject message = cell.getMessageObject();
                PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, 640);
                if (photoSize != null) {
                    PhotoViewer.getInstance().openPhoto(photoSize.location, ChatActivity.this.photoViewerProvider);
                    return;
                }
                PhotoViewer.getInstance().openPhoto(message, 0, 0, ChatActivity.this.photoViewerProvider);
            }

            public void didLongPressed(ChatActionCell cell) {
                ChatActivity.this.createMenu(cell, false, false);
            }

            public void needOpenUserProfile(int uid) {
                boolean z = true;
                Bundle args;
                if (uid < 0) {
                    args = new Bundle();
                    args.putInt("chat_id", -uid);
                    if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
                        ChatActivity.this.presentFragment(new ChatActivity(args), true);
                    }
                } else if (uid != UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId()) {
                    args = new Bundle();
                    args.putInt("user_id", uid);
                    if (ChatActivity.this.currentEncryptedChat != null && uid == ChatActivity.this.currentUser.id) {
                        args.putLong("dialog_id", ChatActivity.this.dialog_id);
                    }
                    ProfileActivity fragment = new ProfileActivity(args);
                    if (ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != uid) {
                        z = false;
                    }
                    fragment.setPlayProfileAnimation(z);
                    ChatActivity.this.presentFragment(fragment);
                }
            }

            public void didPressedReplyMessage(ChatActionCell cell, int id) {
                MessageObject messageObject = cell.getMessageObject();
                ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, false);
            }

            public void didPressedBotButton(MessageObject messageObject, KeyboardButton button) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (button instanceof TL_keyboardButtonSwitchInline) || (button instanceof TL_keyboardButtonCallback) || (button instanceof TL_keyboardButtonGame) || (button instanceof TL_keyboardButtonUrl) || (button instanceof TL_keyboardButtonBuy)) {
                        ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, messageObject, messageObject);
                    }
                }
            }
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$3 */
        class C20143 implements BotHelpCellDelegate {
            C20143() {
            }

            public void didPressUrl(String url) {
                if (url.startsWith("@")) {
                    MessagesController.getInstance(ChatActivity.this.currentAccount).openByUserName(url.substring(1), ChatActivity.this, 0);
                    return;
                }
                if (!url.startsWith("#")) {
                    if (!url.startsWith("$")) {
                        if (url.startsWith("/")) {
                            ChatActivity.this.chatActivityEnterView.setCommand(null, url, false, false);
                            if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                return;
                            }
                            return;
                        }
                        return;
                    }
                }
                DialogsActivity fragment = new DialogsActivity(null);
                fragment.setSearchString(url);
                ChatActivity.this.presentFragment(fragment);
            }
        }

        public ChatActivityAdapter(Context context) {
            this.mContext = context;
            boolean z = ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot;
            this.isBot = z;
        }

        public void updateRows() {
            int i;
            this.rowCount = 0;
            if (ChatActivity.this.messages.isEmpty()) {
                this.loadingUpRow = -1;
                this.loadingDownRow = -1;
                this.messagesStartRow = -1;
                this.messagesEndRow = -1;
            } else {
                if (ChatActivity.this.forwardEndReached[0]) {
                    if (ChatActivity.this.mergeDialogId == 0 || ChatActivity.this.forwardEndReached[1]) {
                        this.loadingDownRow = -1;
                        this.messagesStartRow = this.rowCount;
                        this.rowCount += ChatActivity.this.messages.size();
                        this.messagesEndRow = this.rowCount;
                        if (ChatActivity.this.endReached[0]) {
                            if (ChatActivity.this.mergeDialogId != 0 || ChatActivity.this.endReached[1]) {
                                this.loadingUpRow = -1;
                            }
                        }
                        i = this.rowCount;
                        this.rowCount = i + 1;
                        this.loadingUpRow = i;
                    }
                }
                int i2 = this.rowCount;
                this.rowCount = i2 + 1;
                this.loadingDownRow = i2;
                this.messagesStartRow = this.rowCount;
                this.rowCount += ChatActivity.this.messages.size();
                this.messagesEndRow = this.rowCount;
                if (ChatActivity.this.endReached[0]) {
                    if (ChatActivity.this.mergeDialogId != 0) {
                    }
                    this.loadingUpRow = -1;
                }
                i = this.rowCount;
                this.rowCount = i + 1;
                this.loadingUpRow = i;
            }
            if (ChatActivity.this.currentUser == null || !ChatActivity.this.currentUser.bot) {
                this.botInfoRow = -1;
                return;
            }
            i = this.rowCount;
            this.rowCount = i + 1;
            this.botInfoRow = i;
        }

        public int getItemCount() {
            return this.rowCount;
        }

        public long getItemId(int i) {
            return -1;
        }

        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = null;
            if (viewType == 0) {
                if (ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    view = new ChatMessageCell(this.mContext);
                } else {
                    view = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                }
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                chatMessageCell.setDelegate(new C20121());
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell.setAllowAssistant(true);
                }
            } else if (viewType == 1) {
                view = new ChatActionCell(this.mContext);
                ((ChatActionCell) view).setDelegate(new C20132());
            } else if (viewType == 2) {
                view = new ChatUnreadCell(this.mContext);
            } else if (viewType == 3) {
                view = new BotHelpCell(this.mContext);
                ((BotHelpCell) view).setDelegate(new C20143());
            } else if (viewType == 4) {
                view = new ChatLoadingCell(this.mContext);
            }
            view.setLayoutParams(new LayoutParams(-1, -2));
            return new Holder(view);
        }

        public void onBindViewHolder(ViewHolder holder, int position) {
            ViewHolder viewHolder = holder;
            int i = position;
            if (i == this.botInfoRow) {
                viewHolder.itemView.setText(ChatActivity.this.botInfo.size() != 0 ? ((BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description : null);
                return;
            }
            boolean z;
            if (i != r0.loadingDownRow) {
                if (i != r0.loadingUpRow) {
                    if (i >= r0.messagesStartRow && i < r0.messagesEndRow) {
                        int index;
                        MessageObject message = (MessageObject) ChatActivity.this.messages.get(i - r0.messagesStartRow);
                        View view = viewHolder.itemView;
                        if (view instanceof ChatMessageCell) {
                            boolean z2;
                            boolean pinnedTop;
                            GroupedMessages groupedMessages;
                            GroupedMessagePosition pos;
                            int i2;
                            int nextPosition;
                            int nextPosition2;
                            int prevType;
                            MessageObject nextMessage;
                            boolean z3;
                            int indexOf;
                            final ChatMessageCell messageCell = (ChatMessageCell) view;
                            if (ChatActivity.this.currentChat == null) {
                                if (!UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                    z2 = false;
                                    messageCell.isChat = z2;
                                    z2 = false;
                                    pinnedTop = false;
                                    groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                                    if (groupedMessages == null) {
                                        pos = (GroupedMessagePosition) groupedMessages.positions.get(message);
                                        i2 = -100;
                                        if (pos == null) {
                                            if ((pos.flags & 4) == 0) {
                                                i2 = (groupedMessages.posArray.indexOf(pos) + i) + 1;
                                            } else {
                                                pinnedTop = true;
                                            }
                                            if ((pos.flags & 8) == 0) {
                                                nextPosition = (i - groupedMessages.posArray.size()) + groupedMessages.posArray.indexOf(pos);
                                            } else {
                                                z2 = true;
                                                nextPosition = -100;
                                            }
                                        } else {
                                            nextPosition = -100;
                                            i2 = -100;
                                        }
                                        nextPosition2 = nextPosition;
                                    } else {
                                        nextPosition2 = i - 1;
                                        i2 = i + 1;
                                    }
                                    nextPosition = getItemViewType(nextPosition2);
                                    prevType = getItemViewType(i2);
                                    if (!(message.messageOwner.reply_markup instanceof TL_replyInlineMarkup) && nextPosition == holder.getItemViewType()) {
                                        nextMessage = (MessageObject) ChatActivity.this.messages.get(nextPosition2 - r0.messagesStartRow);
                                        z = nextMessage.isOutOwner() != message.isOutOwner() && Math.abs(nextMessage.messageOwner.date - message.messageOwner.date) <= 300;
                                        z2 = z;
                                        if (z2) {
                                            if (ChatActivity.this.currentChat != null) {
                                                z2 = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                            } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                                z2 = nextMessage.getFromId() != message.getFromId();
                                            }
                                        }
                                    }
                                    if (prevType == holder.getItemViewType()) {
                                        nextMessage = (MessageObject) ChatActivity.this.messages.get(i2 - r0.messagesStartRow);
                                        z = (nextMessage.messageOwner.reply_markup instanceof TL_replyInlineMarkup) && nextMessage.isOutOwner() == message.isOutOwner() && Math.abs(nextMessage.messageOwner.date - message.messageOwner.date) <= 300;
                                        pinnedTop = z;
                                        if (pinnedTop) {
                                            if (ChatActivity.this.currentChat != null) {
                                                pinnedTop = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                            } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                                pinnedTop = nextMessage.getFromId() != message.getFromId();
                                            }
                                        }
                                    }
                                    messageCell.setMessageObject(message, groupedMessages, z2, pinnedTop);
                                    if ((view instanceof ChatMessageCell) && DownloadController.getInstance(ChatActivity.this.currentAccount).canDownloadMedia(message)) {
                                        ((ChatMessageCell) view).downloadAudioIfNeed();
                                    }
                                    z3 = ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID && message.getId() == ChatActivity.this.highlightMessageId;
                                    messageCell.setHighlighted(z3);
                                    if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                                        if (DataQuery.getInstance(ChatActivity.this.currentAccount).isMessageFound(message.getId(), message.getDialogId() != ChatActivity.this.mergeDialogId) && DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery() != null) {
                                            messageCell.setHighlightedText(DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery());
                                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                                            index = indexOf;
                                            if (indexOf != -1) {
                                                ChatActivity.this.animatingMessageObjects.remove(index);
                                                messageCell.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                                                    public boolean onPreDraw() {
                                                        C10554 c10554 = this;
                                                        PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                                                        if (pipRoundVideoView != null) {
                                                            pipRoundVideoView.showTemporary(true);
                                                        }
                                                        messageCell.getViewTreeObserver().removeOnPreDrawListener(c10554);
                                                        ImageReceiver imageReceiver = messageCell.getPhotoImage();
                                                        float scale = ((float) imageReceiver.getImageWidth()) / ChatActivity.this.instantCameraView.getCameraRect().width;
                                                        int[] position = new int[2];
                                                        messageCell.setAlpha(0.0f);
                                                        messageCell.getLocationOnScreen(position);
                                                        position[0] = position[0] + imageReceiver.getImageX();
                                                        position[1] = position[1] + imageReceiver.getImageY();
                                                        final View cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                                                        cameraContainer.setPivotX(0.0f);
                                                        cameraContainer.setPivotY(0.0f);
                                                        AnimatorSet animatorSet = new AnimatorSet();
                                                        r13 = new Animator[8];
                                                        r13[0] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView, "alpha", new float[]{0.0f});
                                                        r13[1] = ObjectAnimator.ofFloat(cameraContainer, "scaleX", new float[]{scale});
                                                        r13[2] = ObjectAnimator.ofFloat(cameraContainer, "scaleY", new float[]{scale});
                                                        r13[3] = ObjectAnimator.ofFloat(cameraContainer, "translationX", new float[]{((float) position[0]) - rect.f26x});
                                                        r13[4] = ObjectAnimator.ofFloat(cameraContainer, "translationY", new float[]{((float) position[1]) - rect.f27y});
                                                        r13[5] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), "alpha", new float[]{0.0f});
                                                        r13[6] = ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), "alpha", new int[]{0});
                                                        r13[7] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), "alpha", new float[]{0.0f});
                                                        animatorSet.playTogether(r13);
                                                        animatorSet.setDuration(180);
                                                        animatorSet.setInterpolator(new DecelerateInterpolator());
                                                        animatorSet.addListener(new AnimatorListenerAdapter() {

                                                            /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4$1$1 */
                                                            class C10531 extends AnimatorListenerAdapter {
                                                                C10531() {
                                                                }

                                                                public void onAnimationEnd(Animator animation) {
                                                                    ChatActivity.this.instantCameraView.hideCamera(true);
                                                                    ChatActivity.this.instantCameraView.setVisibility(4);
                                                                }
                                                            }

                                                            public void onAnimationEnd(Animator animation) {
                                                                AnimatorSet animatorSet = new AnimatorSet();
                                                                r1 = new Animator[2];
                                                                r1[0] = ObjectAnimator.ofFloat(cameraContainer, "alpha", new float[]{0.0f});
                                                                r1[1] = ObjectAnimator.ofFloat(messageCell, "alpha", new float[]{1.0f});
                                                                animatorSet.playTogether(r1);
                                                                animatorSet.setDuration(100);
                                                                animatorSet.setInterpolator(new DecelerateInterpolator());
                                                                animatorSet.addListener(new C10531());
                                                                animatorSet.start();
                                                            }
                                                        });
                                                        animatorSet.start();
                                                        return true;
                                                    }
                                                });
                                            }
                                        }
                                    }
                                    messageCell.setHighlightedText(null);
                                    indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                                    index = indexOf;
                                    if (indexOf != -1) {
                                        ChatActivity.this.animatingMessageObjects.remove(index);
                                        messageCell.getViewTreeObserver().addOnPreDrawListener(/* anonymous class already generated */);
                                    }
                                }
                            }
                            z2 = true;
                            messageCell.isChat = z2;
                            z2 = false;
                            pinnedTop = false;
                            groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                            if (groupedMessages == null) {
                                nextPosition2 = i - 1;
                                i2 = i + 1;
                            } else {
                                pos = (GroupedMessagePosition) groupedMessages.positions.get(message);
                                i2 = -100;
                                if (pos == null) {
                                    nextPosition = -100;
                                    i2 = -100;
                                } else {
                                    if ((pos.flags & 4) == 0) {
                                        pinnedTop = true;
                                    } else {
                                        i2 = (groupedMessages.posArray.indexOf(pos) + i) + 1;
                                    }
                                    if ((pos.flags & 8) == 0) {
                                        z2 = true;
                                        nextPosition = -100;
                                    } else {
                                        nextPosition = (i - groupedMessages.posArray.size()) + groupedMessages.posArray.indexOf(pos);
                                    }
                                }
                                nextPosition2 = nextPosition;
                            }
                            nextPosition = getItemViewType(nextPosition2);
                            prevType = getItemViewType(i2);
                            nextMessage = (MessageObject) ChatActivity.this.messages.get(nextPosition2 - r0.messagesStartRow);
                            if (nextMessage.isOutOwner() != message.isOutOwner()) {
                            }
                            z2 = z;
                            if (z2) {
                                if (ChatActivity.this.currentChat != null) {
                                    if (nextMessage.messageOwner.from_id != message.messageOwner.from_id) {
                                    }
                                    z2 = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                    if (nextMessage.getFromId() != message.getFromId()) {
                                    }
                                    z2 = nextMessage.getFromId() != message.getFromId();
                                }
                            }
                            if (prevType == holder.getItemViewType()) {
                                nextMessage = (MessageObject) ChatActivity.this.messages.get(i2 - r0.messagesStartRow);
                                if (nextMessage.messageOwner.reply_markup instanceof TL_replyInlineMarkup) {
                                }
                                pinnedTop = z;
                                if (pinnedTop) {
                                    if (ChatActivity.this.currentChat != null) {
                                        if (nextMessage.messageOwner.from_id != message.messageOwner.from_id) {
                                        }
                                        pinnedTop = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                    } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                        if (nextMessage.getFromId() != message.getFromId()) {
                                        }
                                        pinnedTop = nextMessage.getFromId() != message.getFromId();
                                    }
                                }
                            }
                            messageCell.setMessageObject(message, groupedMessages, z2, pinnedTop);
                            ((ChatMessageCell) view).downloadAudioIfNeed();
                            if (ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID) {
                            }
                            messageCell.setHighlighted(z3);
                            if (message.getDialogId() != ChatActivity.this.mergeDialogId) {
                            }
                            messageCell.setHighlightedText(DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery());
                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                            index = indexOf;
                            if (indexOf != -1) {
                                ChatActivity.this.animatingMessageObjects.remove(index);
                                messageCell.getViewTreeObserver().addOnPreDrawListener(/* anonymous class already generated */);
                            }
                        } else if (view instanceof ChatActionCell) {
                            ChatActionCell actionCell = (ChatActionCell) view;
                            actionCell.setMessageObject(message);
                            actionCell.setAlpha(1.0f);
                        } else if (view instanceof ChatUnreadCell) {
                            ((ChatUnreadCell) view).setText(LocaleController.getString("UnreadMessages", R.string.UnreadMessages));
                            if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                                ChatActivity.this.createUnreadMessageAfterId = 0;
                            }
                        }
                        if (message != null && message.messageOwner != null && message.messageOwner.media_unread && message.messageOwner.mentioned) {
                            if (!(message.isVoice() || message.isRoundVideo())) {
                                int i3;
                                ChatActivity.this.newMentionsCount = ChatActivity.this.newMentionsCount - 1;
                                if (ChatActivity.this.newMentionsCount <= 0) {
                                    i3 = false;
                                    ChatActivity.this.newMentionsCount = 0;
                                    ChatActivity.this.hasAllMentionsLocal = true;
                                    ChatActivity.this.showMentiondownButton(false, true);
                                } else {
                                    i3 = false;
                                    ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(ChatActivity.this.newMentionsCount)}));
                                }
                                MessagesController instance = MessagesController.getInstance(ChatActivity.this.currentAccount);
                                index = message.getId();
                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                    i3 = ChatActivity.this.currentChat.id;
                                }
                                instance.markMentionMessageAsRead(index, i3, ChatActivity.this.dialog_id);
                                message.setContentIsRead();
                            }
                            if (view instanceof ChatMessageCell) {
                                ((ChatMessageCell) view).setHighlightedAnimated();
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                }
            }
            ChatLoadingCell loadingCell = viewHolder.itemView;
            z = true;
            if (ChatActivity.this.loadsCount <= 1) {
                z = false;
            }
            loadingCell.setProgressVisible(z);
        }

        public int getItemViewType(int position) {
            if (position >= this.messagesStartRow && position < this.messagesEndRow) {
                return ((MessageObject) ChatActivity.this.messages.get(position - this.messagesStartRow)).contentType;
            }
            if (position == this.botInfoRow) {
                return 3;
            }
            return 4;
        }

        public void onViewAttachedToWindow(ViewHolder holder) {
            if (holder.itemView instanceof ChatMessageCell) {
                final ChatMessageCell messageCell = holder.itemView;
                MessageObject message = messageCell.getMessageObject();
                boolean selected = false;
                boolean disableSelection = false;
                boolean z = true;
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    MessageObject messageObject = ChatActivity.this.chatActivityEnterView != null ? ChatActivity.this.chatActivityEnterView.getEditingMessageObject() : null;
                    int idx = message.getDialogId() == ChatActivity.this.dialog_id ? 0 : 1;
                    if (messageObject != message) {
                        if (ChatActivity.this.selectedMessagesIds[idx].indexOfKey(message.getId()) < 0) {
                            messageCell.setBackgroundDrawable(null);
                            disableSelection = true;
                        }
                    }
                    ChatActivity.this.setCellSelectionBackground(message, messageCell, idx);
                    selected = true;
                    disableSelection = true;
                } else {
                    messageCell.setBackgroundDrawable(null);
                }
                boolean z2 = !disableSelection;
                boolean z3 = disableSelection && selected;
                messageCell.setCheckPressed(z2, z3);
                messageCell.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                    public boolean onPreDraw() {
                        messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                        int height = ChatActivity.this.chatListView.getMeasuredHeight();
                        int top = messageCell.getTop();
                        int bottom = messageCell.getBottom();
                        int viewTop = top >= 0 ? 0 : -top;
                        int viewBottom = messageCell.getMeasuredHeight();
                        if (viewBottom > height) {
                            viewBottom = viewTop + height;
                        }
                        messageCell.setVisiblePart(viewTop, viewBottom - viewTop);
                        return true;
                    }
                });
                if (ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID || messageCell.getMessageObject().getId() != ChatActivity.this.highlightMessageId) {
                    z = false;
                }
                messageCell.setHighlighted(z);
            }
        }

        public void updateRowAtPosition(int index) {
            if (ChatActivity.this.chatLayoutManager != null) {
                int lastVisibleItem = -1;
                if (!(ChatActivity.this.wasManualScroll || ChatActivity.this.unreadMessageObject == null)) {
                    int pos = ChatActivity.this.messages.indexOf(ChatActivity.this.unreadMessageObject);
                    if (pos >= 0) {
                        lastVisibleItem = this.messagesStartRow + pos;
                    }
                }
                notifyItemChanged(index);
                if (lastVisibleItem != -1) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(lastVisibleItem, ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom()) - ChatActivity.this.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
                }
            }
        }

        public void updateRowWithMessageObject(MessageObject messageObject) {
            int index = ChatActivity.this.messages.indexOf(messageObject);
            if (index != -1) {
                updateRowAtPosition(this.messagesStartRow + index);
            }
        }

        public void notifyDataSetChanged() {
            updateRows();
            try {
                super.notifyDataSetChanged();
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemChanged(int position) {
            try {
                super.notifyItemChanged(position);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemRangeChanged(int positionStart, int itemCount) {
            try {
                super.notifyItemRangeChanged(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemInserted(int position) {
            updateRows();
            try {
                super.notifyItemInserted(position);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemMoved(int fromPosition, int toPosition) {
            updateRows();
            try {
                super.notifyItemMoved(fromPosition, toPosition);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemRangeInserted(int positionStart, int itemCount) {
            updateRows();
            try {
                super.notifyItemRangeInserted(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemRemoved(int position) {
            updateRows();
            try {
                super.notifyItemRemoved(position);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }

        public void notifyItemRangeRemoved(int positionStart, int itemCount) {
            updateRows();
            try {
                super.notifyItemRangeRemoved(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$1 */
    class C23271 extends EmptyPhotoViewerProvider {
        C23271() {
        }

        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
            FileLocation fileLocation2 = fileLocation;
            int count = ChatActivity.this.chatListView.getChildCount();
            int i = 0;
            for (int a = 0; a < count; a++) {
                int b;
                ImageReceiver imageReceiver = null;
                View view = ChatActivity.this.chatListView.getChildAt(a);
                MessageObject message;
                if (view instanceof ChatMessageCell) {
                    if (messageObject != null) {
                        ChatMessageCell cell = (ChatMessageCell) view;
                        message = cell.getMessageObject();
                        if (message != null && message.getId() == messageObject.getId()) {
                            imageReceiver = cell.getPhotoImage();
                        }
                    }
                } else if (view instanceof ChatActionCell) {
                    ChatActionCell cell2 = (ChatActionCell) view;
                    message = cell2.getMessageObject();
                    if (message != null) {
                        if (messageObject != null) {
                            if (message.getId() == messageObject.getId()) {
                                imageReceiver = cell2.getPhotoImage();
                            }
                        } else if (fileLocation2 != null && message.photoThumbs != null) {
                            for (b = 0; b < message.photoThumbs.size(); b++) {
                                PhotoSize photoSize = (PhotoSize) message.photoThumbs.get(b);
                                if (photoSize.location.volume_id == fileLocation2.volume_id && photoSize.location.local_id == fileLocation2.local_id) {
                                    imageReceiver = cell2.getPhotoImage();
                                    break;
                                }
                            }
                        }
                    }
                }
                if (imageReceiver != null) {
                    int[] coords = new int[2];
                    view.getLocationInWindow(coords);
                    PlaceProviderObject object = new PlaceProviderObject();
                    object.viewX = coords[0];
                    b = coords[1];
                    if (VERSION.SDK_INT < 21) {
                        i = AndroidUtilities.statusBarHeight;
                    }
                    object.viewY = b - i;
                    object.parentView = ChatActivity.this.chatListView;
                    object.imageReceiver = imageReceiver;
                    object.thumb = imageReceiver.getBitmapSafe();
                    object.radius = imageReceiver.getRoundRadius();
                    if ((view instanceof ChatActionCell) && ChatActivity.this.currentChat != null) {
                        object.dialogId = -ChatActivity.this.currentChat.id;
                    }
                    if ((ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getTag() == null) || (ChatActivity.this.reportSpamView != null && ChatActivity.this.reportSpamView.getTag() == null)) {
                        object.clipTopAddition = AndroidUtilities.dp(48.0f);
                    }
                    return object;
                }
            }
            return null;
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$2 */
    class C23282 extends EmptyPhotoViewerProvider {
        C23282() {
        }

        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
            if (index >= 0) {
                if (index < ChatActivity.this.botContextResults.size()) {
                    int count = ChatActivity.this.mentionListView.getChildCount();
                    BotInlineResult result = ChatActivity.this.botContextResults.get(index);
                    int i = 0;
                    for (int a = 0; a < count; a++) {
                        ImageReceiver imageReceiver = null;
                        View view = ChatActivity.this.mentionListView.getChildAt(a);
                        if (view instanceof ContextLinkCell) {
                            ContextLinkCell cell = (ContextLinkCell) view;
                            if (cell.getResult() == result) {
                                imageReceiver = cell.getPhotoImage();
                            }
                        }
                        if (imageReceiver != null) {
                            int[] coords = new int[2];
                            view.getLocationInWindow(coords);
                            PlaceProviderObject object = new PlaceProviderObject();
                            object.viewX = coords[0];
                            int i2 = coords[1];
                            if (VERSION.SDK_INT < 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            object.viewY = i2 - i;
                            object.parentView = ChatActivity.this.mentionListView;
                            object.imageReceiver = imageReceiver;
                            object.thumb = imageReceiver.getBitmapSafe();
                            object.radius = imageReceiver.getRoundRadius();
                            return object;
                        }
                    }
                    return null;
                }
            }
            return null;
        }

        public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
            if (index >= 0) {
                if (index < ChatActivity.this.botContextResults.size()) {
                    ChatActivity.this.sendBotInlineResult((BotInlineResult) ChatActivity.this.botContextResults.get(index));
                }
            }
        }
    }

    public ChatActivity(Bundle args) {
        super(args);
    }

    public boolean onFragmentCreate() {
        final CountDownLatch countDownLatch;
        int messageId;
        int i;
        final int chatId = this.arguments.getInt("chat_id", 0);
        final int userId = this.arguments.getInt("user_id", 0);
        final int encId = this.arguments.getInt("enc_id", 0);
        this.inlineReturn = this.arguments.getLong("inline_return", 0);
        String inlineQuery = this.arguments.getString("inline_query");
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        int migrated_to = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        if (chatId != 0) {
            r1.currentChat = MessagesController.getInstance(r1.currentAccount).getChat(Integer.valueOf(chatId));
            if (r1.currentChat == null) {
                countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentChat = messagesStorage.getChat(chatId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
                if (r1.currentChat == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putChat(r1.currentChat, true);
            }
            if (chatId > 0) {
                r1.dialog_id = (long) (-chatId);
            } else {
                r1.isBroadcast = true;
                r1.dialog_id = AndroidUtilities.makeBroadcastId(chatId);
            }
            if (ChatObject.isChannel(r1.currentChat)) {
                MessagesController.getInstance(r1.currentAccount).startShortPoll(chatId, false);
            }
        } else if (userId != 0) {
            r1.currentUser = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(userId));
            if (r1.currentUser == null) {
                messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentUser = messagesStorage.getUser(userId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e2) {
                    FileLog.m3e(e2);
                }
                if (r1.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putUser(r1.currentUser, true);
            }
            r1.dialog_id = (long) userId;
            r1.botUser = r1.arguments.getString("botUser");
            if (inlineQuery != null) {
                MessagesController.getInstance(r1.currentAccount).sendBotStart(r1.currentUser, inlineQuery);
            }
        } else if (encId == 0) {
            return false;
        } else {
            r1.currentEncryptedChat = MessagesController.getInstance(r1.currentAccount).getEncryptedChat(Integer.valueOf(encId));
            messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
            if (r1.currentEncryptedChat == null) {
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentEncryptedChat = messagesStorage.getEncryptedChat(encId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e22) {
                    FileLog.m3e(e22);
                }
                if (r1.currentEncryptedChat == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putEncryptedChat(r1.currentEncryptedChat, true);
            }
            r1.currentUser = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(r1.currentEncryptedChat.user_id));
            if (r1.currentUser == null) {
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentUser = messagesStorage.getUser(ChatActivity.this.currentEncryptedChat.user_id);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e222) {
                    FileLog.m3e(e222);
                }
                if (r1.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putUser(r1.currentUser, true);
            }
            r1.dialog_id = ((long) encId) << 32;
            int[] iArr = r1.maxMessageId;
            r1.maxMessageId[1] = Integer.MIN_VALUE;
            iArr[0] = Integer.MIN_VALUE;
            iArr = r1.minMessageId;
            r1.minMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
            iArr[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
        }
        if (r1.currentUser != null) {
            MediaController.getInstance().startMediaObserver();
        }
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(r1, NotificationCenter.emojiDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedNewMessages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.closeChats);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatInfoDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.contactsDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.blockedUsersDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.FileNewChunkAvailable);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingDidStarted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didLoadedReplyMessages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.botInfoDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.botKeyboardDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didLoadedPinnedMessage);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.peerSettingsDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.userInfoDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(r1, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateMentionsCount);
        super.onFragmentCreate();
        if (r1.currentEncryptedChat == null && !r1.isBroadcast) {
            DataQuery.getInstance(r1.currentAccount).loadBotKeyboard(r1.dialog_id);
        }
        r1.loading = true;
        MessagesController.getInstance(r1.currentAccount).loadPeerSettings(r1.currentUser, r1.currentChat);
        MessagesController.getInstance(r1.currentAccount).setLastCreatedDialogId(r1.dialog_id, true);
        if (r1.startLoadFromMessageId == 0) {
            SharedPreferences sharedPreferences = MessagesController.getNotificationsSettings(r1.currentAccount);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("diditem");
            stringBuilder.append(r1.dialog_id);
            messageId = sharedPreferences.getInt(stringBuilder.toString(), 0);
            if (messageId != 0) {
                r1.wasManualScroll = true;
                r1.loadingFromOldPosition = true;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("diditemo");
                stringBuilder2.append(r1.dialog_id);
                r1.startLoadFromMessageOffset = sharedPreferences.getInt(stringBuilder2.toString(), 0);
                r1.startLoadFromMessageId = messageId;
            }
        } else {
            r1.needSelectFromMessageId = true;
        }
        if (r1.startLoadFromMessageId != 0) {
            r1.waitingForLoad.add(Integer.valueOf(r1.lastLoadIndex));
            MessagesController instance;
            long j;
            int i2;
            boolean isChannel;
            int i3;
            if (migrated_to != 0) {
                r1.mergeDialogId = (long) migrated_to;
                instance = MessagesController.getInstance(r1.currentAccount);
                j = r1.mergeDialogId;
                if (r1.loadingFromOldPosition) {
                    i2 = 50;
                } else {
                    i2 = AndroidUtilities.isTablet() ? bot_help : 20;
                }
                i = r1.startLoadFromMessageId;
                messageId = r1.classGuid;
                isChannel = ChatObject.isChannel(r1.currentChat);
                i3 = r1.lastLoadIndex;
                r1.lastLoadIndex = i3 + 1;
                instance.loadMessages(j, i2, i, 0, true, 0, messageId, 3, 0, isChannel, i3);
            } else {
                instance = MessagesController.getInstance(r1.currentAccount);
                j = r1.dialog_id;
                if (r1.loadingFromOldPosition) {
                    i2 = 50;
                } else {
                    i2 = AndroidUtilities.isTablet() ? bot_help : 20;
                }
                i = r1.startLoadFromMessageId;
                messageId = r1.classGuid;
                isChannel = ChatObject.isChannel(r1.currentChat);
                i3 = r1.lastLoadIndex;
                r1.lastLoadIndex = i3 + 1;
                instance.loadMessages(j, i2, i, 0, true, 0, messageId, 3, 0, isChannel, i3);
            }
        } else {
            r1.waitingForLoad.add(Integer.valueOf(r1.lastLoadIndex));
            MessagesController instance2 = MessagesController.getInstance(r1.currentAccount);
            long j2 = r1.dialog_id;
            int i4 = AndroidUtilities.isTablet() ? bot_help : 20;
            i = r1.classGuid;
            boolean isChannel2 = ChatObject.isChannel(r1.currentChat);
            messageId = r1.lastLoadIndex;
            r1.lastLoadIndex = messageId + 1;
            instance2.loadMessages(j2, i4, 0, 0, true, 0, i, 2, 0, isChannel2, messageId);
        }
        if (r1.currentChat != null) {
            countDownLatch = null;
            if (r1.isBroadcast) {
                countDownLatch = new CountDownLatch(1);
            }
            MessagesController.getInstance(r1.currentAccount).loadChatInfo(r1.currentChat.id, countDownLatch, ChatObject.isChannel(r1.currentChat));
            if (r1.isBroadcast && countDownLatch != null) {
                try {
                    countDownLatch.await();
                } catch (Throwable e2222) {
                    FileLog.m3e(e2222);
                }
            }
        }
        if (userId != 0 && r1.currentUser.bot) {
            DataQuery.getInstance(r1.currentAccount).loadBotInfo(userId, true, r1.classGuid);
        } else if (r1.info instanceof TL_chatFull) {
            for (i = 0; i < r1.info.participants.participants.size(); i++) {
                User user = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(((ChatParticipant) r1.info.participants.participants.get(i)).user_id));
                if (user != null && user.bot) {
                    DataQuery.getInstance(r1.currentAccount).loadBotInfo(user.id, true, r1.classGuid);
                }
            }
        }
        if (r1.currentUser != null) {
            r1.userBlocked = MessagesController.getInstance(r1.currentAccount).blockedUsers.contains(Integer.valueOf(r1.currentUser.id));
        }
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(r1.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(r1.dialog_id), Boolean.valueOf(false));
        }
        if (!(r1.currentEncryptedChat == null || AndroidUtilities.getMyLayerVersion(r1.currentEncryptedChat.layer) == 73)) {
            SecretChatHelper.getInstance(r1.currentAccount).sendNotifyLayerMessage(r1.currentEncryptedChat, null);
        }
        return true;
    }

    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onDestroy();
        }
        if (this.mentionsAdapter != null) {
            this.mentionsAdapter.onDestroy();
        }
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.dismissInternal();
        }
        MessagesController.getInstance(this.currentAccount).setLastCreatedDialogId(this.dialog_id, false);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedNewMessages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.closeChats);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatInfoDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.contactsDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.FileNewChunkAvailable);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidStarted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didLoadedReplyMessages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.botInfoDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.botKeyboardDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didLoadedPinnedMessage);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.peerSettingsDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Boolean.valueOf(true));
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        if (this.currentEncryptedChat != null) {
            try {
                if (VERSION.SDK_INT >= edit && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                    MediaController.getInstance().setFlagSecure(this, false);
                }
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }
        if (this.currentUser != null) {
            MessagesController.getInstance(this.currentAccount).cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        if (this.stickersAdapter != null) {
            this.stickersAdapter.onDestroy();
        }
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            MessagesController.getInstance(this.currentAccount).startShortPoll(this.currentChat.id, true);
        }
    }

    public View createView(Context context) {
        int a;
        ActionBarMenu actionMode;
        ActionBarMenuItem item;
        int i;
        CharSequence oldMessage;
        CharSequence oldMessage2;
        RecyclerListView recyclerListView;
        Adapter chatActivityAdapter;
        GridLayoutManagerFixed gridLayoutManagerFixed;
        GridLayoutManagerFixed anonymousClass17;
        CharSequence oldMessage3;
        int i2;
        MentionsAdapter mentionsAdapter;
        boolean z;
        OnItemClickListener anonymousClass38;
        Drawable drawable;
        Drawable shadowDrawable;
        Drawable combinedDrawable;
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        View fragmentContextView;
        ChatActivityEnterView chatActivityEnterView;
        boolean z2;
        boolean z3;
        FrameLayout replyLayout;
        final StickerPreviewViewerDelegate stickerPreviewViewerDelegate;
        LinearLayoutManager layoutManager;
        Context context2 = context;
        if (this.chatMessageCellsCache.isEmpty()) {
            for (a = 0; a < 8; a++) {
                r7.chatMessageCellsCache.add(new ChatMessageCell(context2));
            }
        }
        for (a = 1; a >= 0; a--) {
            r7.selectedMessagesIds[a].clear();
            r7.selectedMessagesCanCopyIds[a].clear();
            r7.selectedMessagesCanStarIds[a].clear();
        }
        r7.cantDeleteMessagesCount = 0;
        r7.canEditMessagesCount = 0;
        r7.roundVideoContainer = null;
        r7.hasOwnBackground = true;
        if (r7.chatAttachAlert != null) {
            try {
                if (r7.chatAttachAlert.isShowing()) {
                    r7.chatAttachAlert.dismiss();
                }
            } catch (Exception e) {
            }
            r7.chatAttachAlert.onDestroy();
            r7.chatAttachAlert = null;
        }
        Theme.createChatResources(context2, false);
        r7.actionBar.setAddToContainer(false);
        r7.actionBar.setBackButtonDrawable(new BackDrawable(false));
        r7.actionBar.setActionBarMenuOnItemClick(new C20119());
        r7.avatarContainer = new ChatAvatarContainer(context2, r7, r7.currentEncryptedChat != null);
        r7.actionBar.addView(r7.avatarContainer, 0, LayoutHelper.createFrame(-2, -1.0f, 51, 56.0f, 0.0f, 40.0f, 0.0f));
        if (!(r7.currentChat == null || ChatObject.isChannel(r7.currentChat))) {
            a = r7.currentChat.participants_count;
            if (r7.info != null) {
                a = r7.info.participants.participants.size();
            }
            if (a == 0 || r7.currentChat.deactivated || r7.currentChat.left || (r7.currentChat instanceof TL_chatForbidden) || (r7.info != null && (r7.info.participants instanceof TL_chatParticipantsForbidden))) {
                r7.avatarContainer.setEnabled(false);
            }
        }
        ActionBarMenu menu = r7.actionBar.createMenu();
        if (r7.currentEncryptedChat == null && !r7.isBroadcast) {
            r7.searchItem = menu.addItem(0, (int) R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItemSearchListener() {
                boolean searchWas;

                /* renamed from: org.telegram.ui.ChatActivity$10$1 */
                class C10141 implements Runnable {
                    C10141() {
                    }

                    public void run() {
                        AnonymousClass10.this.searchWas = false;
                        ChatActivity.this.searchItem.getSearchField().requestFocus();
                        AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
                    }
                }

                public void onSearchCollapse() {
                    ChatActivity.this.searchCalendarButton.setVisibility(0);
                    if (ChatActivity.this.searchUserButton != null) {
                        ChatActivity.this.searchUserButton.setVisibility(0);
                    }
                    if (ChatActivity.this.searchingForUser) {
                        ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                        ChatActivity.this.searchingForUser = false;
                    }
                    ChatActivity.this.mentionLayoutManager.setReverseLayout(false);
                    ChatActivity.this.mentionsAdapter.setSearchingMentions(false);
                    ChatActivity.this.searchingUserMessages = null;
                    ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
                    ChatActivity.this.searchItem.setSearchFieldCaption(null);
                    ChatActivity.this.avatarContainer.setVisibility(0);
                    if (ChatActivity.this.chatActivityEnterView.hasText()) {
                        if (ChatActivity.this.headerItem != null) {
                            ChatActivity.this.headerItem.setVisibility(8);
                        }
                        if (ChatActivity.this.attachItem != null) {
                            ChatActivity.this.attachItem.setVisibility(0);
                        }
                    } else {
                        if (ChatActivity.this.headerItem != null) {
                            ChatActivity.this.headerItem.setVisibility(0);
                        }
                        if (ChatActivity.this.attachItem != null) {
                            ChatActivity.this.attachItem.setVisibility(8);
                        }
                    }
                    ChatActivity.this.searchItem.setVisibility(8);
                    ChatActivity.this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    ChatActivity.this.updateVisibleRows();
                    if (this.searchWas) {
                        ChatActivity.this.scrollToLastMessage(false);
                    }
                    ChatActivity.this.updateBottomOverlay();
                    ChatActivity.this.updatePinnedMessageView(true);
                }

                public void onSearchExpand() {
                    if (ChatActivity.this.openSearchKeyboard) {
                        AndroidUtilities.runOnUIThread(new C10141(), 300);
                    }
                }

                public void onSearchPressed(EditText editText) {
                    this.searchWas = true;
                    ChatActivity.this.updateSearchButtons(0, 0, -1);
                    DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.searchingUserMessages);
                }

                public void onTextChanged(EditText editText) {
                    if (ChatActivity.this.searchingForUser) {
                        MentionsAdapter access$4900 = ChatActivity.this.mentionsAdapter;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("@");
                        stringBuilder.append(editText.getText().toString());
                        access$4900.searchUsernameOrHashtag(stringBuilder.toString(), 0, ChatActivity.this.messages, true);
                    } else if (!ChatActivity.this.searchingForUser && ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", R.string.SearchFrom))) {
                        ChatActivity.this.searchUserButton.callOnClick();
                    }
                }

                public void onCaptionCleared() {
                    if (ChatActivity.this.searchingUserMessages != null) {
                        ChatActivity.this.searchUserButton.callOnClick();
                        return;
                    }
                    if (ChatActivity.this.searchingForUser) {
                        ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                        ChatActivity.this.searchingForUser = false;
                    }
                    ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
                    ChatActivity.this.searchCalendarButton.setVisibility(0);
                    ChatActivity.this.searchUserButton.setVisibility(0);
                    ChatActivity.this.searchingUserMessages = null;
                }
            });
            r7.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
            r7.searchItem.setVisibility(8);
        }
        r7.headerItem = menu.addItem(0, (int) R.drawable.ic_ab_other);
        if (r7.currentUser != null) {
            r7.headerItem.addSubItem(32, LocaleController.getString("Call", R.string.Call));
            TL_userFull userFull = MessagesController.getInstance(r7.currentAccount).getUserFull(r7.currentUser.id);
            if (userFull == null || !userFull.phone_calls_available) {
                r7.headerItem.hideSubItem(32);
            } else {
                r7.headerItem.showSubItem(32);
            }
        }
        if (r7.searchItem != null) {
            r7.headerItem.addSubItem(search, LocaleController.getString("Search", R.string.Search));
        }
        if (ChatObject.isChannel(r7.currentChat) && !r7.currentChat.creator && (!r7.currentChat.megagroup || (r7.currentChat.username != null && r7.currentChat.username.length() > 0))) {
            r7.headerItem.addSubItem(21, LocaleController.getString("ReportChat", R.string.ReportChat));
        }
        if (r7.currentUser != null) {
            r7.addContactItem = r7.headerItem.addSubItem(17, TtmlNode.ANONYMOUS_REGION_ID);
        }
        if (r7.currentEncryptedChat != null) {
            r7.timeItem2 = r7.headerItem.addSubItem(13, LocaleController.getString("SetTimer", R.string.SetTimer));
        }
        if (!ChatObject.isChannel(r7.currentChat) || (r7.currentChat != null && r7.currentChat.megagroup && TextUtils.isEmpty(r7.currentChat.username))) {
            r7.headerItem.addSubItem(15, LocaleController.getString("ClearHistory", R.string.ClearHistory));
        }
        if (!ChatObject.isChannel(r7.currentChat)) {
            if (r7.currentChat == null || r7.isBroadcast) {
                r7.headerItem.addSubItem(16, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser));
            } else {
                r7.headerItem.addSubItem(16, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
            }
        }
        if (r7.currentUser != null) {
            if (r7.currentUser.self) {
                if (r7.currentUser.self) {
                    r7.headerItem.addSubItem(24, LocaleController.getString("AddShortcut", R.string.AddShortcut));
                }
                if (r7.currentUser != null && r7.currentEncryptedChat == null && r7.currentUser.bot) {
                    r7.headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
                    r7.headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
                    updateBotButtons();
                }
                updateTitle();
                r7.avatarContainer.updateOnlineCount();
                r7.avatarContainer.updateSubtitle();
                updateTitleIcons();
                r7.attachItem = menu.addItem(14, (int) R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
                r7.attachItem.setVisibility(8);
                r7.actionModeViews.clear();
                actionMode = r7.actionBar.createActionMode();
                r7.selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
                r7.selectedMessagesCountTextView.setTextSize(18);
                r7.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.selectedMessagesCountTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                actionMode.addView(r7.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
                r7.selectedMessagesCountTextView.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                r7.actionModeTitleContainer = new FrameLayout(context2) {
                    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                        int width = MeasureSpec.getSize(widthMeasureSpec);
                        setMeasuredDimension(width, MeasureSpec.getSize(heightMeasureSpec));
                        SimpleTextView access$6400 = ChatActivity.this.actionModeTextView;
                        int i = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 20 : 18;
                        access$6400.setTextSize(i);
                        ChatActivity.this.actionModeTextView.measure(MeasureSpec.makeMeasureSpec(width, Integer.MIN_VALUE), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24.0f), Integer.MIN_VALUE));
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            access$6400 = ChatActivity.this.actionModeSubTextView;
                            int i2 = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 16 : 14;
                            access$6400.setTextSize(i2);
                            ChatActivity.this.actionModeSubTextView.measure(MeasureSpec.makeMeasureSpec(width, Integer.MIN_VALUE), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20.0f), Integer.MIN_VALUE));
                        }
                    }

                    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
                        int textTop;
                        int height = bottom - top;
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            textTop = ((height / 2) - ChatActivity.this.actionModeTextView.getTextHeight()) / 2;
                            float f = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 3.0f : 2.0f;
                            textTop += AndroidUtilities.dp(f);
                        } else {
                            textTop = (height - ChatActivity.this.actionModeTextView.getTextHeight()) / 2;
                        }
                        ChatActivity.this.actionModeTextView.layout(0, textTop, ChatActivity.this.actionModeTextView.getMeasuredWidth(), ChatActivity.this.actionModeTextView.getTextHeight() + textTop);
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            int textHeight = (height / 2) + (((height / 2) - ChatActivity.this.actionModeSubTextView.getTextHeight()) / 2);
                            if (!AndroidUtilities.isTablet()) {
                                int i = getResources().getConfiguration().orientation;
                            }
                            textTop = textHeight - AndroidUtilities.dp(1.0f);
                            ChatActivity.this.actionModeSubTextView.layout(0, textTop, ChatActivity.this.actionModeSubTextView.getMeasuredWidth(), ChatActivity.this.actionModeSubTextView.getTextHeight() + textTop);
                        }
                    }
                };
                actionMode.addView(r7.actionModeTitleContainer, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
                r7.actionModeTitleContainer.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                r7.actionModeTitleContainer.setVisibility(8);
                r7.actionModeTextView = new SimpleTextView(context2);
                r7.actionModeTextView.setTextSize(18);
                r7.actionModeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.actionModeTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                r7.actionModeTextView.setText(LocaleController.getString("Edit", R.string.Edit));
                r7.actionModeTitleContainer.addView(r7.actionModeTextView, LayoutHelper.createFrame(-1, -1.0f));
                r7.actionModeSubTextView = new SimpleTextView(context2);
                r7.actionModeSubTextView.setGravity(3);
                r7.actionModeSubTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                r7.actionModeTitleContainer.addView(r7.actionModeSubTextView, LayoutHelper.createFrame(-1, -1.0f));
                if (r7.currentEncryptedChat != null) {
                    r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
                    if (!r7.isBroadcast) {
                        r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
                    }
                    r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(11, R.drawable.ic_ab_forward, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
                } else {
                    r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
                }
                item = actionMode.getItem(edit);
                i = (r7.canEditMessagesCount == 1 || r7.selectedMessagesIds[0].size() + r7.selectedMessagesIds[1].size() != 1) ? 8 : 0;
                item.setVisibility(i);
                actionMode.getItem(10).setVisibility(r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0 ? 0 : 8);
                actionMode.getItem(22).setVisibility(r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0 ? 0 : 8);
                actionMode.getItem(12).setVisibility(r7.cantDeleteMessagesCount != 0 ? 0 : 8);
                checkActionBarMenu();
                r7.fragmentView = new SizeNotifierFrameLayout(context2) {
                    int inputFieldHeight = 0;

                    protected void onAttachedToWindow() {
                        super.onAttachedToWindow();
                        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
                        if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 && messageObject.getDialogId() == ChatActivity.this.dialog_id) {
                            MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.roundVideoContainer, true);
                        }
                    }

                    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                        boolean result;
                        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
                        int i = 0;
                        boolean isRoundVideo = messageObject != null && messageObject.eventId == 0 && messageObject.isRoundVideo();
                        if (!isRoundVideo || child != ChatActivity.this.roundVideoContainer) {
                            boolean result2 = super.drawChild(canvas, child, drawingTime);
                            if (isRoundVideo && child == ChatActivity.this.chatListView && messageObject.type != 5 && ChatActivity.this.roundVideoContainer != null) {
                                super.drawChild(canvas, ChatActivity.this.roundVideoContainer, drawingTime);
                                if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                    canvas.save();
                                    canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), (float) (ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getTop()));
                                    ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(canvas);
                                    canvas.restore();
                                }
                            }
                            result = result2;
                        } else if (messageObject.type == 5) {
                            if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                int x = ((int) child.getX()) - AndroidUtilities.dp(3.0f);
                                int y = ((int) child.getY()) - AndroidUtilities.dp(2.0f);
                                Theme.chat_roundVideoShadow.setAlpha(255);
                                Theme.chat_roundVideoShadow.setBounds(x, y, (AndroidUtilities.roundMessageSize + x) + AndroidUtilities.dp(6.0f), (AndroidUtilities.roundMessageSize + y) + AndroidUtilities.dp(6.0f));
                                Theme.chat_roundVideoShadow.draw(canvas);
                            }
                            result = super.drawChild(canvas, child, drawingTime);
                        } else {
                            result = false;
                        }
                        if (child == ChatActivity.this.actionBar && ChatActivity.this.parentLayout != null) {
                            ActionBarLayout access$7400 = ChatActivity.this.parentLayout;
                            if (ChatActivity.this.actionBar.getVisibility() == 0) {
                                i = ChatActivity.this.actionBar.getMeasuredHeight();
                            }
                            access$7400.drawHeaderShadow(canvas, i);
                        }
                        return result;
                    }

                    protected boolean isActionBarVisible() {
                        return ChatActivity.this.actionBar.getVisibility() == 0;
                    }

                    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
                        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
                        int allHeight = heightSize;
                        setMeasuredDimension(widthSize, heightSize);
                        int heightSize2 = heightSize - getPaddingTop();
                        measureChildWithMargins(ChatActivity.this.actionBar, widthMeasureSpec, 0, heightMeasureSpec, 0);
                        int actionBarHeight = ChatActivity.this.actionBar.getMeasuredHeight();
                        if (ChatActivity.this.actionBar.getVisibility() == 0) {
                            heightSize2 -= actionBarHeight;
                        }
                        if (getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && !AndroidUtilities.isInMultiwindow) {
                            heightSize2 -= ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                            allHeight -= ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                        }
                        int childCount = getChildCount();
                        measureChildWithMargins(ChatActivity.this.chatActivityEnterView, widthMeasureSpec, 0, heightMeasureSpec, 0);
                        r6.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                        heightSize = 0;
                        while (true) {
                            int i = heightSize;
                            if (i >= childCount) {
                                break;
                            }
                            View child = getChildAt(i);
                            if (!(child == null || child.getVisibility() == 8 || child == ChatActivity.this.chatActivityEnterView)) {
                                if (child != ChatActivity.this.actionBar) {
                                    if (child != ChatActivity.this.chatListView) {
                                        if (child != ChatActivity.this.progressView) {
                                            if (child != ChatActivity.this.instantCameraView) {
                                                if (child != ChatActivity.this.overlayView) {
                                                    if (child == ChatActivity.this.emptyViewContainer) {
                                                        child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(heightSize2, NUM));
                                                    } else if (ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                                        if (!AndroidUtilities.isInMultiwindow) {
                                                            heightSize = child.getLayoutParams().height;
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, NUM));
                                                        } else if (AndroidUtilities.isTablet()) {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), (((heightSize2 - r6.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop()), NUM));
                                                        } else {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec((((heightSize2 - r6.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop(), NUM));
                                                        }
                                                    } else if (child == ChatActivity.this.mentionContainer) {
                                                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.mentionContainer.getLayoutParams();
                                                        if (ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(heightSize2, Integer.MIN_VALUE));
                                                        } else {
                                                            int height;
                                                            ChatActivity.this.mentionListViewIgnoreLayout = true;
                                                            int padding;
                                                            if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                                                int maxHeight = ChatActivity.this.mentionGridLayoutManager.getRowsCount(widthSize) * 102;
                                                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                    maxHeight += 34;
                                                                }
                                                                height = (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (maxHeight != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                                padding = Math.max(0, height - AndroidUtilities.dp(Math.min((float) maxHeight, 122.399994f)));
                                                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                    ChatActivity.this.mentionListView.setPadding(0, 0, 0, padding);
                                                                } else {
                                                                    ChatActivity.this.mentionListView.setPadding(0, padding, 0, 0);
                                                                }
                                                            } else {
                                                                heightSize = ChatActivity.this.mentionsAdapter.getItemCount();
                                                                height = 0;
                                                                if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                                                    if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                        height = 0 + 36;
                                                                        heightSize--;
                                                                    }
                                                                    height += heightSize * 68;
                                                                } else {
                                                                    height = 0 + (heightSize * 36);
                                                                }
                                                                int height2 = (height != 0 ? AndroidUtilities.dp(2.0f) : 0) + (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                                padding = Math.max(0, height2 - AndroidUtilities.dp(Math.min((float) height, 122.399994f)));
                                                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                    ChatActivity.this.mentionListView.setPadding(0, 0, 0, padding);
                                                                } else {
                                                                    ChatActivity.this.mentionListView.setPadding(0, padding, 0, 0);
                                                                }
                                                                height = height2;
                                                            }
                                                            layoutParams.height = height;
                                                            layoutParams.topMargin = 0;
                                                            ChatActivity.this.mentionListViewIgnoreLayout = false;
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(layoutParams.height, NUM));
                                                        }
                                                    } else {
                                                        measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
                                                    }
                                                }
                                            }
                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec((allHeight - r6.inputFieldHeight) + AndroidUtilities.dp(3.0f), NUM));
                                        }
                                    }
                                    child.measure(MeasureSpec.makeMeasureSpec(widthSize, NUM), MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), (heightSize2 - r6.inputFieldHeight) + AndroidUtilities.dp((float) (2 + (ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0)))), NUM));
                                }
                            }
                            heightSize = i + 1;
                        }
                        if (ChatActivity.this.fixPaddingsInLayout) {
                            ChatActivity.this.globalIgnoreLayout = true;
                            ChatActivity.this.checkListViewPaddingsInternal();
                            ChatActivity.this.fixPaddingsInLayout = false;
                            ChatActivity.this.globalIgnoreLayout = false;
                        }
                        if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                            final int scrollTo = ChatActivity.this.scrollToPositionOnRecreate;
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(scrollTo, ChatActivity.this.scrollToOffsetOnRecreate);
                                }
                            });
                            ChatActivity.this.globalIgnoreLayout = true;
                            ChatActivity.this.scrollToPositionOnRecreate = -1;
                            ChatActivity.this.globalIgnoreLayout = false;
                        }
                    }

                    public void requestLayout() {
                        if (!ChatActivity.this.globalIgnoreLayout) {
                            super.requestLayout();
                        }
                    }

                    protected void onLayout(boolean changed, int l, int t, int r, int b) {
                        AnonymousClass14 anonymousClass14 = this;
                        int count = getChildCount();
                        int paddingBottom = (getKeyboardHeight() > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow) ? 0 : ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                        setBottomClip(paddingBottom);
                        int i = 0;
                        while (i < count) {
                            int count2;
                            View child = getChildAt(i);
                            if (child.getVisibility() == 8) {
                                count2 = count;
                            } else {
                                int childLeft;
                                FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) child.getLayoutParams();
                                int width = child.getMeasuredWidth();
                                int height = child.getMeasuredHeight();
                                int gravity = lp.gravity;
                                if (gravity == -1) {
                                    gravity = 51;
                                }
                                int verticalGravity = gravity & 112;
                                int i2 = (gravity & 7) & 7;
                                if (i2 != 1) {
                                    int i3;
                                    if (i2 != 5) {
                                        i3 = lp.leftMargin;
                                    } else {
                                        i3 = (r - width) - lp.rightMargin;
                                    }
                                    childLeft = i3;
                                } else {
                                    childLeft = ((((r - l) - width) / 2) + lp.leftMargin) - lp.rightMargin;
                                }
                                if (verticalGravity == 16) {
                                    count2 = count;
                                    i2 = (((((b - paddingBottom) - t) - height) / 2) + lp.topMargin) - lp.bottomMargin;
                                } else if (verticalGravity == 48) {
                                    count2 = count;
                                    i2 = getPaddingTop() + lp.topMargin;
                                    if (child != ChatActivity.this.actionBar && ChatActivity.this.actionBar.getVisibility() == 0) {
                                        i2 += ChatActivity.this.actionBar.getMeasuredHeight();
                                    }
                                } else if (verticalGravity != 80) {
                                    i2 = lp.topMargin;
                                    count2 = count;
                                } else {
                                    count2 = count;
                                    i2 = (((b - paddingBottom) - t) - height) - lp.bottomMargin;
                                }
                                count = i2;
                                if (child == ChatActivity.this.mentionContainer) {
                                    count -= ChatActivity.this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2.0f);
                                } else if (child == ChatActivity.this.pagedownButton) {
                                    count -= ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                } else if (child == ChatActivity.this.mentiondownButton) {
                                    count -= ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                } else if (child == ChatActivity.this.emptyViewContainer) {
                                    count -= (anonymousClass14.inputFieldHeight / 2) - (ChatActivity.this.actionBar.getVisibility() == 0 ? ChatActivity.this.actionBar.getMeasuredHeight() / 2 : 0);
                                } else if (ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                    count = AndroidUtilities.isInMultiwindow ? (ChatActivity.this.chatActivityEnterView.getTop() - child.getMeasuredHeight()) + AndroidUtilities.dp(1.0f) : ChatActivity.this.chatActivityEnterView.getBottom();
                                } else {
                                    if (!(child == ChatActivity.this.gifHintTextView || child == ChatActivity.this.voiceHintTextView)) {
                                        if (child != ChatActivity.this.mediaBanTooltip) {
                                            if (child != ChatActivity.this.chatListView) {
                                                if (child != ChatActivity.this.progressView) {
                                                    if (child == ChatActivity.this.actionBar) {
                                                        count -= getPaddingTop();
                                                    } else if (child == ChatActivity.this.roundVideoContainer) {
                                                        count = ChatActivity.this.actionBar.getMeasuredHeight();
                                                    } else if (child == ChatActivity.this.instantCameraView || child == ChatActivity.this.overlayView) {
                                                        count = 0;
                                                    }
                                                }
                                            }
                                            if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                count -= AndroidUtilities.dp(48.0f);
                                            }
                                        }
                                    }
                                    count -= anonymousClass14.inputFieldHeight;
                                }
                                child.layout(childLeft, count, childLeft + width, count + height);
                            }
                            i++;
                            count = count2;
                        }
                        ChatActivity.this.updateMessagesVisisblePart();
                        notifyHeightChanged();
                    }
                };
                r7.contentView = (SizeNotifierFrameLayout) r7.fragmentView;
                r7.contentView.setBackgroundImage(Theme.getCachedWallpaper());
                r7.emptyViewContainer = new FrameLayout(context2);
                r7.emptyViewContainer.setVisibility(4);
                r7.contentView.addView(r7.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
                r7.emptyViewContainer.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                if (r7.currentEncryptedChat == null) {
                    r7.bigEmptyView = new ChatBigEmptyView(context2, true);
                    if (r7.currentEncryptedChat.admin_id != UserConfig.getInstance(r7.currentAccount).getClientUserId()) {
                        r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(r7.currentUser)));
                    } else {
                        r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(r7.currentUser)));
                    }
                    r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                } else if (r7.currentUser == null && r7.currentUser.self) {
                    r7.bigEmptyView = new ChatBigEmptyView(context2, false);
                    r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                } else {
                    r7.emptyView = new TextView(context2);
                    if (r7.currentUser != null || r7.currentUser.id == 777000 || r7.currentUser.id == 429000 || r7.currentUser.id == 4244000 || !MessagesController.isSupportId(r7.currentUser.id)) {
                        r7.emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
                    } else {
                        r7.emptyView.setText(LocaleController.getString("GotAQuestion", R.string.GotAQuestion));
                    }
                    r7.emptyView.setTextSize(1, 14.0f);
                    r7.emptyView.setGravity(17);
                    r7.emptyView.setTextColor(Theme.getColor(Theme.key_chat_serviceText));
                    r7.emptyView.setBackgroundResource(R.drawable.system);
                    r7.emptyView.getBackground().setColorFilter(Theme.colorFilter);
                    r7.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    r7.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                    r7.emptyViewContainer.addView(r7.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                }
                if (r7.chatActivityEnterView == null) {
                    r7.chatActivityEnterView.onDestroy();
                    if (r7.chatActivityEnterView.isEditingMessage()) {
                        oldMessage = r7.chatActivityEnterView.getFieldText();
                    } else {
                        oldMessage = null;
                    }
                } else {
                    oldMessage = null;
                }
                oldMessage2 = oldMessage;
                if (r7.mentionsAdapter != null) {
                    r7.mentionsAdapter.onDestroy();
                }
                r7.chatListView = new RecyclerListView(context2) {
                    ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList();
                    ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList();
                    ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList();
                    private float endedTrackingX;
                    private long lastReplyButtonAnimationTime;
                    private long lastTrackingAnimationTime;
                    private boolean maybeStartTracking;
                    private float replyButtonProgress;
                    private boolean slideAnimationInProgress;
                    private ChatMessageCell slidingView;
                    private boolean startedTracking;
                    private int startedTrackingPointerId;
                    private int startedTrackingX;
                    private int startedTrackingY;
                    private float trackAnimationProgress;
                    private boolean wasTrackingVibrate;

                    protected void onLayout(boolean changed, int l, int t, int r, int b) {
                        super.onLayout(changed, l, t, r, b);
                        ChatActivity.this.forceScrollToTop = false;
                        if (ChatActivity.this.chatAdapter.isBot) {
                            int childCount = getChildCount();
                            for (int a = 0; a < childCount; a++) {
                                View child = getChildAt(a);
                                if (child instanceof BotHelpCell) {
                                    int top = ((b - t) / 2) - (child.getMeasuredHeight() / 2);
                                    if (child.getTop() > top) {
                                        child.layout(0, top, r - l, child.getMeasuredHeight() + top);
                                        return;
                                    }
                                    return;
                                }
                            }
                        }
                    }

                    private void setGroupTranslationX(ChatMessageCell view, float dx) {
                        GroupedMessages group = view.getCurrentMessagesGroup();
                        if (group != null) {
                            int count = getChildCount();
                            for (int a = 0; a < count; a++) {
                                View child = getChildAt(a);
                                if (child != this) {
                                    if (child instanceof ChatMessageCell) {
                                        ChatMessageCell cell = (ChatMessageCell) child;
                                        if (cell.getCurrentMessagesGroup() == group) {
                                            cell.setTranslationX(dx);
                                            cell.invalidate();
                                        }
                                    }
                                }
                            }
                            invalidate();
                        }
                    }

                    public boolean onInterceptTouchEvent(MotionEvent e) {
                        boolean result = super.onInterceptTouchEvent(e);
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            return result;
                        }
                        processTouchEvent(e);
                        return result;
                    }

                    private void drawReplyButton(Canvas canvas) {
                        Canvas canvas2 = canvas;
                        if (this.slidingView != null) {
                            float scale;
                            float scale2;
                            int alpha;
                            float translationX = r0.slidingView.getTranslationX();
                            long newTime = System.currentTimeMillis();
                            long dt = Math.min(17, newTime - r0.lastReplyButtonAnimationTime);
                            r0.lastReplyButtonAnimationTime = newTime;
                            boolean z = translationX <= ((float) (-AndroidUtilities.dp(50.0f)));
                            boolean showing = z;
                            if (z) {
                                if (r0.replyButtonProgress < 1.0f) {
                                    r0.replyButtonProgress += ((float) dt) / 180.0f;
                                    if (r0.replyButtonProgress > 1.0f) {
                                        r0.replyButtonProgress = 1.0f;
                                    } else {
                                        invalidate();
                                    }
                                }
                            } else if (r0.replyButtonProgress > 0.0f) {
                                r0.replyButtonProgress -= ((float) dt) / 180.0f;
                                if (r0.replyButtonProgress < 0.0f) {
                                    r0.replyButtonProgress = 0.0f;
                                } else {
                                    invalidate();
                                }
                            }
                            if (showing) {
                                if (r0.replyButtonProgress <= 0.8f) {
                                    scale = 1.2f * (r0.replyButtonProgress / 0.8f);
                                } else {
                                    scale = 1.2f - (0.2f * ((r0.replyButtonProgress - 0.8f) / 0.2f));
                                }
                                scale2 = scale;
                                alpha = (int) Math.min(255.0f, (r0.replyButtonProgress / 0.8f) * 255.0f);
                            } else {
                                scale2 = r0.replyButtonProgress;
                                alpha = (int) Math.min(255.0f, r0.replyButtonProgress * 255.0f);
                            }
                            Theme.chat_shareDrawable.setAlpha(alpha);
                            Theme.chat_replyIconDrawable.setAlpha(alpha);
                            float x = ((float) getMeasuredWidth()) + (r0.slidingView.getTranslationX() / 2.0f);
                            scale = (float) (r0.slidingView.getTop() + (r0.slidingView.getMeasuredHeight() / 2));
                            Theme.chat_shareDrawable.setColorFilter(Theme.colorFilter);
                            Theme.chat_shareDrawable.setBounds((int) (x - (((float) AndroidUtilities.dp(16.0f)) * scale2)), (int) (scale - (((float) AndroidUtilities.dp(16.0f)) * scale2)), (int) ((((float) AndroidUtilities.dp(16.0f)) * scale2) + x), (int) ((((float) AndroidUtilities.dp(16.0f)) * scale2) + scale));
                            Theme.chat_shareDrawable.draw(canvas2);
                            Theme.chat_replyIconDrawable.setBounds((int) (x - (((float) AndroidUtilities.dp(10.0f)) * scale2)), (int) (scale - (((float) AndroidUtilities.dp(8.0f)) * scale2)), (int) ((((float) AndroidUtilities.dp(10.0f)) * scale2) + x), (int) ((((float) AndroidUtilities.dp(6.0f)) * scale2) + scale));
                            Theme.chat_replyIconDrawable.draw(canvas2);
                            Theme.chat_shareDrawable.setAlpha(255);
                            Theme.chat_replyIconDrawable.setAlpha(255);
                        }
                    }

                    private void processTouchEvent(MotionEvent e) {
                        RecyclerListView recyclerListView = this;
                        MotionEvent motionEvent = e;
                        if (e.getAction() == 0 && !recyclerListView.startedTracking && !recyclerListView.maybeStartTracking) {
                            View view = getPressedChildView();
                            if (view instanceof ChatMessageCell) {
                                recyclerListView.slidingView = (ChatMessageCell) view;
                                MessageObject message = recyclerListView.slidingView.getMessageObject();
                                if ((ChatActivity.this.currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= 46) && (!(ChatActivity.this.getMessageType(message) == 1 && (message.getDialogId() == ChatActivity.this.mergeDialogId || message.needDrawBluredPreview())) && ((ChatActivity.this.currentEncryptedChat != null || message.getId() >= 0) && ((ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && !ChatActivity.this.isBroadcast)))) {
                                    if (ChatActivity.this.currentChat != null) {
                                        if (!ChatObject.isNotInChat(ChatActivity.this.currentChat) && (!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatObject.canPost(ChatActivity.this.currentChat) || ChatActivity.this.currentChat.megagroup)) {
                                            if (!ChatObject.canSendMessages(ChatActivity.this.currentChat)) {
                                            }
                                        }
                                    }
                                    recyclerListView.startedTrackingPointerId = motionEvent.getPointerId(0);
                                    recyclerListView.maybeStartTracking = true;
                                    recyclerListView.startedTrackingX = (int) e.getX();
                                    recyclerListView.startedTrackingY = (int) e.getY();
                                }
                                recyclerListView.slidingView = null;
                            }
                        } else if (recyclerListView.slidingView != null && e.getAction() == 2 && motionEvent.getPointerId(0) == recyclerListView.startedTrackingPointerId) {
                            int dx = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (e.getX() - ((float) recyclerListView.startedTrackingX))));
                            int dy = Math.abs(((int) e.getY()) - recyclerListView.startedTrackingY);
                            if (getScrollState() == 0 && recyclerListView.maybeStartTracking && !recyclerListView.startedTracking && ((float) dx) <= (-AndroidUtilities.getPixelsInCM(0.4f, true)) && Math.abs(dx) / 3 > dy) {
                                MotionEvent event = MotionEvent.obtain(0, 0, 3, 0.0f, 0.0f, 0);
                                recyclerListView.slidingView.onTouchEvent(event);
                                super.onInterceptTouchEvent(event);
                                event.recycle();
                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                                recyclerListView.maybeStartTracking = false;
                                recyclerListView.startedTracking = true;
                                recyclerListView.startedTrackingX = (int) e.getX();
                                if (getParent() != null) {
                                    getParent().requestDisallowInterceptTouchEvent(true);
                                }
                            } else if (recyclerListView.startedTracking) {
                                if (Math.abs(dx) < AndroidUtilities.dp(50.0f)) {
                                    recyclerListView.wasTrackingVibrate = false;
                                } else if (!recyclerListView.wasTrackingVibrate) {
                                    try {
                                        performHapticFeedback(3, 2);
                                    } catch (Exception e2) {
                                    }
                                    recyclerListView.wasTrackingVibrate = true;
                                }
                                recyclerListView.slidingView.setTranslationX((float) dx);
                                if (recyclerListView.slidingView.getMessageObject().isRoundVideo()) {
                                    ChatActivity.this.updateTextureViewPosition();
                                }
                                setGroupTranslationX(recyclerListView.slidingView, (float) dx);
                                invalidate();
                            }
                        } else if (recyclerListView.slidingView != null && motionEvent.getPointerId(0) == recyclerListView.startedTrackingPointerId && (e.getAction() == 3 || e.getAction() == 1 || e.getAction() == 6)) {
                            if (Math.abs(recyclerListView.slidingView.getTranslationX()) >= ((float) AndroidUtilities.dp(50.0f))) {
                                ChatActivity.this.showReplyPanel(true, recyclerListView.slidingView.getMessageObject(), null, null, false);
                            }
                            recyclerListView.endedTrackingX = recyclerListView.slidingView.getTranslationX();
                            recyclerListView.lastTrackingAnimationTime = System.currentTimeMillis();
                            recyclerListView.trackAnimationProgress = 0.0f;
                            invalidate();
                            recyclerListView.maybeStartTracking = false;
                            recyclerListView.startedTracking = false;
                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        }
                    }

                    public boolean onTouchEvent(MotionEvent e) {
                        boolean result = super.onTouchEvent(e);
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            return result;
                        }
                        boolean z;
                        processTouchEvent(e);
                        if (!this.startedTracking) {
                            if (!result) {
                                z = false;
                                return z;
                            }
                        }
                        z = true;
                        return z;
                    }

                    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
                        super.requestDisallowInterceptTouchEvent(disallowIntercept);
                        if (this.slidingView != null) {
                            this.endedTrackingX = this.slidingView.getTranslationX();
                            this.lastTrackingAnimationTime = System.currentTimeMillis();
                            this.trackAnimationProgress = 0.0f;
                            invalidate();
                            this.maybeStartTracking = false;
                            this.startedTracking = false;
                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        }
                    }

                    protected void onChildPressed(View child, boolean pressed) {
                        super.onChildPressed(child, pressed);
                        if (child instanceof ChatMessageCell) {
                            GroupedMessages groupedMessages = ((ChatMessageCell) child).getCurrentMessagesGroup();
                            if (groupedMessages != null) {
                                int count = getChildCount();
                                for (int a = 0; a < count; a++) {
                                    View item = getChildAt(a);
                                    if (item != child) {
                                        if (item instanceof ChatMessageCell) {
                                            ChatMessageCell cell = (ChatMessageCell) item;
                                            if (((ChatMessageCell) item).getCurrentMessagesGroup() == groupedMessages) {
                                                cell.setPressed(pressed);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    public void requestLayout() {
                        if (!ChatActivity.this.chatListViewIgnoreLayout) {
                            if (!ChatActivity.this.globalIgnoreLayout) {
                                super.requestLayout();
                            }
                        }
                    }

                    public void onDraw(Canvas c) {
                        super.onDraw(c);
                        if (this.slidingView != null) {
                            float translationX = this.slidingView.getTranslationX();
                            if (!(this.maybeStartTracking || this.startedTracking || this.endedTrackingX == 0.0f || translationX == 0.0f)) {
                                long newTime = System.currentTimeMillis();
                                this.trackAnimationProgress += ((float) (newTime - this.lastTrackingAnimationTime)) / 180.0f;
                                if (this.trackAnimationProgress > 1.0f) {
                                    this.trackAnimationProgress = 1.0f;
                                }
                                this.lastTrackingAnimationTime = newTime;
                                translationX = this.endedTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                                if (translationX == 0.0f) {
                                    this.endedTrackingX = 0.0f;
                                }
                                setGroupTranslationX(this.slidingView, translationX);
                                this.slidingView.setTranslationX(translationX);
                                if (this.slidingView.getMessageObject().isRoundVideo()) {
                                    ChatActivity.this.updateTextureViewPosition();
                                }
                                invalidate();
                            }
                            drawReplyButton(c);
                        }
                    }

                    protected void dispatchDraw(Canvas canvas) {
                        ChatActivity.this.drawLaterRoundProgressCell = null;
                        super.dispatchDraw(canvas);
                    }

                    public boolean drawChild(Canvas canvas, View child, long drawingTime) {
                        int a;
                        int i;
                        int i2;
                        int i3;
                        AnonymousClass16 anonymousClass16 = this;
                        Canvas canvas2 = canvas;
                        View view = child;
                        int clipLeft = 0;
                        int clipBottom = 0;
                        if (view instanceof ChatMessageCell) {
                            ChatMessageCell cell = (ChatMessageCell) view;
                            GroupedMessagePosition position = cell.getCurrentPosition();
                            GroupedMessages group = cell.getCurrentMessagesGroup();
                            if (position != null) {
                                if (position.pw != position.spanSize && position.spanSize == ChatActivity.id_chat_compose_panel && position.siblingHeights == null && group.hasSibling) {
                                    clipLeft = cell.getBackgroundDrawableLeft();
                                } else if (position.siblingHeights != null) {
                                    clipBottom = child.getBottom() - AndroidUtilities.dp((float) (cell.isPinnedBottom() + 1));
                                }
                            }
                            if (cell.needDelayRoundProgressDraw()) {
                                ChatActivity.this.drawLaterRoundProgressCell = cell;
                            }
                        }
                        if (clipLeft != 0) {
                            canvas.save();
                            canvas2.clipRect(((float) clipLeft) + child.getTranslationX(), (float) child.getTop(), ((float) child.getRight()) + child.getTranslationX(), (float) child.getBottom());
                        } else if (clipBottom != 0) {
                            canvas.save();
                            canvas2.clipRect(((float) child.getLeft()) + child.getTranslationX(), (float) child.getTop(), ((float) child.getRight()) + child.getTranslationX(), (float) clipBottom);
                        }
                        boolean result = super.drawChild(canvas, child, drawingTime);
                        if (!(clipLeft == 0 && clipBottom == 0)) {
                            canvas.restore();
                        }
                        int num = 0;
                        int count = getChildCount();
                        for (a = 0; a < count; a++) {
                            if (getChildAt(a) == view) {
                                num = a;
                                break;
                            }
                        }
                        if (num == count - 1) {
                            int a2;
                            ChatMessageCell cell2;
                            a = anonymousClass16.drawTimeAfter.size();
                            if (a > 0) {
                                for (a2 = 0; a2 < a; a2++) {
                                    cell2 = (ChatMessageCell) anonymousClass16.drawTimeAfter.get(a2);
                                    canvas.save();
                                    canvas2.translate(((float) cell2.getLeft()) + cell2.getTranslationX(), (float) cell2.getTop());
                                    cell2.drawTimeLayout(canvas2);
                                    canvas.restore();
                                }
                                anonymousClass16.drawTimeAfter.clear();
                            }
                            a = anonymousClass16.drawNamesAfter.size();
                            if (a > 0) {
                                for (a2 = 0; a2 < a; a2++) {
                                    cell2 = (ChatMessageCell) anonymousClass16.drawNamesAfter.get(a2);
                                    canvas.save();
                                    canvas2.translate(((float) cell2.getLeft()) + cell2.getTranslationX(), (float) cell2.getTop());
                                    cell2.drawNamesLayout(canvas2);
                                    canvas.restore();
                                }
                                anonymousClass16.drawNamesAfter.clear();
                            }
                            a = anonymousClass16.drawCaptionAfter.size();
                            if (a > 0) {
                                for (a2 = 0; a2 < a; a2++) {
                                    cell2 = (ChatMessageCell) anonymousClass16.drawCaptionAfter.get(a2);
                                    if (cell2.getCurrentPosition() != null) {
                                        canvas.save();
                                        canvas2.translate(((float) cell2.getLeft()) + cell2.getTranslationX(), (float) cell2.getTop());
                                        cell2.drawCaptionLayout(canvas2, (cell2.getCurrentPosition().flags & 1) == 0);
                                        canvas.restore();
                                    }
                                }
                                anonymousClass16.drawCaptionAfter.clear();
                            }
                        }
                        if (view instanceof ChatMessageCell) {
                            ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                            GroupedMessagePosition position2 = chatMessageCell.getCurrentPosition();
                            if (position2 != null) {
                                if (position2.last || (position2.minX == (byte) 0 && position2.minY == (byte) 0)) {
                                    if (num == count - 1) {
                                        canvas.save();
                                        canvas2.translate(((float) chatMessageCell.getLeft()) + chatMessageCell.getTranslationX(), (float) chatMessageCell.getTop());
                                        if (position2.last) {
                                            chatMessageCell.drawTimeLayout(canvas2);
                                        }
                                        if (position2.minX == (byte) 0 && position2.minY == (byte) 0) {
                                            chatMessageCell.drawNamesLayout(canvas2);
                                        }
                                        canvas.restore();
                                    } else {
                                        if (position2.last) {
                                            anonymousClass16.drawTimeAfter.add(chatMessageCell);
                                        }
                                        if (position2.minX == (byte) 0 && position2.minY == (byte) 0 && chatMessageCell.hasNameLayout()) {
                                            anonymousClass16.drawNamesAfter.add(chatMessageCell);
                                        }
                                    }
                                }
                                if (num == count - 1) {
                                    canvas.save();
                                    canvas2.translate(((float) chatMessageCell.getLeft()) + chatMessageCell.getTranslationX(), (float) chatMessageCell.getTop());
                                    if (chatMessageCell.hasCaptionLayout() && (position2.flags & 8) != 0) {
                                        chatMessageCell.drawCaptionLayout(canvas2, (position2.flags & 1) == 0);
                                    }
                                    canvas.restore();
                                } else if (chatMessageCell.hasCaptionLayout() && (position2.flags & 8) != 0) {
                                    anonymousClass16.drawCaptionAfter.add(chatMessageCell);
                                }
                            }
                            MessageObject message = chatMessageCell.getMessageObject();
                            if (ChatActivity.this.roundVideoContainer != null && message.isRoundVideo() && MediaController.getInstance().isPlayingMessage(message)) {
                                ImageReceiver imageReceiver = chatMessageCell.getPhotoImage();
                                float newX = ((float) imageReceiver.getImageX()) + chatMessageCell.getTranslationX();
                                float newY = (float) (((ChatActivity.this.fragmentView.getPaddingTop() + chatMessageCell.getTop()) + imageReceiver.getImageY()) - (ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? AndroidUtilities.dp(48.0f) : 0));
                                if (!(ChatActivity.this.roundVideoContainer.getTranslationX() == newX && ChatActivity.this.roundVideoContainer.getTranslationY() == newY)) {
                                    ChatActivity.this.roundVideoContainer.setTranslationX(newX);
                                    ChatActivity.this.roundVideoContainer.setTranslationY(newY);
                                    ChatActivity.this.fragmentView.invalidate();
                                    ChatActivity.this.roundVideoContainer.invalidate();
                                }
                            }
                            ImageReceiver imageReceiver2 = chatMessageCell.getAvatarImage();
                            if (imageReceiver2 != null) {
                                ViewHolder holder;
                                int tries;
                                int tries2;
                                int maxY;
                                ViewHolder viewHolder;
                                GroupedMessages groupedMessages;
                                int prevPosition;
                                GroupedMessages groupedMessages2 = ChatActivity.this.getValidGroupedMessage(message);
                                int top = child.getTop();
                                if (chatMessageCell.isPinnedBottom()) {
                                    ViewHolder holder2 = ChatActivity.this.chatListView.getChildViewHolder(view);
                                    if (holder2 != null) {
                                        int p = holder2.getAdapterPosition();
                                        if (groupedMessages2 == null || position2 == null) {
                                            i = clipBottom;
                                            i2 = num;
                                            i3 = count;
                                            num = p - 1;
                                        } else {
                                            clipLeft = groupedMessages2.posArray.indexOf(position2);
                                            clipBottom = groupedMessages2.posArray.size();
                                            if ((position2.flags & 8) != 0) {
                                                num = (p - clipBottom) + clipLeft;
                                                i3 = count;
                                            } else {
                                                num = p - 1;
                                                int a3 = clipLeft + 1;
                                                while (true) {
                                                    int a4 = a3;
                                                    if (clipLeft >= clipBottom) {
                                                        break;
                                                    }
                                                    int idx = clipLeft;
                                                    int size = clipBottom;
                                                    clipBottom = a4;
                                                    i3 = count;
                                                    if (((GroupedMessagePosition) groupedMessages2.posArray.get(clipBottom)).minY > position2.maxY) {
                                                        break;
                                                    }
                                                    num--;
                                                    a3 = clipBottom + 1;
                                                    clipLeft = idx;
                                                    clipBottom = size;
                                                    count = i3;
                                                }
                                            }
                                        }
                                        if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(num) != 0) {
                                            imageReceiver2.setImageY(-AndroidUtilities.dp(1000.0f));
                                            imageReceiver2.draw(canvas2);
                                            return result;
                                        }
                                        clipLeft = chatMessageCell.getTranslationX();
                                        clipBottom = child.getTop() + chatMessageCell.getLayoutHeight();
                                        num = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                                        if (clipBottom > num) {
                                            clipBottom = num;
                                        }
                                        if (chatMessageCell.isPinnedTop()) {
                                            holder = ChatActivity.this.chatListView.getChildViewHolder(view);
                                            if (holder != null) {
                                                tries = 0;
                                                while (true) {
                                                    tries2 = tries;
                                                    if (tries2 < 20) {
                                                        tries = tries2 + 1;
                                                        tries2 = holder.getAdapterPosition();
                                                        if (groupedMessages2 != null || position2 == null) {
                                                            maxY = num;
                                                            viewHolder = holder;
                                                            groupedMessages = groupedMessages2;
                                                            prevPosition = tries2 + 1;
                                                        } else {
                                                            p = groupedMessages2.posArray.indexOf(position2);
                                                            if (p < 0) {
                                                                break;
                                                            }
                                                            int size2 = groupedMessages2.posArray.size();
                                                            if ((position2.flags & 4) != 0) {
                                                                prevPosition = (tries2 + p) + 1;
                                                                maxY = num;
                                                                viewHolder = holder;
                                                                groupedMessages = groupedMessages2;
                                                            } else {
                                                                prevPosition = tries2 + 1;
                                                                int a5 = p - 1;
                                                                while (true) {
                                                                    int a6 = a5;
                                                                    if (p < 0) {
                                                                        break;
                                                                    }
                                                                    maxY = num;
                                                                    viewHolder = holder;
                                                                    count = a6;
                                                                    groupedMessages = groupedMessages2;
                                                                    if (((GroupedMessagePosition) groupedMessages2.posArray.get(count)).maxY < position2.minY) {
                                                                        break;
                                                                    }
                                                                    prevPosition++;
                                                                    a5 = count - 1;
                                                                    num = maxY;
                                                                    holder = viewHolder;
                                                                    groupedMessages2 = groupedMessages;
                                                                }
                                                                maxY = num;
                                                                viewHolder = holder;
                                                                groupedMessages = groupedMessages2;
                                                            }
                                                        }
                                                        holder = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(prevPosition);
                                                        if (holder == null) {
                                                            break;
                                                        }
                                                        top = holder.itemView.getTop();
                                                        if (clipBottom - AndroidUtilities.dp(NUM) < holder.itemView.getBottom()) {
                                                            clipLeft = Math.min(holder.itemView.getTranslationX(), clipLeft);
                                                        }
                                                        if ((holder.itemView instanceof ChatMessageCell) != 0) {
                                                            break;
                                                        } else if (!((ChatMessageCell) holder.itemView).isPinnedTop()) {
                                                            break;
                                                        } else {
                                                            num = maxY;
                                                            groupedMessages2 = groupedMessages;
                                                            view = child;
                                                        }
                                                    } else {
                                                        break;
                                                    }
                                                }
                                                if (clipBottom - AndroidUtilities.dp(48.0f) < top) {
                                                    clipBottom = top + AndroidUtilities.dp(48.0f);
                                                }
                                                if (clipLeft != 0) {
                                                    canvas.save();
                                                    canvas2.translate(clipLeft, 0.0f);
                                                }
                                                imageReceiver2.setImageY(clipBottom - AndroidUtilities.dp(44.0f));
                                                imageReceiver2.draw(canvas2);
                                                if (clipLeft != 0) {
                                                    canvas.restore();
                                                }
                                                return result;
                                            }
                                        }
                                        groupedMessages = groupedMessages2;
                                        if (clipBottom - AndroidUtilities.dp(48.0f) < top) {
                                            clipBottom = top + AndroidUtilities.dp(48.0f);
                                        }
                                        if (clipLeft != 0) {
                                            canvas.save();
                                            canvas2.translate(clipLeft, 0.0f);
                                        }
                                        imageReceiver2.setImageY(clipBottom - AndroidUtilities.dp(44.0f));
                                        imageReceiver2.draw(canvas2);
                                        if (clipLeft != 0) {
                                            canvas.restore();
                                        }
                                        return result;
                                    }
                                }
                                i = clipBottom;
                                i2 = num;
                                i3 = count;
                                clipLeft = chatMessageCell.getTranslationX();
                                clipBottom = child.getTop() + chatMessageCell.getLayoutHeight();
                                num = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                                if (clipBottom > num) {
                                    clipBottom = num;
                                }
                                if (chatMessageCell.isPinnedTop()) {
                                    holder = ChatActivity.this.chatListView.getChildViewHolder(view);
                                    if (holder != null) {
                                        tries = 0;
                                        while (true) {
                                            tries2 = tries;
                                            if (tries2 < 20) {
                                                break;
                                            }
                                            tries = tries2 + 1;
                                            tries2 = holder.getAdapterPosition();
                                            if (groupedMessages2 != null) {
                                            }
                                            maxY = num;
                                            viewHolder = holder;
                                            groupedMessages = groupedMessages2;
                                            prevPosition = tries2 + 1;
                                            holder = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(prevPosition);
                                            if (holder == null) {
                                                top = holder.itemView.getTop();
                                                if (clipBottom - AndroidUtilities.dp(NUM) < holder.itemView.getBottom()) {
                                                    clipLeft = Math.min(holder.itemView.getTranslationX(), clipLeft);
                                                }
                                                if ((holder.itemView instanceof ChatMessageCell) != 0) {
                                                    if (!((ChatMessageCell) holder.itemView).isPinnedTop()) {
                                                        break;
                                                    }
                                                    num = maxY;
                                                    groupedMessages2 = groupedMessages;
                                                    view = child;
                                                } else {
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                        if (clipBottom - AndroidUtilities.dp(48.0f) < top) {
                                            clipBottom = top + AndroidUtilities.dp(48.0f);
                                        }
                                        if (clipLeft != 0) {
                                            canvas.save();
                                            canvas2.translate(clipLeft, 0.0f);
                                        }
                                        imageReceiver2.setImageY(clipBottom - AndroidUtilities.dp(44.0f));
                                        imageReceiver2.draw(canvas2);
                                        if (clipLeft != 0) {
                                            canvas.restore();
                                        }
                                        return result;
                                    }
                                }
                                groupedMessages = groupedMessages2;
                                if (clipBottom - AndroidUtilities.dp(48.0f) < top) {
                                    clipBottom = top + AndroidUtilities.dp(48.0f);
                                }
                                if (clipLeft != 0) {
                                    canvas.save();
                                    canvas2.translate(clipLeft, 0.0f);
                                }
                                imageReceiver2.setImageY(clipBottom - AndroidUtilities.dp(44.0f));
                                imageReceiver2.draw(canvas2);
                                if (clipLeft != 0) {
                                    canvas.restore();
                                }
                                return result;
                            }
                        }
                        i = clipBottom;
                        i2 = num;
                        i3 = count;
                        return result;
                    }
                };
                r7.chatListView.setTag(Integer.valueOf(1));
                r7.chatListView.setVerticalScrollBarEnabled(true);
                recyclerListView = r7.chatListView;
                chatActivityAdapter = new ChatActivityAdapter(context2);
                r7.chatAdapter = chatActivityAdapter;
                recyclerListView.setAdapter(chatActivityAdapter);
                r7.chatListView.setClipToPadding(false);
                r7.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                r7.chatListView.setItemAnimator(null);
                r7.chatListView.setLayoutAnimation(null);
                gridLayoutManagerFixed = anonymousClass17;
                oldMessage3 = oldMessage2;
                anonymousClass17 = new GridLayoutManagerFixed(context2, id_chat_compose_panel, 1, 1) {
                    public boolean supportsPredictiveItemAnimations() {
                        return false;
                    }

                    public void smoothScrollToPosition(RecyclerView recyclerView, State state, int position) {
                        LinearSmoothScrollerMiddle linearSmoothScroller = new LinearSmoothScrollerMiddle(recyclerView.getContext());
                        linearSmoothScroller.setTargetPosition(position);
                        startSmoothScroll(linearSmoothScroller);
                    }

                    public boolean shouldLayoutChildFromOpositeSide(View child) {
                        if (child instanceof ChatMessageCell) {
                            return ((ChatMessageCell) child).getMessageObject().isOutOwner() ^ 1;
                        }
                        return false;
                    }

                    protected boolean hasSiblingChild(int position) {
                        if (position >= ChatActivity.this.chatAdapter.messagesStartRow && position < ChatActivity.this.chatAdapter.messagesEndRow) {
                            int index = position - ChatActivity.this.chatAdapter.messagesStartRow;
                            if (index >= 0 && index < ChatActivity.this.messages.size()) {
                                MessageObject message = (MessageObject) ChatActivity.this.messages.get(index);
                                GroupedMessages group = ChatActivity.this.getValidGroupedMessage(message);
                                if (group != null) {
                                    GroupedMessagePosition pos = (GroupedMessagePosition) group.positions.get(message);
                                    if (pos.minX != pos.maxX && pos.minY == pos.maxY) {
                                        if (pos.minY != (byte) 0) {
                                            int count = group.posArray.size();
                                            for (int a = 0; a < count; a++) {
                                                GroupedMessagePosition p = (GroupedMessagePosition) group.posArray.get(a);
                                                if (p != pos) {
                                                    if (p.minY <= pos.minY && p.maxY >= pos.minY) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return false;
                                }
                            }
                        }
                        return false;
                    }
                };
                r7.chatLayoutManager = gridLayoutManagerFixed;
                r7.chatLayoutManager.setSpanSizeLookup(new SpanSizeLookup() {
                    public int getSpanSize(int position) {
                        if (position >= ChatActivity.this.chatAdapter.messagesStartRow && position < ChatActivity.this.chatAdapter.messagesEndRow) {
                            int idx = position - ChatActivity.this.chatAdapter.messagesStartRow;
                            if (idx >= 0 && idx < ChatActivity.this.messages.size()) {
                                MessageObject message = (MessageObject) ChatActivity.this.messages.get(idx);
                                GroupedMessages groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                                if (groupedMessages != null) {
                                    return ((GroupedMessagePosition) groupedMessages.positions.get(message)).spanSize;
                                }
                            }
                        }
                        return ChatActivity.id_chat_compose_panel;
                    }
                });
                r7.chatListView.setLayoutManager(r7.chatLayoutManager);
                r7.chatListView.addItemDecoration(new ItemDecoration() {
                    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {
                        int a = 0;
                        outRect.bottom = 0;
                        if (view instanceof ChatMessageCell) {
                            ChatMessageCell cell = (ChatMessageCell) view;
                            GroupedMessages group = cell.getCurrentMessagesGroup();
                            if (group != null) {
                                GroupedMessagePosition position = cell.getCurrentPosition();
                                if (position != null && position.siblingHeights != null) {
                                    float maxHeight = ((float) Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) * 0.5f;
                                    int h = cell.getCaptionHeight();
                                    for (float f : position.siblingHeights) {
                                        h += (int) Math.ceil((double) (f * maxHeight));
                                    }
                                    h += (position.maxY - position.minY) * AndroidUtilities.dp2(11.0f);
                                    int a2 = group.posArray.size();
                                    while (a < a2) {
                                        GroupedMessagePosition pos = (GroupedMessagePosition) group.posArray.get(a);
                                        if (pos.minY == position.minY) {
                                            if (pos.minX != position.minX || pos.maxX != position.maxX || pos.minY != position.minY || pos.maxY != position.maxY) {
                                                if (pos.minY == position.minY) {
                                                    h -= ((int) Math.ceil((double) (pos.ph * maxHeight))) - AndroidUtilities.dp(4.0f);
                                                    break;
                                                }
                                            }
                                        }
                                        a++;
                                    }
                                    outRect.bottom = -h;
                                }
                            }
                        }
                    }
                });
                r7.contentView.addView(r7.chatListView, LayoutHelper.createFrame(-1, -1.0f));
                r7.chatListView.setOnItemLongClickListener(r7.onItemLongClickListener);
                r7.chatListView.setOnItemClickListener(r7.onItemClickListener);
                r7.chatListView.setOnScrollListener(new OnScrollListener() {
                    private final int scrollValue = AndroidUtilities.dp(100.0f);
                    private float totalDy = 0.0f;

                    /* renamed from: org.telegram.ui.ChatActivity$20$1 */
                    class C10181 extends AnimatorListenerAdapter {
                        C10181() {
                        }

                        public void onAnimationEnd(Animator animation) {
                            if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                                ChatActivity.this.floatingDateAnimation = null;
                            }
                        }
                    }

                    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                        if (newState == 2) {
                            ChatActivity.this.wasManualScroll = true;
                        } else if (newState == 1) {
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollingFloatingDate = true;
                            ChatActivity.this.checkTextureViewPosition = true;
                        } else if (newState == 0) {
                            ChatActivity.this.scrollingFloatingDate = false;
                            ChatActivity.this.checkTextureViewPosition = false;
                            ChatActivity.this.hideFloatingDateView(true);
                        }
                    }

                    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                        ChatActivity.this.chatListView.invalidate();
                        if (!(ChatActivity.this.wasManualScroll || dy == 0)) {
                            ChatActivity.this.wasManualScroll = true;
                        }
                        if (!(dy == 0 || !ChatActivity.this.scrollingFloatingDate || ChatActivity.this.currentFloatingTopIsNotMessage)) {
                            if (ChatActivity.this.highlightMessageId != ConnectionsManager.DEFAULT_DATACENTER_ID) {
                                ChatActivity.this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                ChatActivity.this.updateVisibleRows();
                            }
                            if (ChatActivity.this.floatingDateView.getTag() == null) {
                                if (ChatActivity.this.floatingDateAnimation != null) {
                                    ChatActivity.this.floatingDateAnimation.cancel();
                                }
                                ChatActivity.this.floatingDateView.setTag(Integer.valueOf(1));
                                ChatActivity.this.floatingDateAnimation = new AnimatorSet();
                                ChatActivity.this.floatingDateAnimation.setDuration(150);
                                AnimatorSet access$12600 = ChatActivity.this.floatingDateAnimation;
                                Animator[] animatorArr = new Animator[1];
                                animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.floatingDateView, "alpha", new float[]{1.0f});
                                access$12600.playTogether(animatorArr);
                                ChatActivity.this.floatingDateAnimation.addListener(new C10181());
                                ChatActivity.this.floatingDateAnimation.start();
                            }
                        }
                        ChatActivity.this.checkScrollForLoad(true);
                        int firstVisibleItem = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                        if (firstVisibleItem != -1) {
                            int totalItemCount = ChatActivity.this.chatAdapter.getItemCount();
                            if (firstVisibleItem == 0 && ChatActivity.this.forwardEndReached[0]) {
                                ChatActivity.this.showPagedownButton(false, true);
                            } else if (dy > 0) {
                                if (ChatActivity.this.pagedownButton.getTag() == null) {
                                    this.totalDy += (float) dy;
                                    if (this.totalDy > ((float) this.scrollValue)) {
                                        this.totalDy = 0.0f;
                                        ChatActivity.this.showPagedownButton(true, true);
                                        ChatActivity.this.pagedownButtonShowedByScroll = true;
                                    }
                                }
                            } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                                this.totalDy += (float) dy;
                                if (this.totalDy < ((float) (-this.scrollValue))) {
                                    ChatActivity.this.showPagedownButton(false, true);
                                    this.totalDy = 0.0f;
                                }
                            }
                        }
                        ChatActivity.this.updateMessagesVisisblePart();
                    }
                });
                r7.progressView = new FrameLayout(context2);
                r7.progressView.setVisibility(4);
                r7.contentView.addView(r7.progressView, LayoutHelper.createFrame(-1, -1, 51));
                r7.progressView2 = new View(context2);
                r7.progressView2.setBackgroundResource(R.drawable.system_loader);
                r7.progressView2.getBackground().setColorFilter(Theme.colorFilter);
                r7.progressView.addView(r7.progressView2, LayoutHelper.createFrame(36, 36, 17));
                r7.progressBar = new RadialProgressView(context2);
                r7.progressBar.setSize(AndroidUtilities.dp(28.0f));
                r7.progressBar.setProgressColor(Theme.getColor(Theme.key_chat_serviceText));
                r7.progressView.addView(r7.progressBar, LayoutHelper.createFrame(32, 32, 17));
                r7.floatingDateView = new ChatActionCell(context2);
                r7.floatingDateView.setAlpha(0.0f);
                r7.contentView.addView(r7.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                r7.floatingDateView.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View view) {
                        if (ChatActivity.this.floatingDateView.getAlpha() != 0.0f) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTimeInMillis(((long) ChatActivity.this.floatingDateView.getCustomDate()) * 1000);
                            int year = calendar.get(1);
                            int monthOfYear = calendar.get(2);
                            int dayOfMonth = calendar.get(5);
                            calendar.clear();
                            calendar.set(year, monthOfYear, dayOfMonth);
                            ChatActivity.this.jumpToDate((int) (calendar.getTime().getTime() / 1000));
                        }
                    }
                });
                if (ChatObject.isChannel(r7.currentChat)) {
                    r7.pinnedMessageView = new FrameLayout(context2);
                    r7.pinnedMessageView.setTag(Integer.valueOf(1));
                    r7.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                    r7.pinnedMessageView.setVisibility(8);
                    r7.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
                    r7.pinnedMessageView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                    r7.contentView.addView(r7.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
                    r7.pinnedMessageView.setOnClickListener(new View.OnClickListener() {
                        public void onClick(View v) {
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.info.pinned_msg_id, 0, true, 0, false);
                        }
                    });
                    r7.pinnedLineView = new View(context2);
                    r7.pinnedLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_topPanelLine));
                    r7.pinnedMessageView.addView(r7.pinnedLineView, LayoutHelper.createFrame(2, 32.0f, 51, 8.0f, 8.0f, 0.0f, 0.0f));
                    r7.pinnedMessageImageView = new BackupImageView(context2);
                    r7.pinnedMessageView.addView(r7.pinnedMessageImageView, LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                    r7.pinnedMessageNameTextView = new SimpleTextView(context2);
                    r7.pinnedMessageNameTextView.setTextSize(14);
                    r7.pinnedMessageNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
                    r7.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    r7.pinnedMessageView.addView(r7.pinnedMessageNameTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 7.3f, 52.0f, 0.0f));
                    r7.pinnedMessageTextView = new SimpleTextView(context2);
                    r7.pinnedMessageTextView.setTextSize(14);
                    r7.pinnedMessageTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
                    r7.pinnedMessageView.addView(r7.pinnedMessageTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 25.3f, 52.0f, 0.0f));
                    r7.closePinned = new ImageView(context2);
                    r7.closePinned.setImageResource(R.drawable.miniplayer_close);
                    r7.closePinned.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
                    r7.closePinned.setScaleType(ScaleType.CENTER);
                    r7.pinnedMessageView.addView(r7.closePinned, LayoutHelper.createFrame(48, 48, 53));
                    r7.closePinned.setOnClickListener(new View.OnClickListener() {

                        /* renamed from: org.telegram.ui.ChatActivity$23$1 */
                        class C10191 implements OnClickListener {
                            C10191() {
                            }

                            public void onClick(DialogInterface dialogInterface, int i) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, 0, false);
                            }
                        }

                        public void onClick(View v) {
                            if (ChatActivity.this.getParentActivity() != null) {
                                if (!ChatActivity.this.currentChat.creator) {
                                    if (ChatActivity.this.currentChat.admin_rights != null) {
                                        if (!(ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.admin_rights.pin_messages)) {
                                            if (!ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.admin_rights.edit_messages) {
                                            }
                                        }
                                    }
                                    Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append("pin_");
                                    stringBuilder.append(ChatActivity.this.dialog_id);
                                    edit.putInt(stringBuilder.toString(), ChatActivity.this.info.pinned_msg_id).commit();
                                    ChatActivity.this.updatePinnedMessageView(true);
                                }
                                Builder builder = new Builder(ChatActivity.this.getParentActivity());
                                builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new C10191());
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                ChatActivity.this.showDialog(builder.create());
                            }
                        }
                    });
                }
                r7.reportSpamView = new LinearLayout(context2);
                r7.reportSpamView.setTag(Integer.valueOf(1));
                r7.reportSpamView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                r7.reportSpamView.setVisibility(8);
                r7.reportSpamView.setBackgroundResource(R.drawable.blockpanel);
                r7.reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                r7.contentView.addView(r7.reportSpamView, LayoutHelper.createFrame(-1, 50, 51));
                r7.addToContactsButton = new TextView(context2);
                r7.addToContactsButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
                r7.addToContactsButton.setVisibility(8);
                r7.addToContactsButton.setTextSize(1, 14.0f);
                r7.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.addToContactsButton.setSingleLine(true);
                r7.addToContactsButton.setMaxLines(1);
                r7.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                r7.addToContactsButton.setGravity(17);
                r7.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
                r7.reportSpamView.addView(r7.addToContactsButton, LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                r7.addToContactsButton.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        Bundle args = new Bundle();
                        args.putInt("user_id", ChatActivity.this.currentUser.id);
                        args.putBoolean("addContact", true);
                        ChatActivity.this.presentFragment(new ContactAddActivity(args));
                    }
                });
                r7.reportSpamContainer = new FrameLayout(context2);
                r7.reportSpamView.addView(r7.reportSpamContainer, LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                r7.reportSpamButton = new TextView(context2);
                r7.reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
                r7.reportSpamButton.setTextSize(1, 14.0f);
                r7.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.reportSpamButton.setSingleLine(true);
                r7.reportSpamButton.setMaxLines(1);
                if (r7.currentChat == null) {
                    r7.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
                } else {
                    r7.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
                }
                r7.reportSpamButton.setGravity(17);
                r7.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                r7.reportSpamContainer.addView(r7.reportSpamButton, LayoutHelper.createFrame(-1, -1, 51));
                r7.reportSpamButton.setOnClickListener(new View.OnClickListener() {

                    /* renamed from: org.telegram.ui.ChatActivity$25$1 */
                    class C10201 implements OnClickListener {
                        C10201() {
                        }

                        public void onClick(DialogInterface dialogInterface, int i) {
                            if (ChatActivity.this.currentUser != null) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).blockUser(ChatActivity.this.currentUser.id);
                            }
                            MessagesController.getInstance(ChatActivity.this.currentAccount).reportSpam(ChatActivity.this.dialog_id, ChatActivity.this.currentUser, ChatActivity.this.currentChat, ChatActivity.this.currentEncryptedChat);
                            ChatActivity.this.updateSpamView();
                            if (ChatActivity.this.currentChat == null) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                            } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                            } else {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat((int) (-ChatActivity.this.dialog_id), MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Integer.valueOf(UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())), null);
                            }
                            ChatActivity.this.finishFragment();
                        }
                    }

                    public void onClick(View v) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            Builder builder = new Builder(ChatActivity.this.getParentActivity());
                            if (ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) {
                                builder.setMessage(LocaleController.getString("ReportSpamAlertChannel", R.string.ReportSpamAlertChannel));
                            } else if (ChatActivity.this.currentChat != null) {
                                builder.setMessage(LocaleController.getString("ReportSpamAlertGroup", R.string.ReportSpamAlertGroup));
                            } else {
                                builder.setMessage(LocaleController.getString("ReportSpamAlert", R.string.ReportSpamAlert));
                            }
                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new C10201());
                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                            ChatActivity.this.showDialog(builder.create());
                        }
                    }
                });
                r7.closeReportSpam = new ImageView(context2);
                r7.closeReportSpam.setImageResource(R.drawable.miniplayer_close);
                r7.closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
                r7.closeReportSpam.setScaleType(ScaleType.CENTER);
                r7.reportSpamContainer.addView(r7.closeReportSpam, LayoutHelper.createFrame(48, 48, 53));
                r7.closeReportSpam.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        MessagesController.getInstance(ChatActivity.this.currentAccount).hideReportSpam(ChatActivity.this.dialog_id, ChatActivity.this.currentUser, ChatActivity.this.currentChat);
                        ChatActivity.this.updateSpamView();
                    }
                });
                r7.alertView = new FrameLayout(context2);
                r7.alertView.setTag(Integer.valueOf(1));
                r7.alertView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                r7.alertView.setVisibility(8);
                r7.alertView.setBackgroundResource(R.drawable.blockpanel);
                r7.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                r7.contentView.addView(r7.alertView, LayoutHelper.createFrame(-1, 50, 51));
                r7.alertNameTextView = new TextView(context2);
                r7.alertNameTextView.setTextSize(1, 14.0f);
                r7.alertNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
                r7.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.alertNameTextView.setSingleLine(true);
                r7.alertNameTextView.setEllipsize(TruncateAt.END);
                r7.alertNameTextView.setMaxLines(1);
                r7.alertView.addView(r7.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
                r7.alertTextView = new TextView(context2);
                r7.alertTextView.setTextSize(1, 14.0f);
                r7.alertTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
                r7.alertTextView.setSingleLine(true);
                r7.alertTextView.setEllipsize(TruncateAt.END);
                r7.alertTextView.setMaxLines(1);
                r7.alertView.addView(r7.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
                r7.pagedownButton = new FrameLayout(context2);
                r7.pagedownButton.setVisibility(4);
                r7.contentView.addView(r7.pagedownButton, LayoutHelper.createFrame(66, 59.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                r7.pagedownButton.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View view) {
                        ChatActivity.this.wasManualScroll = true;
                        ChatActivity.this.checkTextureViewPosition = true;
                        if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.createUnreadMessageAfterId, 0, false, ChatActivity.this.returnToLoadIndex, false);
                        } else if (ChatActivity.this.returnToMessageId > 0) {
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.returnToMessageId, 0, true, ChatActivity.this.returnToLoadIndex, false);
                        } else {
                            ChatActivity.this.scrollToLastMessage(true);
                        }
                    }
                });
                r7.mentiondownButton = new FrameLayout(context2);
                r7.mentiondownButton.setVisibility(4);
                r7.contentView.addView(r7.mentiondownButton, LayoutHelper.createFrame(46, 59.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                r7.mentiondownButton.setOnClickListener(new View.OnClickListener() {

                    /* renamed from: org.telegram.ui.ChatActivity$28$1 */
                    class C20051 implements IntCallback {
                        C20051() {
                        }

                        public void run(int param) {
                            if (param == 0) {
                                ChatActivity.this.hasAllMentionsLocal = false;
                                AnonymousClass28.this.loadLastUnreadMention();
                                return;
                            }
                            ChatActivity.this.scrollToMessageId(param, 0, false, 0, false);
                        }
                    }

                    private void loadLastUnreadMention() {
                        ChatActivity.this.wasManualScroll = true;
                        if (ChatActivity.this.hasAllMentionsLocal) {
                            MessagesStorage.getInstance(ChatActivity.this.currentAccount).getUnreadMention(ChatActivity.this.dialog_id, new C20051());
                            return;
                        }
                        final MessagesStorage messagesStorage = MessagesStorage.getInstance(ChatActivity.this.currentAccount);
                        TL_messages_getUnreadMentions req = new TL_messages_getUnreadMentions();
                        req.peer = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputPeer((int) ChatActivity.this.dialog_id);
                        req.limit = 1;
                        req.add_offset = ChatActivity.this.newMentionsCount - 1;
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(final TLObject response, final TL_error error) {
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        messages_Messages res = response;
                                        if (error == null) {
                                            if (!res.messages.isEmpty()) {
                                                long mid;
                                                int id = ((Message) res.messages.get(0)).id;
                                                long mid2 = (long) id;
                                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                                    mid = mid2 | (((long) ChatActivity.this.currentChat.id) << 32);
                                                } else {
                                                    mid = mid2;
                                                }
                                                MessageObject object = (MessageObject) ChatActivity.this.messagesDict[0].get(id);
                                                messagesStorage.markMessageAsMention(mid);
                                                if (object != null) {
                                                    object.messageOwner.media_unread = true;
                                                    object.messageOwner.mentioned = true;
                                                }
                                                ChatActivity.this.scrollToMessageId(id, 0, false, 0, false);
                                                return;
                                            }
                                        }
                                        if (res != null) {
                                            ChatActivity.this.newMentionsCount = res.count;
                                        } else {
                                            ChatActivity.this.newMentionsCount = 0;
                                        }
                                        messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                                        if (ChatActivity.this.newMentionsCount == 0) {
                                            ChatActivity.this.hasAllMentionsLocal = true;
                                            ChatActivity.this.showMentiondownButton(false, true);
                                            return;
                                        }
                                        ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(ChatActivity.this.newMentionsCount)}));
                                        AnonymousClass28.this.loadLastUnreadMention();
                                    }
                                });
                            }
                        });
                    }

                    public void onClick(View view) {
                        loadLastUnreadMention();
                    }
                });
                r7.mentiondownButton.setOnLongClickListener(new OnLongClickListener() {

                    /* renamed from: org.telegram.ui.ChatActivity$29$1 */
                    class C20071 implements RequestDelegate {
                        C20071() {
                        }

                        public void run(TLObject response, TL_error error) {
                        }
                    }

                    public boolean onLongClick(View view) {
                        for (int a = 0; a < ChatActivity.this.messages.size(); a++) {
                            MessageObject messageObject = (MessageObject) ChatActivity.this.messages.get(a);
                            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                                messageObject.setContentIsRead();
                            }
                        }
                        ChatActivity.this.newMentionsCount = 0;
                        MessagesStorage.getInstance(ChatActivity.this.currentAccount).resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                        ChatActivity.this.hasAllMentionsLocal = true;
                        ChatActivity.this.showMentiondownButton(false, true);
                        TL_messages_readMentions req = new TL_messages_readMentions();
                        req.peer = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputPeer((int) ChatActivity.this.dialog_id);
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new C20071());
                        return true;
                    }
                });
                if (r7.isBroadcast) {
                    r7.mentionContainer = new FrameLayout(context2) {
                        public void onDraw(Canvas canvas) {
                            if (ChatActivity.this.mentionListView.getChildCount() > 0) {
                                int top;
                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                    top = ChatActivity.this.mentionListViewScrollOffsetY + AndroidUtilities.dp(2.0f);
                                    Theme.chat_composeShadowDrawable.setBounds(0, Theme.chat_composeShadowDrawable.getIntrinsicHeight() + top, getMeasuredWidth(), top);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) top, Theme.chat_composeBackgroundPaint);
                                } else {
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                                        top = ChatActivity.this.mentionListViewScrollOffsetY - AndroidUtilities.dp(4.0f);
                                    } else {
                                        top = ChatActivity.this.mentionListViewScrollOffsetY - AndroidUtilities.dp(2.0f);
                                    }
                                    int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight() + top;
                                    Theme.chat_composeShadowDrawable.setBounds(0, top, getMeasuredWidth(), bottom);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                }
                            }
                        }

                        public void requestLayout() {
                            if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                                super.requestLayout();
                            }
                        }
                    };
                    r7.mentionContainer.setVisibility(8);
                    r7.mentionContainer.setWillNotDraw(false);
                    r7.contentView.addView(r7.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
                    r7.mentionListView = new RecyclerListView(context2) {
                        private int lastHeight;
                        private int lastWidth;

                        public boolean onInterceptTouchEvent(MotionEvent event) {
                            boolean z = false;
                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() <= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                    return false;
                                }
                            } else if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() >= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                return false;
                            }
                            boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, ChatActivity.this.mentionListView, 0, null);
                            if (!super.onInterceptTouchEvent(event)) {
                                if (!result) {
                                    return z;
                                }
                            }
                            z = true;
                            return z;
                        }

                        public boolean onTouchEvent(MotionEvent event) {
                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() <= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                    return false;
                                }
                            } else if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() >= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                return false;
                            }
                            return super.onTouchEvent(event);
                        }

                        public void requestLayout() {
                            if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                                super.requestLayout();
                            }
                        }

                        protected void onLayout(boolean changed, int l, int t, int r, int b) {
                            int width = r - l;
                            int height = b - t;
                            int newPosition = -1;
                            int newTop = 0;
                            if (!(ChatActivity.this.mentionLayoutManager.getReverseLayout() || ChatActivity.this.mentionListView == null || ChatActivity.this.mentionListViewLastViewPosition < 0 || width != r6.lastWidth || height - r6.lastHeight == 0)) {
                                newPosition = ChatActivity.this.mentionListViewLastViewPosition;
                                newTop = ((ChatActivity.this.mentionListViewLastViewTop + height) - r6.lastHeight) - getPaddingTop();
                            }
                            int newPosition2 = newPosition;
                            int newTop2 = newTop;
                            super.onLayout(changed, l, t, r, b);
                            if (newPosition2 != -1) {
                                ChatActivity.this.mentionListViewIgnoreLayout = true;
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(newPosition2, newTop2);
                                } else {
                                    ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(newPosition2, newTop2);
                                }
                                super.onLayout(false, l, t, r, b);
                                ChatActivity.this.mentionListViewIgnoreLayout = false;
                            }
                            r6.lastHeight = height;
                            r6.lastWidth = width;
                            ChatActivity.this.mentionListViewUpdateLayout();
                        }
                    };
                    r7.mentionListView.setOnTouchListener(new OnTouchListener() {
                        public boolean onTouch(View v, MotionEvent event) {
                            return StickerPreviewViewer.getInstance().onTouch(event, ChatActivity.this.mentionListView, 0, ChatActivity.this.mentionsOnItemClickListener, null);
                        }
                    });
                    r7.mentionListView.setTag(Integer.valueOf(2));
                    r7.mentionLayoutManager = new LinearLayoutManager(context2) {
                        public boolean supportsPredictiveItemAnimations() {
                            return false;
                        }
                    };
                    r7.mentionLayoutManager.setOrientation(1);
                    r7.mentionGridLayoutManager = new ExtendedGridLayoutManager(context2, 100) {
                        private Size size = new Size();

                        protected Size getSizeForItem(int i) {
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                i++;
                            }
                            BotInlineResult object = ChatActivity.this.mentionsAdapter.getItem(i);
                            if (object instanceof BotInlineResult) {
                                BotInlineResult inlineResult = object;
                                int b = 0;
                                int b2;
                                DocumentAttribute attribute;
                                if (inlineResult.document != null) {
                                    float f = 100.0f;
                                    this.size.width = inlineResult.document.thumb != null ? (float) inlineResult.document.thumb.f43w : 100.0f;
                                    Size size = this.size;
                                    if (inlineResult.document.thumb != null) {
                                        f = (float) inlineResult.document.thumb.f42h;
                                    }
                                    size.height = f;
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.document.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.document.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.f36w;
                                    this.size.height = (float) attribute.f35h;
                                } else if (inlineResult.content != null) {
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.content.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.content.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.f36w;
                                    this.size.height = (float) attribute.f35h;
                                } else if (inlineResult.thumb != null) {
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.content.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.content.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.f36w;
                                    this.size.height = (float) attribute.f35h;
                                }
                            }
                            return this.size;
                        }

                        protected int getFlowItemCount() {
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                return getItemCount() - 1;
                            }
                            return super.getFlowItemCount();
                        }
                    };
                    r7.mentionGridLayoutManager.setSpanSizeLookup(new SpanSizeLookup() {
                        public int getSpanSize(int position) {
                            if (ChatActivity.this.mentionsAdapter.getItem(position) instanceof TL_inlineBotSwitchPM) {
                                return 100;
                            }
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                position--;
                            }
                            return ChatActivity.this.mentionGridLayoutManager.getSpanSizeForItem(position);
                        }
                    });
                    r7.mentionListView.addItemDecoration(new ItemDecoration() {
                        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {
                            int i = 0;
                            outRect.left = 0;
                            outRect.right = 0;
                            outRect.top = 0;
                            outRect.bottom = 0;
                            if (parent.getLayoutManager() == ChatActivity.this.mentionGridLayoutManager) {
                                int position = parent.getChildAdapterPosition(view);
                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                                    outRect.top = AndroidUtilities.dp(2.0f);
                                } else if (position != 0) {
                                    position--;
                                    if (!ChatActivity.this.mentionGridLayoutManager.isFirstRow(position)) {
                                        outRect.top = AndroidUtilities.dp(2.0f);
                                    }
                                } else {
                                    return;
                                }
                                if (!ChatActivity.this.mentionGridLayoutManager.isLastInRow(position)) {
                                    i = AndroidUtilities.dp(2.0f);
                                }
                                outRect.right = i;
                            }
                        }
                    });
                    r7.mentionListView.setItemAnimator(null);
                    r7.mentionListView.setLayoutAnimation(null);
                    r7.mentionListView.setClipToPadding(false);
                    r7.mentionListView.setLayoutManager(r7.mentionLayoutManager);
                    r7.mentionListView.setOverScrollMode(2);
                    r7.mentionContainer.addView(r7.mentionListView, LayoutHelper.createFrame(-1, -1.0f));
                    Adapter adapter = r1;
                    i2 = 46;
                    RecyclerListView recyclerListView2 = r7.mentionListView;
                    Adapter mentionsAdapter2 = new MentionsAdapter(context2, false, r7.dialog_id, new MentionsAdapterDelegate() {

                        /* renamed from: org.telegram.ui.ChatActivity$37$1 */
                        class C10221 extends AnimatorListenerAdapter {
                            C10221() {
                            }

                            public void onAnimationEnd(Animator animation) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                            }

                            public void onAnimationCancel(Animator animation) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                            }
                        }

                        /* renamed from: org.telegram.ui.ChatActivity$37$2 */
                        class C10232 extends AnimatorListenerAdapter {
                            C10232() {
                            }

                            public void onAnimationEnd(Animator animation) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                    ChatActivity.this.mentionContainer.setVisibility(8);
                                    ChatActivity.this.mentionContainer.setTag(null);
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                            }

                            public void onAnimationCancel(Animator animation) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                            }
                        }

                        public void needChangePanelVisibility(boolean show) {
                            if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionGridLayoutManager);
                            } else {
                                ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionLayoutManager);
                            }
                            if (show && ChatActivity.this.bottomOverlay.getVisibility() == 0) {
                                show = false;
                            }
                            if (show) {
                                if (ChatActivity.this.mentionListAnimation != null) {
                                    ChatActivity.this.mentionListAnimation.cancel();
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                                if (ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                    ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                    return;
                                }
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(0, 10000);
                                } else {
                                    ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(0, 10000);
                                }
                                if (ChatActivity.this.allowStickersPanel && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                    if (ChatActivity.this.currentEncryptedChat != null && ChatActivity.this.mentionsAdapter.isBotContext()) {
                                        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                                        if (!preferences.getBoolean("secretbot", false)) {
                                            Builder builder = new Builder(ChatActivity.this.getParentActivity());
                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                            builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", R.string.SecretChatContextBotAlert));
                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                            ChatActivity.this.showDialog(builder.create());
                                            preferences.edit().putBoolean("secretbot", true).commit();
                                        }
                                    }
                                    ChatActivity.this.mentionContainer.setVisibility(0);
                                    ChatActivity.this.mentionContainer.setTag(null);
                                    ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                    ChatActivity.this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, "alpha", new float[]{0.0f, 1.0f})});
                                    ChatActivity.this.mentionListAnimation.addListener(new C10221());
                                    ChatActivity.this.mentionListAnimation.setDuration(200);
                                    ChatActivity.this.mentionListAnimation.start();
                                } else {
                                    ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                    ChatActivity.this.mentionContainer.setVisibility(4);
                                }
                            } else {
                                if (ChatActivity.this.mentionListAnimation != null) {
                                    ChatActivity.this.mentionListAnimation.cancel();
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                                if (ChatActivity.this.mentionContainer.getVisibility() != 8) {
                                    if (ChatActivity.this.allowStickersPanel) {
                                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                        AnimatorSet access$16500 = ChatActivity.this.mentionListAnimation;
                                        Animator[] animatorArr = new Animator[1];
                                        animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, "alpha", new float[]{0.0f});
                                        access$16500.playTogether(animatorArr);
                                        ChatActivity.this.mentionListAnimation.addListener(new C10232());
                                        ChatActivity.this.mentionListAnimation.setDuration(200);
                                        ChatActivity.this.mentionListAnimation.start();
                                    } else {
                                        ChatActivity.this.mentionContainer.setTag(null);
                                        ChatActivity.this.mentionContainer.setVisibility(8);
                                    }
                                }
                            }
                        }

                        public void onContextSearch(boolean searching) {
                            if (ChatActivity.this.chatActivityEnterView != null) {
                                ChatActivity.this.chatActivityEnterView.setCaption(ChatActivity.this.mentionsAdapter.getBotCaption());
                                ChatActivity.this.chatActivityEnterView.showContextProgress(searching);
                            }
                        }

                        public void onContextClick(BotInlineResult result) {
                            if (ChatActivity.this.getParentActivity() != null) {
                                if (result.content != null) {
                                    if (!result.type.equals(MimeTypes.BASE_TYPE_VIDEO)) {
                                        if (!result.type.equals("web_player_video")) {
                                            Browser.openUrl(ChatActivity.this.getParentActivity(), result.content.url);
                                        }
                                    }
                                    int[] size = MessageObject.getInlineResultWidthAndHeight(result);
                                    EmbedBottomSheet.show(ChatActivity.this.getParentActivity(), result.title != null ? result.title : TtmlNode.ANONYMOUS_REGION_ID, result.description, result.content.url, result.content.url, size[0], size[1]);
                                }
                            }
                        }
                    });
                    r7.mentionsAdapter = adapter;
                    recyclerListView2.setAdapter(adapter);
                    if (!ChatObject.isChannel(r7.currentChat) || (r7.currentChat != null && r7.currentChat.megagroup)) {
                        r7.mentionsAdapter.setBotInfo(r7.botInfo);
                    }
                    r7.mentionsAdapter.setParentFragment(r7);
                    r7.mentionsAdapter.setChatInfo(r7.info);
                    r7.mentionsAdapter.setNeedUsernames(r7.currentChat == null);
                    mentionsAdapter = r7.mentionsAdapter;
                    if (r7.currentEncryptedChat != null) {
                        if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= i2) {
                            z = false;
                            mentionsAdapter.setNeedBotContext(z);
                            r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                            recyclerListView = r7.mentionListView;
                            anonymousClass38 = new OnItemClickListener() {
                                public void onItemClick(View view, int position) {
                                    int i = position;
                                    if (!ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                        TLObject object = ChatActivity.this.mentionsAdapter.getItem(i);
                                        int start = ChatActivity.this.mentionsAdapter.getResultStartPosition();
                                        int len = ChatActivity.this.mentionsAdapter.getResultLength();
                                        String name;
                                        if (object instanceof User) {
                                            String from;
                                            StringBuilder stringBuilder;
                                            Spannable spannable;
                                            if (ChatActivity.this.searchingForUser && ChatActivity.this.searchContainer.getVisibility() == 0) {
                                                ChatActivity.this.searchingUserMessages = (User) object;
                                                if (ChatActivity.this.searchingUserMessages != null) {
                                                    name = ChatActivity.this.searchingUserMessages.first_name;
                                                    if (TextUtils.isEmpty(name)) {
                                                        name = ChatActivity.this.searchingUserMessages.last_name;
                                                    }
                                                    ChatActivity.this.searchingForUser = false;
                                                    from = LocaleController.getString("SearchFrom", R.string.SearchFrom);
                                                    stringBuilder = new StringBuilder();
                                                    stringBuilder.append(from);
                                                    stringBuilder.append(" ");
                                                    stringBuilder.append(name);
                                                    spannable = new SpannableString(stringBuilder.toString());
                                                    spannable.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_actionBarDefaultSubtitle)), from.length() + 1, spannable.length(), 33);
                                                    ChatActivity.this.searchItem.setSearchFieldCaption(spannable);
                                                    ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                                                    ChatActivity.this.searchItem.getSearchField().setHint(null);
                                                    ChatActivity.this.searchItem.clearSearchText();
                                                    DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(TtmlNode.ANONYMOUS_REGION_ID, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.searchingUserMessages);
                                                } else {
                                                    return;
                                                }
                                            }
                                            User user = (User) object;
                                            if (user != null) {
                                                if (user.username != null) {
                                                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                    StringBuilder stringBuilder2 = new StringBuilder();
                                                    stringBuilder2.append("@");
                                                    stringBuilder2.append(user.username);
                                                    stringBuilder2.append(" ");
                                                    chatActivityEnterView.replaceWithText(start, len, stringBuilder2.toString(), false);
                                                } else {
                                                    from = UserObject.getFirstName(user);
                                                    stringBuilder = new StringBuilder();
                                                    stringBuilder.append(from);
                                                    stringBuilder.append(" ");
                                                    spannable = new SpannableString(stringBuilder.toString());
                                                    StringBuilder stringBuilder3 = new StringBuilder();
                                                    stringBuilder3.append(TtmlNode.ANONYMOUS_REGION_ID);
                                                    stringBuilder3.append(user.id);
                                                    spannable.setSpan(new URLSpanUserMention(stringBuilder3.toString(), 1), 0, spannable.length(), 33);
                                                    ChatActivity.this.chatActivityEnterView.replaceWithText(start, len, spannable, false);
                                                }
                                            }
                                        } else if (object instanceof String) {
                                            if (ChatActivity.this.mentionsAdapter.isBotCommands()) {
                                                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage((String) object, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, false, null, null, null);
                                                ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                            } else {
                                                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                                StringBuilder stringBuilder4 = new StringBuilder();
                                                stringBuilder4.append(object);
                                                stringBuilder4.append(" ");
                                                chatActivityEnterView2.replaceWithText(start, len, stringBuilder4.toString(), false);
                                            }
                                        } else if (object instanceof BotInlineResult) {
                                            if (ChatActivity.this.chatActivityEnterView.getFieldText() != null) {
                                                BotInlineResult result = (BotInlineResult) object;
                                                if ((!result.type.equals("photo") || (result.photo == null && result.content == null)) && ((!result.type.equals("gif") || (result.document == null && result.content == null)) && (!result.type.equals(MimeTypes.BASE_TYPE_VIDEO) || result.document == null))) {
                                                    ChatActivity.this.sendBotInlineResult(result);
                                                } else {
                                                    ArrayList<Object> arrayList = ChatActivity.this.botContextResults = new ArrayList(ChatActivity.this.mentionsAdapter.getSearchResultBotContext());
                                                    PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, ChatActivity.this.mentionsAdapter.getItemPosition(i), 3, ChatActivity.this.botContextProvider, null);
                                                }
                                            }
                                        } else if (object instanceof TL_inlineBotSwitchPM) {
                                            ChatActivity.this.processInlineBotContextPM((TL_inlineBotSwitchPM) object);
                                        } else if (object instanceof EmojiSuggestion) {
                                            name = ((EmojiSuggestion) object).emoji;
                                            ChatActivity.this.chatActivityEnterView.addEmojiToRecent(name);
                                            ChatActivity.this.chatActivityEnterView.replaceWithText(start, len, name, true);
                                        }
                                    }
                                }
                            };
                            r7.mentionsOnItemClickListener = anonymousClass38;
                            recyclerListView.setOnItemClickListener(anonymousClass38);
                            r7.mentionListView.setOnItemLongClickListener(new OnItemLongClickListener() {

                                /* renamed from: org.telegram.ui.ChatActivity$39$1 */
                                class C10241 implements OnClickListener {
                                    C10241() {
                                    }

                                    public void onClick(DialogInterface dialogInterface, int i) {
                                        ChatActivity.this.mentionsAdapter.clearRecentHashtags();
                                    }
                                }

                                public boolean onItemClick(View view, int position) {
                                    boolean z = false;
                                    if (ChatActivity.this.getParentActivity() != null) {
                                        if (ChatActivity.this.mentionsAdapter.isLongClickEnabled()) {
                                            Object object = ChatActivity.this.mentionsAdapter.getItem(position);
                                            if (!(object instanceof String)) {
                                                return false;
                                            }
                                            if (!ChatActivity.this.mentionsAdapter.isBotCommands()) {
                                                Builder builder = new Builder(ChatActivity.this.getParentActivity());
                                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
                                                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new C10241());
                                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                                ChatActivity.this.showDialog(builder.create());
                                                return true;
                                            } else if (!URLSpanBotCommand.enabled) {
                                                return false;
                                            } else {
                                                ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                                                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                String str = (String) object;
                                                if (ChatActivity.this.currentChat != null && ChatActivity.this.currentChat.megagroup) {
                                                    z = true;
                                                }
                                                chatActivityEnterView.setCommand(null, str, true, z);
                                                return true;
                                            }
                                        }
                                    }
                                    return false;
                                }
                            });
                            r7.mentionListView.setOnScrollListener(new OnScrollListener() {
                                public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                                    ChatActivity chatActivity = ChatActivity.this;
                                    boolean z = true;
                                    if (newState != 1) {
                                        z = false;
                                    }
                                    chatActivity.mentionListViewIsScrolling = z;
                                }

                                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                                    int lastVisibleItem;
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                        lastVisibleItem = ChatActivity.this.mentionGridLayoutManager.findLastVisibleItemPosition();
                                    } else {
                                        lastVisibleItem = ChatActivity.this.mentionLayoutManager.findLastVisibleItemPosition();
                                    }
                                    if ((lastVisibleItem == -1 ? 0 : lastVisibleItem) > 0 && lastVisibleItem > ChatActivity.this.mentionsAdapter.getItemCount() - 5) {
                                        ChatActivity.this.mentionsAdapter.searchForContextBotForNextOffset();
                                    }
                                    ChatActivity.this.mentionListViewUpdateLayout();
                                }
                            });
                        }
                    }
                    z = true;
                    mentionsAdapter.setNeedBotContext(z);
                    if (r7.currentChat == null) {
                    }
                    r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                    recyclerListView = r7.mentionListView;
                    anonymousClass38 = /* anonymous class already generated */;
                    r7.mentionsOnItemClickListener = anonymousClass38;
                    recyclerListView.setOnItemClickListener(anonymousClass38);
                    r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
                    r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
                } else {
                    i2 = 46;
                }
                r7.pagedownButtonImage = new ImageView(context2);
                r7.pagedownButtonImage.setImageResource(R.drawable.pagedown);
                r7.pagedownButtonImage.setScaleType(ScaleType.CENTER);
                r7.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
                r7.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
                shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
                shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
                combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                r7.pagedownButtonImage.setBackgroundDrawable(combinedDrawable);
                r7.pagedownButton.addView(r7.pagedownButtonImage, LayoutHelper.createFrame(i2, i2, 81));
                r7.pagedownButtonCounter = new TextView(context2);
                r7.pagedownButtonCounter.setVisibility(4);
                r7.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.pagedownButtonCounter.setTextSize(1, 13.0f);
                r7.pagedownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
                r7.pagedownButtonCounter.setGravity(17);
                r7.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
                r7.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                r7.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                r7.pagedownButton.addView(r7.pagedownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
                r7.mentiondownButtonImage = new ImageView(context2);
                r7.mentiondownButtonImage.setImageResource(R.drawable.mentionbutton);
                r7.mentiondownButtonImage.setScaleType(ScaleType.CENTER);
                r7.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
                r7.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
                shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
                shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
                combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                r7.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable);
                r7.mentiondownButton.addView(r7.mentiondownButtonImage, LayoutHelper.createFrame(i2, i2, 83));
                r7.mentiondownButtonCounter = new TextView(context2);
                r7.mentiondownButtonCounter.setVisibility(4);
                r7.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.mentiondownButtonCounter.setTextSize(1, 13.0f);
                r7.mentiondownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
                r7.mentiondownButtonCounter.setGravity(17);
                r7.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
                r7.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                r7.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                r7.mentiondownButton.addView(r7.mentiondownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
                if (!AndroidUtilities.isTablet() || AndroidUtilities.isSmallTablet()) {
                    sizeNotifierFrameLayout = r7.contentView;
                    fragmentContextView = new FragmentContextView(context2, r7, true);
                    r7.fragmentLocationContextView = fragmentContextView;
                    sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    sizeNotifierFrameLayout = r7.contentView;
                    fragmentContextView = new FragmentContextView(context2, r7, false);
                    r7.fragmentContextView = fragmentContextView;
                    sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    r7.fragmentContextView.setAdditionalContextView(r7.fragmentLocationContextView);
                    r7.fragmentLocationContextView.setAdditionalContextView(r7.fragmentContextView);
                }
                r7.contentView.addView(r7.actionBar);
                r7.overlayView = new View(context2);
                r7.overlayView.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        if (event.getAction() == 0) {
                            ChatActivity.this.checkRecordLocked();
                        }
                        ChatActivity.this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
                        return true;
                    }
                });
                r7.contentView.addView(r7.overlayView, LayoutHelper.createFrame(-1, -1, 51));
                r7.overlayView.setVisibility(8);
                r7.instantCameraView = new InstantCameraView(context2, r7);
                r7.contentView.addView(r7.instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
                r7.chatActivityEnterView = new ChatActivityEnterView(getParentActivity(), r7.contentView, r7, true);
                r7.chatActivityEnterView.setDialogId(r7.dialog_id, r7.currentAccount);
                r7.chatActivityEnterView.setId(id_chat_compose_panel);
                r7.chatActivityEnterView.setBotsCount(r7.botsCount, r7.hasBotsCommands);
                chatActivityEnterView = r7.chatActivityEnterView;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= edit) {
                        z2 = false;
                        if (r7.currentEncryptedChat != null) {
                            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                                z3 = false;
                                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                                r7.chatActivityEnterView.setDelegate(new ChatActivityEnterViewDelegate() {
                                    public void onMessageSend(CharSequence message) {
                                        ChatActivity.this.moveScrollToLastMessage();
                                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                        if (ChatActivity.this.mentionsAdapter != null) {
                                            ChatActivity.this.mentionsAdapter.addHashtagsFromMessage(message);
                                        }
                                    }

                                    public void onSwitchRecordMode(boolean video) {
                                        ChatActivity.this.showVoiceHint(false, video);
                                    }

                                    public void onPreAudioVideoRecord() {
                                        ChatActivity.this.showVoiceHint(true, false);
                                    }

                                    public void onTextChanged(final CharSequence text, boolean bigChange) {
                                        boolean z;
                                        if (ChatActivity.this.startReplyOnTextChange && text.length() > 0) {
                                            ChatActivity.this.actionBar.getActionBarMenuOnItemClick().onItemClick(19);
                                            ChatActivity.this.startReplyOnTextChange = false;
                                        }
                                        MediaController instance = MediaController.getInstance();
                                        if (TextUtils.isEmpty(text)) {
                                            if (!ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
                                                z = false;
                                                instance.setInputFieldHasText(z);
                                                if (!(ChatActivity.this.stickersAdapter == null || ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatObject.canSendStickers(ChatActivity.this.currentChat))) {
                                                    ChatActivity.this.stickersAdapter.loadStikersForEmoji(text);
                                                }
                                                if (ChatActivity.this.mentionsAdapter != null) {
                                                    ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(text.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
                                                }
                                                if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                                                    AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                                                    ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                                }
                                                if (ChatObject.canSendEmbed(ChatActivity.this.currentChat) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled()) {
                                                    if (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption()) {
                                                        if (bigChange) {
                                                            ChatActivity.this.searchLinks(text, true);
                                                            return;
                                                        }
                                                        ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() {
                                                            public void run() {
                                                                if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                                                    ChatActivity.this.searchLinks(text, false);
                                                                    ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                                                }
                                                            }
                                                        };
                                                        AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000 : 1000);
                                                        return;
                                                    }
                                                    return;
                                                }
                                            }
                                        }
                                        z = true;
                                        instance.setInputFieldHasText(z);
                                        ChatActivity.this.stickersAdapter.loadStikersForEmoji(text);
                                        if (ChatActivity.this.mentionsAdapter != null) {
                                            ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(text.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
                                        }
                                        if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                                            AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                                            ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                        }
                                        if (ChatObject.canSendEmbed(ChatActivity.this.currentChat)) {
                                        }
                                    }

                                    public void needSendTyping() {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).sendTyping(ChatActivity.this.dialog_id, 0, ChatActivity.this.classGuid);
                                    }

                                    public void onAttachButtonHidden() {
                                        if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                            if (ChatActivity.this.attachItem != null) {
                                                ChatActivity.this.attachItem.setVisibility(0);
                                            }
                                            if (ChatActivity.this.headerItem != null) {
                                                ChatActivity.this.headerItem.setVisibility(8);
                                            }
                                        }
                                    }

                                    public void onAttachButtonShow() {
                                        if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                            if (ChatActivity.this.attachItem != null) {
                                                ChatActivity.this.attachItem.setVisibility(8);
                                            }
                                            if (ChatActivity.this.headerItem != null) {
                                                ChatActivity.this.headerItem.setVisibility(0);
                                            }
                                        }
                                    }

                                    public void onMessageEditEnd(boolean loading) {
                                        if (!loading) {
                                            boolean z;
                                            ChatActivityEnterView chatActivityEnterView;
                                            boolean z2;
                                            MentionsAdapter access$4900 = ChatActivity.this.mentionsAdapter;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                    z = false;
                                                    access$4900.setNeedBotContext(z);
                                                    ChatActivity.this.chatListView.setOnItemLongClickListener(ChatActivity.this.onItemLongClickListener);
                                                    ChatActivity.this.chatListView.setOnItemClickListener(ChatActivity.this.onItemClickListener);
                                                    ChatActivity.this.chatListView.setClickable(true);
                                                    ChatActivity.this.chatListView.setLongClickable(true);
                                                    ChatActivity.this.actionModeTitleContainer.setVisibility(8);
                                                    ChatActivity.this.selectedMessagesCountTextView.setVisibility(0);
                                                    chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= ChatActivity.edit) {
                                                            z = false;
                                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                                    z2 = false;
                                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                                    }
                                                                    ChatActivity.this.actionBar.hideActionMode();
                                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                                    ChatActivity.this.updateBottomOverlay();
                                                                    ChatActivity.this.updateVisibleRows();
                                                                }
                                                            }
                                                            z2 = true;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z = true;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                            z2 = false;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z2 = true;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z = true;
                                            access$4900.setNeedBotContext(z);
                                            ChatActivity.this.chatListView.setOnItemLongClickListener(ChatActivity.this.onItemLongClickListener);
                                            ChatActivity.this.chatListView.setOnItemClickListener(ChatActivity.this.onItemClickListener);
                                            ChatActivity.this.chatListView.setClickable(true);
                                            ChatActivity.this.chatListView.setLongClickable(true);
                                            ChatActivity.this.actionModeTitleContainer.setVisibility(8);
                                            ChatActivity.this.selectedMessagesCountTextView.setVisibility(0);
                                            chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= ChatActivity.edit) {
                                                    z = false;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                            z2 = false;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z2 = true;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z = true;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                    z2 = false;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z2 = true;
                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                            }
                                            ChatActivity.this.actionBar.hideActionMode();
                                            ChatActivity.this.updatePinnedMessageView(true);
                                            ChatActivity.this.updateBottomOverlay();
                                            ChatActivity.this.updateVisibleRows();
                                        }
                                    }

                                    public void onWindowSizeChanged(int size) {
                                        if (size < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                                            ChatActivity.this.allowStickersPanel = false;
                                            if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                                                ChatActivity.this.stickersPanel.setVisibility(4);
                                            }
                                            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                                ChatActivity.this.mentionContainer.setVisibility(4);
                                            }
                                        } else {
                                            ChatActivity.this.allowStickersPanel = true;
                                            if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                                                ChatActivity.this.stickersPanel.setVisibility(0);
                                            }
                                            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 4 && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                                ChatActivity.this.mentionContainer.setVisibility(0);
                                                ChatActivity.this.mentionContainer.setTag(null);
                                            }
                                        }
                                        ChatActivity.this.allowContextBotPanel = true ^ ChatActivity.this.chatActivityEnterView.isPopupShowing();
                                        ChatActivity.this.checkContextBotPanel();
                                    }

                                    public void onStickersTab(boolean opened) {
                                        if (ChatActivity.this.emojiButtonRed != null) {
                                            ChatActivity.this.emojiButtonRed.setVisibility(8);
                                        }
                                        ChatActivity.this.allowContextBotPanelSecond = opened ^ 1;
                                        ChatActivity.this.checkContextBotPanel();
                                    }

                                    public void didPressedAttachButton() {
                                        ChatActivity.this.openAttachMenu();
                                    }

                                    public void needStartRecordVideo(int state) {
                                        if (ChatActivity.this.instantCameraView == null) {
                                            return;
                                        }
                                        if (state == 0) {
                                            ChatActivity.this.instantCameraView.showCamera();
                                            return;
                                        }
                                        if (!(state == 1 || state == 3)) {
                                            if (state != 4) {
                                                if (state == 2) {
                                                    ChatActivity.this.instantCameraView.cancel();
                                                    return;
                                                }
                                                return;
                                            }
                                        }
                                        ChatActivity.this.instantCameraView.send(state);
                                    }

                                    public void needChangeVideoPreviewState(int state, float seekProgress) {
                                        if (ChatActivity.this.instantCameraView != null) {
                                            ChatActivity.this.instantCameraView.changeVideoPreviewState(state, seekProgress);
                                        }
                                    }

                                    public void needStartRecordAudio(int state) {
                                        ChatActivity.this.overlayView.setVisibility(state == 0 ? 8 : 0);
                                    }

                                    public void needShowMediaBanHint() {
                                        ChatActivity.this.showMediaBannedHint();
                                    }

                                    public void onStickersExpandedChange() {
                                        ChatActivity.this.checkRaiseSensors();
                                    }
                                });
                                replyLayout = new FrameLayout(context2) {
                                    public void setTranslationY(float translationY) {
                                        super.setTranslationY(translationY);
                                        if (ChatActivity.this.chatActivityEnterView != null) {
                                            ChatActivity.this.chatActivityEnterView.invalidate();
                                        }
                                        if (getVisibility() != 8) {
                                            int height = getLayoutParams().height;
                                            if (ChatActivity.this.chatListView != null) {
                                                ChatActivity.this.chatListView.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.progressView != null) {
                                                ChatActivity.this.progressView.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.mentionContainer != null) {
                                                ChatActivity.this.mentionContainer.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.pagedownButton != null) {
                                                ChatActivity.this.pagedownButton.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.mentiondownButton != null) {
                                                ChatActivity.this.mentiondownButton.setTranslationY(ChatActivity.this.pagedownButton.getVisibility() != 0 ? translationY : translationY - ((float) AndroidUtilities.dp(72.0f)));
                                            }
                                        }
                                    }

                                    public boolean hasOverlappingRendering() {
                                        return false;
                                    }

                                    public void setVisibility(int visibility) {
                                        super.setVisibility(visibility);
                                        if (visibility == 8) {
                                            float f = 0.0f;
                                            if (ChatActivity.this.chatListView != null) {
                                                ChatActivity.this.chatListView.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.progressView != null) {
                                                ChatActivity.this.progressView.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.mentionContainer != null) {
                                                ChatActivity.this.mentionContainer.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.pagedownButton != null) {
                                                FrameLayout access$9600 = ChatActivity.this.pagedownButton;
                                                if (ChatActivity.this.pagedownButton.getTag() == null) {
                                                    f = (float) AndroidUtilities.dp(100.0f);
                                                }
                                                access$9600.setTranslationY(f);
                                            }
                                            if (ChatActivity.this.mentiondownButton != null) {
                                                ChatActivity.this.mentiondownButton.setTranslationY((float) (ChatActivity.this.mentiondownButton.getTag() == null ? AndroidUtilities.dp(100.0f) : ChatActivity.this.pagedownButton.getVisibility() == 0 ? -AndroidUtilities.dp(72.0f) : 0));
                                            }
                                        }
                                    }
                                };
                                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                                replyLayout.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View v) {
                                        if (ChatActivity.this.replyingMessageObject != null) {
                                            ChatActivity.this.scrollToMessageId(ChatActivity.this.replyingMessageObject.getId(), 0, true, 0, false);
                                        }
                                    }
                                });
                                r7.replyLineView = new View(context2);
                                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                                r7.replyIconImageView = new ImageView(context2);
                                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                                r7.replyCloseImageView = new ImageView(context2);
                                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                                r7.replyCloseImageView.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View v) {
                                        if (ChatActivity.this.forwardingMessages != null) {
                                            ChatActivity.this.forwardingMessages.clear();
                                        }
                                        ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, true);
                                    }
                                });
                                r7.replyNameTextView = new SimpleTextView(context2);
                                r7.replyNameTextView.setTextSize(14);
                                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                                r7.replyObjectTextView = new SimpleTextView(context2);
                                r7.replyObjectTextView.setTextSize(14);
                                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                                r7.replyImageView = new BackupImageView(context2);
                                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                                r7.stickersPanel = new FrameLayout(context2);
                                r7.stickersPanel.setVisibility(8);
                                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                                stickerPreviewViewerDelegate = new StickerPreviewViewerDelegate() {
                                    public void sendSticker(Document sticker) {
                                    }

                                    public boolean needSend() {
                                        return false;
                                    }

                                    public void openSet(InputStickerSet set) {
                                        if (set != null && ChatActivity.this.getParentActivity() != null) {
                                            InputStickerSet inputStickerSet = new TL_inputStickerSetID();
                                            inputStickerSet.access_hash = set.access_hash;
                                            inputStickerSet.id = set.id;
                                            ChatActivity.this.showDialog(new StickersAlert(ChatActivity.this.getParentActivity(), ChatActivity.this, inputStickerSet, null, ChatActivity.this.chatActivityEnterView));
                                        }
                                    }
                                };
                                r7.stickersListView = new RecyclerListView(context2) {
                                    public boolean onInterceptTouchEvent(MotionEvent event) {
                                        boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, ChatActivity.this.stickersListView, 0, stickerPreviewViewerDelegate);
                                        if (!super.onInterceptTouchEvent(event)) {
                                            if (!result) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }
                                };
                                r7.stickersListView.setTag(Integer.valueOf(3));
                                r7.stickersListView.setOnTouchListener(new OnTouchListener() {
                                    public boolean onTouch(View v, MotionEvent event) {
                                        return StickerPreviewViewer.getInstance().onTouch(event, ChatActivity.this.stickersListView, 0, ChatActivity.this.stickersOnItemClickListener, stickerPreviewViewerDelegate);
                                    }
                                });
                                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                                layoutManager = new LinearLayoutManager(context2);
                                layoutManager.setOrientation(0);
                                r7.stickersListView.setLayoutManager(layoutManager);
                                r7.stickersListView.setClipToPadding(false);
                                r7.stickersListView.setOverScrollMode(2);
                                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                                initStickers();
                                r7.stickersPanelArrow = new ImageView(context2);
                                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                                r7.searchContainer = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.searchContainer.setOnTouchListener(new OnTouchListener() {
                                    public boolean onTouch(View v, MotionEvent event) {
                                        return true;
                                    }
                                });
                                r7.searchContainer.setWillNotDraw(false);
                                r7.searchContainer.setVisibility(4);
                                r7.searchContainer.setFocusable(true);
                                r7.searchContainer.setFocusableInTouchMode(true);
                                r7.searchContainer.setClickable(true);
                                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                                r7.searchUpButton = new ImageView(context2);
                                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                                r7.searchUpButton.setImageResource(R.drawable.search_up);
                                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                                r7.searchUpButton.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View view) {
                                        DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(null, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 1, ChatActivity.this.searchingUserMessages);
                                    }
                                });
                                r7.searchDownButton = new ImageView(context2);
                                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                                r7.searchDownButton.setImageResource(R.drawable.search_down);
                                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                                r7.searchDownButton.setOnClickListener(new View.OnClickListener() {
                                    public void onClick(View view) {
                                        DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(null, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 2, ChatActivity.this.searchingUserMessages);
                                    }
                                });
                                if (r7.currentChat != null && (!ChatObject.isChannel(r7.currentChat) || r7.currentChat.megagroup)) {
                                    r7.searchUserButton = new ImageView(context2);
                                    r7.searchUserButton.setScaleType(ScaleType.CENTER);
                                    r7.searchUserButton.setImageResource(R.drawable.usersearch);
                                    r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                    r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                                    r7.searchUserButton.setOnClickListener(new View.OnClickListener() {
                                        public void onClick(View view) {
                                            ChatActivity.this.mentionLayoutManager.setReverseLayout(true);
                                            ChatActivity.this.mentionsAdapter.setSearchingMentions(true);
                                            ChatActivity.this.searchCalendarButton.setVisibility(8);
                                            ChatActivity.this.searchUserButton.setVisibility(8);
                                            ChatActivity.this.searchingForUser = true;
                                            ChatActivity.this.searchingUserMessages = null;
                                            ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("SearchMembers", R.string.SearchMembers));
                                            ChatActivity.this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", R.string.SearchFrom));
                                            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
                                            ChatActivity.this.searchItem.clearSearchText();
                                        }
                                    });
                                }
                                r7.searchCalendarButton = new ImageView(context2);
                                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                                r7.searchCalendarButton.setOnClickListener(new View.OnClickListener() {

                                    /* renamed from: org.telegram.ui.ChatActivity$54$1 */
                                    class C10261 implements OnDateSetListener {
                                        C10261() {
                                        }

                                        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                                            Calendar calendar = Calendar.getInstance();
                                            calendar.clear();
                                            calendar.set(year, month, dayOfMonth);
                                            int date = (int) (calendar.getTime().getTime() / 1000);
                                            ChatActivity.this.clearChatData();
                                            ChatActivity.this.waitingForLoad.add(Integer.valueOf(ChatActivity.this.lastLoadIndex));
                                            MessagesController.getInstance(ChatActivity.this.currentAccount).loadMessages(ChatActivity.this.dialog_id, ChatActivity.bot_help, 0, date, true, 0, ChatActivity.this.classGuid, 4, 0, ChatObject.isChannel(ChatActivity.this.currentChat), ChatActivity.this.lastLoadIndex = ChatActivity.this.lastLoadIndex + 1);
                                        }
                                    }

                                    /* renamed from: org.telegram.ui.ChatActivity$54$2 */
                                    class C10272 implements OnClickListener {
                                        C10272() {
                                        }

                                        public void onClick(DialogInterface dialog, int which) {
                                        }
                                    }

                                    public void onClick(View view) {
                                        if (ChatActivity.this.getParentActivity() != null) {
                                            AndroidUtilities.hideKeyboard(ChatActivity.this.searchItem.getSearchField());
                                            Calendar calendar = Calendar.getInstance();
                                            try {
                                                DatePickerDialog dialog = new DatePickerDialog(ChatActivity.this.getParentActivity(), new C10261(), calendar.get(1), calendar.get(2), calendar.get(5));
                                                final DatePicker datePicker = dialog.getDatePicker();
                                                datePicker.setMinDate(1375315200000L);
                                                datePicker.setMaxDate(System.currentTimeMillis());
                                                dialog.setButton(-1, LocaleController.getString("JumpToDate", R.string.JumpToDate), dialog);
                                                dialog.setButton(-2, LocaleController.getString("Cancel", R.string.Cancel), new C10272());
                                                if (VERSION.SDK_INT >= 21) {
                                                    dialog.setOnShowListener(new OnShowListener() {
                                                        public void onShow(DialogInterface dialog) {
                                                            int count = datePicker.getChildCount();
                                                            for (int a = 0; a < count; a++) {
                                                                View child = datePicker.getChildAt(a);
                                                                ViewGroup.LayoutParams layoutParams = child.getLayoutParams();
                                                                layoutParams.width = -1;
                                                                child.setLayoutParams(layoutParams);
                                                            }
                                                        }
                                                    });
                                                }
                                                ChatActivity.this.showDialog(dialog);
                                            } catch (Throwable e) {
                                                FileLog.m3e(e);
                                            }
                                        }
                                    }
                                });
                                r7.searchCountText = new SimpleTextView(context2);
                                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                                r7.searchCountText.setTextSize(15);
                                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                r7.searchCountText.setGravity(5);
                                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                                r7.bottomOverlay = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.bottomOverlay.setWillNotDraw(false);
                                r7.bottomOverlay.setVisibility(4);
                                r7.bottomOverlay.setFocusable(true);
                                r7.bottomOverlay.setFocusableInTouchMode(true);
                                r7.bottomOverlay.setClickable(true);
                                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                                r7.bottomOverlayText = new TextView(context2);
                                r7.bottomOverlayText.setTextSize(1, 14.0f);
                                r7.bottomOverlayText.setGravity(17);
                                r7.bottomOverlayText.setMaxLines(2);
                                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                                r7.bottomOverlayChat = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.bottomOverlayChat.setWillNotDraw(false);
                                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                                r7.bottomOverlayChat.setVisibility(4);
                                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                                r7.bottomOverlayChat.setOnClickListener(new View.OnClickListener() {

                                    /* renamed from: org.telegram.ui.ChatActivity$57$1 */
                                    class C10291 implements OnClickListener {
                                        C10291() {
                                        }

                                        public void onClick(DialogInterface dialogInterface, int i) {
                                            MessagesController.getInstance(ChatActivity.this.currentAccount).unblockUser(ChatActivity.this.currentUser.id);
                                        }
                                    }

                                    /* renamed from: org.telegram.ui.ChatActivity$57$2 */
                                    class C10302 implements OnClickListener {
                                        C10302() {
                                        }

                                        public void onClick(DialogInterface dialogInterface, int i) {
                                            MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                            ChatActivity.this.finishFragment();
                                        }
                                    }

                                    public void onClick(View view) {
                                        if (ChatActivity.this.getParentActivity() != null) {
                                            Builder builder = null;
                                            if (ChatActivity.this.currentUser == null || !ChatActivity.this.userBlocked) {
                                                if (ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot && ChatActivity.this.botUser != null) {
                                                    if (ChatActivity.this.botUser.length() != 0) {
                                                        MessagesController.getInstance(ChatActivity.this.currentAccount).sendBotStart(ChatActivity.this.currentUser, ChatActivity.this.botUser);
                                                    } else {
                                                        SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/start", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                                    }
                                                    ChatActivity.this.botUser = null;
                                                    ChatActivity.this.updateBottomOverlay();
                                                } else if (!ChatObject.isChannel(ChatActivity.this.currentChat) || (ChatActivity.this.currentChat instanceof TL_channelForbidden)) {
                                                    builder = new Builder(ChatActivity.this.getParentActivity());
                                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
                                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new C10302());
                                                } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).addUserToChat(ChatActivity.this.currentChat.id, UserConfig.getInstance(ChatActivity.this.currentAccount).getCurrentUser(), null, 0, null, ChatActivity.this);
                                                } else {
                                                    ChatActivity.this.toggleMute(true);
                                                }
                                            } else if (ChatActivity.this.currentUser.bot) {
                                                String botUserLast = ChatActivity.this.botUser;
                                                ChatActivity.this.botUser = null;
                                                MessagesController.getInstance(ChatActivity.this.currentAccount).unblockUser(ChatActivity.this.currentUser.id);
                                                if (botUserLast == null || botUserLast.length() == 0) {
                                                    SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/start", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                                } else {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).sendBotStart(ChatActivity.this.currentUser, botUserLast);
                                                }
                                            } else {
                                                builder = new Builder(ChatActivity.this.getParentActivity());
                                                builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
                                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new C10291());
                                            }
                                            if (builder != null) {
                                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                                ChatActivity.this.showDialog(builder.create());
                                            }
                                        }
                                    }
                                });
                                r7.bottomOverlayChatText = new TextView(context2);
                                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                                r7.chatAdapter.updateRows();
                                if (r7.loading || !r7.messages.isEmpty()) {
                                    r7.progressView.setVisibility(4);
                                    r7.chatListView.setEmptyView(r7.emptyViewContainer);
                                } else {
                                    r7.progressView.setVisibility(r7.chatAdapter.botInfoRow == -1 ? 0 : 4);
                                    r7.chatListView.setEmptyView(null);
                                }
                                checkBotKeyboard();
                                updateContactStatus();
                                updateBottomOverlay();
                                updateSecretStatus();
                                updateSpamView();
                                updatePinnedMessageView(true);
                                if (r7.currentEncryptedChat != null && VERSION.SDK_INT >= edit && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                                    MediaController.getInstance().setFlagSecure(r7, true);
                                }
                                oldMessage2 = oldMessage3;
                                if (oldMessage2 != null) {
                                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                                }
                                fixLayoutInternal();
                                return r7.fragmentView;
                            }
                        }
                        z3 = true;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z2 = true;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                        z3 = false;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z3 = true;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        r7.muteItem = r7.headerItem.addSubItem(18, null);
        r7.headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
        r7.headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
        updateBotButtons();
        updateTitle();
        r7.avatarContainer.updateOnlineCount();
        r7.avatarContainer.updateSubtitle();
        updateTitleIcons();
        r7.attachItem = menu.addItem(14, (int) R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
        r7.attachItem.setVisibility(8);
        r7.actionModeViews.clear();
        actionMode = r7.actionBar.createActionMode();
        r7.selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
        r7.selectedMessagesCountTextView.setTextSize(18);
        r7.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.selectedMessagesCountTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        actionMode.addView(r7.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        r7.selectedMessagesCountTextView.setOnTouchListener(/* anonymous class already generated */);
        r7.actionModeTitleContainer = /* anonymous class already generated */;
        actionMode.addView(r7.actionModeTitleContainer, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        r7.actionModeTitleContainer.setOnTouchListener(/* anonymous class already generated */);
        r7.actionModeTitleContainer.setVisibility(8);
        r7.actionModeTextView = new SimpleTextView(context2);
        r7.actionModeTextView.setTextSize(18);
        r7.actionModeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.actionModeTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        r7.actionModeTextView.setText(LocaleController.getString("Edit", R.string.Edit));
        r7.actionModeTitleContainer.addView(r7.actionModeTextView, LayoutHelper.createFrame(-1, -1.0f));
        r7.actionModeSubTextView = new SimpleTextView(context2);
        r7.actionModeSubTextView.setGravity(3);
        r7.actionModeSubTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        r7.actionModeTitleContainer.addView(r7.actionModeSubTextView, LayoutHelper.createFrame(-1, -1.0f));
        if (r7.currentEncryptedChat != null) {
            r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
        } else {
            r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
            if (r7.isBroadcast) {
                r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
            }
            r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(11, R.drawable.ic_ab_forward, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
        }
        item = actionMode.getItem(edit);
        if (r7.canEditMessagesCount == 1) {
        }
        item.setVisibility(i);
        if (r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0) {
        }
        actionMode.getItem(10).setVisibility(r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0 ? 0 : 8);
        if (r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0) {
        }
        actionMode.getItem(22).setVisibility(r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0 ? 0 : 8);
        if (r7.cantDeleteMessagesCount != 0) {
        }
        actionMode.getItem(12).setVisibility(r7.cantDeleteMessagesCount != 0 ? 0 : 8);
        checkActionBarMenu();
        r7.fragmentView = /* anonymous class already generated */;
        r7.contentView = (SizeNotifierFrameLayout) r7.fragmentView;
        r7.contentView.setBackgroundImage(Theme.getCachedWallpaper());
        r7.emptyViewContainer = new FrameLayout(context2);
        r7.emptyViewContainer.setVisibility(4);
        r7.contentView.addView(r7.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
        r7.emptyViewContainer.setOnTouchListener(/* anonymous class already generated */);
        if (r7.currentEncryptedChat == null) {
            r7.bigEmptyView = new ChatBigEmptyView(context2, true);
            if (r7.currentEncryptedChat.admin_id != UserConfig.getInstance(r7.currentAccount).getClientUserId()) {
                r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(r7.currentUser)));
            } else {
                r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(r7.currentUser)));
            }
            r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        } else {
            if (r7.currentUser == null) {
            }
            r7.emptyView = new TextView(context2);
            if (r7.currentUser != null) {
            }
            r7.emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
            r7.emptyView.setTextSize(1, 14.0f);
            r7.emptyView.setGravity(17);
            r7.emptyView.setTextColor(Theme.getColor(Theme.key_chat_serviceText));
            r7.emptyView.setBackgroundResource(R.drawable.system);
            r7.emptyView.getBackground().setColorFilter(Theme.colorFilter);
            r7.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            r7.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
            r7.emptyViewContainer.addView(r7.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        }
        if (r7.chatActivityEnterView == null) {
            oldMessage = null;
        } else {
            r7.chatActivityEnterView.onDestroy();
            if (r7.chatActivityEnterView.isEditingMessage()) {
                oldMessage = null;
            } else {
                oldMessage = r7.chatActivityEnterView.getFieldText();
            }
        }
        oldMessage2 = oldMessage;
        if (r7.mentionsAdapter != null) {
            r7.mentionsAdapter.onDestroy();
        }
        r7.chatListView = /* anonymous class already generated */;
        r7.chatListView.setTag(Integer.valueOf(1));
        r7.chatListView.setVerticalScrollBarEnabled(true);
        recyclerListView = r7.chatListView;
        chatActivityAdapter = new ChatActivityAdapter(context2);
        r7.chatAdapter = chatActivityAdapter;
        recyclerListView.setAdapter(chatActivityAdapter);
        r7.chatListView.setClipToPadding(false);
        r7.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
        r7.chatListView.setItemAnimator(null);
        r7.chatListView.setLayoutAnimation(null);
        gridLayoutManagerFixed = anonymousClass17;
        oldMessage3 = oldMessage2;
        anonymousClass17 = /* anonymous class already generated */;
        r7.chatLayoutManager = gridLayoutManagerFixed;
        r7.chatLayoutManager.setSpanSizeLookup(/* anonymous class already generated */);
        r7.chatListView.setLayoutManager(r7.chatLayoutManager);
        r7.chatListView.addItemDecoration(/* anonymous class already generated */);
        r7.contentView.addView(r7.chatListView, LayoutHelper.createFrame(-1, -1.0f));
        r7.chatListView.setOnItemLongClickListener(r7.onItemLongClickListener);
        r7.chatListView.setOnItemClickListener(r7.onItemClickListener);
        r7.chatListView.setOnScrollListener(/* anonymous class already generated */);
        r7.progressView = new FrameLayout(context2);
        r7.progressView.setVisibility(4);
        r7.contentView.addView(r7.progressView, LayoutHelper.createFrame(-1, -1, 51));
        r7.progressView2 = new View(context2);
        r7.progressView2.setBackgroundResource(R.drawable.system_loader);
        r7.progressView2.getBackground().setColorFilter(Theme.colorFilter);
        r7.progressView.addView(r7.progressView2, LayoutHelper.createFrame(36, 36, 17));
        r7.progressBar = new RadialProgressView(context2);
        r7.progressBar.setSize(AndroidUtilities.dp(28.0f));
        r7.progressBar.setProgressColor(Theme.getColor(Theme.key_chat_serviceText));
        r7.progressView.addView(r7.progressBar, LayoutHelper.createFrame(32, 32, 17));
        r7.floatingDateView = new ChatActionCell(context2);
        r7.floatingDateView.setAlpha(0.0f);
        r7.contentView.addView(r7.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
        r7.floatingDateView.setOnClickListener(/* anonymous class already generated */);
        if (ChatObject.isChannel(r7.currentChat)) {
            r7.pinnedMessageView = new FrameLayout(context2);
            r7.pinnedMessageView.setTag(Integer.valueOf(1));
            r7.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
            r7.pinnedMessageView.setVisibility(8);
            r7.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
            r7.pinnedMessageView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
            r7.contentView.addView(r7.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
            r7.pinnedMessageView.setOnClickListener(/* anonymous class already generated */);
            r7.pinnedLineView = new View(context2);
            r7.pinnedLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_topPanelLine));
            r7.pinnedMessageView.addView(r7.pinnedLineView, LayoutHelper.createFrame(2, 32.0f, 51, 8.0f, 8.0f, 0.0f, 0.0f));
            r7.pinnedMessageImageView = new BackupImageView(context2);
            r7.pinnedMessageView.addView(r7.pinnedMessageImageView, LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
            r7.pinnedMessageNameTextView = new SimpleTextView(context2);
            r7.pinnedMessageNameTextView.setTextSize(14);
            r7.pinnedMessageNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
            r7.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            r7.pinnedMessageView.addView(r7.pinnedMessageNameTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 7.3f, 52.0f, 0.0f));
            r7.pinnedMessageTextView = new SimpleTextView(context2);
            r7.pinnedMessageTextView.setTextSize(14);
            r7.pinnedMessageTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
            r7.pinnedMessageView.addView(r7.pinnedMessageTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 25.3f, 52.0f, 0.0f));
            r7.closePinned = new ImageView(context2);
            r7.closePinned.setImageResource(R.drawable.miniplayer_close);
            r7.closePinned.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
            r7.closePinned.setScaleType(ScaleType.CENTER);
            r7.pinnedMessageView.addView(r7.closePinned, LayoutHelper.createFrame(48, 48, 53));
            r7.closePinned.setOnClickListener(/* anonymous class already generated */);
        }
        r7.reportSpamView = new LinearLayout(context2);
        r7.reportSpamView.setTag(Integer.valueOf(1));
        r7.reportSpamView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
        r7.reportSpamView.setVisibility(8);
        r7.reportSpamView.setBackgroundResource(R.drawable.blockpanel);
        r7.reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
        r7.contentView.addView(r7.reportSpamView, LayoutHelper.createFrame(-1, 50, 51));
        r7.addToContactsButton = new TextView(context2);
        r7.addToContactsButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
        r7.addToContactsButton.setVisibility(8);
        r7.addToContactsButton.setTextSize(1, 14.0f);
        r7.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.addToContactsButton.setSingleLine(true);
        r7.addToContactsButton.setMaxLines(1);
        r7.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        r7.addToContactsButton.setGravity(17);
        r7.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
        r7.reportSpamView.addView(r7.addToContactsButton, LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
        r7.addToContactsButton.setOnClickListener(/* anonymous class already generated */);
        r7.reportSpamContainer = new FrameLayout(context2);
        r7.reportSpamView.addView(r7.reportSpamContainer, LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
        r7.reportSpamButton = new TextView(context2);
        r7.reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
        r7.reportSpamButton.setTextSize(1, 14.0f);
        r7.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.reportSpamButton.setSingleLine(true);
        r7.reportSpamButton.setMaxLines(1);
        if (r7.currentChat == null) {
            r7.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
        } else {
            r7.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
        }
        r7.reportSpamButton.setGravity(17);
        r7.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
        r7.reportSpamContainer.addView(r7.reportSpamButton, LayoutHelper.createFrame(-1, -1, 51));
        r7.reportSpamButton.setOnClickListener(/* anonymous class already generated */);
        r7.closeReportSpam = new ImageView(context2);
        r7.closeReportSpam.setImageResource(R.drawable.miniplayer_close);
        r7.closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
        r7.closeReportSpam.setScaleType(ScaleType.CENTER);
        r7.reportSpamContainer.addView(r7.closeReportSpam, LayoutHelper.createFrame(48, 48, 53));
        r7.closeReportSpam.setOnClickListener(/* anonymous class already generated */);
        r7.alertView = new FrameLayout(context2);
        r7.alertView.setTag(Integer.valueOf(1));
        r7.alertView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
        r7.alertView.setVisibility(8);
        r7.alertView.setBackgroundResource(R.drawable.blockpanel);
        r7.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
        r7.contentView.addView(r7.alertView, LayoutHelper.createFrame(-1, 50, 51));
        r7.alertNameTextView = new TextView(context2);
        r7.alertNameTextView.setTextSize(1, 14.0f);
        r7.alertNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
        r7.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.alertNameTextView.setSingleLine(true);
        r7.alertNameTextView.setEllipsize(TruncateAt.END);
        r7.alertNameTextView.setMaxLines(1);
        r7.alertView.addView(r7.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
        r7.alertTextView = new TextView(context2);
        r7.alertTextView.setTextSize(1, 14.0f);
        r7.alertTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
        r7.alertTextView.setSingleLine(true);
        r7.alertTextView.setEllipsize(TruncateAt.END);
        r7.alertTextView.setMaxLines(1);
        r7.alertView.addView(r7.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
        r7.pagedownButton = new FrameLayout(context2);
        r7.pagedownButton.setVisibility(4);
        r7.contentView.addView(r7.pagedownButton, LayoutHelper.createFrame(66, 59.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        r7.pagedownButton.setOnClickListener(/* anonymous class already generated */);
        r7.mentiondownButton = new FrameLayout(context2);
        r7.mentiondownButton.setVisibility(4);
        r7.contentView.addView(r7.mentiondownButton, LayoutHelper.createFrame(46, 59.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        r7.mentiondownButton.setOnClickListener(/* anonymous class already generated */);
        r7.mentiondownButton.setOnLongClickListener(/* anonymous class already generated */);
        if (r7.isBroadcast) {
            i2 = 46;
        } else {
            r7.mentionContainer = /* anonymous class already generated */;
            r7.mentionContainer.setVisibility(8);
            r7.mentionContainer.setWillNotDraw(false);
            r7.contentView.addView(r7.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
            r7.mentionListView = /* anonymous class already generated */;
            r7.mentionListView.setOnTouchListener(/* anonymous class already generated */);
            r7.mentionListView.setTag(Integer.valueOf(2));
            r7.mentionLayoutManager = /* anonymous class already generated */;
            r7.mentionLayoutManager.setOrientation(1);
            r7.mentionGridLayoutManager = /* anonymous class already generated */;
            r7.mentionGridLayoutManager.setSpanSizeLookup(/* anonymous class already generated */);
            r7.mentionListView.addItemDecoration(/* anonymous class already generated */);
            r7.mentionListView.setItemAnimator(null);
            r7.mentionListView.setLayoutAnimation(null);
            r7.mentionListView.setClipToPadding(false);
            r7.mentionListView.setLayoutManager(r7.mentionLayoutManager);
            r7.mentionListView.setOverScrollMode(2);
            r7.mentionContainer.addView(r7.mentionListView, LayoutHelper.createFrame(-1, -1.0f));
            Adapter adapter2 = mentionsAdapter2;
            i2 = 46;
            RecyclerListView recyclerListView22 = r7.mentionListView;
            Adapter mentionsAdapter22 = new MentionsAdapter(context2, false, r7.dialog_id, /* anonymous class already generated */);
            r7.mentionsAdapter = adapter2;
            recyclerListView22.setAdapter(adapter2);
            r7.mentionsAdapter.setBotInfo(r7.botInfo);
            r7.mentionsAdapter.setParentFragment(r7);
            r7.mentionsAdapter.setChatInfo(r7.info);
            if (r7.currentChat == null) {
            }
            r7.mentionsAdapter.setNeedUsernames(r7.currentChat == null);
            mentionsAdapter = r7.mentionsAdapter;
            if (r7.currentEncryptedChat != null) {
                if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= i2) {
                    z = false;
                    mentionsAdapter.setNeedBotContext(z);
                    if (r7.currentChat == null) {
                    }
                    r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                    recyclerListView = r7.mentionListView;
                    anonymousClass38 = /* anonymous class already generated */;
                    r7.mentionsOnItemClickListener = anonymousClass38;
                    recyclerListView.setOnItemClickListener(anonymousClass38);
                    r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
                    r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
                }
            }
            z = true;
            mentionsAdapter.setNeedBotContext(z);
            if (r7.currentChat == null) {
            }
            r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
            recyclerListView = r7.mentionListView;
            anonymousClass38 = /* anonymous class already generated */;
            r7.mentionsOnItemClickListener = anonymousClass38;
            recyclerListView.setOnItemClickListener(anonymousClass38);
            r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
            r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
        }
        r7.pagedownButtonImage = new ImageView(context2);
        r7.pagedownButtonImage.setImageResource(R.drawable.pagedown);
        r7.pagedownButtonImage.setScaleType(ScaleType.CENTER);
        r7.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
        r7.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
        shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
        shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
        combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
        combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        r7.pagedownButtonImage.setBackgroundDrawable(combinedDrawable);
        r7.pagedownButton.addView(r7.pagedownButtonImage, LayoutHelper.createFrame(i2, i2, 81));
        r7.pagedownButtonCounter = new TextView(context2);
        r7.pagedownButtonCounter.setVisibility(4);
        r7.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.pagedownButtonCounter.setTextSize(1, 13.0f);
        r7.pagedownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
        r7.pagedownButtonCounter.setGravity(17);
        r7.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
        r7.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        r7.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
        r7.pagedownButton.addView(r7.pagedownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
        r7.mentiondownButtonImage = new ImageView(context2);
        r7.mentiondownButtonImage.setImageResource(R.drawable.mentionbutton);
        r7.mentiondownButtonImage.setScaleType(ScaleType.CENTER);
        r7.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
        r7.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
        shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
        shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
        combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
        combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        r7.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable);
        r7.mentiondownButton.addView(r7.mentiondownButtonImage, LayoutHelper.createFrame(i2, i2, 83));
        r7.mentiondownButtonCounter = new TextView(context2);
        r7.mentiondownButtonCounter.setVisibility(4);
        r7.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.mentiondownButtonCounter.setTextSize(1, 13.0f);
        r7.mentiondownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
        r7.mentiondownButtonCounter.setGravity(17);
        r7.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
        r7.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        r7.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
        r7.mentiondownButton.addView(r7.mentiondownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
        sizeNotifierFrameLayout = r7.contentView;
        fragmentContextView = new FragmentContextView(context2, r7, true);
        r7.fragmentLocationContextView = fragmentContextView;
        sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        sizeNotifierFrameLayout = r7.contentView;
        fragmentContextView = new FragmentContextView(context2, r7, false);
        r7.fragmentContextView = fragmentContextView;
        sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        r7.fragmentContextView.setAdditionalContextView(r7.fragmentLocationContextView);
        r7.fragmentLocationContextView.setAdditionalContextView(r7.fragmentContextView);
        r7.contentView.addView(r7.actionBar);
        r7.overlayView = new View(context2);
        r7.overlayView.setOnTouchListener(/* anonymous class already generated */);
        r7.contentView.addView(r7.overlayView, LayoutHelper.createFrame(-1, -1, 51));
        r7.overlayView.setVisibility(8);
        r7.instantCameraView = new InstantCameraView(context2, r7);
        r7.contentView.addView(r7.instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
        r7.chatActivityEnterView = new ChatActivityEnterView(getParentActivity(), r7.contentView, r7, true);
        r7.chatActivityEnterView.setDialogId(r7.dialog_id, r7.currentAccount);
        r7.chatActivityEnterView.setId(id_chat_compose_panel);
        r7.chatActivityEnterView.setBotsCount(r7.botsCount, r7.hasBotsCommands);
        chatActivityEnterView = r7.chatActivityEnterView;
        if (r7.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= edit) {
                z2 = false;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                        z3 = false;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z3 = true;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        z2 = true;
        if (r7.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                z3 = false;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        z3 = true;
        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
        replyLayout = /* anonymous class already generated */;
        r7.chatActivityEnterView.addTopView(replyLayout, 48);
        replyLayout.setOnClickListener(/* anonymous class already generated */);
        r7.replyLineView = new View(context2);
        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
        r7.replyIconImageView = new ImageView(context2);
        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
        r7.replyCloseImageView = new ImageView(context2);
        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
        r7.replyNameTextView = new SimpleTextView(context2);
        r7.replyNameTextView.setTextSize(14);
        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
        r7.replyObjectTextView = new SimpleTextView(context2);
        r7.replyObjectTextView.setTextSize(14);
        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
        r7.replyImageView = new BackupImageView(context2);
        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        r7.stickersPanel = new FrameLayout(context2);
        r7.stickersPanel.setVisibility(8);
        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
        stickerPreviewViewerDelegate = /* anonymous class already generated */;
        r7.stickersListView = /* anonymous class already generated */;
        r7.stickersListView.setTag(Integer.valueOf(3));
        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
        r7.stickersListView.setDisallowInterceptTouchEvents(true);
        layoutManager = new LinearLayoutManager(context2);
        layoutManager.setOrientation(0);
        r7.stickersListView.setLayoutManager(layoutManager);
        r7.stickersListView.setClipToPadding(false);
        r7.stickersListView.setOverScrollMode(2);
        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
        initStickers();
        r7.stickersPanelArrow = new ImageView(context2);
        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
        r7.searchContainer = /* anonymous class already generated */;
        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
        r7.searchContainer.setWillNotDraw(false);
        r7.searchContainer.setVisibility(4);
        r7.searchContainer.setFocusable(true);
        r7.searchContainer.setFocusableInTouchMode(true);
        r7.searchContainer.setClickable(true);
        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        r7.searchUpButton = new ImageView(context2);
        r7.searchUpButton.setScaleType(ScaleType.CENTER);
        r7.searchUpButton.setImageResource(R.drawable.search_up);
        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchDownButton = new ImageView(context2);
        r7.searchDownButton.setScaleType(ScaleType.CENTER);
        r7.searchDownButton.setImageResource(R.drawable.search_down);
        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchUserButton = new ImageView(context2);
        r7.searchUserButton.setScaleType(ScaleType.CENTER);
        r7.searchUserButton.setImageResource(R.drawable.usersearch);
        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchCalendarButton = new ImageView(context2);
        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchCountText = new SimpleTextView(context2);
        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
        r7.searchCountText.setTextSize(15);
        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.searchCountText.setGravity(5);
        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
        r7.bottomOverlay = /* anonymous class already generated */;
        r7.bottomOverlay.setWillNotDraw(false);
        r7.bottomOverlay.setVisibility(4);
        r7.bottomOverlay.setFocusable(true);
        r7.bottomOverlay.setFocusableInTouchMode(true);
        r7.bottomOverlay.setClickable(true);
        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
        r7.bottomOverlayText = new TextView(context2);
        r7.bottomOverlayText.setTextSize(1, 14.0f);
        r7.bottomOverlayText.setGravity(17);
        r7.bottomOverlayText.setMaxLines(2);
        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
        r7.bottomOverlayChat = /* anonymous class already generated */;
        r7.bottomOverlayChat.setWillNotDraw(false);
        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        r7.bottomOverlayChat.setVisibility(4);
        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
        r7.bottomOverlayChatText = new TextView(context2);
        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
        r7.chatAdapter.updateRows();
        if (r7.loading) {
        }
        r7.progressView.setVisibility(4);
        r7.chatListView.setEmptyView(r7.emptyViewContainer);
        checkBotKeyboard();
        updateContactStatus();
        updateBottomOverlay();
        updateSecretStatus();
        updateSpamView();
        updatePinnedMessageView(true);
        try {
            MediaController.getInstance().setFlagSecure(r7, true);
        } catch (Throwable th) {
            FileLog.m3e(th);
        }
        oldMessage2 = oldMessage3;
        if (oldMessage2 != null) {
            r7.chatActivityEnterView.setFieldText(oldMessage2);
        }
        fixLayoutInternal();
        return r7.fragmentView;
    }

    private TextureView createTextureView(boolean add) {
        if (this.parentLayout == null) {
            return null;
        }
        if (this.roundVideoContainer == null) {
            if (VERSION.SDK_INT >= 21) {
                this.roundVideoContainer = new FrameLayout(getParentActivity()) {
                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.roundVideoContainer.setOutlineProvider(new ViewOutlineProvider() {
                    @TargetApi(21)
                    public void getOutline(View view, Outline outline) {
                        outline.setOval(0, 0, AndroidUtilities.roundMessageSize, AndroidUtilities.roundMessageSize);
                    }
                });
                this.roundVideoContainer.setClipToOutline(true);
            } else {
                this.roundVideoContainer = new FrameLayout(getParentActivity()) {
                    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
                        super.onSizeChanged(w, h, oldw, oldh);
                        ChatActivity.this.aspectPath.reset();
                        ChatActivity.this.aspectPath.addCircle((float) (w / 2), (float) (h / 2), (float) (w / 2), Direction.CW);
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }

                    public void setVisibility(int visibility) {
                        super.setVisibility(visibility);
                        if (visibility == 0) {
                            setLayerType(2, null);
                        }
                    }

                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                    }
                };
                this.aspectPath = new Path();
                this.aspectPaint = new Paint(1);
                this.aspectPaint.setColor(Theme.ACTION_BAR_VIDEO_EDIT_COLOR);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(Mode.CLEAR));
            }
            this.roundVideoContainer.setWillNotDraw(false);
            this.roundVideoContainer.setVisibility(4);
            this.aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout.setBackgroundColor(0);
            if (add) {
                this.roundVideoContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1.0f));
            }
            this.videoTextureView = new TextureView(getParentActivity());
            this.videoTextureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup parent = (ViewGroup) this.roundVideoContainer.getParent();
        if (!(parent == null || parent == this.contentView)) {
            parent.removeView(this.roundVideoContainer);
            parent = null;
        }
        if (parent == null) {
            this.contentView.addView(this.roundVideoContainer, 1, new FrameLayout.LayoutParams(AndroidUtilities.roundMessageSize, AndroidUtilities.roundMessageSize));
        }
        this.roundVideoContainer.setVisibility(4);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    private void destroyTextureView() {
        if (this.roundVideoContainer != null) {
            if (this.roundVideoContainer.getParent() != null) {
                this.contentView.removeView(this.roundVideoContainer);
                this.aspectRatioFrameLayout.setDrawingReady(false);
                this.roundVideoContainer.setVisibility(4);
                if (VERSION.SDK_INT < 21) {
                    this.roundVideoContainer.setLayerType(0, null);
                }
            }
        }
    }

    private void sendBotInlineResult(BotInlineResult result) {
        int uid = this.mentionsAdapter.getContextBotId();
        HashMap<String, String> params = new HashMap();
        params.put(TtmlNode.ATTR_ID, result.id);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
        stringBuilder.append(result.query_id);
        params.put("query_id", stringBuilder.toString());
        stringBuilder = new StringBuilder();
        stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
        stringBuilder.append(uid);
        params.put("bot", stringBuilder.toString());
        params.put("bot_name", this.mentionsAdapter.getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(result, params, this.dialog_id, this.replyingMessageObject);
        this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
        showReplyPanel(false, null, null, null, false);
        DataQuery.getInstance(this.currentAccount).increaseInlineRaiting(uid);
    }

    private void mentionListViewUpdateLayout() {
        if (this.mentionListView.getChildCount() <= 0) {
            this.mentionListViewScrollOffsetY = 0;
            this.mentionListViewLastViewPosition = -1;
            return;
        }
        View child = this.mentionListView.getChildAt(this.mentionListView.getChildCount() - 1);
        Holder holder = (Holder) this.mentionListView.findContainingViewHolder(child);
        Holder holder2;
        RecyclerListView recyclerListView;
        if (this.mentionLayoutManager.getReverseLayout()) {
            if (holder != null) {
                this.mentionListViewLastViewPosition = holder.getAdapterPosition();
                this.mentionListViewLastViewTop = child.getBottom();
            } else {
                this.mentionListViewLastViewPosition = -1;
            }
            child = this.mentionListView.getChildAt(0);
            holder2 = (Holder) this.mentionListView.findContainingViewHolder(child);
            holder = (child.getBottom() >= this.mentionListView.getMeasuredHeight() || holder2 == null || holder2.getAdapterPosition() != null) ? this.mentionListView.getMeasuredHeight() : child.getBottom();
            if (this.mentionListViewScrollOffsetY != holder) {
                recyclerListView = this.mentionListView;
                this.mentionListViewScrollOffsetY = holder;
                recyclerListView.setBottomGlowOffset(holder);
                this.mentionListView.setTopGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        } else {
            if (holder != null) {
                this.mentionListViewLastViewPosition = holder.getAdapterPosition();
                this.mentionListViewLastViewTop = child.getTop();
            } else {
                this.mentionListViewLastViewPosition = -1;
            }
            child = this.mentionListView.getChildAt(0);
            holder2 = (Holder) this.mentionListView.findContainingViewHolder(child);
            int newOffset = (child.getTop() <= 0 || holder2 == null || holder2.getAdapterPosition() != 0) ? 0 : child.getTop();
            if (this.mentionListViewScrollOffsetY != newOffset) {
                recyclerListView = this.mentionListView;
                this.mentionListViewScrollOffsetY = newOffset;
                recyclerListView.setTopGlowOffset(newOffset);
                this.mentionListView.setBottomGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        }
    }

    private void checkBotCommands() {
        boolean a = false;
        URLSpanBotCommand.enabled = false;
        if (this.currentUser != null && this.currentUser.bot) {
            URLSpanBotCommand.enabled = true;
        } else if (this.info instanceof TL_chatFull) {
            int a2;
            while (a2 < this.info.participants.participants.size()) {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(((ChatParticipant) this.info.participants.participants.get(a2)).user_id));
                if (user == null || !user.bot) {
                    a2++;
                } else {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (this.info instanceof TL_channelFull) {
            if (!(this.info.bot_info.isEmpty() || this.currentChat == null || !this.currentChat.megagroup)) {
                a = true;
            }
            URLSpanBotCommand.enabled = a;
        }
    }

    private GroupedMessages getValidGroupedMessage(MessageObject message) {
        if (message.getGroupId() == 0) {
            return null;
        }
        GroupedMessages groupedMessages = (GroupedMessages) this.groupedMessagesMap.get(message.getGroupId());
        if (groupedMessages == null) {
            return groupedMessages;
        }
        if (groupedMessages.messages.size() <= 1 || groupedMessages.positions.get(message) == null) {
            return null;
        }
        return groupedMessages;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void jumpToDate(int date) {
        int i = date;
        if (!this.messages.isEmpty()) {
            MessageObject firstMessage = (MessageObject) r6.messages.get(0);
            MessageObject lastMessage = (MessageObject) r6.messages.get(r6.messages.size() - 1);
            MessageObject messageObject;
            if (firstMessage.messageOwner.date >= i && lastMessage.messageOwner.date <= i) {
                int a = r6.messages.size() - 1;
                while (true) {
                    int a2 = a;
                    if (a2 < 0) {
                        break;
                    }
                    MessageObject message = (MessageObject) r6.messages.get(a2);
                    if (message.messageOwner.date >= i && message.getId() != 0) {
                        break;
                    }
                    a = a2 - 1;
                }
                MessageObject messageObject2 = lastMessage;
                messageObject = firstMessage;
            } else if (((int) r6.dialog_id) != 0) {
                clearChatData();
                r6.waitingForLoad.add(Integer.valueOf(r6.lastLoadIndex));
                MessagesController instance = MessagesController.getInstance(r6.currentAccount);
                long j = r6.dialog_id;
                int i2 = r6.classGuid;
                boolean isChannel = ChatObject.isChannel(r6.currentChat);
                int i3 = r6.lastLoadIndex;
                r6.lastLoadIndex = i3 + 1;
                instance.loadMessages(j, bot_help, 0, i, true, 0, i2, 4, 0, isChannel, i3);
                r6.floatingDateView.setAlpha(0.0f);
                r6.floatingDateView.setTag(null);
            } else {
                messageObject = firstMessage;
            }
        }
    }

    public void processInlineBotContextPM(TL_inlineBotSwitchPM object) {
        if (object != null) {
            User user = this.mentionsAdapter.getContextBotUser();
            if (user != null) {
                this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                if (this.dialog_id == ((long) user.id)) {
                    this.inlineReturn = this.dialog_id;
                    MessagesController.getInstance(this.currentAccount).sendBotStart(this.currentUser, object.start_param);
                } else {
                    Bundle args = new Bundle();
                    args.putInt("user_id", user.id);
                    args.putString("inline_query", object.start_param);
                    args.putLong("inline_return", this.dialog_id);
                    if (MessagesController.getInstance(this.currentAccount).checkCanOpenChat(args, this)) {
                        presentFragment(new ChatActivity(args));
                    }
                }
            }
        }
    }

    private void createChatAttachView() {
        if (getParentActivity() != null && this.chatAttachAlert == null) {
            this.chatAttachAlert = new ChatAttachAlert(getParentActivity(), this);
            this.chatAttachAlert.setDelegate(new ChatAttachViewDelegate() {
                public void didPressedButton(int button) {
                    int i = button;
                    if (ChatActivity.this.getParentActivity() != null) {
                        if (ChatActivity.this.chatAttachAlert != null) {
                            if (!(i == 8 || i == 7)) {
                                if (i != 4 || ChatActivity.this.chatAttachAlert.getSelectedPhotos().isEmpty()) {
                                    if (ChatActivity.this.chatAttachAlert != null) {
                                        ChatActivity.this.chatAttachAlert.dismissWithButtonClick(i);
                                    }
                                    ChatActivity.this.processSelectedAttach(i);
                                    return;
                                }
                            }
                            if (i != 8) {
                                ChatActivity.this.chatAttachAlert.dismiss();
                            }
                            HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getSelectedPhotos();
                            ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getSelectedPhotosOrder();
                            if (!selectedPhotos.isEmpty()) {
                                ArrayList<SendingMediaInfo> photos = new ArrayList();
                                for (int a = 0; a < selectedPhotosOrder.size(); a++) {
                                    PhotoEntry photoEntry = (PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(a));
                                    SendingMediaInfo info = new SendingMediaInfo();
                                    if (photoEntry.imagePath != null) {
                                        info.path = photoEntry.imagePath;
                                    } else if (photoEntry.path != null) {
                                        info.path = photoEntry.path;
                                    }
                                    info.isVideo = photoEntry.isVideo;
                                    ArrayList arrayList = null;
                                    info.caption = photoEntry.caption != null ? photoEntry.caption.toString() : null;
                                    info.entities = photoEntry.entities;
                                    if (!photoEntry.stickers.isEmpty()) {
                                        arrayList = new ArrayList(photoEntry.stickers);
                                    }
                                    info.masks = arrayList;
                                    info.ttl = photoEntry.ttl;
                                    info.videoEditedInfo = photoEntry.editedInfo;
                                    photos.add(info);
                                    photoEntry.reset();
                                }
                                SendMessagesHelper.prepareSendingMedia(photos, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, i == 4, SharedConfig.groupPhotosEnabled);
                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                            }
                        }
                    }
                }

                public View getRevealView() {
                    return ChatActivity.this.chatActivityEnterView.getAttachButton();
                }

                public void didSelectBot(User user) {
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        if (!TextUtils.isEmpty(user.username)) {
                            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("@");
                            stringBuilder.append(user.username);
                            stringBuilder.append(" ");
                            chatActivityEnterView.setFieldText(stringBuilder.toString());
                            ChatActivity.this.chatActivityEnterView.openKeyboard();
                        }
                    }
                }

                public void onCameraOpened() {
                    ChatActivity.this.chatActivityEnterView.closeKeyboard();
                }
            });
        }
    }

    public long getDialogId() {
        return this.dialog_id;
    }

    public void setBotUser(String value) {
        if (this.inlineReturn != 0) {
            MessagesController.getInstance(this.currentAccount).sendBotStart(this.currentUser, value);
            return;
        }
        this.botUser = value;
        updateBottomOverlay();
    }

    public boolean playFirstUnreadVoiceMessage() {
        if (this.chatActivityEnterView != null && this.chatActivityEnterView.isRecordingAudioVideo()) {
            return true;
        }
        for (int a = this.messages.size() - 1; a >= 0; a--) {
            MessageObject messageObject = (MessageObject) this.messages.get(a);
            if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                return true;
            }
        }
        if (VERSION.SDK_INT < edit || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
            return false;
        }
        getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
        return true;
    }

    private void initStickers() {
        if (!(this.chatActivityEnterView == null || getParentActivity() == null || this.stickersAdapter != null)) {
            if (this.currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) >= edit) {
                if (this.stickersAdapter != null) {
                    this.stickersAdapter.onDestroy();
                }
                this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), 0, AndroidUtilities.dp(18.0f), 0);
                RecyclerListView recyclerListView = this.stickersListView;
                Adapter stickersAdapter = new StickersAdapter(getParentActivity(), new StickersAdapterDelegate() {
                    public void needChangePanelVisibility(final boolean show) {
                        if (!(show && ChatActivity.this.stickersPanel.getVisibility() == 0) && (show || ChatActivity.this.stickersPanel.getVisibility() != 8)) {
                            if (show) {
                                ChatActivity.this.stickersListView.scrollToPosition(0);
                                ChatActivity.this.stickersPanel.setVisibility(ChatActivity.this.allowStickersPanel ? 0 : 4);
                            }
                            if (ChatActivity.this.runningAnimation != null) {
                                ChatActivity.this.runningAnimation.cancel();
                                ChatActivity.this.runningAnimation = null;
                            }
                            if (ChatActivity.this.stickersPanel.getVisibility() != 4) {
                                ChatActivity.this.runningAnimation = new AnimatorSet();
                                AnimatorSet access$22500 = ChatActivity.this.runningAnimation;
                                Animator[] animatorArr = new Animator[1];
                                FrameLayout access$18900 = ChatActivity.this.stickersPanel;
                                String str = "alpha";
                                float[] fArr = new float[2];
                                float f = 1.0f;
                                fArr[0] = show ? 0.0f : 1.0f;
                                if (!show) {
                                    f = 0.0f;
                                }
                                fArr[1] = f;
                                animatorArr[0] = ObjectAnimator.ofFloat(access$18900, str, fArr);
                                access$22500.playTogether(animatorArr);
                                ChatActivity.this.runningAnimation.setDuration(150);
                                ChatActivity.this.runningAnimation.addListener(new AnimatorListenerAdapter() {
                                    public void onAnimationEnd(Animator animation) {
                                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                                            if (!show) {
                                                ChatActivity.this.stickersAdapter.clearStickers();
                                                ChatActivity.this.stickersPanel.setVisibility(8);
                                                if (StickerPreviewViewer.getInstance().isVisible()) {
                                                    StickerPreviewViewer.getInstance().close();
                                                }
                                                StickerPreviewViewer.getInstance().reset();
                                            }
                                            ChatActivity.this.runningAnimation = null;
                                        }
                                    }

                                    public void onAnimationCancel(Animator animation) {
                                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                                            ChatActivity.this.runningAnimation = null;
                                        }
                                    }
                                });
                                ChatActivity.this.runningAnimation.start();
                            } else if (!show) {
                                ChatActivity.this.stickersPanel.setVisibility(8);
                            }
                        }
                    }
                });
                this.stickersAdapter = stickersAdapter;
                recyclerListView.setAdapter(stickersAdapter);
                recyclerListView = this.stickersListView;
                OnItemClickListener anonymousClass63 = new OnItemClickListener() {
                    public void onItemClick(View view, int position) {
                        Document document = ChatActivity.this.stickersAdapter.getItem(position);
                        if (document instanceof TL_document) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendSticker(document, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject);
                            ChatActivity.this.showReplyPanel(false, null, null, null, false);
                            ChatActivity.this.chatActivityEnterView.addStickerToRecent(document);
                        }
                        ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                    }
                };
                this.stickersOnItemClickListener = anonymousClass63;
                recyclerListView.setOnItemClickListener(anonymousClass63);
            }
        }
    }

    public void shareMyContact(final MessageObject messageObject) {
        Builder builder = new Builder(getParentActivity());
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
        if (this.currentUser == null) {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
        } else if (this.currentUser.bot) {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
        } else {
            Object[] objArr = new Object[2];
            PhoneFormat instance = PhoneFormat.getInstance();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("+");
            stringBuilder.append(UserConfig.getInstance(this.currentAccount).getCurrentUser().phone);
            objArr[0] = instance.format(stringBuilder.toString());
            objArr[1] = ContactsController.formatName(this.currentUser.first_name, this.currentUser.last_name);
            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, objArr)));
        }
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {
            public void onClick(DialogInterface dialogInterface, int i) {
                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage(UserConfig.getInstance(ChatActivity.this.currentAccount).getCurrentUser(), ChatActivity.this.dialog_id, messageObject, null, null);
                ChatActivity.this.moveScrollToLastMessage();
                ChatActivity.this.showReplyPanel(false, null, null, null, false);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
    }

    private void hideVoiceHint() {
        this.voiceHintAnimation = new AnimatorSet();
        AnimatorSet animatorSet = this.voiceHintAnimation;
        Animator[] animatorArr = new Animator[1];
        animatorArr[0] = ObjectAnimator.ofFloat(this.voiceHintTextView, "alpha", new float[]{0.0f});
        animatorSet.playTogether(animatorArr);
        this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {
            public void onAnimationEnd(Animator animation) {
                if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintAnimation = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                    if (ChatActivity.this.voiceHintTextView != null) {
                        ChatActivity.this.voiceHintTextView.setVisibility(8);
                    }
                }
            }

            public void onAnimationCancel(Animator animation) {
                if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintHideRunnable = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                }
            }
        });
        this.voiceHintAnimation.setDuration(300);
        this.voiceHintAnimation.start();
    }

    private void showVoiceHint(boolean hide, boolean video) {
        if (!(getParentActivity() == null || this.fragmentView == null)) {
            if (!hide || this.voiceHintTextView != null) {
                if (this.voiceHintTextView == null) {
                    SizeNotifierFrameLayout frameLayout = this.fragmentView;
                    int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                    if (index != -1) {
                        this.voiceHintTextView = new TextView(getParentActivity());
                        this.voiceHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                        this.voiceHintTextView.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                        this.voiceHintTextView.setTextSize(1, 14.0f);
                        this.voiceHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                        this.voiceHintTextView.setGravity(16);
                        this.voiceHintTextView.setAlpha(0.0f);
                        frameLayout.addView(this.voiceHintTextView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 85, 5.0f, 0.0f, 5.0f, 3.0f));
                    } else {
                        return;
                    }
                }
                if (hide) {
                    if (this.voiceHintAnimation != null) {
                        this.voiceHintAnimation.cancel();
                        this.voiceHintAnimation = null;
                    }
                    AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
                    this.voiceHintHideRunnable = null;
                    hideVoiceHint();
                    return;
                }
                String str;
                int i;
                TextView textView = this.voiceHintTextView;
                if (video) {
                    str = "HoldToVideo";
                    i = R.string.HoldToVideo;
                } else {
                    str = "HoldToAudio";
                    i = R.string.HoldToAudio;
                }
                textView.setText(LocaleController.getString(str, i));
                if (this.voiceHintHideRunnable != null) {
                    if (this.voiceHintAnimation != null) {
                        this.voiceHintAnimation.cancel();
                        this.voiceHintAnimation = null;
                    } else {
                        AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
                        Runnable anonymousClass66 = new Runnable() {
                            public void run() {
                                ChatActivity.this.hideVoiceHint();
                            }
                        };
                        this.voiceHintHideRunnable = anonymousClass66;
                        AndroidUtilities.runOnUIThread(anonymousClass66, AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                        return;
                    }
                } else if (this.voiceHintAnimation != null) {
                    return;
                }
                this.voiceHintTextView.setVisibility(0);
                this.voiceHintAnimation = new AnimatorSet();
                AnimatorSet animatorSet = this.voiceHintAnimation;
                Animator[] animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.voiceHintTextView, "alpha", new float[]{1.0f});
                animatorSet.playTogether(animatorArr);
                this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {

                    /* renamed from: org.telegram.ui.ChatActivity$67$1 */
                    class C10331 implements Runnable {
                        C10331() {
                        }

                        public void run() {
                            ChatActivity.this.hideVoiceHint();
                        }
                    }

                    public void onAnimationEnd(Animator animation) {
                        if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                            AndroidUtilities.runOnUIThread(ChatActivity.this.voiceHintHideRunnable = new C10331(), AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                        }
                    }
                });
                this.voiceHintAnimation.setDuration(300);
                this.voiceHintAnimation.start();
            }
        }
    }

    private void showMediaBannedHint() {
        if (!(getParentActivity() == null || this.currentChat == null || this.currentChat.banned_rights == null || this.fragmentView == null)) {
            if (this.mediaBanTooltip == null || this.mediaBanTooltip.getVisibility() != 0) {
                SizeNotifierFrameLayout frameLayout = this.fragmentView;
                int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                if (index != -1) {
                    if (this.mediaBanTooltip == null) {
                        this.mediaBanTooltip = new CorrectlyMeasuringTextView(getParentActivity());
                        this.mediaBanTooltip.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                        this.mediaBanTooltip.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                        this.mediaBanTooltip.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                        this.mediaBanTooltip.setGravity(16);
                        this.mediaBanTooltip.setTextSize(1, 14.0f);
                        frameLayout.addView(this.mediaBanTooltip, index + 1, LayoutHelper.createFrame(-2, -2.0f, 85, 30.0f, 0.0f, 5.0f, 3.0f));
                    }
                    if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights.until_date)) {
                        this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
                    } else {
                        this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan((long) this.currentChat.banned_rights.until_date)));
                    }
                    this.mediaBanTooltip.setVisibility(0);
                    AnimatorSet AnimatorSet = new AnimatorSet();
                    AnimatorSet.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mediaBanTooltip, "alpha", new float[]{0.0f, 1.0f})});
                    AnimatorSet.addListener(new AnimatorListenerAdapter() {

                        /* renamed from: org.telegram.ui.ChatActivity$68$1 */
                        class C10351 implements Runnable {

                            /* renamed from: org.telegram.ui.ChatActivity$68$1$1 */
                            class C10341 extends AnimatorListenerAdapter {
                                C10341() {
                                }

                                public void onAnimationEnd(Animator animation) {
                                    if (ChatActivity.this.mediaBanTooltip != null) {
                                        ChatActivity.this.mediaBanTooltip.setVisibility(8);
                                    }
                                }
                            }

                            C10351() {
                            }

                            public void run() {
                                if (ChatActivity.this.mediaBanTooltip != null) {
                                    AnimatorSet AnimatorSet = new AnimatorSet();
                                    Animator[] animatorArr = new Animator[1];
                                    animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.mediaBanTooltip, "alpha", new float[]{0.0f});
                                    AnimatorSet.playTogether(animatorArr);
                                    AnimatorSet.addListener(new C10341());
                                    AnimatorSet.setDuration(300);
                                    AnimatorSet.start();
                                }
                            }
                        }

                        public void onAnimationEnd(Animator animation) {
                            AndroidUtilities.runOnUIThread(new C10351(), DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS);
                        }
                    });
                    AnimatorSet.setDuration(300);
                    AnimatorSet.start();
                }
            }
        }
    }

    private void showGifHint() {
        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
        if (!preferences.getBoolean("gifhint", false)) {
            preferences.edit().putBoolean("gifhint", true).commit();
            if (!(getParentActivity() == null || this.fragmentView == null)) {
                if (this.gifHintTextView == null) {
                    if (this.allowContextBotPanelSecond) {
                        SizeNotifierFrameLayout frameLayout = this.fragmentView;
                        int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                        if (index != -1) {
                            this.chatActivityEnterView.setOpenGifsTabFirst();
                            this.emojiButtonRed = new View(getParentActivity());
                            this.emojiButtonRed.setBackgroundResource(R.drawable.redcircle);
                            frameLayout.addView(this.emojiButtonRed, index + 1, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                            this.gifHintTextView = new TextView(getParentActivity());
                            this.gifHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                            this.gifHintTextView.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                            this.gifHintTextView.setTextSize(1, 14.0f);
                            this.gifHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                            this.gifHintTextView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
                            this.gifHintTextView.setGravity(16);
                            frameLayout.addView(this.gifHintTextView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                            AnimatorSet AnimatorSet = new AnimatorSet();
                            AnimatorSet.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.gifHintTextView, "alpha", new float[]{0.0f, 1.0f}), ObjectAnimator.ofFloat(this.emojiButtonRed, "alpha", new float[]{0.0f, 1.0f})});
                            AnimatorSet.addListener(new AnimatorListenerAdapter() {

                                /* renamed from: org.telegram.ui.ChatActivity$69$1 */
                                class C10371 implements Runnable {

                                    /* renamed from: org.telegram.ui.ChatActivity$69$1$1 */
                                    class C10361 extends AnimatorListenerAdapter {
                                        C10361() {
                                        }

                                        public void onAnimationEnd(Animator animation) {
                                            if (ChatActivity.this.gifHintTextView != null) {
                                                ChatActivity.this.gifHintTextView.setVisibility(8);
                                            }
                                        }
                                    }

                                    C10371() {
                                    }

                                    public void run() {
                                        if (ChatActivity.this.gifHintTextView != null) {
                                            AnimatorSet AnimatorSet = new AnimatorSet();
                                            Animator[] animatorArr = new Animator[1];
                                            animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, "alpha", new float[]{0.0f});
                                            AnimatorSet.playTogether(animatorArr);
                                            AnimatorSet.addListener(new C10361());
                                            AnimatorSet.setDuration(300);
                                            AnimatorSet.start();
                                        }
                                    }
                                }

                                public void onAnimationEnd(Animator animation) {
                                    AndroidUtilities.runOnUIThread(new C10371(), AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                                }
                            });
                            AnimatorSet.setDuration(300);
                            AnimatorSet.start();
                            return;
                        }
                        return;
                    }
                    if (this.chatActivityEnterView != null) {
                        this.chatActivityEnterView.setOpenGifsTabFirst();
                    }
                }
            }
        }
    }

    private void openAttachMenu() {
        if (getParentActivity() != null) {
            createChatAttachView();
            this.chatAttachAlert.loadGalleryPhotos();
            if (VERSION.SDK_INT == 21 || VERSION.SDK_INT == 22) {
                this.chatActivityEnterView.closeKeyboard();
            }
            this.chatAttachAlert.init();
            showDialog(this.chatAttachAlert);
        }
    }

    private void checkContextBotPanel() {
        if (!this.allowStickersPanel || this.mentionsAdapter == null || !this.mentionsAdapter.isBotContext()) {
            return;
        }
        if (this.allowContextBotPanel || this.allowContextBotPanelSecond) {
            if (this.mentionContainer.getVisibility() == 4 || this.mentionContainer.getTag() != null) {
                if (this.mentionListAnimation != null) {
                    this.mentionListAnimation.cancel();
                }
                this.mentionContainer.setTag(null);
                this.mentionContainer.setVisibility(0);
                this.mentionListAnimation = new AnimatorSet();
                this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mentionContainer, "alpha", new float[]{0.0f, 1.0f})});
                this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                            ChatActivity.this.mentionListAnimation = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                            ChatActivity.this.mentionListAnimation = null;
                        }
                    }
                });
                this.mentionListAnimation.setDuration(200);
                this.mentionListAnimation.start();
            }
        } else if (this.mentionContainer.getVisibility() == 0 && this.mentionContainer.getTag() == null) {
            if (this.mentionListAnimation != null) {
                this.mentionListAnimation.cancel();
            }
            this.mentionContainer.setTag(Integer.valueOf(1));
            this.mentionListAnimation = new AnimatorSet();
            AnimatorSet animatorSet = this.mentionListAnimation;
            Animator[] animatorArr = new Animator[1];
            animatorArr[0] = ObjectAnimator.ofFloat(this.mentionContainer, "alpha", new float[]{0.0f});
            animatorSet.playTogether(animatorArr);
            this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                        ChatActivity.this.mentionContainer.setVisibility(4);
                        ChatActivity.this.mentionListAnimation = null;
                    }
                }

                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                        ChatActivity.this.mentionListAnimation = null;
                    }
                }
            });
            this.mentionListAnimation.setDuration(200);
            this.mentionListAnimation.start();
        }
    }

    private void hideFloatingDateView(boolean animated) {
        if (this.floatingDateView.getTag() != null && !this.currentFloatingDateOnScreen) {
            if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
                this.floatingDateView.setTag(null);
                if (animated) {
                    this.floatingDateAnimation = new AnimatorSet();
                    this.floatingDateAnimation.setDuration(150);
                    AnimatorSet animatorSet = this.floatingDateAnimation;
                    Animator[] animatorArr = new Animator[1];
                    animatorArr[0] = ObjectAnimator.ofFloat(this.floatingDateView, "alpha", new float[]{0.0f});
                    animatorSet.playTogether(animatorArr);
                    this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationEnd(Animator animation) {
                            if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                                ChatActivity.this.floatingDateAnimation = null;
                            }
                        }
                    });
                    this.floatingDateAnimation.setStartDelay(500);
                    this.floatingDateAnimation.start();
                    return;
                }
                if (this.floatingDateAnimation != null) {
                    this.floatingDateAnimation.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
        }
    }

    protected void onRemoveFromParent() {
        MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
    }

    protected void setIgnoreAttachOnPause(boolean value) {
        this.ignoreAttachOnPause = value;
    }

    private void checkScrollForLoad(boolean scroll) {
        if (this.chatLayoutManager != null) {
            if (!r0.paused) {
                int firstVisibleItem = r0.chatLayoutManager.findFirstVisibleItemPosition();
                int visibleItemCount = firstVisibleItem == -1 ? 0 : Math.abs(r0.chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
                if (visibleItemCount > 0 || r0.currentEncryptedChat != null) {
                    int checkLoadCount;
                    int i;
                    int i2;
                    MessagesController instance;
                    long j;
                    int i3;
                    boolean isChannel;
                    int i4;
                    int totalItemCount = r0.chatAdapter.getItemCount();
                    if (scroll) {
                        checkLoadCount = 25;
                    } else {
                        checkLoadCount = 5;
                    }
                    if ((totalItemCount - firstVisibleItem) - visibleItemCount <= checkLoadCount && !r0.loading) {
                        if (!r0.endReached[0]) {
                            r0.loading = true;
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            int i5;
                            if (r0.messagesByDays.size() != 0) {
                                MessagesController instance2 = MessagesController.getInstance(r0.currentAccount);
                                long j2 = r0.dialog_id;
                                i = r0.maxMessageId[0];
                                boolean z = r0.cacheEndReached[0] ^ 1;
                                int i6 = r0.minDate[0];
                                i5 = r0.classGuid;
                                boolean isChannel2 = ChatObject.isChannel(r0.currentChat);
                                int i7 = r0.lastLoadIndex;
                                r0.lastLoadIndex = i7 + 1;
                                instance2.loadMessages(j2, 50, i, 0, z, i6, i5, 0, 0, isChannel2, i7);
                            } else {
                                MessagesController instance3 = MessagesController.getInstance(r0.currentAccount);
                                long j3 = r0.dialog_id;
                                boolean z2 = r0.cacheEndReached[0] ^ 1;
                                int i8 = r0.minDate[0];
                                i5 = r0.classGuid;
                                boolean isChannel3 = ChatObject.isChannel(r0.currentChat);
                                i2 = r0.lastLoadIndex;
                                r0.lastLoadIndex = i2 + 1;
                                instance3.loadMessages(j3, 50, 0, 0, z2, i8, i5, 0, 0, isChannel3, i2);
                            }
                        } else if (!(r0.mergeDialogId == 0 || r0.endReached[1])) {
                            r0.loading = true;
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.mergeDialogId;
                            i3 = r0.maxMessageId[1];
                            boolean z3 = r0.cacheEndReached[1] ^ 1;
                            i = r0.minDate[1];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, z3, i, i2, 0, 0, isChannel, i4);
                        }
                    }
                    if (visibleItemCount > 0 && !r0.loadingForward && firstVisibleItem <= 10) {
                        if (r0.mergeDialogId != 0 && !r0.forwardEndReached[1]) {
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.mergeDialogId;
                            i3 = r0.minMessageId[1];
                            i = r0.maxDate[1];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, true, i, i2, 1, 0, isChannel, i4);
                            r0.loadingForward = true;
                        } else if (!r0.forwardEndReached[0]) {
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.dialog_id;
                            i3 = r0.minMessageId[0];
                            i = r0.maxDate[0];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, true, i, i2, 1, 0, isChannel, i4);
                            r0.loadingForward = true;
                        }
                    }
                }
            }
        }
    }

    private void processSelectedAttach(int which) {
        int i = 0;
        Intent takePictureIntent;
        if (which == 0) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.CAMERA") == 0) {
                try {
                    takePictureIntent = new Intent("android.media.action.IMAGE_CAPTURE");
                    File image = AndroidUtilities.generatePicturePath();
                    if (image != null) {
                        if (VERSION.SDK_INT >= 24) {
                            takePictureIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", image));
                            takePictureIntent.addFlags(2);
                            takePictureIntent.addFlags(1);
                        } else {
                            takePictureIntent.putExtra("output", Uri.fromFile(image));
                        }
                        this.currentPicturePath = image.getAbsolutePath();
                    }
                    startActivityForResult(takePictureIntent, 0);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
            }
        } else if (which == 1) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                boolean z;
                PhotoAlbumPickerActivity fragment;
                if (this.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 46) {
                        z = false;
                        fragment = new PhotoAlbumPickerActivity(false, z, true, this);
                        fragment.setDelegate(new PhotoAlbumPickerActivityDelegate() {
                            public void didSelectPhotos(ArrayList<SendingMediaInfo> photos) {
                                SendMessagesHelper.prepareSendingMedia(photos, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, false, SharedConfig.groupPhotosEnabled);
                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                            }

                            public void startPhotoSelectActivity() {
                                try {
                                    Intent videoPickerIntent = new Intent();
                                    videoPickerIntent.setType("video/*");
                                    videoPickerIntent.setAction("android.intent.action.GET_CONTENT");
                                    videoPickerIntent.putExtra("android.intent.extra.sizeLimit", NUM);
                                    Intent photoPickerIntent = new Intent("android.intent.action.PICK");
                                    photoPickerIntent.setType("image/*");
                                    Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
                                    chooserIntent.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{videoPickerIntent});
                                    ChatActivity.this.startActivityForResult(chooserIntent, 1);
                                } catch (Throwable e) {
                                    FileLog.m3e(e);
                                }
                            }
                        });
                        presentFragment(fragment);
                    }
                }
                z = true;
                fragment = new PhotoAlbumPickerActivity(false, z, true, this);
                fragment.setDelegate(/* anonymous class already generated */);
                presentFragment(fragment);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 2) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.CAMERA") == 0) {
                try {
                    takePictureIntent = new Intent("android.media.action.VIDEO_CAPTURE");
                    File video = AndroidUtilities.generateVideoPath();
                    if (video != null) {
                        if (VERSION.SDK_INT >= 24) {
                            takePictureIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", video));
                            takePictureIntent.addFlags(2);
                            takePictureIntent.addFlags(1);
                        } else if (VERSION.SDK_INT >= 18) {
                            takePictureIntent.putExtra("output", Uri.fromFile(video));
                        }
                        takePictureIntent.putExtra("android.intent.extra.sizeLimit", NUM);
                        this.currentPicturePath = video.getAbsolutePath();
                    }
                    startActivityForResult(takePictureIntent, 2);
                } catch (Throwable e2) {
                    FileLog.m3e(e2);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
            }
        } else if (which == 6) {
            if (AndroidUtilities.isGoogleMapsInstalled(this)) {
                if (this.currentEncryptedChat == null) {
                    i = 1;
                }
                LocationActivity fragment2 = new LocationActivity(i);
                fragment2.setDialogId(this.dialog_id);
                fragment2.setDelegate(this);
                presentFragment(fragment2);
            }
        } else if (which == 4) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                DocumentSelectActivity fragment3 = new DocumentSelectActivity();
                fragment3.setDelegate(new DocumentSelectActivityDelegate() {
                    public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
                        activity.finishFragment();
                        SendMessagesHelper.prepareSendingDocuments(files, files, null, null, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null);
                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                    }

                    public void startDocumentSelectActivity() {
                        try {
                            Intent photoPickerIntent = new Intent("android.intent.action.GET_CONTENT");
                            if (VERSION.SDK_INT >= 18) {
                                photoPickerIntent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
                            }
                            photoPickerIntent.setType("*/*");
                            ChatActivity.this.startActivityForResult(photoPickerIntent, 21);
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
                presentFragment(fragment3);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 3) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                AudioSelectActivity fragment4 = new AudioSelectActivity();
                fragment4.setDelegate(new AudioSelectActivityDelegate() {
                    public void didSelectAudio(ArrayList<MessageObject> audios) {
                        SendMessagesHelper.prepareSendingAudioDocuments(audios, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject);
                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                    }
                });
                presentFragment(fragment4);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 5) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_CONTACTS") == 0) {
                try {
                    Intent intent = new Intent("android.intent.action.PICK", Contacts.CONTENT_URI);
                    intent.setType("vnd.android.cursor.dir/phone_v2");
                    startActivityForResult(intent, bot_settings);
                } catch (Throwable e22) {
                    FileLog.m3e(e22);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_CONTACTS"}, 5);
            }
        }
    }

    public boolean dismissDialogOnPause(Dialog dialog) {
        return dialog != this.chatAttachAlert && super.dismissDialogOnPause(dialog);
    }

    private void searchLinks(final CharSequence charSequence, final boolean force) {
        if (this.currentEncryptedChat == null || (MessagesController.getInstance(this.currentAccount).secretWebpagePreview != 0 && AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) >= 46)) {
            if (force && this.foundWebPage != null) {
                if (this.foundWebPage.url != null) {
                    int index = TextUtils.indexOf(charSequence, this.foundWebPage.url);
                    char lastChar = '\u0000';
                    boolean lenEqual = false;
                    boolean z = true;
                    char c = '\u0000';
                    if (index != -1) {
                        if (this.foundWebPage.url.length() + index != charSequence.length()) {
                            z = false;
                        }
                        lenEqual = z;
                        if (!lenEqual) {
                            c = charSequence.charAt(this.foundWebPage.url.length() + index);
                        }
                        lastChar = c;
                    } else if (this.foundWebPage.display_url != null) {
                        index = TextUtils.indexOf(charSequence, this.foundWebPage.display_url);
                        if (index == -1 || this.foundWebPage.display_url.length() + index != charSequence.length()) {
                            z = false;
                        }
                        lenEqual = z;
                        if (!(index == -1 || lenEqual)) {
                            c = charSequence.charAt(this.foundWebPage.display_url.length() + index);
                        }
                        lastChar = c;
                    }
                    if (index != -1 && (lenEqual || lastChar == ' ' || lastChar == ',' || lastChar == '.' || lastChar == '!' || lastChar == '/')) {
                        return;
                    }
                }
                this.pendingLinkSearchString = null;
                showReplyPanel(false, null, null, this.foundWebPage, false);
            }
            final MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
            Utilities.searchQueue.postRunnable(new Runnable() {

                /* renamed from: org.telegram.ui.ChatActivity$76$1 */
                class C10391 implements Runnable {
                    C10391() {
                    }

                    public void run() {
                        if (ChatActivity.this.foundWebPage != null) {
                            ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                            ChatActivity.this.foundWebPage = null;
                        }
                    }
                }

                /* renamed from: org.telegram.ui.ChatActivity$76$2 */
                class C10402 implements Runnable {
                    C10402() {
                    }

                    public void run() {
                        if (ChatActivity.this.foundWebPage != null) {
                            ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                            ChatActivity.this.foundWebPage = null;
                        }
                    }
                }

                /* renamed from: org.telegram.ui.ChatActivity$76$3 */
                class C10423 implements Runnable {

                    /* renamed from: org.telegram.ui.ChatActivity$76$3$1 */
                    class C10411 implements OnClickListener {
                        C10411() {
                        }

                        public void onClick(DialogInterface dialog, int which) {
                            messagesController.secretWebpagePreview = 1;
                            MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", MessagesController.getInstance(ChatActivity.this.currentAccount).secretWebpagePreview).commit();
                            ChatActivity.this.foundUrls = null;
                            ChatActivity.this.searchLinks(charSequence, force);
                        }
                    }

                    C10423() {
                    }

                    public void run() {
                        Builder builder = new Builder(ChatActivity.this.getParentActivity());
                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new C10411());
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", R.string.SecretLinkPreviewAlert));
                        ChatActivity.this.showDialog(builder.create());
                        messagesController.secretWebpagePreview = 0;
                        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
                    }
                }

                public void run() {
                    int a = 0;
                    if (ChatActivity.this.linkSearchRequestId != 0) {
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.linkSearchRequestId, true);
                        ChatActivity.this.linkSearchRequestId = 0;
                    }
                    ArrayList<CharSequence> urls = null;
                    Exception e;
                    final String text;
                    try {
                        Matcher m = AndroidUtilities.WEB_URL.matcher(charSequence);
                        while (m.find()) {
                            if (m.start() <= 0 || charSequence.charAt(m.start() - 1) != '@') {
                                if (urls == null) {
                                    urls = new ArrayList();
                                }
                                urls.add(charSequence.subSequence(m.start(), m.end()));
                            }
                        }
                        if (!(urls == null || ChatActivity.this.foundUrls == null || urls.size() != ChatActivity.this.foundUrls.size())) {
                            boolean clear = true;
                            while (a < urls.size()) {
                                if (!TextUtils.equals((CharSequence) urls.get(a), (CharSequence) ChatActivity.this.foundUrls.get(a))) {
                                    clear = false;
                                }
                                a++;
                            }
                            if (clear) {
                                return;
                            }
                        }
                        ChatActivity.this.foundUrls = urls;
                        if (urls == null) {
                            AndroidUtilities.runOnUIThread(new C10391());
                            return;
                        }
                        e = TextUtils.join(" ", urls);
                        if (ChatActivity.this.currentEncryptedChat == null || messagesController.secretWebpagePreview != 2) {
                            text = new TL_messages_getWebPagePreview();
                            if (e instanceof String) {
                                text.message = (String) e;
                            } else {
                                text.message = e.toString();
                            }
                            ChatActivity.this.linkSearchRequestId = ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(text, new RequestDelegate() {
                                public void run(final TLObject response, final TL_error error) {
                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                        public void run() {
                                            ChatActivity.this.linkSearchRequestId = 0;
                                            if (error != null) {
                                                return;
                                            }
                                            if (response instanceof TL_messageMediaWebPage) {
                                                ChatActivity.this.foundWebPage = ((TL_messageMediaWebPage) response).webpage;
                                                if (!(ChatActivity.this.foundWebPage instanceof TL_webPage)) {
                                                    if (!(ChatActivity.this.foundWebPage instanceof TL_webPagePending)) {
                                                        if (ChatActivity.this.foundWebPage != null) {
                                                            ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                                            ChatActivity.this.foundWebPage = null;
                                                            return;
                                                        }
                                                        return;
                                                    }
                                                }
                                                if (ChatActivity.this.foundWebPage instanceof TL_webPagePending) {
                                                    ChatActivity.this.pendingLinkSearchString = text.message;
                                                }
                                                if (ChatActivity.this.currentEncryptedChat != null && (ChatActivity.this.foundWebPage instanceof TL_webPagePending)) {
                                                    ChatActivity.this.foundWebPage.url = text.message;
                                                }
                                                ChatActivity.this.showReplyPanel(true, null, null, ChatActivity.this.foundWebPage, false);
                                            } else if (ChatActivity.this.foundWebPage != null) {
                                                ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                                ChatActivity.this.foundWebPage = null;
                                            }
                                        }
                                    });
                                }
                            });
                            ConnectionsManager.getInstance(ChatActivity.this.currentAccount).bindRequestToGuid(ChatActivity.this.linkSearchRequestId, ChatActivity.this.classGuid);
                            return;
                        }
                        AndroidUtilities.runOnUIThread(new C10423());
                    } catch (Throwable e2) {
                        FileLog.m3e(e2);
                        text = charSequence.toString().toLowerCase();
                        if (charSequence.length() >= 13) {
                            if (text.contains("http://") || text.contains("https://")) {
                                e = charSequence;
                            }
                        }
                        AndroidUtilities.runOnUIThread(new C10402());
                    }
                }
            });
        }
    }

    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName) {
        if (arrayList != null) {
            if (!arrayList.isEmpty()) {
                if (fromMyName) {
                    Iterator it = arrayList.iterator();
                    while (it.hasNext()) {
                        SendMessagesHelper.getInstance(this.currentAccount).processForwardFromMyName((MessageObject) it.next(), this.dialog_id);
                    }
                } else {
                    AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(this.currentAccount).sendMessage(arrayList, this.dialog_id), this);
                }
            }
        }
    }

    private void checkBotKeyboard() {
        if (!(this.chatActivityEnterView == null || this.botButtons == null)) {
            if (!this.userBlocked) {
                if (this.botButtons.messageOwner.reply_markup instanceof TL_replyKeyboardForceReply) {
                    SharedPreferences preferences = MessagesController.getMainSettings(this.currentAccount);
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("answered_");
                    stringBuilder.append(this.dialog_id);
                    if (preferences.getInt(stringBuilder.toString(), 0) != this.botButtons.getId() && (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null)) {
                        this.botReplyButtons = this.botButtons;
                        this.chatActivityEnterView.setButtons(this.botButtons);
                        showReplyPanel(true, this.botButtons, null, null, false);
                    }
                } else {
                    if (this.replyingMessageObject != null && this.botReplyButtons == this.replyingMessageObject) {
                        this.botReplyButtons = null;
                        showReplyPanel(false, null, null, null, false);
                    }
                    this.chatActivityEnterView.setButtons(this.botButtons);
                }
            }
        }
    }

    public void showReplyPanel(boolean show, MessageObject messageObjectToReply, ArrayList<MessageObject> messageObjectsToForward, WebPage webPage, boolean cancel) {
        MessageObject messageObject = messageObjectToReply;
        WebPage webPage2 = webPage;
        if (this.chatActivityEnterView != null) {
            ArrayList<MessageObject> messageObjectsToForward2;
            MessageObject messageObjectToReply2;
            if (show) {
                if (messageObject != null || messageObjectsToForward != null || webPage2 != null) {
                    int dp;
                    if (r6.searchItem != null && r6.actionBar.isSearchFieldVisible()) {
                        r6.actionBar.closeSearchField(false);
                        r6.chatActivityEnterView.setFieldFocused();
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                if (ChatActivity.this.chatActivityEnterView != null) {
                                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                                }
                            }
                        }, 100);
                    }
                    boolean openKeyboard = false;
                    if (messageObject == null || messageObjectToReply.getDialogId() == r6.dialog_id) {
                        messageObjectsToForward2 = messageObjectsToForward;
                        messageObjectToReply2 = messageObject;
                    } else {
                        ArrayList<MessageObject> messageObjectsToForward3 = new ArrayList();
                        messageObjectsToForward3.add(messageObject);
                        messageObjectToReply2 = null;
                        openKeyboard = true;
                        messageObjectsToForward2 = messageObjectsToForward3;
                    }
                    String mess;
                    if (messageObjectToReply2 != null) {
                        r6.forwardingMessages = null;
                        r6.replyingMessageObject = messageObjectToReply2;
                        r6.chatActivityEnterView.setReplyingMessageObject(messageObjectToReply2);
                        if (r6.foundWebPage == null) {
                            String name;
                            if (messageObjectToReply2.isFromUser()) {
                                name = MessagesController.getInstance(r6.currentAccount).getUser(Integer.valueOf(messageObjectToReply2.messageOwner.from_id));
                                if (name != null) {
                                    name = UserObject.getUserName(name);
                                } else {
                                    return;
                                }
                            }
                            name = MessagesController.getInstance(r6.currentAccount).getChat(Integer.valueOf(messageObjectToReply2.messageOwner.to_id.channel_id));
                            if (name != null) {
                                name = name.title;
                            } else {
                                return;
                            }
                            r6.replyIconImageView.setImageResource(R.drawable.msg_panel_reply);
                            r6.replyNameTextView.setText(name);
                            if (messageObjectToReply2.messageOwner.media instanceof TL_messageMediaGame) {
                                r6.replyObjectTextView.setText(Emoji.replaceEmoji(messageObjectToReply2.messageOwner.media.game.title, r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            } else if (messageObjectToReply2.messageText != null) {
                                mess = messageObjectToReply2.messageText.toString();
                                if (mess.length() > 150) {
                                    mess = mess.substring(0, 150);
                                }
                                r6.replyObjectTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            }
                        } else {
                            return;
                        }
                    }
                    boolean z = true;
                    if (messageObjectsToForward2 == null) {
                        r6.replyIconImageView.setImageResource(R.drawable.msg_panel_link);
                        if (webPage2 instanceof TL_webPagePending) {
                            r6.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", R.string.GettingLinkInfo));
                            r6.replyObjectTextView.setText(r6.pendingLinkSearchString);
                        } else {
                            if (webPage2.site_name != null) {
                                r6.replyNameTextView.setText(webPage2.site_name);
                            } else if (webPage2.title != null) {
                                r6.replyNameTextView.setText(webPage2.title);
                            } else {
                                r6.replyNameTextView.setText(LocaleController.getString("LinkPreview", R.string.LinkPreview));
                            }
                            if (webPage2.title != null) {
                                r6.replyObjectTextView.setText(webPage2.title);
                            } else if (webPage2.description != null) {
                                r6.replyObjectTextView.setText(webPage2.description);
                            } else if (webPage2.author != null) {
                                r6.replyObjectTextView.setText(webPage2.author);
                            } else {
                                r6.replyObjectTextView.setText(webPage2.display_url);
                            }
                            r6.chatActivityEnterView.setWebPage(webPage2, true);
                        }
                    } else if (!messageObjectsToForward2.isEmpty()) {
                        r6.replyingMessageObject = null;
                        r6.chatActivityEnterView.setReplyingMessageObject(null);
                        r6.forwardingMessages = messageObjectsToForward2;
                        if (r6.foundWebPage == null) {
                            r6.chatActivityEnterView.setForceShowSendButton(true, false);
                            ArrayList<Integer> uids = new ArrayList();
                            r6.replyIconImageView.setImageResource(R.drawable.msg_panel_forward);
                            MessageObject object = (MessageObject) messageObjectsToForward2.get(0);
                            if (object.isFromUser()) {
                                uids.add(Integer.valueOf(object.messageOwner.from_id));
                            } else {
                                uids.add(Integer.valueOf(-object.messageOwner.to_id.channel_id));
                            }
                            int type = ((MessageObject) messageObjectsToForward2.get(0)).type;
                            for (int a = 1; a < messageObjectsToForward2.size(); a++) {
                                Integer uid;
                                MessageObject object2 = (MessageObject) messageObjectsToForward2.get(a);
                                if (object2.isFromUser()) {
                                    uid = Integer.valueOf(object2.messageOwner.from_id);
                                } else {
                                    uid = Integer.valueOf(-object2.messageOwner.to_id.channel_id);
                                }
                                if (!uids.contains(uid)) {
                                    uids.add(uid);
                                }
                                if (((MessageObject) messageObjectsToForward2.get(a)).type != type) {
                                    type = -1;
                                }
                            }
                            StringBuilder userNames = new StringBuilder();
                            int a2 = 0;
                            while (a2 < uids.size()) {
                                Integer uid2 = (Integer) uids.get(a2);
                                Chat chat = null;
                                User user = null;
                                if (uid2.intValue() > 0) {
                                    user = MessagesController.getInstance(r6.currentAccount).getUser(uid2);
                                } else {
                                    chat = MessagesController.getInstance(r6.currentAccount).getChat(Integer.valueOf(-uid2.intValue()));
                                }
                                Chat chat2 = chat;
                                User user2 = user;
                                if (user2 != null || chat2 != null) {
                                    if (uids.size() != z) {
                                        if (uids.size() != 2) {
                                            if (userNames.length() != 0) {
                                                userNames.append(" ");
                                                userNames.append(LocaleController.formatPluralString("AndOther", uids.size() - 1));
                                                break;
                                            }
                                        }
                                        if (userNames.length() > 0) {
                                            userNames.append(", ");
                                        }
                                        if (user2 == null) {
                                            userNames.append(chat2.title);
                                        } else if (!TextUtils.isEmpty(user2.first_name)) {
                                            userNames.append(user2.first_name);
                                        } else if (TextUtils.isEmpty(user2.last_name)) {
                                            userNames.append(" ");
                                        } else {
                                            userNames.append(user2.last_name);
                                        }
                                    } else if (user2 != null) {
                                        userNames.append(UserObject.getUserName(user2));
                                    } else {
                                        userNames.append(chat2.title);
                                    }
                                }
                                a2++;
                                z = true;
                            }
                            r6.replyNameTextView.setText(userNames);
                            if (!(type == -1 || type == 0 || type == 10)) {
                                if (type != 11) {
                                    if (type == 1) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPhoto", messageObjectsToForward2.size()));
                                        if (messageObjectsToForward2.size() == 1) {
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    } else if (type == 4) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedLocation", messageObjectsToForward2.size()));
                                    } else if (type == 3) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedVideo", messageObjectsToForward2.size()));
                                        if (messageObjectsToForward2.size() == 1) {
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    } else if (type == 12) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", messageObjectsToForward2.size()));
                                    } else if (type == 2) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", messageObjectsToForward2.size()));
                                    } else if (type == 5) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedRound", messageObjectsToForward2.size()));
                                    } else if (type == 14) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMusic", messageObjectsToForward2.size()));
                                    } else if (type == 13) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", messageObjectsToForward2.size()));
                                    } else if (type == 8 || type == 9) {
                                        if (messageObjectsToForward2.size() != 1) {
                                            r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedFile", messageObjectsToForward2.size()));
                                        } else if (type == 8) {
                                            r6.replyObjectTextView.setText(LocaleController.getString("AttachGif", R.string.AttachGif));
                                        } else {
                                            String documentFileName = FileLoader.getDocumentFileName(((MessageObject) messageObjectsToForward2.get(0)).getDocument());
                                            mess = documentFileName;
                                            if (documentFileName.length() != 0) {
                                                r6.replyObjectTextView.setText(mess);
                                            }
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    }
                                }
                            }
                            if (messageObjectsToForward2.size() != 1 || ((MessageObject) messageObjectsToForward2.get(0)).messageText == null) {
                                r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessageCount", messageObjectsToForward2.size()));
                            } else {
                                MessageObject messageObject2 = (MessageObject) messageObjectsToForward2.get(0);
                                if (messageObject2.messageOwner.media instanceof TL_messageMediaGame) {
                                    r6.replyObjectTextView.setText(Emoji.replaceEmoji(messageObject2.messageOwner.media.game.title, r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                } else {
                                    mess = messageObject2.messageText.toString();
                                    if (mess.length() > 150) {
                                        mess = mess.substring(0, 150);
                                    }
                                    r6.replyObjectTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                }
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                    FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) r6.replyNameTextView.getLayoutParams();
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) r6.replyObjectTextView.getLayoutParams();
                    PhotoSize photoSize = null;
                    if (messageObjectToReply2 != null) {
                        photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObjectToReply2.photoThumbs2, 80);
                        if (photoSize == null) {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObjectToReply2.photoThumbs, 80);
                        }
                    }
                    if (!(photoSize == null || (photoSize instanceof TL_photoSizeEmpty) || (photoSize.location instanceof TL_fileLocationUnavailable) || messageObjectToReply2.type == 13)) {
                        if (messageObjectToReply2 == null || !messageObjectToReply2.isSecretMedia()) {
                            if (messageObjectToReply2.isRoundVideo()) {
                                r6.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0f));
                            } else {
                                r6.replyImageView.setRoundRadius(0);
                            }
                            r6.replyImageLocation = photoSize.location;
                            r6.replyImageView.setImage(r6.replyImageLocation, "50_50", (Drawable) null);
                            r6.replyImageView.setVisibility(0);
                            dp = AndroidUtilities.dp(96.0f);
                            layoutParams2.leftMargin = dp;
                            layoutParams1.leftMargin = dp;
                            r6.replyNameTextView.setLayoutParams(layoutParams1);
                            r6.replyObjectTextView.setLayoutParams(layoutParams2);
                            r6.chatActivityEnterView.showTopView(false, openKeyboard);
                        }
                    }
                    r6.replyImageView.setImageBitmap(null);
                    r6.replyImageLocation = null;
                    r6.replyImageView.setVisibility(4);
                    dp = AndroidUtilities.dp(52.0f);
                    layoutParams2.leftMargin = dp;
                    layoutParams1.leftMargin = dp;
                    r6.replyNameTextView.setLayoutParams(layoutParams1);
                    r6.replyObjectTextView.setLayoutParams(layoutParams2);
                    r6.chatActivityEnterView.showTopView(false, openKeyboard);
                }
            } else if (r6.replyingMessageObject != null || r6.forwardingMessages != null || r6.foundWebPage != null) {
                boolean z2;
                if (r6.replyingMessageObject != null && (r6.replyingMessageObject.messageOwner.reply_markup instanceof TL_replyKeyboardForceReply)) {
                    Editor edit = MessagesController.getMainSettings(r6.currentAccount).edit();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("answered_");
                    stringBuilder.append(r6.dialog_id);
                    edit.putInt(stringBuilder.toString(), r6.replyingMessageObject.getId()).commit();
                }
                if (r6.foundWebPage != null) {
                    r6.foundWebPage = null;
                    r6.chatActivityEnterView.setWebPage(null, cancel ^ 1);
                    if (!(webPage2 == null || (r6.replyingMessageObject == null && r6.forwardingMessages == null))) {
                        showReplyPanel(true, r6.replyingMessageObject, r6.forwardingMessages, null, false);
                        return;
                    }
                }
                if (r6.forwardingMessages != null) {
                    z2 = false;
                    forwardMessages(r6.forwardingMessages, false);
                } else {
                    z2 = false;
                }
                r6.chatActivityEnterView.setForceShowSendButton(z2, z2);
                r6.chatActivityEnterView.hideTopView(z2);
                r6.chatActivityEnterView.setReplyingMessageObject(null);
                r6.replyingMessageObject = null;
                r6.forwardingMessages = null;
                r6.replyImageLocation = null;
                messageObjectsToForward2 = messageObjectsToForward;
                messageObjectToReply2 = messageObject;
            }
        }
    }

    private void moveScrollToLastMessage() {
        if (this.chatListView != null && !this.messages.isEmpty()) {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
        }
    }

    private boolean sendSecretMessageRead(MessageObject messageObject) {
        int i = 0;
        if (messageObject != null && !messageObject.isOut() && messageObject.isSecretMedia() && messageObject.messageOwner.destroyTime == 0) {
            if (messageObject.messageOwner.ttl > 0) {
                if (this.currentEncryptedChat != null) {
                    MessagesController.getInstance(this.currentAccount).markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
                } else {
                    MessagesController instance = MessagesController.getInstance(this.currentAccount);
                    int id = messageObject.getId();
                    if (ChatObject.isChannel(this.currentChat)) {
                        i = this.currentChat.id;
                    }
                    instance.markMessageAsRead(id, i, messageObject.messageOwner.ttl);
                }
                messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance(this.currentAccount).getCurrentTime();
                return true;
            }
        }
        return false;
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.progressView.setVisibility(this.chatAdapter.botInfoRow == -1 ? 0 : 4);
        this.chatListView.setEmptyView(null);
        for (int a = 0; a < 2; a++) {
            this.messagesDict[a].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[a] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                this.minMessageId[a] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[a] = Integer.MIN_VALUE;
                this.minMessageId[a] = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            this.maxDate[a] = Integer.MIN_VALUE;
            this.minDate[a] = 0;
            this.endReached[a] = false;
            this.cacheEndReached[a] = false;
            this.forwardEndReached[a] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    private void scrollToLastMessage(boolean pagedown) {
        if (!this.forwardEndReached[0] || this.first_unread_id != 0 || this.startLoadFromMessageId != 0) {
            clearChatData();
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController instance = MessagesController.getInstance(this.currentAccount);
            long j = this.dialog_id;
            int i = this.classGuid;
            boolean isChannel = ChatObject.isChannel(this.currentChat);
            int i2 = this.lastLoadIndex;
            this.lastLoadIndex = i2 + 1;
            instance.loadMessages(j, bot_help, 0, 0, true, 0, i, 0, 0, isChannel, i2);
        } else if (pagedown && this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
            showPagedownButton(false, true);
            this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            updateVisibleRows();
        } else {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
        }
    }

    private void updateTextureViewPosition() {
        if (this.fragmentView != null) {
            boolean foundTextureViewMessage = false;
            int count = this.chatListView.getChildCount();
            int additionalTop = this.chatActivityEnterView.isTopViewVisible() ? AndroidUtilities.dp(48.0f) : 0;
            for (int a = 0; a < count; a++) {
                View view = this.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell messageCell = (ChatMessageCell) view;
                    MessageObject messageObject = messageCell.getMessageObject();
                    if (this.roundVideoContainer != null && messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject)) {
                        ImageReceiver imageReceiver = messageCell.getPhotoImage();
                        this.roundVideoContainer.setTranslationX(((float) imageReceiver.getImageX()) + messageCell.getTranslationX());
                        this.roundVideoContainer.setTranslationY((float) (((this.fragmentView.getPaddingTop() + messageCell.getTop()) + imageReceiver.getImageY()) - additionalTop));
                        this.fragmentView.invalidate();
                        this.roundVideoContainer.invalidate();
                        foundTextureViewMessage = true;
                        break;
                    }
                }
            }
            if (this.roundVideoContainer != null) {
                MessageObject messageObject2 = MediaController.getInstance().getPlayingMessageObject();
                if (messageObject2 != null && messageObject2.eventId == 0) {
                    if (foundTextureViewMessage) {
                        MediaController.getInstance().setCurrentRoundVisible(true);
                        scrollToMessageId(messageObject2.getId(), 0, false, 0, true);
                    } else {
                        this.roundVideoContainer.setTranslationY((float) ((-AndroidUtilities.roundMessageSize) - 100));
                        this.fragmentView.invalidate();
                        if (messageObject2 != null && messageObject2.isRoundVideo()) {
                            if (!this.checkTextureViewPosition) {
                                if (PipRoundVideoView.getInstance() == null) {
                                    scrollToMessageId(messageObject2.getId(), 0, false, 0, true);
                                }
                            }
                            MediaController.getInstance().setCurrentRoundVisible(false);
                        }
                    }
                }
            }
        }
    }

    private void updateMessagesVisisblePart() {
        if (this.chatListView != null) {
            View view;
            View view2;
            int height;
            MessageObject messageObject;
            int count = r0.chatListView.getChildCount();
            int additionalTop = r0.chatActivityEnterView.isTopViewVisible() ? AndroidUtilities.dp(48.0f) : 0;
            int height2 = r0.chatListView.getMeasuredHeight();
            View minDateChild = null;
            View minChild = null;
            View minMessageChild = null;
            boolean foundTextureViewMessage = false;
            int maxNegativeUnreadId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int maxUnreadDate = Integer.MIN_VALUE;
            int minPositionHolder = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int minPositionDateHolder = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int maxPositiveUnreadId = Integer.MIN_VALUE;
            int a = 0;
            while (a < count) {
                int count2;
                View view3 = r0.chatListView.getChildAt(a);
                MessageObject messageObject2 = null;
                if (view3 instanceof ChatMessageCell) {
                    int viewTop;
                    MessageObject messageObject3;
                    ChatMessageCell messageCell = (ChatMessageCell) view3;
                    count2 = count;
                    count = messageCell.getTop();
                    int bottom = messageCell.getBottom();
                    if (count >= 0) {
                        view = minDateChild;
                        viewTop = 0;
                    } else {
                        view = minDateChild;
                        viewTop = -count;
                    }
                    view2 = minChild;
                    int viewBottom = messageCell.getMeasuredHeight();
                    if (viewBottom > height2) {
                        viewBottom = viewTop + height2;
                    }
                    height = height2;
                    messageCell.setVisiblePart(viewTop, viewBottom - viewTop);
                    height2 = messageCell.getMessageObject();
                    if (r0.roundVideoContainer != 0 && height2.isRoundVideo() && MediaController.getInstance().isPlayingMessage(height2)) {
                        minDateChild = messageCell.getPhotoImage();
                        messageObject3 = height2;
                        r0.roundVideoContainer.setTranslationX(((float) minDateChild.getImageX()) + messageCell.getTranslationX());
                        r0.roundVideoContainer.setTranslationY((float) (((r0.fragmentView.getPaddingTop() + count) + minDateChild.getImageY()) - additionalTop));
                        r0.fragmentView.invalidate();
                        r0.roundVideoContainer.invalidate();
                        foundTextureViewMessage = true;
                    } else {
                        messageObject3 = height2;
                    }
                    count = messageObject3;
                } else {
                    count2 = count;
                    height = height2;
                    view = minDateChild;
                    view2 = minChild;
                    if ((view3 instanceof ChatActionCell) != 0) {
                        messageObject2 = ((ChatActionCell) view3).getMessageObject();
                    }
                    count = messageObject2;
                }
                if (!(count == 0 || count.isOut() || !count.isUnread())) {
                    height2 = count.getId();
                    if (height2 > 0) {
                        maxPositiveUnreadId = Math.max(maxPositiveUnreadId, count.getId());
                    }
                    if (height2 < 0) {
                        maxNegativeUnreadId = Math.min(maxNegativeUnreadId, count.getId());
                    }
                    maxUnreadDate = Math.max(maxUnreadDate, count.messageOwner.date);
                }
                if (view3.getBottom() > r0.chatListView.getPaddingTop()) {
                    height2 = view3.getBottom();
                    if (height2 < minPositionHolder) {
                        minPositionHolder = height2;
                        if ((view3 instanceof ChatMessageCell) || (view3 instanceof ChatActionCell)) {
                            minMessageChild = view3;
                        }
                        view2 = view3;
                    }
                    if ((view3 instanceof ChatActionCell) && ((ChatActionCell) view3).getMessageObject().isDateObject) {
                        if (view3.getAlpha() != 1.0f) {
                            view3.setAlpha(1.0f);
                        }
                        if (height2 < minPositionDateHolder) {
                            minPositionDateHolder = height2;
                            minChild = view2;
                            minDateChild = view3;
                            a++;
                            count = count2;
                            height2 = height;
                        }
                    }
                }
                minDateChild = view;
                minChild = view2;
                a++;
                count = count2;
                height2 = height;
            }
            height = height2;
            view = minDateChild;
            view2 = minChild;
            if (r0.roundVideoContainer != null) {
                if (foundTextureViewMessage) {
                    MediaController.getInstance().setCurrentRoundVisible(true);
                } else {
                    r0.roundVideoContainer.setTranslationY((float) ((-AndroidUtilities.roundMessageSize) - 100));
                    r0.fragmentView.invalidate();
                    messageObject = MediaController.getInstance().getPlayingMessageObject();
                    if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 && r0.checkTextureViewPosition) {
                        MediaController.getInstance().setCurrentRoundVisible(false);
                    }
                }
            }
            if (minMessageChild != null) {
                if (minMessageChild instanceof ChatMessageCell) {
                    messageObject = ((ChatMessageCell) minMessageChild).getMessageObject();
                } else {
                    messageObject = ((ChatActionCell) minMessageChild).getMessageObject();
                }
                r0.floatingDateView.setCustomDate(messageObject.messageOwner.date);
            }
            r0.currentFloatingDateOnScreen = false;
            minChild = view2;
            boolean z = ((minChild instanceof ChatMessageCell) || (minChild instanceof ChatActionCell)) ? false : true;
            r0.currentFloatingTopIsNotMessage = z;
            if (view != null) {
                minDateChild = view;
                if (minDateChild.getTop() <= r0.chatListView.getPaddingTop()) {
                    if (!r0.currentFloatingTopIsNotMessage) {
                        if (minDateChild.getAlpha() != 0.0f) {
                            minDateChild.setAlpha(0.0f);
                        }
                        if (r0.floatingDateAnimation != null) {
                            r0.floatingDateAnimation.cancel();
                            r0.floatingDateAnimation = null;
                        }
                        if (r0.floatingDateView.getTag() == null) {
                            r0.floatingDateView.setTag(Integer.valueOf(1));
                        }
                        if (r0.floatingDateView.getAlpha() != 1.0f) {
                            r0.floatingDateView.setAlpha(1.0f);
                        }
                        r0.currentFloatingDateOnScreen = true;
                        height2 = minDateChild.getBottom() - r0.chatListView.getPaddingTop();
                        if (height2 > r0.floatingDateView.getMeasuredHeight() || height2 >= r0.floatingDateView.getMeasuredHeight() * 2) {
                            r0.floatingDateView.setTranslationY(0.0f);
                        } else {
                            r0.floatingDateView.setTranslationY((float) (((-r0.floatingDateView.getMeasuredHeight()) * 2) + height2));
                        }
                    }
                }
                if (minDateChild.getAlpha() != 1.0f) {
                    minDateChild.setAlpha(1.0f);
                }
                hideFloatingDateView(r0.currentFloatingTopIsNotMessage ^ true);
                height2 = minDateChild.getBottom() - r0.chatListView.getPaddingTop();
                if (height2 > r0.floatingDateView.getMeasuredHeight()) {
                }
                r0.floatingDateView.setTranslationY(0.0f);
            } else {
                hideFloatingDateView(true);
                r0.floatingDateView.setTranslationY(0.0f);
            }
            int i;
            int i2;
            if (r0.firstLoading) {
                i = minPositionDateHolder;
                i2 = maxUnreadDate;
                height2 = maxNegativeUnreadId;
            } else {
                MessagesController instance;
                long j;
                boolean z2;
                height2 = Integer.MIN_VALUE;
                if (maxPositiveUnreadId == Integer.MIN_VALUE) {
                    if (maxNegativeUnreadId == ConnectionsManager.DEFAULT_DATACENTER_ID) {
                        if (!r0.firstUnreadSent) {
                            r0.newUnreadMessageCount = 0;
                            r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                            if (r0.pagedownButtonCounter.getVisibility() != 4) {
                                r0.pagedownButtonCounter.setVisibility(4);
                            }
                            if (r0.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                                MessagesController.getInstance(r0.currentAccount).markDialogAsRead(r0.dialog_id, r0.minMessageId[0], r0.minMessageId[0], r0.maxDate[0], false, 0, true);
                                r0.firstUnreadSent = true;
                            }
                        }
                    }
                }
                a = 0;
                i2 = 0;
                while (i2 < r0.messages.size()) {
                    MessageObject messageObject4 = (MessageObject) r0.messages.get(i2);
                    count = messageObject4.getId();
                    if (maxPositiveUnreadId != height2 && count > 0 && count <= maxPositiveUnreadId && messageObject4.isUnread()) {
                        messageObject4.setIsRead();
                        a++;
                    }
                    if (maxNegativeUnreadId != ConnectionsManager.DEFAULT_DATACENTER_ID && count < 0 && count >= maxNegativeUnreadId && messageObject4.isUnread()) {
                        messageObject4.setIsRead();
                        a++;
                    }
                    i2++;
                    count = Integer.MAX_VALUE;
                    height2 = Integer.MIN_VALUE;
                }
                if (maxPositiveUnreadId != r0.minMessageId[0]) {
                    if (maxNegativeUnreadId != r0.minMessageId[0]) {
                        r0.newUnreadMessageCount -= a;
                        if (r0.newUnreadMessageCount < 0) {
                            r0.newUnreadMessageCount = 0;
                        }
                        r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                        if (r0.newUnreadMessageCount > 0) {
                            if (r0.pagedownButtonCounter.getVisibility() != 4) {
                                r0.pagedownButtonCounter.setVisibility(4);
                            }
                        } else if (r0.pagedownButtonCounter.getVisibility() != 0) {
                            r0.pagedownButtonCounter.setVisibility(0);
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.dialog_id;
                            if (maxPositiveUnreadId != r0.minMessageId[0]) {
                                if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                    z2 = false;
                                    i = minPositionDateHolder;
                                    height2 = maxNegativeUnreadId;
                                    instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                    r0.firstUnreadSent = true;
                                }
                            }
                            z2 = true;
                            i = minPositionDateHolder;
                            height2 = maxNegativeUnreadId;
                            instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                            r0.firstUnreadSent = true;
                        }
                        instance = MessagesController.getInstance(r0.currentAccount);
                        j = r0.dialog_id;
                        if (maxPositiveUnreadId != r0.minMessageId[0]) {
                            if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                z2 = false;
                                i = minPositionDateHolder;
                                height2 = maxNegativeUnreadId;
                                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                r0.firstUnreadSent = true;
                            }
                        }
                        z2 = true;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                }
                r0.newUnreadMessageCount = 0;
                r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                if (r0.newUnreadMessageCount > 0) {
                    if (r0.pagedownButtonCounter.getVisibility() != 0) {
                        r0.pagedownButtonCounter.setVisibility(0);
                        instance = MessagesController.getInstance(r0.currentAccount);
                        j = r0.dialog_id;
                        if (maxPositiveUnreadId != r0.minMessageId[0]) {
                            if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                z2 = false;
                                i = minPositionDateHolder;
                                height2 = maxNegativeUnreadId;
                                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                r0.firstUnreadSent = true;
                            }
                        }
                        z2 = true;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                } else if (r0.pagedownButtonCounter.getVisibility() != 4) {
                    r0.pagedownButtonCounter.setVisibility(4);
                }
                instance = MessagesController.getInstance(r0.currentAccount);
                j = r0.dialog_id;
                if (maxPositiveUnreadId != r0.minMessageId[0]) {
                    if (maxNegativeUnreadId != r0.minMessageId[0]) {
                        z2 = false;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                }
                z2 = true;
                i = minPositionDateHolder;
                height2 = maxNegativeUnreadId;
                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                r0.firstUnreadSent = true;
            }
        }
    }

    private void toggleMute(boolean instant) {
        Editor editor;
        StringBuilder stringBuilder;
        if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id)) {
            editor = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            stringBuilder = new StringBuilder();
            stringBuilder.append("notify2_");
            stringBuilder.append(this.dialog_id);
            editor.putInt(stringBuilder.toString(), 0);
            MessagesStorage.getInstance(this.currentAccount).setDialogFlags(this.dialog_id, 0);
            editor.commit();
            TL_dialog dialog = (TL_dialog) MessagesController.getInstance(this.currentAccount).dialogs_dict.get(this.dialog_id);
            if (dialog != null) {
                dialog.notify_settings = new TL_peerNotifySettings();
            }
            NotificationsController.getInstance(this.currentAccount).updateServerNotificationsSettings(this.dialog_id);
        } else if (instant) {
            editor = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            stringBuilder = new StringBuilder();
            stringBuilder.append("notify2_");
            stringBuilder.append(this.dialog_id);
            editor.putInt(stringBuilder.toString(), 2);
            MessagesStorage.getInstance(this.currentAccount).setDialogFlags(this.dialog_id, 1);
            editor.commit();
            TL_dialog dialog2 = (TL_dialog) MessagesController.getInstance(this.currentAccount).dialogs_dict.get(this.dialog_id);
            if (dialog2 != null) {
                dialog2.notify_settings = new TL_peerNotifySettings();
                dialog2.notify_settings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            NotificationsController.getInstance(this.currentAccount).updateServerNotificationsSettings(this.dialog_id);
            NotificationsController.getInstance(this.currentAccount).removeNotificationsForDialog(this.dialog_id);
        } else {
            showDialog(AlertsCreator.createMuteAlert(getParentActivity(), this.dialog_id));
        }
    }

    private int getScrollOffsetForMessage(MessageObject object) {
        int offset = ConnectionsManager.DEFAULT_DATACENTER_ID;
        GroupedMessages groupedMessages = getValidGroupedMessage(object);
        if (groupedMessages != null) {
            float itemHeight;
            GroupedMessagePosition currentPosition = (GroupedMessagePosition) groupedMessages.positions.get(object);
            float maxH = ((float) Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) * 0.5f;
            if (currentPosition.siblingHeights != null) {
                itemHeight = currentPosition.siblingHeights[0];
            } else {
                itemHeight = currentPosition.ph;
            }
            SparseBooleanArray array = new SparseBooleanArray();
            float moveDiff = 0.0f;
            float totalHeight = 0.0f;
            for (int a = 0; a < groupedMessages.posArray.size(); a++) {
                GroupedMessagePosition pos = (GroupedMessagePosition) groupedMessages.posArray.get(a);
                if (array.indexOfKey(pos.minY) < 0 && pos.siblingHeights == null) {
                    array.put(pos.minY, true);
                    if (pos.minY < currentPosition.minY) {
                        moveDiff -= pos.ph;
                    } else if (pos.minY > currentPosition.minY) {
                        moveDiff += pos.ph;
                    }
                    totalHeight += pos.ph;
                }
            }
            if (Math.abs(totalHeight - itemHeight) < 0.02f) {
                offset = ((((int) (((float) this.chatListView.getMeasuredHeight()) - (totalHeight * maxH))) / 2) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(7.0f);
            } else {
                offset = ((((int) (((float) this.chatListView.getMeasuredHeight()) - ((itemHeight + moveDiff) * maxH))) / 2) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(7.0f);
            }
        }
        return Math.max(0, offset == ConnectionsManager.DEFAULT_DATACENTER_ID ? (this.chatListView.getMeasuredHeight() - object.getApproximateHeight()) / 2 : offset);
    }

    public void scrollToMessageId(int id, int fromMessageId, boolean select, int loadIndex, boolean smooth) {
        boolean query;
        int i = id;
        boolean z = select;
        int i2 = loadIndex;
        this.wasManualScroll = true;
        MessageObject object = (MessageObject) this.messagesDict[i2].get(i);
        boolean query2 = false;
        if (object == null) {
            query = false;
            query = true;
        } else if (r0.messages.indexOf(object) != -1) {
            if (z) {
                r0.highlightMessageId = i;
            } else {
                r0.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            int yOffset = getScrollOffsetForMessage(object);
            int a = 0;
            if (smooth) {
                if (r0.messages.get(r0.messages.size() - 1) == object) {
                    r0.chatListView.smoothScrollToPosition(r0.chatAdapter.getItemCount() - 1);
                } else {
                    r0.chatListView.smoothScrollToPosition(r0.chatAdapter.messagesStartRow + r0.messages.indexOf(object));
                }
            } else if (r0.messages.get(r0.messages.size() - 1) == object) {
                r0.chatLayoutManager.scrollToPositionWithOffset(r0.chatAdapter.getItemCount() - 1, yOffset, false);
            } else {
                r0.chatLayoutManager.scrollToPositionWithOffset(r0.chatAdapter.messagesStartRow + r0.messages.indexOf(object), yOffset, false);
            }
            updateVisibleRows();
            boolean found = false;
            int count = r0.chatListView.getChildCount();
            while (a < count) {
                View view = r0.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) view).getMessageObject();
                    if (messageObject != null) {
                        query = query2;
                        if (messageObject.getId() == object.getId()) {
                            found = true;
                            break;
                        }
                    }
                    query = query2;
                } else {
                    query = query2;
                    if (view instanceof ChatActionCell) {
                        query2 = ((ChatActionCell) view).getMessageObject();
                        if (query2 && query2.getId() == object.getId()) {
                            found = true;
                            break;
                        }
                    }
                    continue;
                }
                a++;
                query2 = query;
            }
            query = query2;
            if (!found) {
                showPagedownButton(true, true);
            }
        } else {
            query = false;
            query = true;
        }
        if (query) {
            if (r0.currentEncryptedChat == null || MessagesStorage.getInstance(r0.currentAccount).checkMessageId(r0.dialog_id, r0.startLoadFromMessageId)) {
                r0.waitingForLoad.clear();
                r0.waitingForReplyMessageLoad = true;
                r0.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                r0.scrollToMessagePosition = -10000;
                r0.startLoadFromMessageId = i;
                if (i == r0.createUnreadMessageAfterId) {
                    r0.createUnreadMessageAfterIdLoading = true;
                }
                r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                MessagesController instance = MessagesController.getInstance(r0.currentAccount);
                long j = i2 == 0 ? r0.dialog_id : r0.mergeDialogId;
                int i3 = AndroidUtilities.isTablet() ? bot_help : 20;
                int i4 = r0.startLoadFromMessageId;
                int i5 = r0.classGuid;
                boolean isChannel = ChatObject.isChannel(r0.currentChat);
                int i6 = r0.lastLoadIndex;
                r0.lastLoadIndex = i6 + 1;
                instance.loadMessages(j, i3, i4, 0, true, 0, i5, 3, 0, isChannel, i6);
            } else {
                return;
            }
        }
        r0.returnToMessageId = fromMessageId;
        r0.returnToLoadIndex = i2;
        r0.needSelectFromMessageId = z;
    }

    private void showPagedownButton(boolean show, boolean animated) {
        if (this.pagedownButton != null) {
            Animator[] animatorArr;
            AnimatorSet animatorSet;
            if (show) {
                this.pagedownButtonShowedByScroll = false;
                if (this.pagedownButton.getTag() == null) {
                    if (this.pagedownButtonAnimation != null) {
                        this.pagedownButtonAnimation.cancel();
                        this.pagedownButtonAnimation = null;
                    }
                    if (animated) {
                        if (this.pagedownButton.getTranslationY() == 0.0f) {
                            this.pagedownButton.setTranslationY((float) AndroidUtilities.dp(100.0f));
                        }
                        this.pagedownButton.setVisibility(0);
                        this.pagedownButton.setTag(Integer.valueOf(1));
                        this.pagedownButtonAnimation = new AnimatorSet();
                        if (this.mentiondownButton.getVisibility() == 0) {
                            AnimatorSet animatorSet2 = this.pagedownButtonAnimation;
                            animatorArr = new Animator[2];
                            animatorArr[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{0.0f});
                            animatorArr[1] = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{(float) (-AndroidUtilities.dp(72.0f))});
                            animatorSet2.playTogether(animatorArr);
                        } else {
                            animatorSet = this.pagedownButtonAnimation;
                            Animator[] animatorArr2 = new Animator[1];
                            animatorArr2[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{0.0f});
                            animatorSet.playTogether(animatorArr2);
                        }
                        this.pagedownButtonAnimation.setDuration(200);
                        this.pagedownButtonAnimation.start();
                    } else {
                        this.pagedownButton.setVisibility(0);
                    }
                }
            } else {
                this.returnToMessageId = 0;
                this.newUnreadMessageCount = 0;
                if (this.pagedownButton.getTag() != null) {
                    this.pagedownButton.setTag(null);
                    if (this.pagedownButtonAnimation != null) {
                        this.pagedownButtonAnimation.cancel();
                        this.pagedownButtonAnimation = null;
                    }
                    if (animated) {
                        this.pagedownButtonAnimation = new AnimatorSet();
                        if (this.mentiondownButton.getVisibility() == 0) {
                            AnimatorSet animatorSet3 = this.pagedownButtonAnimation;
                            animatorArr = new Animator[2];
                            animatorArr[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)});
                            animatorArr[1] = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{0.0f});
                            animatorSet3.playTogether(animatorArr);
                        } else {
                            animatorSet = this.pagedownButtonAnimation;
                            Animator[] animatorArr3 = new Animator[1];
                            animatorArr3[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)});
                            animatorSet.playTogether(animatorArr3);
                        }
                        this.pagedownButtonAnimation.setDuration(200);
                        this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                            public void onAnimationEnd(Animator animation) {
                                ChatActivity.this.pagedownButtonCounter.setVisibility(4);
                                ChatActivity.this.pagedownButton.setVisibility(4);
                            }
                        });
                        this.pagedownButtonAnimation.start();
                    } else {
                        this.pagedownButton.setVisibility(4);
                    }
                }
            }
        }
    }

    private void showMentiondownButton(boolean show, boolean animated) {
        if (this.mentiondownButton != null) {
            if (!show) {
                this.returnToMessageId = 0;
                if (this.mentiondownButton.getTag() != null) {
                    this.mentiondownButton.setTag(null);
                    if (this.mentiondownButtonAnimation != null) {
                        this.mentiondownButtonAnimation.cancel();
                        this.mentiondownButtonAnimation = null;
                    }
                    if (animated) {
                        if (this.pagedownButton.getVisibility() == 0) {
                            this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "alpha", new float[]{1.0f, 0.0f}).setDuration(200);
                        } else {
                            this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)}).setDuration(200);
                        }
                        this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                            public void onAnimationEnd(Animator animation) {
                                ChatActivity.this.mentiondownButtonCounter.setVisibility(4);
                                ChatActivity.this.mentiondownButton.setVisibility(4);
                            }
                        });
                        this.mentiondownButtonAnimation.start();
                    } else {
                        this.mentiondownButton.setVisibility(4);
                    }
                }
            } else if (this.mentiondownButton.getTag() == null) {
                if (this.mentiondownButtonAnimation != null) {
                    this.mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (animated) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag(Integer.valueOf(1));
                    if (this.pagedownButton.getVisibility() == 0) {
                        this.mentiondownButton.setTranslationY((float) (-AndroidUtilities.dp(72.0f)));
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "alpha", new float[]{0.0f, 1.0f}).setDuration(200);
                    } else {
                        if (this.mentiondownButton.getTranslationY() == 0.0f) {
                            this.mentiondownButton.setTranslationY((float) AndroidUtilities.dp(100.0f));
                        }
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{0.0f}).setDuration(200);
                    }
                    this.mentiondownButtonAnimation.start();
                } else {
                    this.mentiondownButton.setVisibility(0);
                }
            }
        }
    }

    private void updateSecretStatus() {
        if (this.bottomOverlay != null) {
            boolean hideKeyboard = false;
            if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_messages) {
                if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights.until_date)) {
                    this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", R.string.SendMessageRestrictedForever));
                } else {
                    this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan((long) this.currentChat.banned_rights.until_date)));
                }
                this.bottomOverlay.setVisibility(0);
                if (this.mentionListAnimation != null) {
                    this.mentionListAnimation.cancel();
                    this.mentionListAnimation = null;
                }
                this.mentionContainer.setVisibility(8);
                this.mentionContainer.setTag(null);
                hideKeyboard = true;
            } else {
                if (this.currentEncryptedChat != null) {
                    if (this.bigEmptyView != null) {
                        if (this.currentEncryptedChat instanceof TL_encryptedChatRequested) {
                            this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
                            this.bottomOverlay.setVisibility(0);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChatWaiting) {
                            TextView textView = this.bottomOverlayText;
                            Object[] objArr = new Object[1];
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("<b>");
                            stringBuilder.append(this.currentUser.first_name);
                            stringBuilder.append("</b>");
                            objArr[0] = stringBuilder.toString();
                            textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, objArr)));
                            this.bottomOverlay.setVisibility(0);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChatDiscarded) {
                            this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
                            this.bottomOverlay.setVisibility(0);
                            this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                            DataQuery.getInstance(this.currentAccount).cleanDraft(this.dialog_id, false);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChat) {
                            this.bottomOverlay.setVisibility(4);
                        }
                        checkRaiseSensors();
                        checkActionBarMenu();
                    }
                }
                this.bottomOverlay.setVisibility(4);
                return;
            }
            if (hideKeyboard) {
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
            }
        }
    }

    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        if (this.mentionsAdapter != null) {
            this.mentionsAdapter.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        if (requestCode == 17 && this.chatAttachAlert != null) {
            this.chatAttachAlert.checkCamera(false);
        } else if (requestCode == 21) {
            if (!(getParentActivity() == null || grantResults == null || grantResults.length == 0 || grantResults[0] == 0)) {
                Builder builder = new Builder(getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("PermissionNoAudioVideo", R.string.PermissionNoAudioVideo));
                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), new OnClickListener() {
                    @TargetApi(9)
                    public void onClick(DialogInterface dialog, int which) {
                        try {
                            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("package:");
                            stringBuilder.append(ApplicationLoader.applicationContext.getPackageName());
                            intent.setData(Uri.parse(stringBuilder.toString()));
                            ChatActivity.this.getParentActivity().startActivity(intent);
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                builder.show();
            }
        } else if (requestCode == 19 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
            processSelectedAttach(0);
        } else if (requestCode == 20 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
            processSelectedAttach(2);
        } else if (requestCode == 101 && this.currentUser != null) {
            if (grantResults.length <= 0 || grantResults[0] != 0) {
                VoIPHelper.permissionDenied(getParentActivity(), null);
            } else {
                VoIPHelper.startCall(this.currentUser, getParentActivity(), MessagesController.getInstance(this.currentAccount).getUserFull(this.currentUser.id));
            }
        }
    }

    private void checkActionBarMenu() {
        if ((this.currentEncryptedChat == null || (this.currentEncryptedChat instanceof TL_encryptedChat)) && ((this.currentChat == null || !ChatObject.isNotInChat(this.currentChat)) && (this.currentUser == null || !UserObject.isDeleted(this.currentUser)))) {
            if (this.timeItem2 != null) {
                this.timeItem2.setVisibility(0);
            }
            if (this.avatarContainer != null) {
                this.avatarContainer.showTimeItem();
            }
        } else {
            if (this.timeItem2 != null) {
                this.timeItem2.setVisibility(8);
            }
            if (this.avatarContainer != null) {
                this.avatarContainer.hideTimeItem();
            }
        }
        if (!(this.avatarContainer == null || this.currentEncryptedChat == null)) {
            this.avatarContainer.setTime(this.currentEncryptedChat.ttl);
        }
        checkAndUpdateAvatar();
    }

    private int getMessageType(MessageObject messageObject) {
        ChatActivity chatActivity = this;
        MessageObject messageObject2 = messageObject;
        if (messageObject2 == null) {
            return -1;
        }
        InputStickerSet inputStickerSet;
        boolean canSave;
        if (chatActivity.currentEncryptedChat == null) {
            boolean isBroadcastError = chatActivity.isBroadcast && messageObject.getId() <= 0 && messageObject.isSendError();
            if ((chatActivity.isBroadcast || messageObject.getId() > 0 || !messageObject.isOut()) && !isBroadcastError) {
                if (messageObject2.type == 6) {
                    return -1;
                }
                if (!(messageObject2.type == 10 || messageObject2.type == 11)) {
                    if (messageObject2.type != 16) {
                        if (messageObject.isVoice()) {
                            return 2;
                        }
                        if (messageObject.isSticker()) {
                            inputStickerSet = messageObject.getInputStickerSet();
                            if (inputStickerSet instanceof TL_inputStickerSetID) {
                                if (!DataQuery.getInstance(chatActivity.currentAccount).isStickerPackInstalled(inputStickerSet.id)) {
                                    return 7;
                                }
                            } else if ((inputStickerSet instanceof TL_inputStickerSetShortName) && !DataQuery.getInstance(chatActivity.currentAccount).isStickerPackInstalled(inputStickerSet.short_name)) {
                                return 7;
                            }
                            return 9;
                        }
                        if (!messageObject.isRoundVideo() || (messageObject.isRoundVideo() && BuildVars.DEBUG_VERSION)) {
                            if (!((messageObject2.messageOwner.media instanceof TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic())) {
                                if (messageObject.isVideo()) {
                                }
                            }
                            canSave = false;
                            if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath) && new File(messageObject2.messageOwner.attachPath).exists()) {
                                canSave = true;
                            }
                            if (!canSave && FileLoader.getPathToMessage(messageObject2.messageOwner).exists()) {
                                canSave = true;
                            }
                            if (canSave) {
                                if (messageObject.getDocument() != null) {
                                    String mime = messageObject.getDocument().mime_type;
                                    if (mime != null) {
                                        if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                            return 10;
                                        }
                                        if (mime.endsWith("/xml")) {
                                            return 5;
                                        }
                                        if (mime.endsWith("/png") || mime.endsWith("/jpg") || mime.endsWith("/jpeg")) {
                                            return 6;
                                        }
                                    }
                                }
                                return 4;
                            }
                        }
                        if (messageObject2.type == 12) {
                            return 8;
                        }
                        return messageObject.isMediaEmpty() ? 3 : 2;
                    }
                }
                if (messageObject.getId() == 0) {
                    return -1;
                }
                return 1;
            } else if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            } else {
                return -1;
            }
        } else if (messageObject.isSending() || messageObject2.type == 6) {
            return -1;
        } else {
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            } else {
                if (messageObject2.type != 10) {
                    if (messageObject2.type != 11) {
                        if (messageObject.isVoice()) {
                            return 2;
                        }
                        if (messageObject.isSticker()) {
                            inputStickerSet = messageObject.getInputStickerSet();
                            if ((inputStickerSet instanceof TL_inputStickerSetShortName) && !DataQuery.getInstance(chatActivity.currentAccount).isStickerPackInstalled(inputStickerSet.short_name)) {
                                return 7;
                            }
                        } else if (!messageObject.isRoundVideo() && ((messageObject2.messageOwner.media instanceof TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                            canSave = false;
                            if (!TextUtils.isEmpty(messageObject2.messageOwner.attachPath) && new File(messageObject2.messageOwner.attachPath).exists()) {
                                canSave = true;
                            }
                            if (!canSave && FileLoader.getPathToMessage(messageObject2.messageOwner).exists()) {
                                canSave = true;
                            }
                            if (canSave) {
                                if (messageObject.getDocument() != null) {
                                    String mime2 = messageObject.getDocument().mime_type;
                                    if (mime2 != null && mime2.endsWith("text/xml")) {
                                        return 5;
                                    }
                                }
                                if (messageObject2.messageOwner.ttl <= 0) {
                                    return 4;
                                }
                            }
                        } else if (messageObject2.type == 12) {
                            return 8;
                        } else {
                            if (messageObject.isMediaEmpty()) {
                                return 3;
                            }
                        }
                        return 2;
                    }
                }
                if (messageObject.getId() != 0) {
                    if (!messageObject.isSending()) {
                        return 1;
                    }
                }
                return -1;
            }
        }
    }

    private void addToSelectedMessages(MessageObject messageObject, boolean outside) {
        addToSelectedMessages(messageObject, outside, true);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void addToSelectedMessages(MessageObject messageObject, boolean outside, boolean last) {
        int a;
        ChatActivity chatActivity = this;
        MessageObject messageObject2 = messageObject;
        if (messageObject2 != null) {
            int index = messageObject.getDialogId() == chatActivity.dialog_id ? 0 : 1;
            if (outside && messageObject.getGroupId() != 0) {
                GroupedMessages groupedMessages = (GroupedMessages) chatActivity.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    int lastNum = 0;
                    boolean hasUnselected = false;
                    for (a = 0; a < groupedMessages.messages.size(); a++) {
                        if (chatActivity.selectedMessagesIds[index].indexOfKey(((MessageObject) groupedMessages.messages.get(a)).getId()) < 0) {
                            hasUnselected = true;
                            lastNum = a;
                        }
                    }
                    a = 0;
                    while (a < groupedMessages.messages.size()) {
                        MessageObject message = (MessageObject) groupedMessages.messages.get(a);
                        if (!hasUnselected) {
                            addToSelectedMessages(message, false, a == groupedMessages.messages.size() - 1);
                        } else if (chatActivity.selectedMessagesIds[index].indexOfKey(message.getId()) < 0) {
                            addToSelectedMessages(message, false, a == lastNum);
                        }
                        a++;
                    }
                }
                return;
            } else if (chatActivity.selectedMessagesIds[index].indexOfKey(messageObject.getId()) >= 0) {
                chatActivity.selectedMessagesIds[index].remove(messageObject.getId());
                if (messageObject2.type == 0 || messageObject2.caption != null) {
                    chatActivity.selectedMessagesCanCopyIds[index].remove(messageObject.getId());
                }
                if (messageObject.isSticker()) {
                    chatActivity.selectedMessagesCanStarIds[index].remove(messageObject.getId());
                }
                if (messageObject2.canEditMessage(chatActivity.currentChat) && messageObject.getGroupId() != 0) {
                    groupedMessages = (GroupedMessages) chatActivity.groupedMessagesMap.get(messageObject.getGroupId());
                    if (groupedMessages != null && groupedMessages.messages.size() > 1) {
                        chatActivity.canEditMessagesCount--;
                    }
                }
                if (!messageObject2.canDeleteMessage(chatActivity.currentChat)) {
                    chatActivity.cantDeleteMessagesCount--;
                }
            } else if (chatActivity.selectedMessagesIds[0].size() + chatActivity.selectedMessagesIds[1].size() < 100) {
                chatActivity.selectedMessagesIds[index].put(messageObject.getId(), messageObject2);
                if (messageObject2.type == 0 || messageObject2.caption != null) {
                    chatActivity.selectedMessagesCanCopyIds[index].put(messageObject.getId(), messageObject2);
                }
                if (messageObject.isSticker()) {
                    chatActivity.selectedMessagesCanStarIds[index].put(messageObject.getId(), messageObject2);
                }
                if (messageObject2.canEditMessage(chatActivity.currentChat) && messageObject.getGroupId() != 0) {
                    groupedMessages = (GroupedMessages) chatActivity.groupedMessagesMap.get(messageObject.getGroupId());
                    if (groupedMessages != null && groupedMessages.messages.size() > 1) {
                        chatActivity.canEditMessagesCount++;
                    }
                }
                if (!messageObject2.canDeleteMessage(chatActivity.currentChat)) {
                    chatActivity.cantDeleteMessagesCount++;
                }
            } else {
                return;
            }
        }
        if (last && chatActivity.actionBar.isActionModeShowed()) {
            a = chatActivity.selectedMessagesIds[0].size() + chatActivity.selectedMessagesIds[1].size();
            if (a == 0) {
                chatActivity.actionBar.hideActionMode();
                updatePinnedMessageView(true);
                chatActivity.startReplyOnTextChange = false;
            } else {
                int i;
                ActionBarMenuItem copyItem = chatActivity.actionBar.createActionMode().getItem(10);
                ActionBarMenuItem starItem = chatActivity.actionBar.createActionMode().getItem(22);
                ActionBarMenuItem editItem = chatActivity.actionBar.createActionMode().getItem(edit);
                final ActionBarMenuItem replyItem = chatActivity.actionBar.createActionMode().getItem(19);
                int copyVisible = copyItem.getVisibility();
                int starVisible = starItem.getVisibility();
                copyItem.setVisibility(chatActivity.selectedMessagesCanCopyIds[0].size() + chatActivity.selectedMessagesCanCopyIds[1].size() != 0 ? 0 : 8);
                int i2 = (DataQuery.getInstance(chatActivity.currentAccount).canAddStickerToFavorites() && chatActivity.selectedMessagesCanStarIds[0].size() + chatActivity.selectedMessagesCanStarIds[1].size() == a) ? 0 : 8;
                starItem.setVisibility(i2);
                i2 = copyItem.getVisibility();
                int newStarVisible = starItem.getVisibility();
                chatActivity.actionBar.createActionMode().getItem(12).setVisibility(chatActivity.cantDeleteMessagesCount == 0 ? 0 : 8);
                if (editItem != null) {
                    i = (chatActivity.canEditMessagesCount == 1 && chatActivity.selectedMessagesIds[0].size() + chatActivity.selectedMessagesIds[1].size() == 1) ? 0 : 8;
                    editItem.setVisibility(i);
                }
                chatActivity.hasUnfavedSelected = false;
                i = 0;
                while (i < 2) {
                    int b = 0;
                    while (true) {
                        int b2 = b;
                        if (b2 >= chatActivity.selectedMessagesCanStarIds[i].size()) {
                            break;
                        }
                        if (!DataQuery.getInstance(chatActivity.currentAccount).isStickerInFavorites(((MessageObject) chatActivity.selectedMessagesCanStarIds[i].valueAt(b2)).getDocument())) {
                            break;
                        }
                        b = b2 + 1;
                        messageObject2 = messageObject;
                    }
                    if (chatActivity.hasUnfavedSelected) {
                        break;
                    }
                    i++;
                    messageObject2 = messageObject;
                }
                starItem.setIcon(chatActivity.hasUnfavedSelected ? R.drawable.ic_ab_fave : R.drawable.ic_ab_unfave);
                if (replyItem != null) {
                    boolean allowChatActions = true;
                    if ((chatActivity.currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) < 46) || chatActivity.isBroadcast || ((chatActivity.bottomOverlayChat != null && chatActivity.bottomOverlayChat.getVisibility() == 0) || (chatActivity.currentChat != null && (ChatObject.isNotInChat(chatActivity.currentChat) || !((!ChatObject.isChannel(chatActivity.currentChat) || ChatObject.canPost(chatActivity.currentChat) || chatActivity.currentChat.megagroup) && ChatObject.canSendMessages(chatActivity.currentChat)))))) {
                        allowChatActions = false;
                    }
                    int i3 = (allowChatActions && chatActivity.selectedMessagesIds[0].size() + chatActivity.selectedMessagesIds[1].size() == 1) ? 0 : 8;
                    i = i3;
                    boolean z = i == 0 && !chatActivity.chatActivityEnterView.hasText();
                    chatActivity.startReplyOnTextChange = z;
                    if (replyItem.getVisibility() != i) {
                        if (chatActivity.replyButtonAnimation != null) {
                            chatActivity.replyButtonAnimation.cancel();
                        }
                        boolean z2;
                        int i4;
                        ActionBarMenuItem actionBarMenuItem;
                        if (copyVisible != i2) {
                            z2 = allowChatActions;
                            i4 = a;
                            actionBarMenuItem = copyItem;
                        } else if (starVisible != newStarVisible) {
                            z2 = allowChatActions;
                            i4 = a;
                            actionBarMenuItem = copyItem;
                        } else {
                            chatActivity.replyButtonAnimation = new AnimatorSet();
                            replyItem.setPivotX((float) AndroidUtilities.dp(54.0f));
                            editItem.setPivotX((float) AndroidUtilities.dp(54.0f));
                            if (i == 0) {
                                replyItem.setVisibility(i);
                                AnimatorSet animatorSet = chatActivity.replyButtonAnimation;
                                Animator[] animatorArr = new Animator[4];
                                animatorArr[0] = ObjectAnimator.ofFloat(replyItem, "alpha", new float[]{1.0f});
                                animatorArr[1] = ObjectAnimator.ofFloat(replyItem, "scaleX", new float[]{1.0f});
                                animatorArr[2] = ObjectAnimator.ofFloat(editItem, "alpha", new float[]{1.0f});
                                animatorArr[3] = ObjectAnimator.ofFloat(editItem, "scaleX", new float[]{1.0f});
                                animatorSet.playTogether(animatorArr);
                            } else {
                                i4 = a;
                                actionBarMenuItem = copyItem;
                                AnimatorSet animatorSet2 = chatActivity.replyButtonAnimation;
                                Animator[] animatorArr2 = new Animator[4];
                                animatorArr2[0] = ObjectAnimator.ofFloat(replyItem, "alpha", new float[]{0.0f});
                                animatorArr2[1] = ObjectAnimator.ofFloat(replyItem, "scaleX", new float[]{0.0f});
                                animatorArr2[2] = ObjectAnimator.ofFloat(editItem, "alpha", new float[]{0.0f});
                                animatorArr2[3] = ObjectAnimator.ofFloat(editItem, "scaleX", new float[]{0.0f});
                                animatorSet2.playTogether(animatorArr2);
                            }
                            chatActivity.replyButtonAnimation.setDuration(100);
                            chatActivity.replyButtonAnimation.addListener(new AnimatorListenerAdapter() {
                                public void onAnimationEnd(Animator animation) {
                                    if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(animation) && i == 8) {
                                        replyItem.setVisibility(8);
                                    }
                                }

                                public void onAnimationCancel(Animator animation) {
                                    if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(animation)) {
                                        ChatActivity.this.replyButtonAnimation = null;
                                    }
                                }
                            });
                            chatActivity.replyButtonAnimation.start();
                        }
                        if (i == 0) {
                            replyItem.setAlpha(1.0f);
                            replyItem.setScaleX(1.0f);
                        } else {
                            replyItem.setAlpha(0.0f);
                            replyItem.setScaleX(0.0f);
                        }
                        replyItem.setVisibility(i);
                    }
                }
            }
        }
    }

    private void processRowSelect(View view, boolean outside) {
        MessageObject message = null;
        if (view instanceof ChatMessageCell) {
            message = ((ChatMessageCell) view).getMessageObject();
        } else if (view instanceof ChatActionCell) {
            message = ((ChatActionCell) view).getMessageObject();
        }
        int type = getMessageType(message);
        if (type >= 2) {
            if (type != 20) {
                addToSelectedMessages(message, outside);
                updateActionModeTitle();
                updateVisibleRows();
            }
        }
    }

    private void updateActionModeTitle() {
        if (this.actionBar.isActionModeShowed()) {
            if (!(this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0)) {
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
            }
        }
    }

    private void updateTitle() {
        if (this.avatarContainer != null) {
            if (this.currentChat != null) {
                this.avatarContainer.setTitle(this.currentChat.title);
            } else if (this.currentUser != null) {
                if (this.currentUser.self) {
                    this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
                } else if (MessagesController.isSupportId(this.currentUser.id) || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) != null || (ContactsController.getInstance(this.currentAccount).contactsDict.size() == 0 && ContactsController.getInstance(this.currentAccount).isLoadingContacts())) {
                    this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser));
                } else if (TextUtils.isEmpty(this.currentUser.phone)) {
                    this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser));
                } else {
                    ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                    PhoneFormat instance = PhoneFormat.getInstance();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("+");
                    stringBuilder.append(this.currentUser.phone);
                    chatAvatarContainer.setTitle(instance.format(stringBuilder.toString()));
                }
            }
        }
    }

    private void updateBotButtons() {
        if (!(this.headerItem == null || this.currentUser == null || this.currentEncryptedChat != null)) {
            if (this.currentUser.bot) {
                boolean hasHelp = false;
                boolean hasSettings = false;
                if (this.botInfo.size() != 0) {
                    boolean hasSettings2 = false;
                    hasSettings = false;
                    for (int b = 0; b < this.botInfo.size(); b++) {
                        BotInfo info = (BotInfo) this.botInfo.valueAt(b);
                        boolean hasSettings3 = hasSettings2;
                        hasSettings2 = hasSettings;
                        for (int a = 0; a < info.commands.size(); a++) {
                            TL_botCommand command = (TL_botCommand) info.commands.get(a);
                            if (command.command.toLowerCase().equals("help")) {
                                hasSettings2 = true;
                            } else if (command.command.toLowerCase().equals("settings")) {
                                hasSettings3 = true;
                            }
                            if (hasSettings3 && hasSettings) {
                                break;
                            }
                        }
                        hasSettings = hasSettings2;
                        hasSettings2 = hasSettings3;
                    }
                    hasHelp = hasSettings;
                    hasSettings = hasSettings2;
                }
                if (hasHelp) {
                    this.headerItem.showSubItem(bot_help);
                } else {
                    this.headerItem.hideSubItem(bot_help);
                }
                if (hasSettings) {
                    this.headerItem.showSubItem(bot_settings);
                } else {
                    this.headerItem.hideSubItem(bot_settings);
                }
            }
        }
    }

    private void updateTitleIcons() {
        if (this.avatarContainer != null) {
            Drawable drawable = null;
            Drawable rightIcon = MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id) ? Theme.chat_muteIconDrawable : null;
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            if (this.currentEncryptedChat != null) {
                drawable = Theme.chat_lockIconDrawable;
            }
            chatAvatarContainer.setTitleIcons(drawable, rightIcon);
            if (this.muteItem != null) {
                if (rightIcon != null) {
                    this.muteItem.setText(LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications));
                } else {
                    this.muteItem.setText(LocaleController.getString("MuteNotifications", R.string.MuteNotifications));
                }
            }
        }
    }

    private void checkAndUpdateAvatar() {
        if (this.currentUser != null) {
            User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(this.currentUser.id));
            if (user != null) {
                this.currentUser = user;
            } else {
                return;
            }
        } else if (this.currentChat != null) {
            Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Integer.valueOf(this.currentChat.id));
            if (chat != null) {
                this.currentChat = chat;
            } else {
                return;
            }
        }
        if (this.avatarContainer != null) {
            this.avatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(String videoPath, String caption) {
        ChatActivity chatActivity = this;
        if (getParentActivity() != null) {
            String str = videoPath;
            final Bitmap thumb = ThumbnailUtils.createVideoThumbnail(str, 1);
            PhotoViewer.getInstance().setParentActivity(getParentActivity());
            final ArrayList<Object> cameraPhoto = new ArrayList();
            PhotoEntry entry = new PhotoEntry(0, 0, 0, str, 0, true);
            entry.caption = caption;
            cameraPhoto.add(entry);
            PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new EmptyPhotoViewerProvider() {
                public BitmapHolder getThumbForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
                    return new BitmapHolder(thumb, null);
                }

                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
                    ChatActivity.this.sendMedia((PhotoEntry) cameraPhoto.get(0), videoEditedInfo);
                }

                public boolean canScrollAway() {
                    return false;
                }
            }, chatActivity);
            return;
        }
        String str2 = caption;
        SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null, 0);
        showReplyPanel(false, null, null, null, false);
        DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
    }

    private void showAttachmentError() {
        if (getParentActivity() != null) {
            Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), 0).show();
        }
    }

    private void sendUriAsDocument(Uri uri) {
        if (uri != null) {
            String firstExtraction;
            String extractUriFrom = uri.toString();
            if (extractUriFrom.contains("com.google.android.apps.photos.contentprovider")) {
                try {
                    firstExtraction = extractUriFrom.split("/1/")[1];
                    int index = firstExtraction.indexOf("/ACTUAL");
                    if (index != -1) {
                        uri = Uri.parse(URLDecoder.decode(firstExtraction.substring(0, index), C0539C.UTF8_NAME));
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
            firstExtraction = AndroidUtilities.getPath(uri);
            String originalPath = firstExtraction;
            if (firstExtraction == null) {
                originalPath = uri.toString();
                firstExtraction = MediaController.copyFileToCache(uri, "file");
            }
            if (firstExtraction == null) {
                showAttachmentError();
                return;
            }
            SendMessagesHelper.prepareSendingDocument(firstExtraction, originalPath, null, null, this.dialog_id, this.replyingMessageObject, null);
        }
    }

    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
        Throwable e;
        ChatActivity chatActivity = this;
        int i = requestCode;
        Intent intent = data;
        if (resultCode == -1) {
            if (i != 0) {
                if (i != 2) {
                    String videoPath;
                    if (i == 1) {
                        if (intent != null) {
                            if (data.getData() != null) {
                                Uri uri = data.getData();
                                if (uri.toString().contains(MimeTypes.BASE_TYPE_VIDEO)) {
                                    videoPath = null;
                                    try {
                                        videoPath = AndroidUtilities.getPath(uri);
                                    } catch (Throwable e2) {
                                        FileLog.m3e(e2);
                                    }
                                    if (videoPath == null) {
                                        showAttachmentError();
                                    }
                                    if (chatActivity.paused) {
                                        chatActivity.startVideoEdit = videoPath;
                                    } else {
                                        openVideoEditor(videoPath, null);
                                    }
                                } else {
                                    SendMessagesHelper.prepareSendingPhoto(null, uri, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null, null, null, 0);
                                }
                                showReplyPanel(false, null, null, null, null);
                                DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                            }
                        }
                        showAttachmentError();
                        return;
                    }
                    int i2 = 0;
                    if (i == 21) {
                        if (intent == null) {
                            showAttachmentError();
                            return;
                        }
                        if (data.getData() != null) {
                            sendUriAsDocument(data.getData());
                        } else if (data.getClipData() != null) {
                            ClipData clipData = data.getClipData();
                            while (true) {
                                int i3 = i2;
                                if (i3 >= clipData.getItemCount()) {
                                    break;
                                }
                                sendUriAsDocument(clipData.getItemAt(i3).getUri());
                                i2 = i3 + 1;
                            }
                        } else {
                            showAttachmentError();
                        }
                        showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                    } else if (i == bot_settings) {
                        if (intent != null) {
                            if (data.getData() != null) {
                                Uri uri2 = data.getData();
                                Cursor c;
                                try {
                                    c = getParentActivity().getContentResolver().query(uri2, new String[]{"display_name", "data1"}, null, null, null);
                                    if (c != null) {
                                        boolean sent;
                                        boolean sent2 = false;
                                        while (true) {
                                            sent = sent2;
                                            try {
                                                if (!c.moveToNext()) {
                                                    break;
                                                }
                                                sent2 = true;
                                                videoPath = c.getString(0);
                                                String number = c.getString(1);
                                                User user = new TL_user();
                                                user.first_name = videoPath;
                                                user.last_name = TtmlNode.ANONYMOUS_REGION_ID;
                                                user.phone = number;
                                                SendMessagesHelper.getInstance(chatActivity.currentAccount).sendMessage(user, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null);
                                            } catch (Throwable th) {
                                                e2 = th;
                                            }
                                        }
                                        if (sent) {
                                            showReplyPanel(false, null, null, null, false);
                                            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                                        }
                                    }
                                    if (c != null) {
                                        try {
                                            if (!c.isClosed()) {
                                                c.close();
                                            }
                                        } catch (Throwable e22) {
                                            FileLog.m3e(e22);
                                        }
                                    }
                                } catch (Throwable th2) {
                                    e22 = th2;
                                    c = null;
                                    Throwable th3 = e22;
                                    if (c != null) {
                                        try {
                                            if (!c.isClosed()) {
                                                c.close();
                                            }
                                        } catch (Throwable e222) {
                                            FileLog.m3e(e222);
                                        }
                                    }
                                    throw th3;
                                }
                            }
                        }
                        showAttachmentError();
                        return;
                    }
                }
            }
            createChatAttachView();
            if (chatActivity.chatAttachAlert != null) {
                chatActivity.chatAttachAlert.onActivityResultFragment(i, intent, chatActivity.currentPicturePath);
            }
            chatActivity.currentPicturePath = null;
        }
    }

    public void saveSelfArgs(Bundle args) {
        if (this.currentPicturePath != null) {
            args.putString("path", this.currentPicturePath);
        }
    }

    public void restoreSelfArgs(Bundle args) {
        this.currentPicturePath = args.getString("path");
    }

    private void removeUnreadPlane(boolean scrollToEnd) {
        if (this.unreadMessageObject != null) {
            if (scrollToEnd) {
                boolean[] zArr = this.forwardEndReached;
                this.forwardEndReached[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(this.unreadMessageObject);
            this.unreadMessageObject = null;
        }
    }

    public boolean processSendingText(String text) {
        return this.chatActivityEnterView.processSendingText(text);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void didReceivedNotification(int id, int account, Object... args) {
        int i;
        Object[] objArr;
        ChatActivity chatActivity = this;
        ArrayList<MessageObject>[] arrayListArr = args;
        int guid;
        int queryLoadIndex;
        int index;
        int currentUserId;
        boolean found;
        int a;
        MessageObject obj;
        int startLoadFrom;
        int unreadAfterId;
        boolean z;
        boolean loadIndex;
        int last_unread_date;
        int loaded_max_id;
        MessageObject obj2;
        int i2;
        boolean z2;
        int i3;
        MessageObject obj3;
        int a2;
        Message dateMsg;
        MessageObject previous;
        GroupedMessages groupedMessages;
        boolean end;
        if (id == NotificationCenter.messagesDidLoaded) {
            guid = ((Integer) arrayListArr[10]).intValue();
            if (guid == chatActivity.classGuid) {
                if (!chatActivity.openAnimationEnded) {
                    NotificationCenter.getInstance(chatActivity.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoaded, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoaded});
                }
                queryLoadIndex = ((Integer) arrayListArr[11]).intValue();
                index = chatActivity.waitingForLoad.indexOf(Integer.valueOf(queryLoadIndex));
                currentUserId = UserConfig.getInstance(chatActivity.currentAccount).getClientUserId();
                if (index != -1) {
                    int loaded_mentions_count;
                    long did;
                    int i4;
                    int i5;
                    int newRowsCount;
                    MediaController mediaController;
                    LongSparseArray<GroupedMessages> newGroups;
                    LongSparseArray<GroupedMessages> changedGroups;
                    int unread_to_load;
                    boolean isCache;
                    int count;
                    boolean loadIndex2;
                    boolean createUnreadLoading;
                    int currentUserId2;
                    ArrayList<MessageObject> dayArray;
                    ArrayList<MessageObject> dayArray2;
                    GroupedMessages loadIndex3;
                    GroupedMessages groupedMessages2;
                    int i6;
                    int approximateHeightSum;
                    MessageObject prevObj;
                    ArrayList<MessageObject> arrayList;
                    View firstVisView;
                    int i7;
                    int i8;
                    TextView textView;
                    Object[] objArr2;
                    chatActivity.waitingForLoad.remove(index);
                    ArrayList<MessageObject> messArr = arrayListArr[2];
                    if (chatActivity.waitingForReplyMessageLoad) {
                        if (!chatActivity.createUnreadMessageAfterIdLoading) {
                            found = false;
                            int a3 = 0;
                            while (true) {
                                a = a3;
                                if (a >= messArr.size()) {
                                    break;
                                }
                                obj = (MessageObject) messArr.get(a);
                                if (obj.getId() == chatActivity.startLoadFromMessageId) {
                                    break;
                                }
                                if (a + 1 < messArr.size()) {
                                    MessageObject obj22 = (MessageObject) messArr.get(a + 1);
                                    if (obj.getId() >= chatActivity.startLoadFromMessageId && obj22.getId() < chatActivity.startLoadFromMessageId) {
                                        break;
                                    }
                                }
                                a3 = a + 1;
                            }
                            if (!found) {
                                chatActivity.startLoadFromMessageId = 0;
                                return;
                            }
                        }
                        startLoadFrom = chatActivity.startLoadFromMessageId;
                        found = chatActivity.needSelectFromMessageId;
                        unreadAfterId = chatActivity.createUnreadMessageAfterId;
                        z = chatActivity.createUnreadMessageAfterIdLoading;
                        clearChatData();
                        chatActivity.createUnreadMessageAfterId = unreadAfterId;
                        chatActivity.startLoadFromMessageId = startLoadFrom;
                        chatActivity.needSelectFromMessageId = found;
                    } else {
                        z = false;
                    }
                    chatActivity.loadsCount++;
                    long did2 = ((Long) arrayListArr[0]).longValue();
                    loadIndex = did2 != chatActivity.dialog_id;
                    startLoadFrom = ((Integer) arrayListArr[1]).intValue();
                    found = ((Boolean) arrayListArr[3]).booleanValue();
                    unreadAfterId = ((Integer) arrayListArr[4]).intValue();
                    last_unread_date = ((Integer) arrayListArr[7]).intValue();
                    queryLoadIndex = ((Integer) arrayListArr[8]).intValue();
                    index = ((Integer) arrayListArr[12]).intValue();
                    last_unread_date = ((Integer) arrayListArr[13]).intValue();
                    if (last_unread_date < 0) {
                        int loaded_mentions_count2 = last_unread_date * -1;
                        chatActivity.hasAllMentionsLocal = false;
                        loaded_mentions_count = loaded_mentions_count2;
                    } else {
                        int loaded_mentions_count3 = last_unread_date;
                        if (chatActivity.first != 0) {
                            chatActivity.hasAllMentionsLocal = true;
                        }
                        loaded_mentions_count = loaded_mentions_count3;
                    }
                    if (queryLoadIndex == 4) {
                        chatActivity.startLoadFromMessageId = index;
                        last_unread_date = messArr.size() - 1;
                        while (last_unread_date > 0) {
                            loaded_max_id = index;
                            obj2 = (MessageObject) messArr.get(last_unread_date);
                            did = did2;
                            if (obj2.type < null && obj2.getId() == chatActivity.startLoadFromMessageId) {
                                chatActivity.startLoadFromMessageId = ((MessageObject) messArr.get(last_unread_date - 1)).getId();
                                break;
                            }
                            last_unread_date--;
                            index = loaded_max_id;
                            did2 = did;
                        }
                    }
                    did = did2;
                    last_unread_date = 0;
                    if (unreadAfterId != 0) {
                        chatActivity.last_message_id = ((Integer) arrayListArr[5]).intValue();
                        if (queryLoadIndex == 3) {
                            if (chatActivity.loadingFromOldPosition) {
                                last_unread_date = ((Integer) arrayListArr[6]).intValue();
                                if (last_unread_date != 0) {
                                    chatActivity.createUnreadMessageAfterId = unreadAfterId;
                                }
                                i2 = 0;
                                chatActivity.loadingFromOldPosition = false;
                            } else {
                                i2 = 0;
                            }
                            chatActivity.first_unread_id = i2;
                        } else {
                            chatActivity.first_unread_id = unreadAfterId;
                            last_unread_date = ((Integer) arrayListArr[6]).intValue();
                        }
                    } else if (chatActivity.startLoadFromMessageId != 0 && (queryLoadIndex == 3 || queryLoadIndex == 4)) {
                        chatActivity.last_message_id = ((Integer) arrayListArr[5]).intValue();
                    }
                    if (!(queryLoadIndex == 0 || (chatActivity.startLoadFromMessageId == 0 && chatActivity.last_message_id == 0))) {
                        chatActivity.forwardEndReached[loadIndex] = false;
                    }
                    if (queryLoadIndex != 1) {
                        if (queryLoadIndex != 3) {
                            z2 = false;
                            i4 = unreadAfterId;
                            i3 = 1;
                            if (chatActivity.loadsCount == i3 && messArr.size() > 20) {
                                chatActivity.loadsCount += i3;
                            }
                            if (chatActivity.firstLoading) {
                                if (!chatActivity.forwardEndReached[loadIndex]) {
                                    chatActivity.messages.clear();
                                    chatActivity.messagesByDays.clear();
                                    chatActivity.groupedMessagesMap.clear();
                                    for (index = 0; index < 2; index++) {
                                        chatActivity.messagesDict[index].clear();
                                        if (chatActivity.currentEncryptedChat != null) {
                                            chatActivity.maxMessageId[index] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            i5 = Integer.MIN_VALUE;
                                            chatActivity.minMessageId[index] = Integer.MIN_VALUE;
                                        } else {
                                            i5 = Integer.MIN_VALUE;
                                            chatActivity.maxMessageId[index] = Integer.MIN_VALUE;
                                            chatActivity.minMessageId[index] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        }
                                        chatActivity.maxDate[index] = i5;
                                        chatActivity.minDate[index] = 0;
                                    }
                                }
                                chatActivity.firstLoading = false;
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        if (ChatActivity.this.parentLayout != null) {
                                            ChatActivity.this.parentLayout.resumeDelayedFragmentAnimation();
                                        }
                                    }
                                });
                            }
                            if (queryLoadIndex == 1) {
                                Collections.reverse(messArr);
                            }
                            if (chatActivity.currentEncryptedChat != null) {
                                newRowsCount = 0;
                                DataQuery.getInstance(chatActivity.currentAccount).loadReplyMessagesForMessages(messArr, chatActivity.dialog_id);
                            } else {
                                newRowsCount = 0;
                            }
                            if (queryLoadIndex == 2 && messArr.isEmpty() && !found) {
                                chatActivity.forwardEndReached[0] = true;
                            }
                            mediaController = MediaController.getInstance();
                            newGroups = null;
                            changedGroups = null;
                            i2 = newRowsCount;
                            unreadAfterId = 0;
                            index = 0;
                            while (true) {
                                unread_to_load = last_unread_date;
                                if (index < messArr.size()) {
                                    break;
                                }
                                obj3 = (MessageObject) messArr.get(index);
                                unreadAfterId += obj3.getApproximateHeight();
                                isCache = found;
                                if (chatActivity.currentUser) {
                                    count = startLoadFrom;
                                } else {
                                    if (chatActivity.currentUser.self) {
                                        count = startLoadFrom;
                                    } else {
                                        count = startLoadFrom;
                                        obj3.messageOwner.out = true;
                                    }
                                    if ((chatActivity.currentUser.bot && obj3.isOut()) || chatActivity.currentUser.id == currentUserId) {
                                        obj3.setIsRead();
                                    }
                                }
                                if (chatActivity.messagesDict[loadIndex].indexOfKey(obj3.getId()) < 0) {
                                    loadIndex2 = loadIndex;
                                    a2 = index;
                                    createUnreadLoading = z;
                                    currentUserId2 = currentUserId;
                                } else {
                                    if (mediaController.isPlayingMessage(obj3)) {
                                        obj = mediaController.getPlayingMessageObject();
                                        obj3.audioProgress = obj.audioProgress;
                                        obj3.audioProgressSec = obj.audioProgressSec;
                                        obj3.audioPlayerDuration = obj.audioPlayerDuration;
                                    }
                                    if (!loadIndex && ChatObject.isChannel(chatActivity.currentChat) && obj3.getId() == 1) {
                                        chatActivity.endReached[loadIndex] = true;
                                        chatActivity.cacheEndReached[loadIndex] = true;
                                    }
                                    if (obj3.getId() <= 0) {
                                        currentUserId2 = currentUserId;
                                        chatActivity.maxMessageId[loadIndex] = Math.min(obj3.getId(), chatActivity.maxMessageId[loadIndex]);
                                        chatActivity.minMessageId[loadIndex] = Math.max(obj3.getId(), chatActivity.minMessageId[loadIndex]);
                                    } else {
                                        currentUserId2 = currentUserId;
                                        if (chatActivity.currentEncryptedChat != null) {
                                            chatActivity.maxMessageId[loadIndex] = Math.max(obj3.getId(), chatActivity.maxMessageId[loadIndex]);
                                            chatActivity.minMessageId[loadIndex] = Math.min(obj3.getId(), chatActivity.minMessageId[loadIndex]);
                                        }
                                    }
                                    if (obj3.messageOwner.date != 0) {
                                        chatActivity.maxDate[loadIndex] = Math.max(chatActivity.maxDate[loadIndex], obj3.messageOwner.date);
                                        if (chatActivity.minDate[loadIndex] == 0 || obj3.messageOwner.date < chatActivity.minDate[loadIndex]) {
                                            chatActivity.minDate[loadIndex] = obj3.messageOwner.date;
                                        }
                                    }
                                    if (obj3.getId() != chatActivity.last_message_id) {
                                        found = true;
                                        chatActivity.forwardEndReached[loadIndex] = true;
                                    } else {
                                        found = true;
                                    }
                                    if (obj3.type >= 0) {
                                        loadIndex2 = loadIndex;
                                        a2 = index;
                                        createUnreadLoading = z;
                                    } else if (loadIndex == found || !(obj3.messageOwner.action instanceof TL_messageActionChatMigrateTo)) {
                                        if (chatActivity.needAnimateToMessage != null && chatActivity.needAnimateToMessage.getId() == obj3.getId() && obj3.getId() < 0 && obj3.type == 5) {
                                            obj3 = chatActivity.needAnimateToMessage;
                                            chatActivity.animatingMessageObjects.add(obj3);
                                            chatActivity.needAnimateToMessage = null;
                                        }
                                        if (!obj3.isOut() && obj3.isUnread()) {
                                        }
                                        chatActivity.messagesDict[loadIndex].put(obj3.getId(), obj3);
                                        dayArray = (ArrayList) chatActivity.messagesByDays.get(obj3.dateKey);
                                        if (dayArray != null) {
                                            dayArray = new ArrayList();
                                            chatActivity.messagesByDays.put(obj3.dateKey, dayArray);
                                            dateMsg = new TL_message();
                                            loadIndex2 = loadIndex;
                                            dayArray2 = dayArray;
                                            dateMsg.message = LocaleController.formatDateChat((long) obj3.messageOwner.date);
                                            dateMsg.id = 0;
                                            dateMsg.date = obj3.messageOwner.date;
                                            guid = new MessageObject(chatActivity.currentAccount, dateMsg, false);
                                            guid.type = 10;
                                            guid.contentType = 1;
                                            guid.isDateObject = true;
                                            if (queryLoadIndex != 1) {
                                                chatActivity.messages.add(0, guid);
                                            } else {
                                                chatActivity.messages.add(guid);
                                            }
                                            i2++;
                                            dayArray = dayArray2;
                                        } else {
                                            loadIndex2 = loadIndex;
                                        }
                                        if (obj3.hasValidGroupId() == 0) {
                                            createUnreadLoading = z;
                                            loadIndex3 = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj3.messageOwner.grouped_id);
                                            if (loadIndex3 != null || chatActivity.messages.size() <= 1) {
                                                groupedMessages2 = loadIndex3;
                                                i6 = index;
                                                approximateHeightSum = unreadAfterId;
                                            } else {
                                                if (queryLoadIndex == 1) {
                                                    previous = (MessageObject) chatActivity.messages.get(0);
                                                } else {
                                                    previous = (MessageObject) chatActivity.messages.get(chatActivity.messages.size() - 2);
                                                }
                                                groupedMessages2 = loadIndex3;
                                                i6 = index;
                                                approximateHeightSum = unreadAfterId;
                                                if (previous.messageOwner.grouped_id == obj3.messageOwner.grouped_id) {
                                                    if (previous.localGroupId != 0) {
                                                        obj3.localGroupId = previous.localGroupId;
                                                        guid = (GroupedMessages) chatActivity.groupedMessagesMap.get(previous.localGroupId);
                                                        if (guid != 0) {
                                                            guid = new GroupedMessages();
                                                            guid.groupId = obj3.getGroupId();
                                                            chatActivity.groupedMessagesMap.put(guid.groupId, guid);
                                                        } else if (newGroups == null || newGroups.indexOfKey(obj3.getGroupId()) < 0) {
                                                            if (changedGroups == null) {
                                                                changedGroups = new LongSparseArray();
                                                            }
                                                            changedGroups.put(obj3.getGroupId(), guid);
                                                        }
                                                        if (newGroups == null) {
                                                            newGroups = new LongSparseArray();
                                                        }
                                                        newGroups.put(guid.groupId, guid);
                                                        if (queryLoadIndex != 1) {
                                                            guid.messages.add(obj3);
                                                        } else {
                                                            guid.messages.add(0, obj3);
                                                        }
                                                    }
                                                } else if (previous.messageOwner.grouped_id != obj3.messageOwner.grouped_id) {
                                                    obj3.localGroupId = Utilities.random.nextLong();
                                                    guid = 0;
                                                    if (guid != 0) {
                                                        if (changedGroups == null) {
                                                            changedGroups = new LongSparseArray();
                                                        }
                                                        changedGroups.put(obj3.getGroupId(), guid);
                                                    } else {
                                                        guid = new GroupedMessages();
                                                        guid.groupId = obj3.getGroupId();
                                                        chatActivity.groupedMessagesMap.put(guid.groupId, guid);
                                                    }
                                                    if (newGroups == null) {
                                                        newGroups = new LongSparseArray();
                                                    }
                                                    newGroups.put(guid.groupId, guid);
                                                    if (queryLoadIndex != 1) {
                                                        guid.messages.add(0, obj3);
                                                    } else {
                                                        guid.messages.add(obj3);
                                                    }
                                                }
                                            }
                                            guid = groupedMessages2;
                                            if (guid != 0) {
                                                guid = new GroupedMessages();
                                                guid.groupId = obj3.getGroupId();
                                                chatActivity.groupedMessagesMap.put(guid.groupId, guid);
                                            } else {
                                                if (changedGroups == null) {
                                                    changedGroups = new LongSparseArray();
                                                }
                                                changedGroups.put(obj3.getGroupId(), guid);
                                            }
                                            if (newGroups == null) {
                                                newGroups = new LongSparseArray();
                                            }
                                            newGroups.put(guid.groupId, guid);
                                            if (queryLoadIndex != 1) {
                                                guid.messages.add(obj3);
                                            } else {
                                                guid.messages.add(0, obj3);
                                            }
                                        } else {
                                            i6 = index;
                                            approximateHeightSum = unreadAfterId;
                                            createUnreadLoading = z;
                                            if (obj3.messageOwner.grouped_id != 0) {
                                                obj3.messageOwner.grouped_id = 0;
                                            }
                                        }
                                        i2++;
                                        dayArray.add(obj3);
                                        if (queryLoadIndex != 1) {
                                            chatActivity.messages.add(0, obj3);
                                        } else {
                                            chatActivity.messages.add(chatActivity.messages.size() - 1, obj3);
                                        }
                                        if (chatActivity.currentEncryptedChat != null) {
                                            if (chatActivity.createUnreadMessageAfterId != 0 || queryLoadIndex == 1 || i6 + 1 >= messArr.size()) {
                                                guid = 0;
                                            } else {
                                                guid = (MessageObject) messArr.get(i6 + 1);
                                                if (obj3.isOut() || guid.getId() >= chatActivity.createUnreadMessageAfterId) {
                                                    guid = 0;
                                                }
                                            }
                                        } else if (chatActivity.createUnreadMessageAfterId != 0 || queryLoadIndex == 1 || i6 - 1 < 0) {
                                            guid = 0;
                                        } else {
                                            guid = (MessageObject) messArr.get(i6 - 1);
                                            if (obj3.isOut() || guid.getId() >= chatActivity.createUnreadMessageAfterId) {
                                                guid = 0;
                                            }
                                        }
                                        if (queryLoadIndex == 2 || obj3.getId() != chatActivity.first_unread_id) {
                                            unreadAfterId = approximateHeightSum;
                                            if ((queryLoadIndex == 3 || queryLoadIndex == 4) && obj3.getId() == chatActivity.startLoadFromMessageId) {
                                                if (chatActivity.needSelectFromMessageId) {
                                                    chatActivity.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                                } else {
                                                    chatActivity.highlightMessageId = obj3.getId();
                                                }
                                                chatActivity.scrollToMessage = obj3;
                                                chatActivity.startLoadFromMessageId = 0;
                                                if (chatActivity.scrollToMessagePosition == -10000) {
                                                    chatActivity.scrollToMessagePosition = -9000;
                                                }
                                            }
                                        } else {
                                            unreadAfterId = approximateHeightSum;
                                            if (unreadAfterId > AndroidUtilities.displaySize.y / 2 || !chatActivity.forwardEndReached[0]) {
                                                dateMsg = new TL_message();
                                                dateMsg.message = TtmlNode.ANONYMOUS_REGION_ID;
                                                dateMsg.id = 0;
                                                obj2 = new MessageObject(chatActivity.currentAccount, dateMsg, false);
                                                obj2.type = 6;
                                                obj2.contentType = 2;
                                                chatActivity.messages.add(chatActivity.messages.size() - 1, obj2);
                                                chatActivity.unreadMessageObject = obj2;
                                                chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                chatActivity.scrollToMessagePosition = -10000;
                                                i2++;
                                            }
                                        }
                                        if (queryLoadIndex != 2 && chatActivity.unreadMessageObject == null && chatActivity.createUnreadMessageAfterId != 0 && ((chatActivity.currentEncryptedChat == null && !obj3.isOut() && obj3.getId() >= chatActivity.createUnreadMessageAfterId) || !(chatActivity.currentEncryptedChat == null || obj3.isOut() || obj3.getId() > chatActivity.createUnreadMessageAfterId))) {
                                            if (queryLoadIndex != 1 || guid != 0) {
                                                a2 = i6;
                                            } else if (guid == 0 && createUnreadLoading) {
                                                a2 = i6;
                                                if (a2 == messArr.size() - 1) {
                                                }
                                            }
                                            index = new TL_message();
                                            index.message = TtmlNode.ANONYMOUS_REGION_ID;
                                            index.id = 0;
                                            prevObj = guid;
                                            guid = new MessageObject(chatActivity.currentAccount, index, false);
                                            guid.type = 6;
                                            guid.contentType = 2;
                                            if (queryLoadIndex != 1) {
                                                chatActivity.messages.add(1, guid);
                                                arrayList = dayArray;
                                            } else {
                                                chatActivity.messages.add(chatActivity.messages.size() - 1, guid);
                                            }
                                            chatActivity.unreadMessageObject = guid;
                                            if (queryLoadIndex == 3) {
                                                chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                chatActivity.startLoadFromMessageId = 0;
                                                chatActivity.scrollToMessagePosition = -9000;
                                            }
                                            i2++;
                                        }
                                        a2 = i6;
                                    } else {
                                        loadIndex2 = loadIndex;
                                        a2 = index;
                                        createUnreadLoading = z;
                                    }
                                }
                                index = a2 + 1;
                                last_unread_date = unread_to_load;
                                found = isCache;
                                startLoadFrom = count;
                                currentUserId = currentUserId2;
                                loadIndex = loadIndex2;
                                z = createUnreadLoading;
                            }
                            loadIndex2 = loadIndex;
                            count = startLoadFrom;
                            isCache = found;
                            currentUserId2 = currentUserId;
                            if (z) {
                                chatActivity.createUnreadMessageAfterId = 0;
                            }
                            if (queryLoadIndex == 0 && i2 == 0) {
                                chatActivity.loadsCount--;
                            }
                            if (newGroups != null) {
                                guid = 0;
                                while (guid < newGroups.size()) {
                                    groupedMessages = (GroupedMessages) newGroups.valueAt(guid);
                                    groupedMessages.calculate();
                                    if (!(chatActivity.chatAdapter == null || changedGroups == null || changedGroups.indexOfKey(newGroups.keyAt(guid)) < 0)) {
                                        index = chatActivity.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                                        if (index >= 0) {
                                            chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.messagesStartRow + index, groupedMessages.messages.size());
                                        }
                                    }
                                    guid++;
                                }
                            }
                            if (chatActivity.forwardEndReached[loadIndex2]) {
                                guid = loadIndex2;
                                startLoadFrom = 1;
                            } else {
                                guid = loadIndex2;
                                startLoadFrom = 1;
                                if (guid != true) {
                                    chatActivity.first_unread_id = 0;
                                    chatActivity.last_message_id = 0;
                                    chatActivity.createUnreadMessageAfterId = 0;
                                }
                            }
                            if (queryLoadIndex != startLoadFrom) {
                                startLoadFrom = 0;
                                if (!(messArr.size() == count || (isCache && chatActivity.currentEncryptedChat == null && !chatActivity.forwardEndReached[guid]))) {
                                    chatActivity.forwardEndReached[guid] = true;
                                    if (guid != 1) {
                                        chatActivity.first_unread_id = 0;
                                        chatActivity.last_message_id = 0;
                                        chatActivity.createUnreadMessageAfterId = 0;
                                        chatActivity.chatAdapter.notifyItemRemoved(chatActivity.chatAdapter.loadingDownRow);
                                        startLoadFrom = 0 + 1;
                                    }
                                    chatActivity.startLoadFromMessageId = 0;
                                }
                                if (i2 <= 0) {
                                    a2 = chatActivity.chatLayoutManager.findFirstVisibleItemPosition();
                                    if (a2 == 0) {
                                        a2++;
                                    }
                                    firstVisView = chatActivity.chatLayoutManager.findViewByPosition(a2);
                                    if (firstVisView != null) {
                                        i7 = unreadAfterId;
                                        last_unread_date = 0;
                                    } else {
                                        last_unread_date = (chatActivity.chatListView.getMeasuredHeight() - firstVisView.getBottom()) - chatActivity.chatListView.getPaddingBottom();
                                    }
                                    unreadAfterId = last_unread_date;
                                    chatActivity.chatAdapter.notifyItemRangeInserted(1, i2);
                                    if (a2 != -1) {
                                        chatActivity.chatLayoutManager.scrollToPositionWithOffset((a2 + i2) - startLoadFrom, unreadAfterId);
                                    }
                                }
                                chatActivity.loadingForward = false;
                                i8 = queryLoadIndex;
                                startLoadFrom = loaded_mentions_count;
                                a2 = unread_to_load;
                            } else {
                                if (!(messArr.size() >= count || queryLoadIndex == 3 || queryLoadIndex == 4)) {
                                    if (isCache) {
                                        if (chatActivity.currentEncryptedChat == null) {
                                            if (chatActivity.isBroadcast) {
                                                found = true;
                                                if (queryLoadIndex != 2) {
                                                    chatActivity.cacheEndReached[guid] = found;
                                                }
                                            }
                                        }
                                        found = true;
                                        chatActivity.endReached[guid] = true;
                                        if (queryLoadIndex != 2) {
                                            chatActivity.cacheEndReached[guid] = found;
                                        }
                                    } else if (queryLoadIndex != 2 || (messArr.size() == 0 && chatActivity.messages.isEmpty())) {
                                        chatActivity.endReached[guid] = true;
                                    }
                                }
                                chatActivity.loading = false;
                                if (chatActivity.chatListView == null) {
                                    if (!chatActivity.first || chatActivity.scrollToTopOnResume) {
                                    } else if (chatActivity.forceScrollToTop) {
                                        i8 = queryLoadIndex;
                                    } else {
                                        if (i2 != 0) {
                                            end = false;
                                            if (chatActivity.endReached[guid]) {
                                                if (guid == 0) {
                                                    if (chatActivity.mergeDialogId == 0) {
                                                        a2 = 1;
                                                        end = true;
                                                        chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.loadingUpRow - a2, 2);
                                                        chatActivity.chatAdapter.updateRows();
                                                    }
                                                }
                                                a2 = 1;
                                            }
                                            a2 = chatActivity.chatLayoutManager.findFirstVisibleItemPosition();
                                            View firstVisView2 = chatActivity.chatLayoutManager.findViewByPosition(a2);
                                            a = firstVisView2 == null ? 0 : (chatActivity.chatListView.getMeasuredHeight() - firstVisView2.getBottom()) - chatActivity.chatListView.getPaddingBottom();
                                            if (i2 - (end ? 1 : 0) > 0) {
                                                currentUserId = chatActivity.chatAdapter.messagesEndRow;
                                                chatActivity.chatAdapter.notifyItemChanged(chatActivity.chatAdapter.loadingUpRow);
                                                chatActivity.chatAdapter.notifyItemRangeInserted(currentUserId, i2 - (end ? 1 : 0));
                                            }
                                            if (a2 != -1) {
                                                chatActivity.chatLayoutManager.scrollToPositionWithOffset(a2, a);
                                            }
                                        } else {
                                            if (chatActivity.endReached[guid] && ((guid == 0 && chatActivity.mergeDialogId == 0) || guid == 1)) {
                                                chatActivity.chatAdapter.notifyItemRemoved(chatActivity.chatAdapter.loadingUpRow);
                                            }
                                        }
                                        if (chatActivity.paused != 0) {
                                            chatActivity.scrollToTopOnResume = true;
                                            if (chatActivity.scrollToMessage != null) {
                                                chatActivity.scrollToTopUnReadOnResume = true;
                                            }
                                        }
                                        if (!(chatActivity.first == 0 || chatActivity.chatListView == 0)) {
                                            chatActivity.chatListView.setEmptyView(chatActivity.emptyViewContainer);
                                        }
                                    }
                                    chatActivity.forceScrollToTop = false;
                                    chatActivity.chatAdapter.notifyDataSetChanged();
                                    if (chatActivity.scrollToMessage == null) {
                                        end = true;
                                        if (chatActivity.startLoadFromMessageOffset != ConnectionsManager.DEFAULT_DATACENTER_ID) {
                                            queryLoadIndex = (-chatActivity.startLoadFromMessageOffset) - chatActivity.chatListView.getPaddingBottom();
                                            chatActivity.startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        } else if (chatActivity.scrollToMessagePosition == -9000) {
                                            queryLoadIndex = getScrollOffsetForMessage(chatActivity.scrollToMessage);
                                            end = false;
                                        } else if (chatActivity.scrollToMessagePosition != -10000) {
                                            queryLoadIndex = -AndroidUtilities.dp(NUM);
                                            end = false;
                                        } else {
                                            queryLoadIndex = chatActivity.scrollToMessagePosition;
                                        }
                                        if (!chatActivity.messages.isEmpty()) {
                                            if (chatActivity.messages.get(chatActivity.messages.size() - 1) != chatActivity.scrollToMessage) {
                                                if (chatActivity.messages.get(chatActivity.messages.size() - 2) == chatActivity.scrollToMessage) {
                                                    chatActivity.chatLayoutManager.scrollToPositionWithOffset(chatActivity.chatAdapter.messagesStartRow + chatActivity.messages.indexOf(chatActivity.scrollToMessage), queryLoadIndex, end);
                                                }
                                            }
                                            chatActivity.chatLayoutManager.scrollToPositionWithOffset(chatActivity.chatAdapter.loadingUpRow, queryLoadIndex, end);
                                        }
                                        chatActivity.chatListView.invalidate();
                                        if (chatActivity.scrollToMessagePosition != -10000) {
                                            if (chatActivity.scrollToMessagePosition == -9000) {
                                                a2 = unread_to_load;
                                                chatActivity.scrollToMessagePosition = -10000;
                                                chatActivity.scrollToMessage = null;
                                            }
                                        }
                                        showPagedownButton(true, true);
                                        if (unread_to_load == 0) {
                                            chatActivity.pagedownButtonCounter.setVisibility(0);
                                            textView = chatActivity.pagedownButtonCounter;
                                            objArr2 = new Object[1];
                                            a2 = unread_to_load;
                                            chatActivity.newUnreadMessageCount = a2;
                                            objArr2[0] = Integer.valueOf(a2);
                                            textView.setText(String.format("%d", objArr2));
                                        }
                                        chatActivity.scrollToMessagePosition = -10000;
                                        chatActivity.scrollToMessage = null;
                                    } else {
                                        moveScrollToLastMessage();
                                    }
                                    startLoadFrom = loaded_mentions_count;
                                    if (startLoadFrom != 0) {
                                        showMentiondownButton(true, true);
                                        chatActivity.mentiondownButtonCounter.setVisibility(0);
                                        textView = chatActivity.mentiondownButtonCounter;
                                        objArr2 = new Object[1];
                                        chatActivity.newMentionsCount = startLoadFrom;
                                        objArr2[0] = Integer.valueOf(startLoadFrom);
                                        textView.setText(String.format("%d", objArr2));
                                    }
                                    if (chatActivity.paused != 0) {
                                        chatActivity.scrollToTopOnResume = true;
                                        if (chatActivity.scrollToMessage != null) {
                                            chatActivity.scrollToTopUnReadOnResume = true;
                                        }
                                    }
                                    chatActivity.chatListView.setEmptyView(chatActivity.emptyViewContainer);
                                } else {
                                    startLoadFrom = loaded_mentions_count;
                                    a2 = unread_to_load;
                                    chatActivity.scrollToTopOnResume = true;
                                    if (chatActivity.scrollToMessage != null) {
                                        chatActivity.scrollToTopUnReadOnResume = true;
                                    }
                                }
                            }
                            if (chatActivity.first && chatActivity.messages.size() > 0) {
                                chatActivity.first = false;
                            }
                            if (chatActivity.messages.isEmpty() && chatActivity.currentEncryptedChat == null && chatActivity.currentUser != null && chatActivity.currentUser.bot && chatActivity.botUser == null) {
                                chatActivity.botUser = TtmlNode.ANONYMOUS_REGION_ID;
                                updateBottomOverlay();
                            }
                            if (i2 != 0 && chatActivity.currentEncryptedChat != null && !chatActivity.endReached[0]) {
                                chatActivity.first = true;
                                if (chatActivity.chatListView != null) {
                                    chatActivity.chatListView.setEmptyView(null);
                                }
                                if (chatActivity.emptyViewContainer != null) {
                                    chatActivity.emptyViewContainer.setVisibility(4);
                                }
                            } else if (chatActivity.progressView != null) {
                                chatActivity.progressView.setVisibility(4);
                            }
                            checkScrollForLoad(false);
                        }
                    }
                    i3 = 1;
                    if (loadIndex) {
                        z2 = false;
                        boolean[] zArr = chatActivity.endReached;
                        chatActivity.cacheEndReached[0] = true;
                        zArr[0] = true;
                        chatActivity.forwardEndReached[0] = false;
                        chatActivity.minMessageId[0] = 0;
                    } else {
                        z2 = false;
                        i4 = unreadAfterId;
                    }
                    chatActivity.loadsCount += i3;
                    if (chatActivity.firstLoading) {
                        if (chatActivity.forwardEndReached[loadIndex]) {
                            chatActivity.messages.clear();
                            chatActivity.messagesByDays.clear();
                            chatActivity.groupedMessagesMap.clear();
                            for (index = 0; index < 2; index++) {
                                chatActivity.messagesDict[index].clear();
                                if (chatActivity.currentEncryptedChat != null) {
                                    i5 = Integer.MIN_VALUE;
                                    chatActivity.maxMessageId[index] = Integer.MIN_VALUE;
                                    chatActivity.minMessageId[index] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                } else {
                                    chatActivity.maxMessageId[index] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    i5 = Integer.MIN_VALUE;
                                    chatActivity.minMessageId[index] = Integer.MIN_VALUE;
                                }
                                chatActivity.maxDate[index] = i5;
                                chatActivity.minDate[index] = 0;
                            }
                        }
                        chatActivity.firstLoading = false;
                        AndroidUtilities.runOnUIThread(/* anonymous class already generated */);
                    }
                    if (queryLoadIndex == 1) {
                        Collections.reverse(messArr);
                    }
                    if (chatActivity.currentEncryptedChat != null) {
                        newRowsCount = 0;
                    } else {
                        newRowsCount = 0;
                        DataQuery.getInstance(chatActivity.currentAccount).loadReplyMessagesForMessages(messArr, chatActivity.dialog_id);
                    }
                    chatActivity.forwardEndReached[0] = true;
                    mediaController = MediaController.getInstance();
                    newGroups = null;
                    changedGroups = null;
                    i2 = newRowsCount;
                    unreadAfterId = 0;
                    index = 0;
                    while (true) {
                        unread_to_load = last_unread_date;
                        if (index < messArr.size()) {
                            break;
                        }
                        obj3 = (MessageObject) messArr.get(index);
                        unreadAfterId += obj3.getApproximateHeight();
                        isCache = found;
                        if (chatActivity.currentUser) {
                            count = startLoadFrom;
                        } else {
                            if (chatActivity.currentUser.self) {
                                count = startLoadFrom;
                            } else {
                                count = startLoadFrom;
                                obj3.messageOwner.out = true;
                            }
                            obj3.setIsRead();
                        }
                        if (chatActivity.messagesDict[loadIndex].indexOfKey(obj3.getId()) < 0) {
                            if (mediaController.isPlayingMessage(obj3)) {
                                obj = mediaController.getPlayingMessageObject();
                                obj3.audioProgress = obj.audioProgress;
                                obj3.audioProgressSec = obj.audioProgressSec;
                                obj3.audioPlayerDuration = obj.audioPlayerDuration;
                            }
                            chatActivity.endReached[loadIndex] = true;
                            chatActivity.cacheEndReached[loadIndex] = true;
                            if (obj3.getId() <= 0) {
                                currentUserId2 = currentUserId;
                                if (chatActivity.currentEncryptedChat != null) {
                                    chatActivity.maxMessageId[loadIndex] = Math.max(obj3.getId(), chatActivity.maxMessageId[loadIndex]);
                                    chatActivity.minMessageId[loadIndex] = Math.min(obj3.getId(), chatActivity.minMessageId[loadIndex]);
                                }
                            } else {
                                currentUserId2 = currentUserId;
                                chatActivity.maxMessageId[loadIndex] = Math.min(obj3.getId(), chatActivity.maxMessageId[loadIndex]);
                                chatActivity.minMessageId[loadIndex] = Math.max(obj3.getId(), chatActivity.minMessageId[loadIndex]);
                            }
                            if (obj3.messageOwner.date != 0) {
                                chatActivity.maxDate[loadIndex] = Math.max(chatActivity.maxDate[loadIndex], obj3.messageOwner.date);
                                chatActivity.minDate[loadIndex] = obj3.messageOwner.date;
                            }
                            if (obj3.getId() != chatActivity.last_message_id) {
                                found = true;
                            } else {
                                found = true;
                                chatActivity.forwardEndReached[loadIndex] = true;
                            }
                            if (obj3.type >= 0) {
                                loadIndex2 = loadIndex;
                                a2 = index;
                                createUnreadLoading = z;
                            } else {
                                if (loadIndex == found) {
                                }
                                obj3 = chatActivity.needAnimateToMessage;
                                chatActivity.animatingMessageObjects.add(obj3);
                                chatActivity.needAnimateToMessage = null;
                                chatActivity.messagesDict[loadIndex].put(obj3.getId(), obj3);
                                dayArray = (ArrayList) chatActivity.messagesByDays.get(obj3.dateKey);
                                if (dayArray != null) {
                                    loadIndex2 = loadIndex;
                                } else {
                                    dayArray = new ArrayList();
                                    chatActivity.messagesByDays.put(obj3.dateKey, dayArray);
                                    dateMsg = new TL_message();
                                    loadIndex2 = loadIndex;
                                    dayArray2 = dayArray;
                                    dateMsg.message = LocaleController.formatDateChat((long) obj3.messageOwner.date);
                                    dateMsg.id = 0;
                                    dateMsg.date = obj3.messageOwner.date;
                                    guid = new MessageObject(chatActivity.currentAccount, dateMsg, false);
                                    guid.type = 10;
                                    guid.contentType = 1;
                                    guid.isDateObject = true;
                                    if (queryLoadIndex != 1) {
                                        chatActivity.messages.add(guid);
                                    } else {
                                        chatActivity.messages.add(0, guid);
                                    }
                                    i2++;
                                    dayArray = dayArray2;
                                }
                                if (obj3.hasValidGroupId() == 0) {
                                    i6 = index;
                                    approximateHeightSum = unreadAfterId;
                                    createUnreadLoading = z;
                                    if (obj3.messageOwner.grouped_id != 0) {
                                        obj3.messageOwner.grouped_id = 0;
                                    }
                                } else {
                                    createUnreadLoading = z;
                                    loadIndex3 = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj3.messageOwner.grouped_id);
                                    if (loadIndex3 != null) {
                                    }
                                    groupedMessages2 = loadIndex3;
                                    i6 = index;
                                    approximateHeightSum = unreadAfterId;
                                    guid = groupedMessages2;
                                    if (guid != 0) {
                                        if (changedGroups == null) {
                                            changedGroups = new LongSparseArray();
                                        }
                                        changedGroups.put(obj3.getGroupId(), guid);
                                    } else {
                                        guid = new GroupedMessages();
                                        guid.groupId = obj3.getGroupId();
                                        chatActivity.groupedMessagesMap.put(guid.groupId, guid);
                                    }
                                    if (newGroups == null) {
                                        newGroups = new LongSparseArray();
                                    }
                                    newGroups.put(guid.groupId, guid);
                                    if (queryLoadIndex != 1) {
                                        guid.messages.add(0, obj3);
                                    } else {
                                        guid.messages.add(obj3);
                                    }
                                }
                                i2++;
                                dayArray.add(obj3);
                                if (queryLoadIndex != 1) {
                                    chatActivity.messages.add(chatActivity.messages.size() - 1, obj3);
                                } else {
                                    chatActivity.messages.add(0, obj3);
                                }
                                if (chatActivity.currentEncryptedChat != null) {
                                    if (chatActivity.createUnreadMessageAfterId != 0) {
                                    }
                                    guid = 0;
                                } else {
                                    if (chatActivity.createUnreadMessageAfterId != 0) {
                                    }
                                    guid = 0;
                                }
                                if (queryLoadIndex == 2) {
                                }
                                unreadAfterId = approximateHeightSum;
                                if (chatActivity.needSelectFromMessageId) {
                                    chatActivity.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                } else {
                                    chatActivity.highlightMessageId = obj3.getId();
                                }
                                chatActivity.scrollToMessage = obj3;
                                chatActivity.startLoadFromMessageId = 0;
                                if (chatActivity.scrollToMessagePosition == -10000) {
                                    chatActivity.scrollToMessagePosition = -9000;
                                }
                                if (queryLoadIndex != 1) {
                                }
                                a2 = i6;
                                index = new TL_message();
                                index.message = TtmlNode.ANONYMOUS_REGION_ID;
                                index.id = 0;
                                prevObj = guid;
                                guid = new MessageObject(chatActivity.currentAccount, index, false);
                                guid.type = 6;
                                guid.contentType = 2;
                                if (queryLoadIndex != 1) {
                                    chatActivity.messages.add(chatActivity.messages.size() - 1, guid);
                                } else {
                                    chatActivity.messages.add(1, guid);
                                    arrayList = dayArray;
                                }
                                chatActivity.unreadMessageObject = guid;
                                if (queryLoadIndex == 3) {
                                    chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                    chatActivity.startLoadFromMessageId = 0;
                                    chatActivity.scrollToMessagePosition = -9000;
                                }
                                i2++;
                            }
                        } else {
                            loadIndex2 = loadIndex;
                            a2 = index;
                            createUnreadLoading = z;
                            currentUserId2 = currentUserId;
                        }
                        index = a2 + 1;
                        last_unread_date = unread_to_load;
                        found = isCache;
                        startLoadFrom = count;
                        currentUserId = currentUserId2;
                        loadIndex = loadIndex2;
                        z = createUnreadLoading;
                    }
                    loadIndex2 = loadIndex;
                    count = startLoadFrom;
                    isCache = found;
                    currentUserId2 = currentUserId;
                    if (z) {
                        chatActivity.createUnreadMessageAfterId = 0;
                    }
                    chatActivity.loadsCount--;
                    if (newGroups != null) {
                        guid = 0;
                        while (guid < newGroups.size()) {
                            groupedMessages = (GroupedMessages) newGroups.valueAt(guid);
                            groupedMessages.calculate();
                            index = chatActivity.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                            if (index >= 0) {
                                chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.messagesStartRow + index, groupedMessages.messages.size());
                            }
                            guid++;
                        }
                    }
                    if (chatActivity.forwardEndReached[loadIndex2]) {
                        guid = loadIndex2;
                        startLoadFrom = 1;
                    } else {
                        guid = loadIndex2;
                        startLoadFrom = 1;
                        if (guid != true) {
                            chatActivity.first_unread_id = 0;
                            chatActivity.last_message_id = 0;
                            chatActivity.createUnreadMessageAfterId = 0;
                        }
                    }
                    if (queryLoadIndex != startLoadFrom) {
                        if (isCache) {
                            if (chatActivity.currentEncryptedChat == null) {
                                if (chatActivity.isBroadcast) {
                                    found = true;
                                    if (queryLoadIndex != 2) {
                                        chatActivity.cacheEndReached[guid] = found;
                                    }
                                }
                            }
                            found = true;
                            chatActivity.endReached[guid] = true;
                            if (queryLoadIndex != 2) {
                                chatActivity.cacheEndReached[guid] = found;
                            }
                        } else {
                            chatActivity.endReached[guid] = true;
                        }
                        chatActivity.loading = false;
                        if (chatActivity.chatListView == null) {
                            startLoadFrom = loaded_mentions_count;
                            a2 = unread_to_load;
                            chatActivity.scrollToTopOnResume = true;
                            if (chatActivity.scrollToMessage != null) {
                                chatActivity.scrollToTopUnReadOnResume = true;
                            }
                        } else {
                            if (chatActivity.first) {
                            }
                            chatActivity.forceScrollToTop = false;
                            chatActivity.chatAdapter.notifyDataSetChanged();
                            if (chatActivity.scrollToMessage == null) {
                                moveScrollToLastMessage();
                            } else {
                                end = true;
                                if (chatActivity.startLoadFromMessageOffset != ConnectionsManager.DEFAULT_DATACENTER_ID) {
                                    queryLoadIndex = (-chatActivity.startLoadFromMessageOffset) - chatActivity.chatListView.getPaddingBottom();
                                    chatActivity.startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                } else if (chatActivity.scrollToMessagePosition == -9000) {
                                    queryLoadIndex = getScrollOffsetForMessage(chatActivity.scrollToMessage);
                                    end = false;
                                } else if (chatActivity.scrollToMessagePosition != -10000) {
                                    queryLoadIndex = chatActivity.scrollToMessagePosition;
                                } else {
                                    queryLoadIndex = -AndroidUtilities.dp(NUM);
                                    end = false;
                                }
                                if (chatActivity.messages.isEmpty()) {
                                    if (chatActivity.messages.get(chatActivity.messages.size() - 1) != chatActivity.scrollToMessage) {
                                        if (chatActivity.messages.get(chatActivity.messages.size() - 2) == chatActivity.scrollToMessage) {
                                            chatActivity.chatLayoutManager.scrollToPositionWithOffset(chatActivity.chatAdapter.messagesStartRow + chatActivity.messages.indexOf(chatActivity.scrollToMessage), queryLoadIndex, end);
                                        }
                                    }
                                    chatActivity.chatLayoutManager.scrollToPositionWithOffset(chatActivity.chatAdapter.loadingUpRow, queryLoadIndex, end);
                                }
                                chatActivity.chatListView.invalidate();
                                if (chatActivity.scrollToMessagePosition != -10000) {
                                    if (chatActivity.scrollToMessagePosition == -9000) {
                                        a2 = unread_to_load;
                                        chatActivity.scrollToMessagePosition = -10000;
                                        chatActivity.scrollToMessage = null;
                                    }
                                }
                                showPagedownButton(true, true);
                                if (unread_to_load == 0) {
                                } else {
                                    chatActivity.pagedownButtonCounter.setVisibility(0);
                                    textView = chatActivity.pagedownButtonCounter;
                                    objArr2 = new Object[1];
                                    a2 = unread_to_load;
                                    chatActivity.newUnreadMessageCount = a2;
                                    objArr2[0] = Integer.valueOf(a2);
                                    textView.setText(String.format("%d", objArr2));
                                }
                                chatActivity.scrollToMessagePosition = -10000;
                                chatActivity.scrollToMessage = null;
                            }
                            startLoadFrom = loaded_mentions_count;
                            if (startLoadFrom != 0) {
                                showMentiondownButton(true, true);
                                chatActivity.mentiondownButtonCounter.setVisibility(0);
                                textView = chatActivity.mentiondownButtonCounter;
                                objArr2 = new Object[1];
                                chatActivity.newMentionsCount = startLoadFrom;
                                objArr2[0] = Integer.valueOf(startLoadFrom);
                                textView.setText(String.format("%d", objArr2));
                            }
                            if (chatActivity.paused != 0) {
                                chatActivity.scrollToTopOnResume = true;
                                if (chatActivity.scrollToMessage != null) {
                                    chatActivity.scrollToTopUnReadOnResume = true;
                                }
                            }
                            chatActivity.chatListView.setEmptyView(chatActivity.emptyViewContainer);
                        }
                    } else {
                        startLoadFrom = 0;
                        chatActivity.forwardEndReached[guid] = true;
                        if (guid != 1) {
                            chatActivity.first_unread_id = 0;
                            chatActivity.last_message_id = 0;
                            chatActivity.createUnreadMessageAfterId = 0;
                            chatActivity.chatAdapter.notifyItemRemoved(chatActivity.chatAdapter.loadingDownRow);
                            startLoadFrom = 0 + 1;
                        }
                        chatActivity.startLoadFromMessageId = 0;
                        if (i2 <= 0) {
                        } else {
                            a2 = chatActivity.chatLayoutManager.findFirstVisibleItemPosition();
                            if (a2 == 0) {
                                a2++;
                            }
                            firstVisView = chatActivity.chatLayoutManager.findViewByPosition(a2);
                            if (firstVisView != null) {
                                last_unread_date = (chatActivity.chatListView.getMeasuredHeight() - firstVisView.getBottom()) - chatActivity.chatListView.getPaddingBottom();
                            } else {
                                i7 = unreadAfterId;
                                last_unread_date = 0;
                            }
                            unreadAfterId = last_unread_date;
                            chatActivity.chatAdapter.notifyItemRangeInserted(1, i2);
                            if (a2 != -1) {
                                chatActivity.chatLayoutManager.scrollToPositionWithOffset((a2 + i2) - startLoadFrom, unreadAfterId);
                            }
                        }
                        chatActivity.loadingForward = false;
                        i8 = queryLoadIndex;
                        startLoadFrom = loaded_mentions_count;
                        a2 = unread_to_load;
                    }
                    chatActivity.first = false;
                    chatActivity.botUser = TtmlNode.ANONYMOUS_REGION_ID;
                    updateBottomOverlay();
                    if (i2 != 0) {
                    }
                    if (chatActivity.progressView != null) {
                        chatActivity.progressView.setVisibility(4);
                    }
                    checkScrollForLoad(false);
                } else {
                    return;
                }
            }
        }
        i = id;
        if (i == NotificationCenter.emojiDidLoaded) {
            if (chatActivity.chatListView != null) {
                chatActivity.chatListView.invalidateViews();
            }
            if (chatActivity.replyObjectTextView != null) {
                chatActivity.replyObjectTextView.invalidate();
            }
            if (chatActivity.alertTextView != null) {
                chatActivity.alertTextView.invalidate();
            }
            if (chatActivity.pinnedMessageTextView != null) {
                chatActivity.pinnedMessageTextView.invalidate();
            }
            if (chatActivity.mentionListView != null) {
                chatActivity.mentionListView.invalidateViews();
            }
        } else {
            if (i == NotificationCenter.updateInterfaces) {
                guid = ((Integer) args[0]).intValue();
                if (!((guid & 1) == 0 && (guid & 16) == 0)) {
                    if (chatActivity.currentChat != null) {
                        Chat chat = MessagesController.getInstance(chatActivity.currentAccount).getChat(Integer.valueOf(chatActivity.currentChat.id));
                        if (chat != null) {
                            chatActivity.currentChat = chat;
                        }
                    } else if (chatActivity.currentUser != null) {
                        User user = MessagesController.getInstance(chatActivity.currentAccount).getUser(Integer.valueOf(chatActivity.currentUser.id));
                        if (user != null) {
                            chatActivity.currentUser = user;
                        }
                    }
                    updateTitle();
                }
                end = false;
                if (!((guid & 32) == 0 && (guid & 4) == 0)) {
                    if (!(chatActivity.currentChat == null || chatActivity.avatarContainer == null)) {
                        chatActivity.avatarContainer.updateOnlineCount();
                    }
                    end = true;
                }
                if (!((guid & 2) == 0 && (guid & 8) == 0 && (guid & 1) == 0)) {
                    checkAndUpdateAvatar();
                    updateVisibleRows();
                }
                if ((guid & 64) != 0) {
                    end = true;
                }
                if ((guid & MessagesController.UPDATE_MASK_CHANNEL) != 0 && ChatObject.isChannel(chatActivity.currentChat)) {
                    Chat chat2 = MessagesController.getInstance(chatActivity.currentAccount).getChat(Integer.valueOf(chatActivity.currentChat.id));
                    if (chat2 != null) {
                        chatActivity.currentChat = chat2;
                        end = true;
                        updateBottomOverlay();
                        if (chatActivity.chatActivityEnterView != null) {
                            chatActivity.chatActivityEnterView.setDialogId(chatActivity.dialog_id, chatActivity.currentAccount);
                        }
                    } else {
                        return;
                    }
                }
                if (chatActivity.avatarContainer != null && updateSubtitle) {
                    chatActivity.avatarContainer.updateSubtitle();
                }
                if ((guid & 128) != 0) {
                    updateContactStatus();
                }
            } else {
                arrayListArr = args;
                long did3;
                boolean hasFromMe;
                ArrayList<MessageObject> arr;
                boolean reloadMegagroup;
                MessageObject obj4;
                boolean unreadUpdated;
                boolean reloadMegagroup2;
                MessageObject obj5;
                GroupedMessages currentUserId3;
                MessageObject arr2;
                int size;
                int b;
                int b2;
                if (i == NotificationCenter.didReceivedNewMessages) {
                    did3 = ((Long) arrayListArr[0]).longValue();
                    if (did3 == chatActivity.dialog_id) {
                        long j;
                        boolean updateChat;
                        final Bundle bundle;
                        final BaseFragment lastFragment;
                        int i9;
                        ArrayList<MessageObject> arrayList2;
                        LongSparseArray<GroupedMessages> newGroups2;
                        HashMap<String, ArrayList<MessageObject>> webpagesToReload;
                        StringBuilder stringBuilder;
                        boolean reloadMegagroup3;
                        int placeToPaste;
                        GroupedMessages groupedMessages3;
                        GroupedMessages groupedMessages4;
                        int size2;
                        Object obj6;
                        final BaseFragment lastFragment2;
                        Message dateMsg2;
                        ArrayList<MessageObject> dateObj;
                        queryLoadIndex = UserConfig.getInstance(chatActivity.currentAccount).getClientUserId();
                        found = false;
                        hasFromMe = false;
                        arr = arrayListArr[1];
                        if (chatActivity.currentEncryptedChat != null && arr.size() == 1) {
                            obj22 = (MessageObject) arr.get(0);
                            if (chatActivity.currentEncryptedChat != null && obj22.isOut() && obj22.messageOwner.action != null && (obj22.messageOwner.action instanceof TL_messageEncryptedAction) && (obj22.messageOwner.action.encryptedAction instanceof TL_decryptedMessageActionSetMessageTTL) && getParentActivity() != null && AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) < 17 && chatActivity.currentEncryptedChat.ttl > 0 && chatActivity.currentEncryptedChat.ttl <= 60) {
                                Builder builder = new Builder(getParentActivity());
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                builder.setMessage(LocaleController.formatString("CompatibilityChat", R.string.CompatibilityChat, chatActivity.currentUser.first_name, chatActivity.currentUser.first_name));
                                showDialog(builder.create());
                            }
                        }
                        if (chatActivity.currentChat == null) {
                            if (chatActivity.inlineReturn == 0) {
                                j = did3;
                                if (chatActivity.forwardEndReached[0]) {
                                    startLoadFrom = Integer.MIN_VALUE;
                                    unreadAfterId = Integer.MIN_VALUE;
                                    if (chatActivity.currentEncryptedChat != null) {
                                        unreadAfterId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    }
                                    reloadMegagroup = false;
                                    guid = 0;
                                    while (guid < arr.size()) {
                                        obj4 = (MessageObject) arr.get(guid);
                                        if (chatActivity.currentUser != null && ((chatActivity.currentUser.bot && obj4.isOut()) || chatActivity.currentUser.id == queryLoadIndex)) {
                                            obj4.setIsRead();
                                        }
                                        if (!(chatActivity.avatarContainer == null || chatActivity.currentEncryptedChat == null || obj4.messageOwner.action == null || !(obj4.messageOwner.action instanceof TL_messageEncryptedAction) || !(obj4.messageOwner.action.encryptedAction instanceof TL_decryptedMessageActionSetMessageTTL))) {
                                            chatActivity.avatarContainer.setTime(((TL_decryptedMessageActionSetMessageTTL) obj4.messageOwner.action.encryptedAction).ttl_seconds);
                                        }
                                        if (obj4.messageOwner.action instanceof TL_messageActionChatMigrateTo) {
                                            updateChat = found;
                                            if (chatActivity.currentChat != null && chatActivity.currentChat.megagroup && ((obj4.messageOwner.action instanceof TL_messageActionChatAddUser) || (obj4.messageOwner.action instanceof TL_messageActionChatDeleteUser))) {
                                                reloadMegagroup = true;
                                            }
                                            if (guid == 0 && obj4.messageOwner.id < 0 && obj4.type == 5) {
                                                chatActivity.needAnimateToMessage = obj4;
                                            }
                                            if (obj4.isOut() || !obj4.isSending()) {
                                                if (obj4.type >= 0) {
                                                    if (chatActivity.messagesDict[0].indexOfKey(obj4.getId()) >= 0) {
                                                        obj4.checkLayout();
                                                        startLoadFrom = Math.max(startLoadFrom, obj4.messageOwner.date);
                                                        if (obj4.getId() > 0) {
                                                            unreadAfterId = Math.max(obj4.getId(), unreadAfterId);
                                                            chatActivity.last_message_id = Math.max(chatActivity.last_message_id, obj4.getId());
                                                        } else if (chatActivity.currentEncryptedChat != null) {
                                                            unreadAfterId = Math.min(obj4.getId(), unreadAfterId);
                                                            chatActivity.last_message_id = Math.min(chatActivity.last_message_id, obj4.getId());
                                                        }
                                                        if (obj4.messageOwner.mentioned || !obj4.isContentUnread()) {
                                                            last_unread_date = 1;
                                                        } else {
                                                            last_unread_date = 1;
                                                            chatActivity.newMentionsCount++;
                                                        }
                                                        chatActivity.newUnreadMessageCount += last_unread_date;
                                                        if (obj4.type == 10 || obj4.type == 11) {
                                                            found = true;
                                                            guid++;
                                                        }
                                                    }
                                                }
                                                found = updateChat;
                                                guid++;
                                            } else {
                                                scrollToLastMessage(false);
                                                return;
                                            }
                                        }
                                        bundle = new Bundle();
                                        bundle.putInt("chat_id", obj4.messageOwner.action.channel_id);
                                        lastFragment = chatActivity.parentLayout.fragmentsStack.size() <= 0 ? (BaseFragment) chatActivity.parentLayout.fragmentsStack.get(chatActivity.parentLayout.fragmentsStack.size() - 1) : null;
                                        i3 = obj4.messageOwner.action.channel_id;
                                        AndroidUtilities.runOnUIThread(new Runnable() {

                                            /* renamed from: org.telegram.ui.ChatActivity$84$1 */
                                            class C10451 implements Runnable {
                                                C10451() {
                                                }

                                                public void run() {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).loadFullChat(i3, 0, true);
                                                }
                                            }

                                            public void run() {
                                                ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
                                                if (lastFragment != null) {
                                                    NotificationCenter.getInstance(ChatActivity.this.currentAccount).removeObserver(lastFragment, NotificationCenter.closeChats);
                                                }
                                                NotificationCenter.getInstance(ChatActivity.this.currentAccount).postNotificationName(NotificationCenter.closeChats, new Object[0]);
                                                parentLayout.presentFragment(new ChatActivity(bundle), true);
                                                AndroidUtilities.runOnUIThread(new C10451(), 1000);
                                            }
                                        });
                                        return;
                                    }
                                    updateChat = found;
                                    if (!(chatActivity.newUnreadMessageCount == 0 || chatActivity.pagedownButtonCounter == null)) {
                                        chatActivity.pagedownButtonCounter.setVisibility(0);
                                        chatActivity.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newUnreadMessageCount)}));
                                    }
                                    if (!(chatActivity.newMentionsCount == 0 || chatActivity.mentiondownButtonCounter == null)) {
                                        chatActivity.mentiondownButtonCounter.setVisibility(0);
                                        chatActivity.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newMentionsCount)}));
                                        showMentiondownButton(true, true);
                                    }
                                    updateVisibleRows();
                                    i9 = queryLoadIndex;
                                    arrayList2 = arr;
                                } else {
                                    newGroups2 = null;
                                    unreadUpdated = true;
                                    webpagesToReload = null;
                                    if (BuildVars.LOGS_ENABLED) {
                                        stringBuilder = new StringBuilder();
                                        stringBuilder.append("received new messages ");
                                        stringBuilder.append(arr.size());
                                        stringBuilder.append(" in dialog ");
                                        stringBuilder.append(chatActivity.dialog_id);
                                        FileLog.m0d(stringBuilder.toString());
                                    }
                                    reloadMegagroup2 = false;
                                    guid = 0;
                                    while (guid < arr.size()) {
                                        obj5 = (MessageObject) arr.get(guid);
                                        if (chatActivity.currentUser != null && ((chatActivity.currentUser.bot && obj5.isOut()) || chatActivity.currentUser.id == queryLoadIndex)) {
                                            obj5.setIsRead();
                                        }
                                        if (chatActivity.avatarContainer == null && chatActivity.currentEncryptedChat != null && obj5.messageOwner.action != null && (obj5.messageOwner.action instanceof TL_messageEncryptedAction) && (obj5.messageOwner.action.encryptedAction instanceof TL_decryptedMessageActionSetMessageTTL)) {
                                            i9 = queryLoadIndex;
                                            chatActivity.avatarContainer.setTime(((TL_decryptedMessageActionSetMessageTTL) obj5.messageOwner.action.encryptedAction).ttl_seconds);
                                        } else {
                                            i9 = queryLoadIndex;
                                        }
                                        if (obj5.type >= 0) {
                                            arrayList2 = arr;
                                            reloadMegagroup3 = reloadMegagroup2;
                                        } else if (chatActivity.messagesDict[0].indexOfKey(obj5.getId()) < 0) {
                                            arrayList2 = arr;
                                            reloadMegagroup3 = reloadMegagroup2;
                                        } else {
                                            if (guid == 0 && obj5.messageOwner.id < 0 && obj5.type == 5) {
                                                chatActivity.animatingMessageObjects.add(obj5);
                                            }
                                            if (obj5.hasValidGroupId() == 0) {
                                                reloadMegagroup3 = reloadMegagroup2;
                                                placeToPaste = -1;
                                                currentUserId3 = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj5.getGroupId());
                                                if (currentUserId3 != null) {
                                                    queryLoadIndex = new GroupedMessages();
                                                    queryLoadIndex.groupId = obj5.getGroupId();
                                                    arrayList2 = arr;
                                                    chatActivity.groupedMessagesMap.put(queryLoadIndex.groupId, queryLoadIndex);
                                                    groupedMessages3 = queryLoadIndex;
                                                } else {
                                                    arrayList2 = arr;
                                                    groupedMessages3 = currentUserId3;
                                                }
                                                if (newGroups2 == null) {
                                                    newGroups2 = new LongSparseArray();
                                                }
                                                newGroups2.put(groupedMessages3.groupId, groupedMessages3);
                                                groupedMessages3.messages.add(obj5);
                                            } else {
                                                arrayList2 = arr;
                                                reloadMegagroup3 = reloadMegagroup2;
                                                placeToPaste = -1;
                                                groupedMessages3 = null;
                                            }
                                            queryLoadIndex = groupedMessages3;
                                            if (queryLoadIndex != 0) {
                                                arr2 = queryLoadIndex.messages.size() <= 1 ? (MessageObject) queryLoadIndex.messages.get(queryLoadIndex.messages.size() - 2) : null;
                                                if (arr2 != null) {
                                                    last_unread_date = chatActivity.messages.indexOf(arr2);
                                                    if (last_unread_date != -1) {
                                                        if (obj5.messageOwner.id < 0) {
                                                            groupedMessages4 = queryLoadIndex;
                                                        } else if (chatActivity.messages.isEmpty()) {
                                                            size = chatActivity.messages.size();
                                                            arr = null;
                                                            while (arr < size) {
                                                                obj4 = (MessageObject) chatActivity.messages.get(arr);
                                                                if (obj4.type >= 0 || obj4.messageOwner.date <= 0) {
                                                                    groupedMessages4 = queryLoadIndex;
                                                                    size2 = size;
                                                                } else {
                                                                    if (obj4.messageOwner.id <= 0 || obj5.messageOwner.id <= 0) {
                                                                        groupedMessages4 = queryLoadIndex;
                                                                    } else {
                                                                        groupedMessages4 = queryLoadIndex;
                                                                        if (obj4.messageOwner.id < obj5.messageOwner.id) {
                                                                            if (obj4.getGroupId() == 0) {
                                                                                queryLoadIndex = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj4.getGroupId());
                                                                                if (queryLoadIndex != null && queryLoadIndex.messages.size() == 0) {
                                                                                    queryLoadIndex = 0;
                                                                                }
                                                                            } else {
                                                                                queryLoadIndex = 0;
                                                                            }
                                                                            if (queryLoadIndex != 0) {
                                                                                i = arr;
                                                                            } else {
                                                                                i = chatActivity.messages.indexOf(queryLoadIndex.messages.get(queryLoadIndex.messages.size() - 1));
                                                                            }
                                                                            last_unread_date = i;
                                                                            if (last_unread_date == -1 || last_unread_date > chatActivity.messages.size()) {
                                                                                last_unread_date = chatActivity.messages.size();
                                                                            }
                                                                        }
                                                                    }
                                                                    if (obj4.messageOwner.date < obj5.messageOwner.date) {
                                                                        if (obj4.getGroupId() == 0) {
                                                                            queryLoadIndex = 0;
                                                                        } else {
                                                                            queryLoadIndex = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj4.getGroupId());
                                                                            queryLoadIndex = 0;
                                                                        }
                                                                        if (queryLoadIndex != 0) {
                                                                            i = chatActivity.messages.indexOf(queryLoadIndex.messages.get(queryLoadIndex.messages.size() - 1));
                                                                        } else {
                                                                            i = arr;
                                                                        }
                                                                        last_unread_date = i;
                                                                        last_unread_date = chatActivity.messages.size();
                                                                    } else {
                                                                        size2 = size;
                                                                    }
                                                                }
                                                                arr++;
                                                                queryLoadIndex = groupedMessages4;
                                                                size = size2;
                                                                i = id;
                                                            }
                                                            groupedMessages4 = queryLoadIndex;
                                                            size2 = size;
                                                            last_unread_date = chatActivity.messages.size();
                                                        } else {
                                                            obj6 = queryLoadIndex;
                                                        }
                                                        last_unread_date = 0;
                                                    } else {
                                                        groupedMessages4 = queryLoadIndex;
                                                    }
                                                    if (!(chatActivity.currentEncryptedChat == 0 || (obj5.messageOwner.media instanceof TL_messageMediaWebPage) == 0 || (obj5.messageOwner.media.webpage instanceof TL_webPageUrlPending) == 0)) {
                                                        if (webpagesToReload == null) {
                                                            webpagesToReload = new HashMap();
                                                        }
                                                        queryLoadIndex = (ArrayList) webpagesToReload.get(obj5.messageOwner.media.webpage.url);
                                                        if (queryLoadIndex == null) {
                                                            queryLoadIndex = new ArrayList();
                                                            webpagesToReload.put(obj5.messageOwner.media.webpage.url, queryLoadIndex);
                                                        }
                                                        queryLoadIndex.add(obj5);
                                                    }
                                                    obj5.checkLayout();
                                                    if ((obj5.messageOwner.action instanceof TL_messageActionChatMigrateTo) == 0) {
                                                        queryLoadIndex = new Bundle();
                                                        queryLoadIndex.putInt("chat_id", obj5.messageOwner.action.channel_id);
                                                        lastFragment2 = chatActivity.parentLayout.fragmentsStack.size() <= 0 ? (BaseFragment) chatActivity.parentLayout.fragmentsStack.get(chatActivity.parentLayout.fragmentsStack.size() - 1) : null;
                                                        size = obj5.messageOwner.action.channel_id;
                                                        AndroidUtilities.runOnUIThread(new Runnable() {

                                                            /* renamed from: org.telegram.ui.ChatActivity$85$1 */
                                                            class C10461 implements Runnable {
                                                                C10461() {
                                                                }

                                                                public void run() {
                                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).loadFullChat(size, 0, true);
                                                                }
                                                            }

                                                            public void run() {
                                                                ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
                                                                if (lastFragment2 != null) {
                                                                    NotificationCenter.getInstance(ChatActivity.this.currentAccount).removeObserver(lastFragment2, NotificationCenter.closeChats);
                                                                }
                                                                NotificationCenter.getInstance(ChatActivity.this.currentAccount).postNotificationName(NotificationCenter.closeChats, new Object[0]);
                                                                parentLayout.presentFragment(new ChatActivity(queryLoadIndex), true);
                                                                AndroidUtilities.runOnUIThread(new C10461(), 1000);
                                                            }
                                                        });
                                                        if (newGroups2 != null) {
                                                            b = 0;
                                                            while (true) {
                                                                arr = b;
                                                                if (arr >= newGroups2.size()) {
                                                                    break;
                                                                }
                                                                ((GroupedMessages) newGroups2.valueAt(arr)).calculate();
                                                                b = arr + 1;
                                                            }
                                                        }
                                                        return;
                                                    }
                                                    if (chatActivity.currentChat != 0 || chatActivity.currentChat.megagroup == 0 || ((obj5.messageOwner.action instanceof TL_messageActionChatAddUser) == 0 && (obj5.messageOwner.action instanceof TL_messageActionChatDeleteUser) == 0)) {
                                                        reloadMegagroup2 = reloadMegagroup3;
                                                    } else {
                                                        reloadMegagroup2 = true;
                                                    }
                                                    if (chatActivity.minDate[0] == 0 || obj5.messageOwner.date < chatActivity.minDate[0]) {
                                                        chatActivity.minDate[0] = obj5.messageOwner.date;
                                                    }
                                                    if (obj5.isOut() != 0) {
                                                        removeUnreadPlane(1);
                                                        hasFromMe = true;
                                                    }
                                                    if (obj5.getId() <= 0) {
                                                        arr = null;
                                                        chatActivity.maxMessageId[0] = Math.min(obj5.getId(), chatActivity.maxMessageId[0]);
                                                        chatActivity.minMessageId[0] = Math.max(obj5.getId(), chatActivity.minMessageId[0]);
                                                    } else {
                                                        arr = null;
                                                        if (chatActivity.currentEncryptedChat != 0) {
                                                            chatActivity.maxMessageId[0] = Math.max(obj5.getId(), chatActivity.maxMessageId[0]);
                                                            chatActivity.minMessageId[0] = Math.min(obj5.getId(), chatActivity.minMessageId[0]);
                                                        }
                                                    }
                                                    chatActivity.maxDate[arr] = Math.max(chatActivity.maxDate[arr], obj5.messageOwner.date);
                                                    chatActivity.messagesDict[arr].put(obj5.getId(), obj5);
                                                    queryLoadIndex = (ArrayList) chatActivity.messagesByDays.get(obj5.dateKey);
                                                    if (last_unread_date > chatActivity.messages.size()) {
                                                        last_unread_date = chatActivity.messages.size();
                                                    }
                                                    if (queryLoadIndex == null) {
                                                        queryLoadIndex = new ArrayList();
                                                        chatActivity.messagesByDays.put(obj5.dateKey, queryLoadIndex);
                                                        dateMsg2 = new TL_message();
                                                        dateMsg2.message = LocaleController.formatDateChat((long) obj5.messageOwner.date);
                                                        dateMsg2.id = 0;
                                                        dateMsg2.date = obj5.messageOwner.date;
                                                        dateObj = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                        dateObj.type = 10;
                                                        dateObj.contentType = 1;
                                                        dateObj.isDateObject = true;
                                                        chatActivity.messages.add(last_unread_date, dateObj);
                                                        if (chatActivity.chatAdapter != null) {
                                                            chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                                        }
                                                    }
                                                    if (obj5.isOut()) {
                                                        if (chatActivity.paused && last_unread_date == 0) {
                                                            if (!(chatActivity.scrollToTopUnReadOnResume || chatActivity.unreadMessageObject == null)) {
                                                                removeMessageObject(chatActivity.unreadMessageObject);
                                                                if (last_unread_date > 0) {
                                                                    last_unread_date--;
                                                                }
                                                                chatActivity.unreadMessageObject = null;
                                                            }
                                                            if (chatActivity.unreadMessageObject == null) {
                                                                dateMsg2 = new TL_message();
                                                                dateMsg2.message = TtmlNode.ANONYMOUS_REGION_ID;
                                                                dateMsg2.id = 0;
                                                                arr = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                                arr.type = 6;
                                                                arr.contentType = 2;
                                                                chatActivity.messages.add(0, arr);
                                                                if (chatActivity.chatAdapter != null) {
                                                                    chatActivity.chatAdapter.notifyItemInserted(0);
                                                                }
                                                                chatActivity.unreadMessageObject = arr;
                                                                chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                                chatActivity.scrollToMessagePosition = -10000;
                                                                unreadUpdated = false;
                                                                chatActivity.scrollToTopUnReadOnResume = true;
                                                                if (chatActivity.unreadMessageObject != null) {
                                                                    unreadUpdated = true;
                                                                }
                                                            }
                                                        }
                                                        if (chatActivity.unreadMessageObject != null) {
                                                            unreadUpdated = true;
                                                        }
                                                    }
                                                    queryLoadIndex.add(0, obj5);
                                                    chatActivity.messages.add(last_unread_date, obj5);
                                                    if (chatActivity.chatAdapter != null) {
                                                        chatActivity.chatAdapter.notifyItemChanged(last_unread_date);
                                                        chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                                    }
                                                    if (obj5.isOut() && obj5.messageOwner.mentioned && obj5.isContentUnread()) {
                                                        arr = true;
                                                        chatActivity.newMentionsCount++;
                                                    } else {
                                                        arr = true;
                                                    }
                                                    chatActivity.newUnreadMessageCount += arr;
                                                    if (obj5.type != 10 || obj5.type == 11) {
                                                        found = true;
                                                        guid++;
                                                        queryLoadIndex = i9;
                                                        arr = arrayList2;
                                                        i = id;
                                                        objArr = args;
                                                    } else {
                                                        guid++;
                                                        queryLoadIndex = i9;
                                                        arr = arrayList2;
                                                        i = id;
                                                        objArr = args;
                                                    }
                                                }
                                            }
                                            last_unread_date = placeToPaste;
                                            if (last_unread_date != -1) {
                                                groupedMessages4 = queryLoadIndex;
                                            } else {
                                                if (obj5.messageOwner.id < 0) {
                                                    groupedMessages4 = queryLoadIndex;
                                                } else if (chatActivity.messages.isEmpty()) {
                                                    size = chatActivity.messages.size();
                                                    arr = null;
                                                    while (arr < size) {
                                                        obj4 = (MessageObject) chatActivity.messages.get(arr);
                                                        if (obj4.type >= 0) {
                                                        }
                                                        groupedMessages4 = queryLoadIndex;
                                                        size2 = size;
                                                        arr++;
                                                        queryLoadIndex = groupedMessages4;
                                                        size = size2;
                                                        i = id;
                                                    }
                                                    groupedMessages4 = queryLoadIndex;
                                                    size2 = size;
                                                    last_unread_date = chatActivity.messages.size();
                                                } else {
                                                    obj6 = queryLoadIndex;
                                                }
                                                last_unread_date = 0;
                                            }
                                            if (webpagesToReload == null) {
                                                webpagesToReload = new HashMap();
                                            }
                                            queryLoadIndex = (ArrayList) webpagesToReload.get(obj5.messageOwner.media.webpage.url);
                                            if (queryLoadIndex == null) {
                                                queryLoadIndex = new ArrayList();
                                                webpagesToReload.put(obj5.messageOwner.media.webpage.url, queryLoadIndex);
                                            }
                                            queryLoadIndex.add(obj5);
                                            obj5.checkLayout();
                                            if ((obj5.messageOwner.action instanceof TL_messageActionChatMigrateTo) == 0) {
                                                if (chatActivity.currentChat != 0) {
                                                }
                                                reloadMegagroup2 = reloadMegagroup3;
                                                chatActivity.minDate[0] = obj5.messageOwner.date;
                                                if (obj5.isOut() != 0) {
                                                    removeUnreadPlane(1);
                                                    hasFromMe = true;
                                                }
                                                if (obj5.getId() <= 0) {
                                                    arr = null;
                                                    if (chatActivity.currentEncryptedChat != 0) {
                                                        chatActivity.maxMessageId[0] = Math.max(obj5.getId(), chatActivity.maxMessageId[0]);
                                                        chatActivity.minMessageId[0] = Math.min(obj5.getId(), chatActivity.minMessageId[0]);
                                                    }
                                                } else {
                                                    arr = null;
                                                    chatActivity.maxMessageId[0] = Math.min(obj5.getId(), chatActivity.maxMessageId[0]);
                                                    chatActivity.minMessageId[0] = Math.max(obj5.getId(), chatActivity.minMessageId[0]);
                                                }
                                                chatActivity.maxDate[arr] = Math.max(chatActivity.maxDate[arr], obj5.messageOwner.date);
                                                chatActivity.messagesDict[arr].put(obj5.getId(), obj5);
                                                queryLoadIndex = (ArrayList) chatActivity.messagesByDays.get(obj5.dateKey);
                                                if (last_unread_date > chatActivity.messages.size()) {
                                                    last_unread_date = chatActivity.messages.size();
                                                }
                                                if (queryLoadIndex == null) {
                                                    queryLoadIndex = new ArrayList();
                                                    chatActivity.messagesByDays.put(obj5.dateKey, queryLoadIndex);
                                                    dateMsg2 = new TL_message();
                                                    dateMsg2.message = LocaleController.formatDateChat((long) obj5.messageOwner.date);
                                                    dateMsg2.id = 0;
                                                    dateMsg2.date = obj5.messageOwner.date;
                                                    dateObj = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                    dateObj.type = 10;
                                                    dateObj.contentType = 1;
                                                    dateObj.isDateObject = true;
                                                    chatActivity.messages.add(last_unread_date, dateObj);
                                                    if (chatActivity.chatAdapter != null) {
                                                        chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                                    }
                                                }
                                                if (obj5.isOut()) {
                                                    removeMessageObject(chatActivity.unreadMessageObject);
                                                    if (last_unread_date > 0) {
                                                        last_unread_date--;
                                                    }
                                                    chatActivity.unreadMessageObject = null;
                                                    if (chatActivity.unreadMessageObject == null) {
                                                        dateMsg2 = new TL_message();
                                                        dateMsg2.message = TtmlNode.ANONYMOUS_REGION_ID;
                                                        dateMsg2.id = 0;
                                                        arr = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                        arr.type = 6;
                                                        arr.contentType = 2;
                                                        chatActivity.messages.add(0, arr);
                                                        if (chatActivity.chatAdapter != null) {
                                                            chatActivity.chatAdapter.notifyItemInserted(0);
                                                        }
                                                        chatActivity.unreadMessageObject = arr;
                                                        chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                        chatActivity.scrollToMessagePosition = -10000;
                                                        unreadUpdated = false;
                                                        chatActivity.scrollToTopUnReadOnResume = true;
                                                        if (chatActivity.unreadMessageObject != null) {
                                                            unreadUpdated = true;
                                                        }
                                                    }
                                                    if (chatActivity.unreadMessageObject != null) {
                                                        unreadUpdated = true;
                                                    }
                                                }
                                                queryLoadIndex.add(0, obj5);
                                                chatActivity.messages.add(last_unread_date, obj5);
                                                if (chatActivity.chatAdapter != null) {
                                                    chatActivity.chatAdapter.notifyItemChanged(last_unread_date);
                                                    chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                                }
                                                if (obj5.isOut()) {
                                                }
                                                arr = true;
                                                chatActivity.newUnreadMessageCount += arr;
                                                if (obj5.type != 10) {
                                                }
                                                found = true;
                                                guid++;
                                                queryLoadIndex = i9;
                                                arr = arrayList2;
                                                i = id;
                                                objArr = args;
                                            } else {
                                                queryLoadIndex = new Bundle();
                                                queryLoadIndex.putInt("chat_id", obj5.messageOwner.action.channel_id);
                                                if (chatActivity.parentLayout.fragmentsStack.size() <= 0) {
                                                }
                                                lastFragment2 = chatActivity.parentLayout.fragmentsStack.size() <= 0 ? (BaseFragment) chatActivity.parentLayout.fragmentsStack.get(chatActivity.parentLayout.fragmentsStack.size() - 1) : null;
                                                size = obj5.messageOwner.action.channel_id;
                                                AndroidUtilities.runOnUIThread(/* anonymous class already generated */);
                                                if (newGroups2 != null) {
                                                    b = 0;
                                                    while (true) {
                                                        arr = b;
                                                        if (arr >= newGroups2.size()) {
                                                            break;
                                                        }
                                                        ((GroupedMessages) newGroups2.valueAt(arr)).calculate();
                                                        b = arr + 1;
                                                    }
                                                }
                                                return;
                                            }
                                        }
                                        reloadMegagroup2 = reloadMegagroup3;
                                        guid++;
                                        queryLoadIndex = i9;
                                        arr = arrayList2;
                                        i = id;
                                        objArr = args;
                                    }
                                    arrayList2 = arr;
                                    reloadMegagroup3 = reloadMegagroup2;
                                    if (webpagesToReload != null) {
                                        MessagesController.getInstance(chatActivity.currentAccount).reloadWebPages(chatActivity.dialog_id, webpagesToReload);
                                    }
                                    if (newGroups2 != null) {
                                        for (guid = 0; guid < newGroups2.size(); guid++) {
                                            currentUserId3 = (GroupedMessages) newGroups2.valueAt(guid);
                                            i = currentUserId3.posArray.size();
                                            currentUserId3.calculate();
                                            size = currentUserId3.posArray.size();
                                            if (size - i > 0 && chatActivity.chatAdapter != null) {
                                                a = chatActivity.messages.indexOf(currentUserId3.messages.get(currentUserId3.messages.size() - 1));
                                                if (a >= 0) {
                                                    chatActivity.chatAdapter.notifyItemRangeChanged(a, size);
                                                }
                                            }
                                        }
                                    }
                                    if (chatActivity.progressView != null) {
                                        chatActivity.progressView.setVisibility(4);
                                    }
                                    if (chatActivity.chatAdapter != null) {
                                        chatActivity.scrollToTopOnResume = true;
                                    } else if (unreadUpdated) {
                                        chatActivity.chatAdapter.updateRowWithMessageObject(chatActivity.unreadMessageObject);
                                    }
                                    if (chatActivity.chatListView != null || chatActivity.chatAdapter == null) {
                                        chatActivity.scrollToTopOnResume = true;
                                    } else {
                                        guid = chatActivity.chatLayoutManager.findFirstVisibleItemPosition();
                                        if (guid == -1) {
                                            guid = 0;
                                        }
                                        if (guid != 0) {
                                            if (!hasFromMe) {
                                                if (chatActivity.newUnreadMessageCount == 0 || chatActivity.pagedownButtonCounter == null) {
                                                    z = true;
                                                } else {
                                                    chatActivity.pagedownButtonCounter.setVisibility(0);
                                                    z = true;
                                                    chatActivity.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newUnreadMessageCount)}));
                                                }
                                                showPagedownButton(z, z);
                                                if (chatActivity.newMentionsCount == 0 && chatActivity.mentiondownButtonCounter != null) {
                                                    chatActivity.mentiondownButtonCounter.setVisibility(0);
                                                    chatActivity.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newMentionsCount)}));
                                                    showMentiondownButton(true, true);
                                                }
                                            }
                                        }
                                        chatActivity.newUnreadMessageCount = 0;
                                        if (!chatActivity.firstLoading) {
                                            if (chatActivity.paused) {
                                                chatActivity.scrollToTopOnResume = true;
                                            } else {
                                                chatActivity.forceScrollToTop = true;
                                                moveScrollToLastMessage();
                                            }
                                        }
                                        if (chatActivity.newMentionsCount == 0) {
                                        }
                                    }
                                    updateChat = found;
                                    reloadMegagroup = reloadMegagroup3;
                                }
                                if (!(chatActivity.messages.isEmpty() || chatActivity.botUser == null || chatActivity.botUser.length() != 0)) {
                                    chatActivity.botUser = null;
                                    updateBottomOverlay();
                                }
                                if (updateChat) {
                                    updateTitle();
                                    checkAndUpdateAvatar();
                                }
                                if (reloadMegagroup) {
                                    MessagesController.getInstance(chatActivity.currentAccount).loadFullChat(chatActivity.currentChat.id, 0, true);
                                }
                            }
                        }
                        unreadAfterId = 0;
                        while (unreadAfterId < arr.size()) {
                            MessageObject messageObject = (MessageObject) arr.get(unreadAfterId);
                            if (chatActivity.currentChat != null) {
                                if (((messageObject.messageOwner.action instanceof TL_messageActionChatDeleteUser) && messageObject.messageOwner.action.user_id == queryLoadIndex) || ((messageObject.messageOwner.action instanceof TL_messageActionChatAddUser) && messageObject.messageOwner.action.users.contains(Integer.valueOf(queryLoadIndex)))) {
                                    Chat newChat = MessagesController.getInstance(chatActivity.currentAccount).getChat(Integer.valueOf(chatActivity.currentChat.id));
                                    if (newChat != null) {
                                        chatActivity.currentChat = newChat;
                                        checkActionBarMenu();
                                        updateBottomOverlay();
                                        if (chatActivity.avatarContainer != null) {
                                            chatActivity.avatarContainer.updateSubtitle();
                                        }
                                    }
                                } else if (messageObject.messageOwner.reply_to_msg_id != 0 && messageObject.replyMessageObject == null) {
                                    messageObject.replyMessageObject = (MessageObject) chatActivity.messagesDict[0].get(messageObject.messageOwner.reply_to_msg_id);
                                    if (messageObject.messageOwner.action instanceof TL_messageActionPinMessage) {
                                        messageObject.generatePinMessageText(null, null);
                                    } else if (messageObject.messageOwner.action instanceof TL_messageActionGameScore) {
                                        messageObject.generateGameMessageText(null);
                                    } else if (messageObject.messageOwner.action instanceof TL_messageActionPaymentSent) {
                                        messageObject.generatePaymentSentMessageText(null);
                                    }
                                    if (!(!messageObject.isMegagroup() || messageObject.replyMessageObject == null || messageObject.replyMessageObject.messageOwner == null)) {
                                        Message message = messageObject.replyMessageObject.messageOwner;
                                        message.flags |= Integer.MIN_VALUE;
                                    }
                                }
                                j = did3;
                            } else {
                                if (!(chatActivity.inlineReturn == 0 || messageObject.messageOwner.reply_markup == null)) {
                                    b2 = 0;
                                    while (b2 < messageObject.messageOwner.reply_markup.rows.size()) {
                                        TL_keyboardButtonRow row = (TL_keyboardButtonRow) messageObject.messageOwner.reply_markup.rows.get(b2);
                                        i2 = 0;
                                        while (i2 < row.buttons.size()) {
                                            KeyboardButton button = (KeyboardButton) row.buttons.get(i2);
                                            j = did3;
                                            if ((button instanceof TL_keyboardButtonSwitchInline) != null) {
                                                processSwitchButton((TL_keyboardButtonSwitchInline) button);
                                                break;
                                            } else {
                                                i2++;
                                                did3 = j;
                                            }
                                        }
                                        j = did3;
                                        b2++;
                                        did3 = j;
                                    }
                                }
                                j = did3;
                            }
                            unreadAfterId++;
                            did3 = j;
                        }
                        if (chatActivity.forwardEndReached[0]) {
                            newGroups2 = null;
                            unreadUpdated = true;
                            webpagesToReload = null;
                            if (BuildVars.LOGS_ENABLED) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append("received new messages ");
                                stringBuilder.append(arr.size());
                                stringBuilder.append(" in dialog ");
                                stringBuilder.append(chatActivity.dialog_id);
                                FileLog.m0d(stringBuilder.toString());
                            }
                            reloadMegagroup2 = false;
                            guid = 0;
                            while (guid < arr.size()) {
                                obj5 = (MessageObject) arr.get(guid);
                                obj5.setIsRead();
                                if (chatActivity.avatarContainer == null) {
                                }
                                i9 = queryLoadIndex;
                                if (obj5.type >= 0) {
                                    arrayList2 = arr;
                                    reloadMegagroup3 = reloadMegagroup2;
                                } else if (chatActivity.messagesDict[0].indexOfKey(obj5.getId()) < 0) {
                                    chatActivity.animatingMessageObjects.add(obj5);
                                    if (obj5.hasValidGroupId() == 0) {
                                        arrayList2 = arr;
                                        reloadMegagroup3 = reloadMegagroup2;
                                        placeToPaste = -1;
                                        groupedMessages3 = null;
                                    } else {
                                        reloadMegagroup3 = reloadMegagroup2;
                                        placeToPaste = -1;
                                        currentUserId3 = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj5.getGroupId());
                                        if (currentUserId3 != null) {
                                            arrayList2 = arr;
                                            groupedMessages3 = currentUserId3;
                                        } else {
                                            queryLoadIndex = new GroupedMessages();
                                            queryLoadIndex.groupId = obj5.getGroupId();
                                            arrayList2 = arr;
                                            chatActivity.groupedMessagesMap.put(queryLoadIndex.groupId, queryLoadIndex);
                                            groupedMessages3 = queryLoadIndex;
                                        }
                                        if (newGroups2 == null) {
                                            newGroups2 = new LongSparseArray();
                                        }
                                        newGroups2.put(groupedMessages3.groupId, groupedMessages3);
                                        groupedMessages3.messages.add(obj5);
                                    }
                                    queryLoadIndex = groupedMessages3;
                                    if (queryLoadIndex != 0) {
                                        if (queryLoadIndex.messages.size() <= 1) {
                                        }
                                        arr2 = queryLoadIndex.messages.size() <= 1 ? (MessageObject) queryLoadIndex.messages.get(queryLoadIndex.messages.size() - 2) : null;
                                        if (arr2 != null) {
                                            last_unread_date = chatActivity.messages.indexOf(arr2);
                                            if (last_unread_date != -1) {
                                                if (obj5.messageOwner.id < 0) {
                                                    groupedMessages4 = queryLoadIndex;
                                                } else if (chatActivity.messages.isEmpty()) {
                                                    obj6 = queryLoadIndex;
                                                } else {
                                                    size = chatActivity.messages.size();
                                                    arr = null;
                                                    while (arr < size) {
                                                        obj4 = (MessageObject) chatActivity.messages.get(arr);
                                                        if (obj4.type >= 0) {
                                                        }
                                                        groupedMessages4 = queryLoadIndex;
                                                        size2 = size;
                                                        arr++;
                                                        queryLoadIndex = groupedMessages4;
                                                        size = size2;
                                                        i = id;
                                                    }
                                                    groupedMessages4 = queryLoadIndex;
                                                    size2 = size;
                                                    last_unread_date = chatActivity.messages.size();
                                                }
                                                last_unread_date = 0;
                                            } else {
                                                groupedMessages4 = queryLoadIndex;
                                            }
                                            if (webpagesToReload == null) {
                                                webpagesToReload = new HashMap();
                                            }
                                            queryLoadIndex = (ArrayList) webpagesToReload.get(obj5.messageOwner.media.webpage.url);
                                            if (queryLoadIndex == null) {
                                                queryLoadIndex = new ArrayList();
                                                webpagesToReload.put(obj5.messageOwner.media.webpage.url, queryLoadIndex);
                                            }
                                            queryLoadIndex.add(obj5);
                                            obj5.checkLayout();
                                            if ((obj5.messageOwner.action instanceof TL_messageActionChatMigrateTo) == 0) {
                                                queryLoadIndex = new Bundle();
                                                queryLoadIndex.putInt("chat_id", obj5.messageOwner.action.channel_id);
                                                if (chatActivity.parentLayout.fragmentsStack.size() <= 0) {
                                                }
                                                lastFragment2 = chatActivity.parentLayout.fragmentsStack.size() <= 0 ? (BaseFragment) chatActivity.parentLayout.fragmentsStack.get(chatActivity.parentLayout.fragmentsStack.size() - 1) : null;
                                                size = obj5.messageOwner.action.channel_id;
                                                AndroidUtilities.runOnUIThread(/* anonymous class already generated */);
                                                if (newGroups2 != null) {
                                                    b = 0;
                                                    while (true) {
                                                        arr = b;
                                                        if (arr >= newGroups2.size()) {
                                                            break;
                                                        }
                                                        ((GroupedMessages) newGroups2.valueAt(arr)).calculate();
                                                        b = arr + 1;
                                                    }
                                                }
                                                return;
                                            }
                                            if (chatActivity.currentChat != 0) {
                                            }
                                            reloadMegagroup2 = reloadMegagroup3;
                                            chatActivity.minDate[0] = obj5.messageOwner.date;
                                            if (obj5.isOut() != 0) {
                                                removeUnreadPlane(1);
                                                hasFromMe = true;
                                            }
                                            if (obj5.getId() <= 0) {
                                                arr = null;
                                                chatActivity.maxMessageId[0] = Math.min(obj5.getId(), chatActivity.maxMessageId[0]);
                                                chatActivity.minMessageId[0] = Math.max(obj5.getId(), chatActivity.minMessageId[0]);
                                            } else {
                                                arr = null;
                                                if (chatActivity.currentEncryptedChat != 0) {
                                                    chatActivity.maxMessageId[0] = Math.max(obj5.getId(), chatActivity.maxMessageId[0]);
                                                    chatActivity.minMessageId[0] = Math.min(obj5.getId(), chatActivity.minMessageId[0]);
                                                }
                                            }
                                            chatActivity.maxDate[arr] = Math.max(chatActivity.maxDate[arr], obj5.messageOwner.date);
                                            chatActivity.messagesDict[arr].put(obj5.getId(), obj5);
                                            queryLoadIndex = (ArrayList) chatActivity.messagesByDays.get(obj5.dateKey);
                                            if (last_unread_date > chatActivity.messages.size()) {
                                                last_unread_date = chatActivity.messages.size();
                                            }
                                            if (queryLoadIndex == null) {
                                                queryLoadIndex = new ArrayList();
                                                chatActivity.messagesByDays.put(obj5.dateKey, queryLoadIndex);
                                                dateMsg2 = new TL_message();
                                                dateMsg2.message = LocaleController.formatDateChat((long) obj5.messageOwner.date);
                                                dateMsg2.id = 0;
                                                dateMsg2.date = obj5.messageOwner.date;
                                                dateObj = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                dateObj.type = 10;
                                                dateObj.contentType = 1;
                                                dateObj.isDateObject = true;
                                                chatActivity.messages.add(last_unread_date, dateObj);
                                                if (chatActivity.chatAdapter != null) {
                                                    chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                                }
                                            }
                                            if (obj5.isOut()) {
                                                removeMessageObject(chatActivity.unreadMessageObject);
                                                if (last_unread_date > 0) {
                                                    last_unread_date--;
                                                }
                                                chatActivity.unreadMessageObject = null;
                                                if (chatActivity.unreadMessageObject == null) {
                                                    dateMsg2 = new TL_message();
                                                    dateMsg2.message = TtmlNode.ANONYMOUS_REGION_ID;
                                                    dateMsg2.id = 0;
                                                    arr = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                    arr.type = 6;
                                                    arr.contentType = 2;
                                                    chatActivity.messages.add(0, arr);
                                                    if (chatActivity.chatAdapter != null) {
                                                        chatActivity.chatAdapter.notifyItemInserted(0);
                                                    }
                                                    chatActivity.unreadMessageObject = arr;
                                                    chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                    chatActivity.scrollToMessagePosition = -10000;
                                                    unreadUpdated = false;
                                                    chatActivity.scrollToTopUnReadOnResume = true;
                                                    if (chatActivity.unreadMessageObject != null) {
                                                        unreadUpdated = true;
                                                    }
                                                }
                                                if (chatActivity.unreadMessageObject != null) {
                                                    unreadUpdated = true;
                                                }
                                            }
                                            queryLoadIndex.add(0, obj5);
                                            chatActivity.messages.add(last_unread_date, obj5);
                                            if (chatActivity.chatAdapter != null) {
                                                chatActivity.chatAdapter.notifyItemChanged(last_unread_date);
                                                chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                            }
                                            if (obj5.isOut()) {
                                            }
                                            arr = true;
                                            chatActivity.newUnreadMessageCount += arr;
                                            if (obj5.type != 10) {
                                            }
                                            found = true;
                                            guid++;
                                            queryLoadIndex = i9;
                                            arr = arrayList2;
                                            i = id;
                                            objArr = args;
                                        }
                                    }
                                    last_unread_date = placeToPaste;
                                    if (last_unread_date != -1) {
                                        groupedMessages4 = queryLoadIndex;
                                    } else {
                                        if (obj5.messageOwner.id < 0) {
                                            groupedMessages4 = queryLoadIndex;
                                        } else if (chatActivity.messages.isEmpty()) {
                                            size = chatActivity.messages.size();
                                            arr = null;
                                            while (arr < size) {
                                                obj4 = (MessageObject) chatActivity.messages.get(arr);
                                                if (obj4.type >= 0) {
                                                }
                                                groupedMessages4 = queryLoadIndex;
                                                size2 = size;
                                                arr++;
                                                queryLoadIndex = groupedMessages4;
                                                size = size2;
                                                i = id;
                                            }
                                            groupedMessages4 = queryLoadIndex;
                                            size2 = size;
                                            last_unread_date = chatActivity.messages.size();
                                        } else {
                                            obj6 = queryLoadIndex;
                                        }
                                        last_unread_date = 0;
                                    }
                                    if (webpagesToReload == null) {
                                        webpagesToReload = new HashMap();
                                    }
                                    queryLoadIndex = (ArrayList) webpagesToReload.get(obj5.messageOwner.media.webpage.url);
                                    if (queryLoadIndex == null) {
                                        queryLoadIndex = new ArrayList();
                                        webpagesToReload.put(obj5.messageOwner.media.webpage.url, queryLoadIndex);
                                    }
                                    queryLoadIndex.add(obj5);
                                    obj5.checkLayout();
                                    if ((obj5.messageOwner.action instanceof TL_messageActionChatMigrateTo) == 0) {
                                        if (chatActivity.currentChat != 0) {
                                        }
                                        reloadMegagroup2 = reloadMegagroup3;
                                        chatActivity.minDate[0] = obj5.messageOwner.date;
                                        if (obj5.isOut() != 0) {
                                            removeUnreadPlane(1);
                                            hasFromMe = true;
                                        }
                                        if (obj5.getId() <= 0) {
                                            arr = null;
                                            if (chatActivity.currentEncryptedChat != 0) {
                                                chatActivity.maxMessageId[0] = Math.max(obj5.getId(), chatActivity.maxMessageId[0]);
                                                chatActivity.minMessageId[0] = Math.min(obj5.getId(), chatActivity.minMessageId[0]);
                                            }
                                        } else {
                                            arr = null;
                                            chatActivity.maxMessageId[0] = Math.min(obj5.getId(), chatActivity.maxMessageId[0]);
                                            chatActivity.minMessageId[0] = Math.max(obj5.getId(), chatActivity.minMessageId[0]);
                                        }
                                        chatActivity.maxDate[arr] = Math.max(chatActivity.maxDate[arr], obj5.messageOwner.date);
                                        chatActivity.messagesDict[arr].put(obj5.getId(), obj5);
                                        queryLoadIndex = (ArrayList) chatActivity.messagesByDays.get(obj5.dateKey);
                                        if (last_unread_date > chatActivity.messages.size()) {
                                            last_unread_date = chatActivity.messages.size();
                                        }
                                        if (queryLoadIndex == null) {
                                            queryLoadIndex = new ArrayList();
                                            chatActivity.messagesByDays.put(obj5.dateKey, queryLoadIndex);
                                            dateMsg2 = new TL_message();
                                            dateMsg2.message = LocaleController.formatDateChat((long) obj5.messageOwner.date);
                                            dateMsg2.id = 0;
                                            dateMsg2.date = obj5.messageOwner.date;
                                            dateObj = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                            dateObj.type = 10;
                                            dateObj.contentType = 1;
                                            dateObj.isDateObject = true;
                                            chatActivity.messages.add(last_unread_date, dateObj);
                                            if (chatActivity.chatAdapter != null) {
                                                chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                            }
                                        }
                                        if (obj5.isOut()) {
                                            removeMessageObject(chatActivity.unreadMessageObject);
                                            if (last_unread_date > 0) {
                                                last_unread_date--;
                                            }
                                            chatActivity.unreadMessageObject = null;
                                            if (chatActivity.unreadMessageObject == null) {
                                                dateMsg2 = new TL_message();
                                                dateMsg2.message = TtmlNode.ANONYMOUS_REGION_ID;
                                                dateMsg2.id = 0;
                                                arr = new MessageObject(chatActivity.currentAccount, dateMsg2, false);
                                                arr.type = 6;
                                                arr.contentType = 2;
                                                chatActivity.messages.add(0, arr);
                                                if (chatActivity.chatAdapter != null) {
                                                    chatActivity.chatAdapter.notifyItemInserted(0);
                                                }
                                                chatActivity.unreadMessageObject = arr;
                                                chatActivity.scrollToMessage = chatActivity.unreadMessageObject;
                                                chatActivity.scrollToMessagePosition = -10000;
                                                unreadUpdated = false;
                                                chatActivity.scrollToTopUnReadOnResume = true;
                                                if (chatActivity.unreadMessageObject != null) {
                                                    unreadUpdated = true;
                                                }
                                            }
                                            if (chatActivity.unreadMessageObject != null) {
                                                unreadUpdated = true;
                                            }
                                        }
                                        queryLoadIndex.add(0, obj5);
                                        chatActivity.messages.add(last_unread_date, obj5);
                                        if (chatActivity.chatAdapter != null) {
                                            chatActivity.chatAdapter.notifyItemChanged(last_unread_date);
                                            chatActivity.chatAdapter.notifyItemInserted(last_unread_date);
                                        }
                                        if (obj5.isOut()) {
                                        }
                                        arr = true;
                                        chatActivity.newUnreadMessageCount += arr;
                                        if (obj5.type != 10) {
                                        }
                                        found = true;
                                        guid++;
                                        queryLoadIndex = i9;
                                        arr = arrayList2;
                                        i = id;
                                        objArr = args;
                                    } else {
                                        queryLoadIndex = new Bundle();
                                        queryLoadIndex.putInt("chat_id", obj5.messageOwner.action.channel_id);
                                        if (chatActivity.parentLayout.fragmentsStack.size() <= 0) {
                                        }
                                        lastFragment2 = chatActivity.parentLayout.fragmentsStack.size() <= 0 ? (BaseFragment) chatActivity.parentLayout.fragmentsStack.get(chatActivity.parentLayout.fragmentsStack.size() - 1) : null;
                                        size = obj5.messageOwner.action.channel_id;
                                        AndroidUtilities.runOnUIThread(/* anonymous class already generated */);
                                        if (newGroups2 != null) {
                                            b = 0;
                                            while (true) {
                                                arr = b;
                                                if (arr >= newGroups2.size()) {
                                                    break;
                                                }
                                                ((GroupedMessages) newGroups2.valueAt(arr)).calculate();
                                                b = arr + 1;
                                            }
                                        }
                                        return;
                                    }
                                } else {
                                    arrayList2 = arr;
                                    reloadMegagroup3 = reloadMegagroup2;
                                }
                                reloadMegagroup2 = reloadMegagroup3;
                                guid++;
                                queryLoadIndex = i9;
                                arr = arrayList2;
                                i = id;
                                objArr = args;
                            }
                            arrayList2 = arr;
                            reloadMegagroup3 = reloadMegagroup2;
                            if (webpagesToReload != null) {
                                MessagesController.getInstance(chatActivity.currentAccount).reloadWebPages(chatActivity.dialog_id, webpagesToReload);
                            }
                            if (newGroups2 != null) {
                                for (guid = 0; guid < newGroups2.size(); guid++) {
                                    currentUserId3 = (GroupedMessages) newGroups2.valueAt(guid);
                                    i = currentUserId3.posArray.size();
                                    currentUserId3.calculate();
                                    size = currentUserId3.posArray.size();
                                    a = chatActivity.messages.indexOf(currentUserId3.messages.get(currentUserId3.messages.size() - 1));
                                    if (a >= 0) {
                                        chatActivity.chatAdapter.notifyItemRangeChanged(a, size);
                                    }
                                }
                            }
                            if (chatActivity.progressView != null) {
                                chatActivity.progressView.setVisibility(4);
                            }
                            if (chatActivity.chatAdapter != null) {
                                chatActivity.scrollToTopOnResume = true;
                            } else if (unreadUpdated) {
                                chatActivity.chatAdapter.updateRowWithMessageObject(chatActivity.unreadMessageObject);
                            }
                            if (chatActivity.chatListView != null) {
                            }
                            chatActivity.scrollToTopOnResume = true;
                            updateChat = found;
                            reloadMegagroup = reloadMegagroup3;
                        } else {
                            startLoadFrom = Integer.MIN_VALUE;
                            unreadAfterId = Integer.MIN_VALUE;
                            if (chatActivity.currentEncryptedChat != null) {
                                unreadAfterId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            }
                            reloadMegagroup = false;
                            guid = 0;
                            while (guid < arr.size()) {
                                obj4 = (MessageObject) arr.get(guid);
                                obj4.setIsRead();
                                chatActivity.avatarContainer.setTime(((TL_decryptedMessageActionSetMessageTTL) obj4.messageOwner.action.encryptedAction).ttl_seconds);
                                if (obj4.messageOwner.action instanceof TL_messageActionChatMigrateTo) {
                                    updateChat = found;
                                    reloadMegagroup = true;
                                    chatActivity.needAnimateToMessage = obj4;
                                    if (obj4.isOut()) {
                                    }
                                    if (obj4.type >= 0) {
                                        if (chatActivity.messagesDict[0].indexOfKey(obj4.getId()) >= 0) {
                                            obj4.checkLayout();
                                            startLoadFrom = Math.max(startLoadFrom, obj4.messageOwner.date);
                                            if (obj4.getId() > 0) {
                                                unreadAfterId = Math.max(obj4.getId(), unreadAfterId);
                                                chatActivity.last_message_id = Math.max(chatActivity.last_message_id, obj4.getId());
                                            } else if (chatActivity.currentEncryptedChat != null) {
                                                unreadAfterId = Math.min(obj4.getId(), unreadAfterId);
                                                chatActivity.last_message_id = Math.min(chatActivity.last_message_id, obj4.getId());
                                            }
                                            if (obj4.messageOwner.mentioned) {
                                            }
                                            last_unread_date = 1;
                                            chatActivity.newUnreadMessageCount += last_unread_date;
                                            found = true;
                                            guid++;
                                        }
                                    }
                                    found = updateChat;
                                    guid++;
                                } else {
                                    bundle = new Bundle();
                                    bundle.putInt("chat_id", obj4.messageOwner.action.channel_id);
                                    if (chatActivity.parentLayout.fragmentsStack.size() <= 0) {
                                    }
                                    i3 = obj4.messageOwner.action.channel_id;
                                    AndroidUtilities.runOnUIThread(/* anonymous class already generated */);
                                    return;
                                }
                            }
                            updateChat = found;
                            chatActivity.pagedownButtonCounter.setVisibility(0);
                            chatActivity.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newUnreadMessageCount)}));
                            chatActivity.mentiondownButtonCounter.setVisibility(0);
                            chatActivity.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newMentionsCount)}));
                            showMentiondownButton(true, true);
                            updateVisibleRows();
                            i9 = queryLoadIndex;
                            arrayList2 = arr;
                        }
                        chatActivity.botUser = null;
                        updateBottomOverlay();
                        if (updateChat) {
                            updateTitle();
                            checkAndUpdateAvatar();
                        }
                        if (reloadMegagroup) {
                            MessagesController.getInstance(chatActivity.currentAccount).loadFullChat(chatActivity.currentChat.id, 0, true);
                        }
                    }
                } else {
                    i = id;
                    if (i == NotificationCenter.closeChats) {
                        objArr = args;
                        if (objArr == null || objArr.length <= 0) {
                            removeSelfFromStack();
                        } else if (((Long) objArr[0]).longValue() == chatActivity.dialog_id) {
                            finishFragment();
                        }
                    } else {
                        objArr = args;
                        boolean updated;
                        long messageId;
                        if (i == NotificationCenter.messagesRead) {
                            SparseLongArray inbox = objArr[0];
                            SparseLongArray outbox = objArr[1];
                            updated = false;
                            if (inbox != null) {
                                a2 = 0;
                                index = inbox.size();
                                while (a2 < index) {
                                    unreadAfterId = inbox.keyAt(a2);
                                    messageId = inbox.get(unreadAfterId);
                                    if (((long) unreadAfterId) != chatActivity.dialog_id) {
                                        a2++;
                                    } else {
                                        b2 = 0;
                                        last_unread_date = chatActivity.messages.size();
                                        while (b2 < last_unread_date) {
                                            SparseLongArray inbox2;
                                            obj5 = (MessageObject) chatActivity.messages.get(b2);
                                            if (obj5.isOut() || obj5.getId() <= 0) {
                                                inbox2 = inbox;
                                            } else {
                                                inbox2 = inbox;
                                                if (obj5.getId() > ((int) messageId)) {
                                                    continue;
                                                } else if (!obj5.isUnread()) {
                                                    break;
                                                } else {
                                                    obj5.setIsRead();
                                                    updated = true;
                                                    chatActivity.newUnreadMessageCount--;
                                                }
                                            }
                                            b2++;
                                            inbox = inbox2;
                                        }
                                        removeUnreadPlane(false);
                                        if (updated) {
                                            if (chatActivity.newUnreadMessageCount < 0) {
                                                chatActivity.newUnreadMessageCount = 0;
                                            }
                                            if (chatActivity.pagedownButtonCounter != null) {
                                                chatActivity.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newUnreadMessageCount)}));
                                                if (chatActivity.newUnreadMessageCount > 0) {
                                                    if (chatActivity.pagedownButtonCounter.getVisibility() != 4) {
                                                        chatActivity.pagedownButtonCounter.setVisibility(4);
                                                    }
                                                } else if (chatActivity.pagedownButtonCounter.getVisibility() != 0) {
                                                    chatActivity.pagedownButtonCounter.setVisibility(0);
                                                }
                                            }
                                        }
                                        if (outbox != null) {
                                            guid = 0;
                                            a2 = outbox.size();
                                            while (guid < a2) {
                                                index = outbox.keyAt(guid);
                                                unreadAfterId = (int) outbox.get(index);
                                                if (((long) index) == chatActivity.dialog_id) {
                                                    guid++;
                                                } else {
                                                    currentUserId = chatActivity.messages.size();
                                                    for (a = 0; a < currentUserId; a++) {
                                                        obj4 = (MessageObject) chatActivity.messages.get(a);
                                                        if (obj4.isOut() && obj4.getId() > 0 && obj4.getId() <= unreadAfterId) {
                                                            if (!obj4.isUnread()) {
                                                                break;
                                                            }
                                                            obj4.setIsRead();
                                                            updated = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (updated) {
                                            updateVisibleRows();
                                        }
                                    }
                                }
                            }
                            if (updated) {
                                if (chatActivity.newUnreadMessageCount < 0) {
                                    chatActivity.newUnreadMessageCount = 0;
                                }
                                if (chatActivity.pagedownButtonCounter != null) {
                                    chatActivity.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newUnreadMessageCount)}));
                                    if (chatActivity.newUnreadMessageCount > 0) {
                                        if (chatActivity.pagedownButtonCounter.getVisibility() != 0) {
                                            chatActivity.pagedownButtonCounter.setVisibility(0);
                                        }
                                    } else if (chatActivity.pagedownButtonCounter.getVisibility() != 4) {
                                        chatActivity.pagedownButtonCounter.setVisibility(4);
                                    }
                                }
                            }
                            if (outbox != null) {
                                guid = 0;
                                a2 = outbox.size();
                                while (guid < a2) {
                                    index = outbox.keyAt(guid);
                                    unreadAfterId = (int) outbox.get(index);
                                    if (((long) index) == chatActivity.dialog_id) {
                                        currentUserId = chatActivity.messages.size();
                                        for (a = 0; a < currentUserId; a++) {
                                            obj4 = (MessageObject) chatActivity.messages.get(a);
                                            if (!obj4.isUnread()) {
                                                break;
                                            }
                                            obj4.setIsRead();
                                            updated = true;
                                        }
                                    } else {
                                        guid++;
                                    }
                                }
                            }
                            if (updated) {
                                updateVisibleRows();
                            }
                        } else if (i == NotificationCenter.historyCleared) {
                            if (((Long) objArr[0]).longValue() == chatActivity.dialog_id) {
                                queryLoadIndex = ((Integer) objArr[1]).intValue();
                                hasFromMe = false;
                                a2 = 0;
                                while (a2 < chatActivity.messages.size()) {
                                    obj22 = (MessageObject) chatActivity.messages.get(a2);
                                    a = obj22.getId();
                                    if (a > 0) {
                                        if (a <= queryLoadIndex) {
                                            if (chatActivity.info != null && chatActivity.info.pinned_msg_id == a) {
                                                chatActivity.pinnedMessageObject = null;
                                                chatActivity.info.pinned_msg_id = 0;
                                                MessagesStorage.getInstance(chatActivity.currentAccount).updateChannelPinnedMessage(chatActivity.info.id, 0);
                                                updatePinnedMessageView(true);
                                            }
                                            chatActivity.messages.remove(a2);
                                            a2--;
                                            chatActivity.messagesDict[0].remove(a);
                                            ArrayList<MessageObject> dayArr = (ArrayList) chatActivity.messagesByDays.get(obj22.dateKey);
                                            if (dayArr != null) {
                                                dayArr.remove(obj22);
                                                if (dayArr.isEmpty()) {
                                                    chatActivity.messagesByDays.remove(obj22.dateKey);
                                                    if (a2 >= 0 && a2 < chatActivity.messages.size()) {
                                                        chatActivity.messages.remove(a2);
                                                        a2--;
                                                    }
                                                }
                                            }
                                            hasFromMe = true;
                                        }
                                    }
                                    a2++;
                                }
                                if (chatActivity.messages.isEmpty()) {
                                    if (chatActivity.endReached[0] || chatActivity.loading) {
                                        if (chatActivity.botButtons != null) {
                                            chatActivity.botButtons = null;
                                            if (chatActivity.chatActivityEnterView != null) {
                                                chatActivity.chatActivityEnterView.setButtons(null, false);
                                            }
                                        }
                                        if (chatActivity.currentEncryptedChat == null && chatActivity.currentUser != null && chatActivity.currentUser.bot && chatActivity.botUser == null) {
                                            chatActivity.botUser = TtmlNode.ANONYMOUS_REGION_ID;
                                            updateBottomOverlay();
                                        }
                                    } else {
                                        int[] iArr;
                                        if (chatActivity.progressView != null) {
                                            chatActivity.progressView.setVisibility(4);
                                        }
                                        if (chatActivity.chatListView != null) {
                                            chatActivity.chatListView.setEmptyView(null);
                                        }
                                        if (chatActivity.currentEncryptedChat == null) {
                                            iArr = chatActivity.maxMessageId;
                                            a = 1;
                                            chatActivity.maxMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            unreadAfterId = 0;
                                            iArr[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            iArr = chatActivity.minMessageId;
                                            b2 = Integer.MIN_VALUE;
                                            chatActivity.minMessageId[1] = Integer.MIN_VALUE;
                                            iArr[0] = Integer.MIN_VALUE;
                                        } else {
                                            unreadAfterId = 0;
                                            a = 1;
                                            b2 = Integer.MIN_VALUE;
                                            iArr = chatActivity.maxMessageId;
                                            chatActivity.maxMessageId[1] = Integer.MIN_VALUE;
                                            iArr[0] = Integer.MIN_VALUE;
                                            iArr = chatActivity.minMessageId;
                                            chatActivity.minMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            iArr[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        }
                                        iArr = chatActivity.maxDate;
                                        chatActivity.maxDate[a] = b2;
                                        iArr[unreadAfterId] = b2;
                                        iArr = chatActivity.minDate;
                                        chatActivity.minDate[a] = unreadAfterId;
                                        iArr[unreadAfterId] = unreadAfterId;
                                        chatActivity.waitingForLoad.add(Integer.valueOf(chatActivity.lastLoadIndex));
                                        r10 = MessagesController.getInstance(chatActivity.currentAccount);
                                        r11 = chatActivity.dialog_id;
                                        found = chatActivity.cacheEndReached[0] ^ 1;
                                        int i10 = chatActivity.minDate[0];
                                        unreadAfterId = chatActivity.classGuid;
                                        r21 = ChatObject.isChannel(chatActivity.currentChat);
                                        i3 = chatActivity.lastLoadIndex;
                                        chatActivity.lastLoadIndex = i3 + 1;
                                        r10.loadMessages(r11, bot_help, 0, 0, found, i10, unreadAfterId, 0, 0, r21, i3);
                                        chatActivity.loading = true;
                                    }
                                }
                                if (hasFromMe && chatActivity.chatAdapter != null) {
                                    removeUnreadPlane(true);
                                    chatActivity.chatAdapter.notifyDataSetChanged();
                                }
                            } else {
                                return;
                            }
                        } else if (i == NotificationCenter.messagesDeleted) {
                            int channelId;
                            ArrayList<Integer> markAsDeletedMessages = objArr[0];
                            startLoadFrom = ((Integer) objArr[1]).intValue();
                            queryLoadIndex = 0;
                            if (ChatObject.isChannel(chatActivity.currentChat)) {
                                if (startLoadFrom == 0 && chatActivity.mergeDialogId != 0) {
                                    queryLoadIndex = 1;
                                } else if (startLoadFrom == chatActivity.currentChat.id) {
                                    queryLoadIndex = 0;
                                } else {
                                    return;
                                }
                            } else if (startLoadFrom != 0) {
                                return;
                            }
                            LongSparseArray<GroupedMessages> newGroups3 = null;
                            unreadAfterId = markAsDeletedMessages.size();
                            z = false;
                            reloadMegagroup = false;
                            reloadMegagroup2 = false;
                            a2 = 0;
                            while (a2 < unreadAfterId) {
                                ArrayList<Integer> markAsDeletedMessages2;
                                Integer ids = (Integer) markAsDeletedMessages.get(a2);
                                obj5 = (MessageObject) chatActivity.messagesDict[queryLoadIndex].get(ids.intValue());
                                if (queryLoadIndex != 0 || chatActivity.info == null) {
                                    markAsDeletedMessages2 = markAsDeletedMessages;
                                } else {
                                    markAsDeletedMessages2 = markAsDeletedMessages;
                                    if (chatActivity.info.pinned_msg_id == ids.intValue()) {
                                        chatActivity.pinnedMessageObject = null;
                                        chatActivity.info.pinned_msg_id = 0;
                                        MessagesStorage.getInstance(chatActivity.currentAccount).updateChannelPinnedMessage(startLoadFrom, 0);
                                        updatePinnedMessageView(true);
                                    }
                                }
                                if (obj5 != null) {
                                    markAsDeletedMessages = chatActivity.messages.indexOf(obj5);
                                    if (markAsDeletedMessages != -1) {
                                        boolean updatedSelected;
                                        boolean updatedSelectedLast;
                                        channelId = startLoadFrom;
                                        if (chatActivity.selectedMessagesIds[queryLoadIndex].indexOfKey(ids.intValue()) >= 0) {
                                            z = true;
                                            end = a2 == unreadAfterId + -1;
                                            reloadMegagroup = end;
                                            addToSelectedMessages(obj5, false, end);
                                        }
                                        obj = (MessageObject) chatActivity.messages.remove(markAsDeletedMessages);
                                        if (obj.getGroupId() != 0) {
                                            updatedSelected = z;
                                            updatedSelectedLast = reloadMegagroup;
                                            updatedSelected = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj.getGroupId());
                                            if (updatedSelected != null) {
                                                if (newGroups3 == null) {
                                                    newGroups3 = new LongSparseArray();
                                                }
                                                newGroups3.put(updatedSelected.groupId, updatedSelected);
                                                updatedSelected.messages.remove(obj5);
                                            }
                                        } else {
                                            updatedSelected = z;
                                            updatedSelectedLast = reloadMegagroup;
                                        }
                                        chatActivity.messagesDict[queryLoadIndex].remove(ids.intValue());
                                        ArrayList<MessageObject> dayArr2 = (ArrayList) chatActivity.messagesByDays.get(obj5.dateKey);
                                        if (dayArr2 != null) {
                                            dayArr2.remove(obj5);
                                            if (dayArr2.isEmpty()) {
                                                chatActivity.messagesByDays.remove(obj5.dateKey);
                                                if (markAsDeletedMessages >= null && markAsDeletedMessages < chatActivity.messages.size()) {
                                                    chatActivity.messages.remove(markAsDeletedMessages);
                                                }
                                            }
                                        }
                                        reloadMegagroup2 = true;
                                        z = updatedSelected;
                                        reloadMegagroup = updatedSelectedLast;
                                        a2++;
                                        markAsDeletedMessages = markAsDeletedMessages2;
                                        startLoadFrom = channelId;
                                        i = id;
                                        objArr = args;
                                    }
                                }
                                channelId = startLoadFrom;
                                a2++;
                                markAsDeletedMessages = markAsDeletedMessages2;
                                startLoadFrom = channelId;
                                i = id;
                                objArr = args;
                            }
                            channelId = startLoadFrom;
                            if (z && !updatedSelectedLast) {
                                addToSelectedMessages(null, false, true);
                            }
                            if (newGroups3 != null) {
                                for (guid = 0; guid < newGroups3.size(); guid++) {
                                    groupedMessages = (GroupedMessages) newGroups3.valueAt(guid);
                                    if (groupedMessages.messages.isEmpty()) {
                                        chatActivity.groupedMessagesMap.remove(groupedMessages.groupId);
                                    } else {
                                        groupedMessages.calculate();
                                        i = chatActivity.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                                        if (i >= 0 && chatActivity.chatAdapter != null) {
                                            chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.messagesStartRow + i, groupedMessages.messages.size());
                                        }
                                    }
                                }
                            }
                            if (chatActivity.messages.isEmpty()) {
                                if (chatActivity.endReached[0] || chatActivity.loading) {
                                    if (chatActivity.botButtons != null) {
                                        chatActivity.botButtons = null;
                                        if (chatActivity.chatActivityEnterView != null) {
                                            chatActivity.chatActivityEnterView.setButtons(null, false);
                                        }
                                    }
                                    if (chatActivity.currentEncryptedChat == null && chatActivity.currentUser != null && chatActivity.currentUser.bot && chatActivity.botUser == null) {
                                        chatActivity.botUser = TtmlNode.ANONYMOUS_REGION_ID;
                                        updateBottomOverlay();
                                    }
                                } else {
                                    int[] iArr2;
                                    if (chatActivity.progressView != null) {
                                        chatActivity.progressView.setVisibility(4);
                                    }
                                    if (chatActivity.chatListView != null) {
                                        chatActivity.chatListView.setEmptyView(null);
                                    }
                                    if (chatActivity.currentEncryptedChat == null) {
                                        iArr2 = chatActivity.maxMessageId;
                                        a2 = 1;
                                        chatActivity.maxMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        startLoadFrom = 0;
                                        iArr2[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        iArr2 = chatActivity.minMessageId;
                                        size = Integer.MIN_VALUE;
                                        chatActivity.minMessageId[1] = Integer.MIN_VALUE;
                                        iArr2[0] = Integer.MIN_VALUE;
                                    } else {
                                        startLoadFrom = 0;
                                        a2 = 1;
                                        size = Integer.MIN_VALUE;
                                        iArr2 = chatActivity.maxMessageId;
                                        chatActivity.maxMessageId[1] = Integer.MIN_VALUE;
                                        iArr2[0] = Integer.MIN_VALUE;
                                        iArr2 = chatActivity.minMessageId;
                                        chatActivity.minMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        iArr2[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    }
                                    iArr2 = chatActivity.maxDate;
                                    chatActivity.maxDate[a2] = size;
                                    iArr2[startLoadFrom] = size;
                                    iArr2 = chatActivity.minDate;
                                    chatActivity.minDate[a2] = startLoadFrom;
                                    iArr2[startLoadFrom] = startLoadFrom;
                                    chatActivity.waitingForLoad.add(Integer.valueOf(chatActivity.lastLoadIndex));
                                    MessagesController instance = MessagesController.getInstance(chatActivity.currentAccount);
                                    did3 = chatActivity.dialog_id;
                                    boolean z3 = chatActivity.cacheEndReached[0] ^ 1;
                                    loaded_max_id = chatActivity.minDate[0];
                                    a2 = chatActivity.classGuid;
                                    z2 = ChatObject.isChannel(chatActivity.currentChat);
                                    i = chatActivity.lastLoadIndex;
                                    chatActivity.lastLoadIndex = i + 1;
                                    instance.loadMessages(did3, bot_help, 0, 0, z3, loaded_max_id, a2, 0, 0, z2, i);
                                    chatActivity.loading = true;
                                }
                            }
                            if (chatActivity.chatAdapter != null) {
                                if (reloadMegagroup2) {
                                    View child;
                                    removeUnreadPlane(false);
                                    guid = chatActivity.chatListView.getChildCount();
                                    startLoadFrom = -1;
                                    a2 = 0;
                                    b = 0;
                                    while (true) {
                                        i = b;
                                        if (i >= guid) {
                                            break;
                                        }
                                        child = chatActivity.chatListView.getChildAt(i);
                                        obj3 = null;
                                        if (child instanceof ChatMessageCell) {
                                            obj3 = ((ChatMessageCell) child).getMessageObject();
                                        } else if (child instanceof ChatActionCell) {
                                            obj3 = ((ChatActionCell) child).getMessageObject();
                                        }
                                        if (obj3 != null) {
                                            i2 = chatActivity.messages.indexOf(obj3);
                                            if (i2 >= 0) {
                                                break;
                                            }
                                        }
                                        b = i + 1;
                                    }
                                    startLoadFrom = chatActivity.chatAdapter.messagesStartRow + i2;
                                    a2 = child.getBottom();
                                    chatActivity.chatAdapter.notifyDataSetChanged();
                                    if (startLoadFrom != -1) {
                                        chatActivity.chatLayoutManager.scrollToPositionWithOffset(startLoadFrom, (chatActivity.chatListView.getMeasuredHeight() - a2) - chatActivity.chatListView.getPaddingBottom());
                                    }
                                } else {
                                    chatActivity.first_unread_id = 0;
                                    chatActivity.last_message_id = 0;
                                    chatActivity.createUnreadMessageAfterId = 0;
                                    removeMessageObject(chatActivity.unreadMessageObject);
                                    chatActivity.unreadMessageObject = null;
                                    if (chatActivity.pagedownButtonCounter != null) {
                                        chatActivity.pagedownButtonCounter.setVisibility(4);
                                    }
                                }
                            }
                        } else {
                            i = id;
                            MessageObject obj7;
                            ArrayList<MessageObject> dayArr3;
                            if (i == NotificationCenter.messageReceivedByServer) {
                                Integer[] numArr = args;
                                Integer msgId = numArr[0];
                                obj7 = (MessageObject) chatActivity.messagesDict[0].get(msgId.intValue());
                                if (obj7 != null) {
                                    Integer newMsgId = numArr[1];
                                    if (newMsgId.equals(msgId) || chatActivity.messagesDict[0].indexOfKey(newMsgId.intValue()) < 0) {
                                        dateMsg = numArr[2];
                                        hasFromMe = false;
                                        unreadUpdated = false;
                                        if (dateMsg != null) {
                                            try {
                                                z = obj7.isForwarded() && ((obj7.messageOwner.reply_markup == null && dateMsg.reply_markup != null) || !obj7.messageOwner.message.equals(dateMsg.message));
                                                unreadUpdated = z;
                                                if (!unreadUpdated && (obj7.messageOwner.params == null || !obj7.messageOwner.params.containsKey("query_id"))) {
                                                    if (dateMsg.media == null || obj7.messageOwner.media == null || dateMsg.media.getClass().equals(obj7.messageOwner.media.getClass())) {
                                                        z = false;
                                                        hasFromMe = z;
                                                        if (!(obj7.getGroupId() == 0 || dateMsg.grouped_id == 0)) {
                                                            updatedSelected = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj7.getGroupId());
                                                            if (updatedSelected != null) {
                                                                chatActivity.groupedMessagesMap.put(dateMsg.grouped_id, updatedSelected);
                                                            }
                                                        }
                                                        obj7.messageOwner = dateMsg;
                                                        obj7.generateThumbs(true);
                                                        obj7.setType();
                                                        if (dateMsg.media instanceof TL_messageMediaGame) {
                                                            obj7.applyNewText();
                                                        }
                                                    }
                                                }
                                                z = true;
                                                hasFromMe = z;
                                            } catch (Throwable e) {
                                                z = false;
                                                FileLog.m3e(e);
                                                unreadUpdated = z;
                                            }
                                            updatedSelected = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj7.getGroupId());
                                            if (updatedSelected != null) {
                                                chatActivity.groupedMessagesMap.put(dateMsg.grouped_id, updatedSelected);
                                            }
                                            obj7.messageOwner = dateMsg;
                                            obj7.generateThumbs(true);
                                            obj7.setType();
                                            if (dateMsg.media instanceof TL_messageMediaGame) {
                                                obj7.applyNewText();
                                            }
                                        }
                                        if (unreadUpdated) {
                                            obj7.measureInlineBotButtons();
                                        }
                                        chatActivity.messagesDict[0].remove(msgId.intValue());
                                        chatActivity.messagesDict[0].put(newMsgId.intValue(), obj7);
                                        obj7.messageOwner.id = newMsgId.intValue();
                                        obj7.messageOwner.send_state = 0;
                                        obj7.forceUpdate = hasFromMe;
                                        arr = new ArrayList();
                                        arr.add(obj7);
                                        if (chatActivity.currentEncryptedChat == null) {
                                            DataQuery.getInstance(chatActivity.currentAccount).loadReplyMessagesForMessages(arr, chatActivity.dialog_id);
                                        }
                                        if (chatActivity.chatAdapter != null) {
                                            chatActivity.chatAdapter.updateRowWithMessageObject(obj7);
                                        }
                                        if (chatActivity.chatLayoutManager != null && hasFromMe && chatActivity.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                                            moveScrollToLastMessage();
                                        }
                                        NotificationsController.getInstance(chatActivity.currentAccount).playOutChatSound();
                                    } else {
                                        previous = (MessageObject) chatActivity.messagesDict[0].get(msgId.intValue());
                                        chatActivity.messagesDict[0].remove(msgId.intValue());
                                        if (previous != null) {
                                            index = chatActivity.messages.indexOf(previous);
                                            chatActivity.messages.remove(index);
                                            dayArr3 = (ArrayList) chatActivity.messagesByDays.get(previous.dateKey);
                                            dayArr3.remove(obj7);
                                            if (dayArr3.isEmpty()) {
                                                chatActivity.messagesByDays.remove(obj7.dateKey);
                                                if (index >= 0 && index < chatActivity.messages.size()) {
                                                    chatActivity.messages.remove(index);
                                                }
                                            }
                                            if (chatActivity.chatAdapter != null) {
                                                chatActivity.chatAdapter.notifyDataSetChanged();
                                            }
                                        }
                                        return;
                                    }
                                }
                            }
                            Message[] messageArr = args;
                            if (i == NotificationCenter.messageReceivedByAck) {
                                MessageObject obj8 = (MessageObject) chatActivity.messagesDict[0].get(((Integer) messageArr[0]).intValue());
                                if (obj8 != null) {
                                    obj8.messageOwner.send_state = 0;
                                    if (chatActivity.chatAdapter != null) {
                                        chatActivity.chatAdapter.updateRowWithMessageObject(obj8);
                                    }
                                }
                            } else if (i == NotificationCenter.messageSendError) {
                                obj7 = (MessageObject) chatActivity.messagesDict[0].get(((Integer) messageArr[0]).intValue());
                                if (obj7 != null) {
                                    obj7.messageOwner.send_state = 2;
                                    updateVisibleRows();
                                }
                            } else if (i == NotificationCenter.chatInfoDidLoaded) {
                                ChatFull chatFull = (ChatFull) messageArr[0];
                                if (chatActivity.currentChat != null && chatFull.id == chatActivity.currentChat.id) {
                                    if (chatFull instanceof TL_channelFull) {
                                        if (chatActivity.currentChat.megagroup) {
                                            startLoadFrom = 0;
                                            if (chatFull.participants != null) {
                                                queryLoadIndex = 0;
                                                for (startLoadFrom = 0; startLoadFrom < chatFull.participants.participants.size(); startLoadFrom++) {
                                                    queryLoadIndex = Math.max(((ChatParticipant) chatFull.participants.participants.get(startLoadFrom)).date, queryLoadIndex);
                                                }
                                                startLoadFrom = queryLoadIndex;
                                            }
                                            if (startLoadFrom == 0 || Math.abs((System.currentTimeMillis() / 1000) - ((long) startLoadFrom)) > 3600) {
                                                MessagesController.getInstance(chatActivity.currentAccount).loadChannelParticipants(Integer.valueOf(chatActivity.currentChat.id));
                                            }
                                        }
                                        if (chatFull.participants == null && chatActivity.info != null) {
                                            chatFull.participants = chatActivity.info.participants;
                                        }
                                    }
                                    chatActivity.info = chatFull;
                                    if (chatActivity.chatActivityEnterView != null) {
                                        chatActivity.chatActivityEnterView.setChatInfo(chatActivity.info);
                                    }
                                    if (chatActivity.mentionsAdapter != null) {
                                        chatActivity.mentionsAdapter.setChatInfo(chatActivity.info);
                                    }
                                    if (messageArr[3] instanceof MessageObject) {
                                        chatActivity.pinnedMessageObject = (MessageObject) messageArr[3];
                                        updatePinnedMessageView(false);
                                    } else {
                                        updatePinnedMessageView(true);
                                    }
                                    if (chatActivity.avatarContainer != null) {
                                        chatActivity.avatarContainer.updateOnlineCount();
                                        chatActivity.avatarContainer.updateSubtitle();
                                    }
                                    if (chatActivity.isBroadcast) {
                                        SendMessagesHelper.getInstance(chatActivity.currentAccount).setCurrentChatInfo(chatActivity.info);
                                    }
                                    if (chatActivity.info instanceof TL_chatFull) {
                                        chatActivity.hasBotsCommands = false;
                                        chatActivity.botInfo.clear();
                                        chatActivity.botsCount = 0;
                                        URLSpanBotCommand.enabled = false;
                                        b = 0;
                                        while (true) {
                                            startLoadFrom = b;
                                            if (startLoadFrom >= chatActivity.info.participants.participants.size()) {
                                                break;
                                            }
                                            User user2 = MessagesController.getInstance(chatActivity.currentAccount).getUser(Integer.valueOf(((ChatParticipant) chatActivity.info.participants.participants.get(startLoadFrom)).user_id));
                                            if (user2 != null && user2.bot) {
                                                URLSpanBotCommand.enabled = true;
                                                chatActivity.botsCount++;
                                                DataQuery.getInstance(chatActivity.currentAccount).loadBotInfo(user2.id, true, chatActivity.classGuid);
                                            }
                                            b = startLoadFrom + 1;
                                        }
                                        if (chatActivity.chatListView != null) {
                                            chatActivity.chatListView.invalidateViews();
                                        }
                                    } else if (chatActivity.info instanceof TL_channelFull) {
                                        chatActivity.hasBotsCommands = false;
                                        chatActivity.botInfo.clear();
                                        chatActivity.botsCount = 0;
                                        end = (chatActivity.info.bot_info.isEmpty() || chatActivity.currentChat == null || !chatActivity.currentChat.megagroup) ? false : true;
                                        URLSpanBotCommand.enabled = end;
                                        chatActivity.botsCount = chatActivity.info.bot_info.size();
                                        b = 0;
                                        while (true) {
                                            startLoadFrom = b;
                                            if (startLoadFrom >= chatActivity.info.bot_info.size()) {
                                                break;
                                            }
                                            BotInfo bot = (BotInfo) chatActivity.info.bot_info.get(startLoadFrom);
                                            if (!bot.commands.isEmpty() && (!ChatObject.isChannel(chatActivity.currentChat) || (chatActivity.currentChat != null && chatActivity.currentChat.megagroup))) {
                                                chatActivity.hasBotsCommands = true;
                                            }
                                            chatActivity.botInfo.put(bot.user_id, bot);
                                            b = startLoadFrom + 1;
                                        }
                                        if (chatActivity.chatListView != null) {
                                            chatActivity.chatListView.invalidateViews();
                                        }
                                        if (chatActivity.mentionsAdapter != null && (!ChatObject.isChannel(chatActivity.currentChat) || (chatActivity.currentChat != null && chatActivity.currentChat.megagroup))) {
                                            chatActivity.mentionsAdapter.setBotInfo(chatActivity.botInfo);
                                        }
                                    }
                                    if (chatActivity.chatActivityEnterView != null) {
                                        chatActivity.chatActivityEnterView.setBotsCount(chatActivity.botsCount, chatActivity.hasBotsCommands);
                                    }
                                    if (chatActivity.mentionsAdapter != null) {
                                        chatActivity.mentionsAdapter.setBotsCount(chatActivity.botsCount);
                                    }
                                    if (ChatObject.isChannel(chatActivity.currentChat) && chatActivity.mergeDialogId == 0 && chatActivity.info.migrated_from_chat_id != 0) {
                                        chatActivity.mergeDialogId = (long) (-chatActivity.info.migrated_from_chat_id);
                                        chatActivity.maxMessageId[1] = chatActivity.info.migrated_from_max_id;
                                        if (chatActivity.chatAdapter != null) {
                                            chatActivity.chatAdapter.notifyDataSetChanged();
                                        }
                                    }
                                }
                            } else if (i == NotificationCenter.chatInfoCantLoad) {
                                guid = ((Integer) messageArr[0]).intValue();
                                if (chatActivity.currentChat != null && chatActivity.currentChat.id == guid) {
                                    startLoadFrom = ((Integer) messageArr[1]).intValue();
                                    if (getParentActivity() != null) {
                                        if (chatActivity.closeChatDialog == null) {
                                            Builder builder2 = new Builder(getParentActivity());
                                            builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                            if (startLoadFrom == 0) {
                                                builder2.setMessage(LocaleController.getString("ChannelCantOpenPrivate", R.string.ChannelCantOpenPrivate));
                                            } else if (startLoadFrom == 1) {
                                                builder2.setMessage(LocaleController.getString("ChannelCantOpenNa", R.string.ChannelCantOpenNa));
                                            } else if (startLoadFrom == 2) {
                                                builder2.setMessage(LocaleController.getString("ChannelCantOpenBanned", R.string.ChannelCantOpenBanned));
                                            }
                                            builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                            Dialog create = builder2.create();
                                            chatActivity.closeChatDialog = create;
                                            showDialog(create);
                                            chatActivity.loading = false;
                                            if (chatActivity.progressView != null) {
                                                chatActivity.progressView.setVisibility(4);
                                            }
                                            if (chatActivity.chatAdapter != null) {
                                                chatActivity.chatAdapter.notifyDataSetChanged();
                                            }
                                        }
                                    }
                                    return;
                                }
                            } else if (i == NotificationCenter.contactsDidLoaded) {
                                updateContactStatus();
                                if (chatActivity.currentEncryptedChat != null) {
                                    updateSpamView();
                                }
                                if (chatActivity.avatarContainer != null) {
                                    chatActivity.avatarContainer.updateSubtitle();
                                }
                            } else if (i == NotificationCenter.encryptedChatUpdated) {
                                EncryptedChat chat3 = (EncryptedChat) messageArr[0];
                                if (chatActivity.currentEncryptedChat != null && chat3.id == chatActivity.currentEncryptedChat.id) {
                                    chatActivity.currentEncryptedChat = chat3;
                                    updateContactStatus();
                                    updateSecretStatus();
                                    initStickers();
                                    if (chatActivity.chatActivityEnterView != null) {
                                        ChatActivityEnterView chatActivityEnterView = chatActivity.chatActivityEnterView;
                                        if (chatActivity.currentEncryptedChat != null) {
                                            if (AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) < edit) {
                                                updated = false;
                                                if (chatActivity.currentEncryptedChat != null) {
                                                    if (AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) >= 46) {
                                                        found = false;
                                                        chatActivityEnterView.setAllowStickersAndGifs(updated, found);
                                                        chatActivity.chatActivityEnterView.checkRoundVideo();
                                                    }
                                                }
                                                found = true;
                                                chatActivityEnterView.setAllowStickersAndGifs(updated, found);
                                                chatActivity.chatActivityEnterView.checkRoundVideo();
                                            }
                                        }
                                        updated = true;
                                        if (chatActivity.currentEncryptedChat != null) {
                                            if (AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) >= 46) {
                                                found = false;
                                                chatActivityEnterView.setAllowStickersAndGifs(updated, found);
                                                chatActivity.chatActivityEnterView.checkRoundVideo();
                                            }
                                        }
                                        found = true;
                                        chatActivityEnterView.setAllowStickersAndGifs(updated, found);
                                        chatActivity.chatActivityEnterView.checkRoundVideo();
                                    }
                                    if (chatActivity.mentionsAdapter != null) {
                                        MentionsAdapter mentionsAdapter = chatActivity.mentionsAdapter;
                                        updated = !chatActivity.chatActivityEnterView.isEditingMessage() && (chatActivity.currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(chatActivity.currentEncryptedChat.layer) >= 46);
                                        mentionsAdapter.setNeedBotContext(updated);
                                    }
                                }
                            } else if (i == NotificationCenter.messagesReadEncrypted) {
                                guid = ((Integer) messageArr[0]).intValue();
                                if (chatActivity.currentEncryptedChat != null && chatActivity.currentEncryptedChat.id == guid) {
                                    startLoadFrom = ((Integer) messageArr[1]).intValue();
                                    Iterator it = chatActivity.messages.iterator();
                                    while (it.hasNext()) {
                                        previous = (MessageObject) it.next();
                                        if (previous.isOut()) {
                                            if (previous.isOut() && !previous.isUnread()) {
                                                break;
                                            } else if (previous.messageOwner.date - 1 <= startLoadFrom) {
                                                previous.setIsRead();
                                            }
                                        }
                                    }
                                    updateVisibleRows();
                                }
                            } else if (i == NotificationCenter.removeAllMessagesFromDialog) {
                                if (chatActivity.dialog_id == ((Long) messageArr[0]).longValue()) {
                                    chatActivity.messages.clear();
                                    chatActivity.waitingForLoad.clear();
                                    chatActivity.messagesByDays.clear();
                                    chatActivity.groupedMessagesMap.clear();
                                    for (queryLoadIndex = 1; queryLoadIndex >= 0; queryLoadIndex--) {
                                        chatActivity.messagesDict[queryLoadIndex].clear();
                                        if (chatActivity.currentEncryptedChat == null) {
                                            chatActivity.maxMessageId[queryLoadIndex] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                            unreadAfterId = Integer.MIN_VALUE;
                                            chatActivity.minMessageId[queryLoadIndex] = Integer.MIN_VALUE;
                                        } else {
                                            unreadAfterId = Integer.MIN_VALUE;
                                            chatActivity.maxMessageId[queryLoadIndex] = Integer.MIN_VALUE;
                                            chatActivity.minMessageId[queryLoadIndex] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                        }
                                        chatActivity.maxDate[queryLoadIndex] = unreadAfterId;
                                        chatActivity.minDate[queryLoadIndex] = 0;
                                        chatActivity.selectedMessagesIds[queryLoadIndex].clear();
                                        chatActivity.selectedMessagesCanCopyIds[queryLoadIndex].clear();
                                        chatActivity.selectedMessagesCanStarIds[queryLoadIndex].clear();
                                    }
                                    chatActivity.cantDeleteMessagesCount = 0;
                                    chatActivity.canEditMessagesCount = 0;
                                    chatActivity.actionBar.hideActionMode();
                                    updatePinnedMessageView(true);
                                    if (chatActivity.botButtons != null) {
                                        chatActivity.botButtons = null;
                                        if (chatActivity.chatActivityEnterView != null) {
                                            chatActivity.chatActivityEnterView.setButtons(null, false);
                                        }
                                    }
                                    if (((Boolean) messageArr[1]).booleanValue()) {
                                        if (chatActivity.chatAdapter != null) {
                                            chatActivity.progressView.setVisibility(chatActivity.chatAdapter.botInfoRow == -1 ? 0 : 4);
                                            chatActivity.chatListView.setEmptyView(null);
                                        }
                                        for (queryLoadIndex = 0; queryLoadIndex < 2; queryLoadIndex++) {
                                            chatActivity.endReached[queryLoadIndex] = false;
                                            chatActivity.cacheEndReached[queryLoadIndex] = false;
                                            chatActivity.forwardEndReached[queryLoadIndex] = true;
                                        }
                                        chatActivity.first = true;
                                        chatActivity.firstLoading = true;
                                        chatActivity.loading = true;
                                        chatActivity.startLoadFromMessageId = 0;
                                        chatActivity.needSelectFromMessageId = false;
                                        chatActivity.waitingForLoad.add(Integer.valueOf(chatActivity.lastLoadIndex));
                                        r10 = MessagesController.getInstance(chatActivity.currentAccount);
                                        r11 = chatActivity.dialog_id;
                                        last_unread_date = AndroidUtilities.isTablet() ? bot_help : 20;
                                        queryLoadIndex = chatActivity.classGuid;
                                        r21 = ChatObject.isChannel(chatActivity.currentChat);
                                        a2 = chatActivity.lastLoadIndex;
                                        chatActivity.lastLoadIndex = a2 + 1;
                                        r10.loadMessages(r11, last_unread_date, 0, 0, true, 0, queryLoadIndex, 2, 0, r21, a2);
                                    } else if (chatActivity.progressView != null) {
                                        chatActivity.progressView.setVisibility(4);
                                        chatActivity.chatListView.setEmptyView(chatActivity.emptyViewContainer);
                                    }
                                    if (chatActivity.chatAdapter != null) {
                                        chatActivity.chatAdapter.notifyDataSetChanged();
                                    }
                                    if (chatActivity.currentEncryptedChat == null && chatActivity.currentUser != null && chatActivity.currentUser.bot && chatActivity.botUser == null) {
                                        chatActivity.botUser = TtmlNode.ANONYMOUS_REGION_ID;
                                        updateBottomOverlay();
                                    }
                                }
                            } else if (i == NotificationCenter.screenshotTook) {
                                updateInformationForScreenshotDetector();
                            } else if (i == NotificationCenter.blockedUsersDidLoaded) {
                                if (chatActivity.currentUser != null) {
                                    loadIndex = chatActivity.userBlocked;
                                    chatActivity.userBlocked = MessagesController.getInstance(chatActivity.currentAccount).blockedUsers.contains(Integer.valueOf(chatActivity.currentUser.id));
                                    if (loadIndex != chatActivity.userBlocked) {
                                        updateBottomOverlay();
                                    }
                                }
                            } else if (i == NotificationCenter.FileNewChunkAvailable) {
                                obj7 = (MessageObject) messageArr[0];
                                finalSize = ((Long) messageArr[3]).longValue();
                                if (finalSize != 0 && chatActivity.dialog_id == obj7.getDialogId()) {
                                    previous = (MessageObject) chatActivity.messagesDict[0].get(obj7.getId());
                                    if (previous != null) {
                                        previous.messageOwner.media.document.size = (int) finalSize;
                                        updateVisibleRows();
                                    }
                                }
                            } else {
                                finalSize = 32;
                                if (i == NotificationCenter.didCreatedNewDeleteTask) {
                                    SparseArray<ArrayList<Long>> mids = (SparseArray) messageArr[0];
                                    found = false;
                                    queryLoadIndex = 0;
                                    while (queryLoadIndex < mids.size()) {
                                        index = mids.keyAt(queryLoadIndex);
                                        ArrayList<Long> arr3 = (ArrayList) mids.get(index);
                                        z = found;
                                        for (found = false; found < arr3.size(); found++) {
                                            r11 = ((Long) arr3.get(found)).longValue();
                                            if (!found) {
                                                last_unread_date = (int) (r11 >> 32);
                                                if (last_unread_date < 0) {
                                                    last_unread_date = 0;
                                                }
                                                if (last_unread_date != (ChatObject.isChannel(chatActivity.currentChat) ? chatActivity.currentChat.id : 0)) {
                                                    return;
                                                }
                                            }
                                            obj3 = (MessageObject) chatActivity.messagesDict[0].get((int) r11);
                                            if (obj3 != null) {
                                                obj3.messageOwner.destroyTime = index;
                                                z = true;
                                            }
                                        }
                                        queryLoadIndex++;
                                        found = z;
                                    }
                                    if (found) {
                                        updateVisibleRows();
                                    }
                                } else if (i == NotificationCenter.messagePlayingDidStarted) {
                                    obj7 = (MessageObject) messageArr[0];
                                    if (obj7.eventId == 0) {
                                        sendSecretMessageRead(obj7);
                                        if (obj7.isRoundVideo()) {
                                            MediaController.getInstance().setTextureView(createTextureView(true), chatActivity.aspectRatioFrameLayout, chatActivity.roundVideoContainer, true);
                                            updateTextureViewPosition();
                                        }
                                        if (chatActivity.chatListView != null) {
                                            startLoadFrom = chatActivity.chatListView.getChildCount();
                                            for (queryLoadIndex = 0; queryLoadIndex < startLoadFrom; queryLoadIndex++) {
                                                view = chatActivity.chatListView.getChildAt(queryLoadIndex);
                                                if (view instanceof ChatMessageCell) {
                                                    cell = (ChatMessageCell) view;
                                                    obj22 = cell.getMessageObject();
                                                    if (obj22 != null) {
                                                        if (!obj22.isVoice()) {
                                                            if (!obj22.isMusic()) {
                                                                if (obj22.isRoundVideo()) {
                                                                    cell.checkRoundVideoPlayback(false);
                                                                    if (!(MediaController.getInstance().isPlayingMessage(obj22) || obj22.audioProgress == 0.0f)) {
                                                                        obj22.resetPlayingProgress();
                                                                        cell.invalidate();
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        cell.updateButtonState(false);
                                                    }
                                                }
                                            }
                                            startLoadFrom = chatActivity.mentionListView.getChildCount();
                                            for (queryLoadIndex = 0; queryLoadIndex < startLoadFrom; queryLoadIndex++) {
                                                view = chatActivity.mentionListView.getChildAt(queryLoadIndex);
                                                if (view instanceof ContextLinkCell) {
                                                    ContextLinkCell cell = (ContextLinkCell) view;
                                                    obj22 = cell.getMessageObject();
                                                    if (obj22 != null && (obj22.isVoice() || obj22.isMusic())) {
                                                        cell.updateButtonState(false);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        return;
                                    }
                                } else {
                                    if (i != NotificationCenter.messagePlayingDidReset) {
                                        if (i != NotificationCenter.messagePlayingPlayStateChanged) {
                                            Integer mid;
                                            if (i == NotificationCenter.messagePlayingProgressDidChanged) {
                                                mid = (Integer) messageArr[0];
                                                if (chatActivity.chatListView != null) {
                                                    startLoadFrom = chatActivity.chatListView.getChildCount();
                                                    b = 0;
                                                    while (true) {
                                                        queryLoadIndex = b;
                                                        if (queryLoadIndex >= startLoadFrom) {
                                                            break;
                                                        }
                                                        view = chatActivity.chatListView.getChildAt(queryLoadIndex);
                                                        if (view instanceof ChatMessageCell) {
                                                            cell = (ChatMessageCell) view;
                                                            obj22 = cell.getMessageObject();
                                                            if (obj22 != null && obj22.getId() == mid.intValue()) {
                                                                break;
                                                            }
                                                        }
                                                        b = queryLoadIndex + 1;
                                                    }
                                                }
                                            } else if (i == NotificationCenter.updateMessageMedia) {
                                                Message message2 = messageArr[0];
                                                obj7 = (MessageObject) chatActivity.messagesDict[0].get(message2.id);
                                                if (obj7 != null) {
                                                    obj7.messageOwner.media = message2.media;
                                                    obj7.messageOwner.attachPath = message2.attachPath;
                                                    obj7.generateThumbs(false);
                                                    if (obj7.getGroupId() != 0 && (obj7.photoThumbs == null || obj7.photoThumbs.isEmpty())) {
                                                        currentUserId3 = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj7.getGroupId());
                                                        if (currentUserId3 != null) {
                                                            a2 = currentUserId3.messages.indexOf(obj7);
                                                            if (a2 >= 0) {
                                                                index = currentUserId3.messages.size();
                                                                obj22 = null;
                                                                if (a2 > 0 && a2 < currentUserId3.messages.size() - 1) {
                                                                    updatedSelected = new GroupedMessages();
                                                                    updatedSelected.groupId = Utilities.random.nextLong();
                                                                    updatedSelected.messages.addAll(currentUserId3.messages.subList(a2 + 1, currentUserId3.messages.size()));
                                                                    b = 0;
                                                                    while (true) {
                                                                        currentUserId = b;
                                                                        if (currentUserId >= updatedSelected.messages.size()) {
                                                                            break;
                                                                        }
                                                                        ((MessageObject) updatedSelected.messages.get(currentUserId)).localGroupId = updatedSelected.groupId;
                                                                        currentUserId3.messages.remove(a2 + 1);
                                                                        b = currentUserId + 1;
                                                                    }
                                                                    chatActivity.groupedMessagesMap.put(updatedSelected.groupId, updatedSelected);
                                                                    obj22 = (MessageObject) updatedSelected.messages.get(updatedSelected.messages.size() - 1);
                                                                    updatedSelected.calculate();
                                                                }
                                                                currentUserId3.messages.remove(a2);
                                                                if (currentUserId3.messages.isEmpty()) {
                                                                    chatActivity.groupedMessagesMap.remove(currentUserId3.groupId);
                                                                } else {
                                                                    if (obj22 == null) {
                                                                        obj22 = (MessageObject) currentUserId3.messages.get(currentUserId3.messages.size() - 1);
                                                                    }
                                                                    currentUserId3.calculate();
                                                                    a = chatActivity.messages.indexOf(obj22);
                                                                    if (a >= 0 && chatActivity.chatAdapter != null) {
                                                                        chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.messagesStartRow + a, index);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (message2.media.ttl_seconds == 0 || !((message2.media.photo instanceof TL_photoEmpty) || (message2.media.document instanceof TL_documentEmpty))) {
                                                        updateVisibleRows();
                                                    } else {
                                                        obj7.setType();
                                                        chatActivity.chatAdapter.updateRowWithMessageObject(obj7);
                                                    }
                                                }
                                            } else if (i == NotificationCenter.replaceMessagesObjects) {
                                                did3 = ((Long) messageArr[0]).longValue();
                                                if (did3 == chatActivity.dialog_id || did3 == chatActivity.mergeDialogId) {
                                                    ArrayList<MessageObject> arrayList3;
                                                    int i11;
                                                    boolean z4;
                                                    queryLoadIndex = did3 == chatActivity.dialog_id ? 0 : 1;
                                                    dayArr3 = (ArrayList) messageArr[1];
                                                    LongSparseArray<GroupedMessages> newGroups4 = null;
                                                    reloadMegagroup = false;
                                                    hasFromMe = false;
                                                    a2 = 0;
                                                    while (a2 < dayArr3.size()) {
                                                        long did4;
                                                        int i12;
                                                        obj4 = (MessageObject) dayArr3.get(a2);
                                                        obj3 = (MessageObject) chatActivity.messagesDict[queryLoadIndex].get(obj4.getId());
                                                        if (chatActivity.pinnedMessageObject != null && chatActivity.pinnedMessageObject.getId() == obj4.getId()) {
                                                            chatActivity.pinnedMessageObject = obj4;
                                                            updatePinnedMessageView(true);
                                                        }
                                                        if (obj3 != null) {
                                                            if (obj4.type >= 0) {
                                                                if (!reloadMegagroup && (obj4.messageOwner.media instanceof TL_messageMediaWebPage)) {
                                                                    reloadMegagroup = true;
                                                                }
                                                                if (obj3.replyMessageObject != null) {
                                                                    obj4.replyMessageObject = obj3.replyMessageObject;
                                                                    if (obj4.messageOwner.action instanceof TL_messageActionGameScore) {
                                                                        obj4.generateGameMessageText(null);
                                                                    } else if (obj4.messageOwner.action instanceof TL_messageActionPaymentSent) {
                                                                        obj4.generatePaymentSentMessageText(null);
                                                                    }
                                                                }
                                                                obj4.messageOwner.attachPath = obj3.messageOwner.attachPath;
                                                                obj4.attachPathExists = obj3.attachPathExists;
                                                                obj4.mediaExists = obj3.mediaExists;
                                                                chatActivity.messagesDict[queryLoadIndex].put(obj3.getId(), obj4);
                                                            } else {
                                                                chatActivity.messagesDict[queryLoadIndex].remove(obj3.getId());
                                                            }
                                                            i2 = chatActivity.messages.indexOf(obj3);
                                                            if (i2 >= 0) {
                                                                ArrayList<MessageObject> dayArr4;
                                                                int index2;
                                                                did4 = did3;
                                                                did3 = (ArrayList) chatActivity.messagesByDays.get(obj3.dateKey);
                                                                startLoadFrom = -1;
                                                                if (did3 != null) {
                                                                    startLoadFrom = did3.indexOf(obj3);
                                                                }
                                                                if (obj3.getGroupId() != 0) {
                                                                    arrayList3 = dayArr3;
                                                                    GroupedMessages changed = (GroupedMessages) chatActivity.groupedMessagesMap.get(obj3.getGroupId());
                                                                    if (changed != null) {
                                                                        dayArr3 = changed.messages.indexOf(obj3);
                                                                        if (dayArr3 >= null) {
                                                                            if (obj3.getGroupId() != obj4.getGroupId()) {
                                                                                chatActivity.groupedMessagesMap.put(obj4.getGroupId(), changed);
                                                                            }
                                                                            if (obj4.photoThumbs != null) {
                                                                                if (!obj4.photoThumbs.isEmpty()) {
                                                                                    changed.messages.set(dayArr3, obj4);
                                                                                    GroupedMessagePosition oldPosition = (GroupedMessagePosition) changed.positions.remove(obj3);
                                                                                    if (oldPosition != null) {
                                                                                        changed.positions.put(obj4, oldPosition);
                                                                                    }
                                                                                    if (newGroups4 == null) {
                                                                                        newGroups4 = new LongSparseArray();
                                                                                    }
                                                                                    newGroups4.put(changed.groupId, changed);
                                                                                    dayArr4 = did3;
                                                                                    index2 = startLoadFrom;
                                                                                    i11 = queryLoadIndex;
                                                                                    i12 = a2;
                                                                                }
                                                                            }
                                                                            if (newGroups4 == null) {
                                                                                newGroups4 = new LongSparseArray();
                                                                            }
                                                                            newGroups4.put(changed.groupId, changed);
                                                                            if (dayArr3 <= null || dayArr3 >= changed.messages.size() - 1) {
                                                                                dayArr4 = did3;
                                                                                index2 = startLoadFrom;
                                                                                i11 = queryLoadIndex;
                                                                                i12 = a2;
                                                                            } else {
                                                                                GroupedMessages slicedGroup = new GroupedMessages();
                                                                                i11 = queryLoadIndex;
                                                                                i12 = a2;
                                                                                slicedGroup.groupId = Utilities.random.nextLong();
                                                                                slicedGroup.messages.addAll(changed.messages.subList(dayArr3 + 1, changed.messages.size()));
                                                                                queryLoadIndex = 0;
                                                                                while (queryLoadIndex < slicedGroup.messages.size()) {
                                                                                    dayArr4 = did3;
                                                                                    index2 = startLoadFrom;
                                                                                    ((MessageObject) slicedGroup.messages.get(queryLoadIndex)).localGroupId = slicedGroup.groupId;
                                                                                    changed.messages.remove(dayArr3 + 1);
                                                                                    queryLoadIndex++;
                                                                                    did3 = dayArr4;
                                                                                    startLoadFrom = index2;
                                                                                }
                                                                                dayArr4 = did3;
                                                                                index2 = startLoadFrom;
                                                                                newGroups4.put(slicedGroup.groupId, slicedGroup);
                                                                                chatActivity.groupedMessagesMap.put(slicedGroup.groupId, slicedGroup);
                                                                            }
                                                                            changed.messages.remove(dayArr3);
                                                                        }
                                                                    }
                                                                    dayArr4 = did3;
                                                                    index2 = startLoadFrom;
                                                                    i11 = queryLoadIndex;
                                                                    i12 = a2;
                                                                } else {
                                                                    dayArr4 = did3;
                                                                    index2 = startLoadFrom;
                                                                    i11 = queryLoadIndex;
                                                                    i12 = a2;
                                                                    z4 = hasFromMe;
                                                                    arrayList3 = dayArr3;
                                                                }
                                                                if (obj4.type >= null) {
                                                                    chatActivity.messages.set(i2, obj4);
                                                                    if (chatActivity.chatAdapter != null) {
                                                                        chatActivity.chatAdapter.updateRowAtPosition(chatActivity.chatAdapter.messagesStartRow + i2);
                                                                    }
                                                                    if (index2 >= 0) {
                                                                        dayArr4.set(index2, obj4);
                                                                    } else {
                                                                        did3 = dayArr4;
                                                                        startLoadFrom = index2;
                                                                    }
                                                                } else {
                                                                    did3 = dayArr4;
                                                                    startLoadFrom = index2;
                                                                    chatActivity.messages.remove(i2);
                                                                    if (chatActivity.chatAdapter != null) {
                                                                        chatActivity.chatAdapter.notifyItemRemoved(chatActivity.chatAdapter.messagesStartRow + i2);
                                                                    }
                                                                    if (startLoadFrom >= 0) {
                                                                        did3.remove(startLoadFrom);
                                                                        if (did3.isEmpty()) {
                                                                            chatActivity.messagesByDays.remove(obj3.dateKey);
                                                                            chatActivity.messages.remove(i2);
                                                                            chatActivity.chatAdapter.notifyItemRemoved(chatActivity.chatAdapter.messagesStartRow);
                                                                        }
                                                                    }
                                                                }
                                                                hasFromMe = 1;
                                                                a2 = i12 + 1;
                                                                did3 = did4;
                                                                dayArr3 = arrayList3;
                                                                queryLoadIndex = i11;
                                                                i = id;
                                                                objArr = args;
                                                            }
                                                        }
                                                        did4 = did3;
                                                        i11 = queryLoadIndex;
                                                        i12 = a2;
                                                        z4 = hasFromMe;
                                                        arrayList3 = dayArr3;
                                                        a2 = i12 + 1;
                                                        did3 = did4;
                                                        dayArr3 = arrayList3;
                                                        queryLoadIndex = i11;
                                                        i = id;
                                                        objArr = args;
                                                    }
                                                    i11 = queryLoadIndex;
                                                    z4 = hasFromMe;
                                                    arrayList3 = dayArr3;
                                                    if (newGroups4 != null) {
                                                        b = 0;
                                                        while (true) {
                                                            guid = b;
                                                            if (guid >= newGroups4.size()) {
                                                                break;
                                                            }
                                                            groupedMessages = (GroupedMessages) newGroups4.valueAt(guid);
                                                            if (groupedMessages.messages.isEmpty()) {
                                                                chatActivity.groupedMessagesMap.remove(groupedMessages.groupId);
                                                            } else {
                                                                groupedMessages.calculate();
                                                                a2 = chatActivity.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                                                                if (a2 >= 0 && chatActivity.chatAdapter != null) {
                                                                    chatActivity.chatAdapter.notifyItemRangeChanged(chatActivity.chatAdapter.messagesStartRow + a2, groupedMessages.messages.size());
                                                                }
                                                            }
                                                            b = guid + 1;
                                                        }
                                                    }
                                                } else {
                                                    return;
                                                }
                                            } else {
                                                i = id;
                                                if (i == NotificationCenter.notificationsSettingsUpdated) {
                                                    updateTitleIcons();
                                                    if (ChatObject.isChannel(chatActivity.currentChat)) {
                                                        updateBottomOverlay();
                                                    }
                                                } else if (i != NotificationCenter.didLoadedReplyMessages) {
                                                    BotInfo[] botInfoArr = args;
                                                    if (i == NotificationCenter.didLoadedPinnedMessage) {
                                                        obj7 = (MessageObject) botInfoArr[0];
                                                        if (obj7.getDialogId() == chatActivity.dialog_id && chatActivity.info != null && chatActivity.info.pinned_msg_id == obj7.getId()) {
                                                            chatActivity.pinnedMessageObject = obj7;
                                                            chatActivity.loadingPinnedMessage = 0;
                                                            updatePinnedMessageView(true);
                                                        }
                                                    } else if (i == NotificationCenter.didReceivedWebpages) {
                                                        ArrayList<Message> arrayList4 = (ArrayList) botInfoArr[0];
                                                        updated = false;
                                                        for (startLoadFrom = 0; startLoadFrom < arrayList4.size(); startLoadFrom++) {
                                                            dateMsg = (Message) arrayList4.get(startLoadFrom);
                                                            long did5 = MessageObject.getDialogId(dateMsg);
                                                            if (did5 == chatActivity.dialog_id || did5 == chatActivity.mergeDialogId) {
                                                                arr2 = (MessageObject) chatActivity.messagesDict[did5 == chatActivity.dialog_id ? 0 : 1].get(dateMsg.id);
                                                                if (arr2 != null) {
                                                                    arr2.messageOwner.media = new TL_messageMediaWebPage();
                                                                    arr2.messageOwner.media.webpage = dateMsg.media.webpage;
                                                                    arr2.generateThumbs(true);
                                                                    updated = true;
                                                                }
                                                            }
                                                        }
                                                        if (updated) {
                                                            updateVisibleRows();
                                                        }
                                                    } else if (i == NotificationCenter.didReceivedWebpagesInUpdates) {
                                                        if (chatActivity.foundWebPage != null) {
                                                            WebPage webPage;
                                                            LongSparseArray<WebPage> hashMap = (LongSparseArray) botInfoArr[0];
                                                            guid = 0;
                                                            while (true) {
                                                                currentUserId = guid;
                                                                if (currentUserId >= hashMap.size()) {
                                                                    break;
                                                                }
                                                                webPage = (WebPage) hashMap.valueAt(currentUserId);
                                                                if (webPage.id == chatActivity.foundWebPage.id) {
                                                                    break;
                                                                }
                                                                guid = currentUserId + 1;
                                                            }
                                                            showReplyPanel(!(webPage instanceof TL_webPageEmpty), null, null, webPage, false);
                                                        }
                                                    } else if (i == NotificationCenter.messagesReadContent) {
                                                        ArrayList<Long> arrayList5 = (ArrayList) botInfoArr[0];
                                                        a2 = ChatObject.isChannel(chatActivity.currentChat) ? chatActivity.currentChat.id : 0;
                                                        hasFromMe = false;
                                                        queryLoadIndex = 0;
                                                        while (queryLoadIndex < arrayList5.size()) {
                                                            messageId = ((Long) arrayList5.get(queryLoadIndex)).longValue();
                                                            unreadAfterId = (int) (messageId >> finalSize);
                                                            if (unreadAfterId < 0) {
                                                                unreadAfterId = 0;
                                                            }
                                                            if (unreadAfterId == a2) {
                                                                obj4 = (MessageObject) chatActivity.messagesDict[0].get((int) messageId);
                                                                if (obj4 != null) {
                                                                    obj4.setContentIsRead();
                                                                    hasFromMe = true;
                                                                    if (obj4.messageOwner.mentioned) {
                                                                        chatActivity.newMentionsCount--;
                                                                        if (chatActivity.newMentionsCount <= 0) {
                                                                            chatActivity.newMentionsCount = 0;
                                                                            chatActivity.hasAllMentionsLocal = true;
                                                                            showMentiondownButton(false, true);
                                                                        } else {
                                                                            chatActivity.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newMentionsCount)}));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            queryLoadIndex++;
                                                            finalSize = 32;
                                                        }
                                                        if (hasFromMe) {
                                                            updateVisibleRows();
                                                        }
                                                    } else if (i == NotificationCenter.botInfoDidLoaded) {
                                                        if (chatActivity.classGuid == ((Integer) botInfoArr[1]).intValue()) {
                                                            BotInfo info = botInfoArr[0];
                                                            if (chatActivity.currentEncryptedChat == null) {
                                                                if (!(info.commands.isEmpty() || ChatObject.isChannel(chatActivity.currentChat))) {
                                                                    chatActivity.hasBotsCommands = true;
                                                                }
                                                                chatActivity.botInfo.put(info.user_id, info);
                                                                if (chatActivity.chatAdapter != null) {
                                                                    chatActivity.chatAdapter.notifyItemChanged(chatActivity.chatAdapter.botInfoRow);
                                                                }
                                                                if (chatActivity.mentionsAdapter != null && (!ChatObject.isChannel(chatActivity.currentChat) || (chatActivity.currentChat != null && chatActivity.currentChat.megagroup))) {
                                                                    chatActivity.mentionsAdapter.setBotInfo(chatActivity.botInfo);
                                                                }
                                                                if (chatActivity.chatActivityEnterView != null) {
                                                                    chatActivity.chatActivityEnterView.setBotsCount(chatActivity.botsCount, chatActivity.hasBotsCommands);
                                                                }
                                                            }
                                                            updateBotButtons();
                                                        }
                                                    } else if (i == NotificationCenter.botKeyboardDidLoaded) {
                                                        if (chatActivity.dialog_id == ((Long) botInfoArr[1]).longValue()) {
                                                            Message message3 = (Message) botInfoArr[0];
                                                            if (message3 == null || chatActivity.userBlocked) {
                                                                chatActivity.botButtons = null;
                                                                if (chatActivity.chatActivityEnterView != null) {
                                                                    if (chatActivity.replyingMessageObject != null && chatActivity.botReplyButtons == chatActivity.replyingMessageObject) {
                                                                        chatActivity.botReplyButtons = null;
                                                                        showReplyPanel(false, null, null, null, false);
                                                                    }
                                                                    chatActivity.chatActivityEnterView.setButtons(chatActivity.botButtons);
                                                                }
                                                            } else {
                                                                chatActivity.botButtons = new MessageObject(chatActivity.currentAccount, message3, false);
                                                                checkBotKeyboard();
                                                            }
                                                        }
                                                    } else if (i == NotificationCenter.chatSearchResultsAvailable) {
                                                        if (chatActivity.classGuid == ((Integer) botInfoArr[0]).intValue()) {
                                                            a = ((Integer) botInfoArr[1]).intValue();
                                                            r11 = ((Long) botInfoArr[3]).longValue();
                                                            if (a != 0) {
                                                                last_unread_date = 2;
                                                                scrollToMessageId(a, 0, true, r11 == chatActivity.dialog_id ? 0 : 1, false);
                                                            } else {
                                                                last_unread_date = 2;
                                                            }
                                                            updateSearchButtons(((Integer) botInfoArr[last_unread_date]).intValue(), ((Integer) botInfoArr[4]).intValue(), ((Integer) botInfoArr[5]).intValue());
                                                            if (chatActivity.searchItem != null) {
                                                                chatActivity.searchItem.setShowSearchProgress(false);
                                                            }
                                                        }
                                                    } else if (i == NotificationCenter.chatSearchResultsLoading) {
                                                        if (chatActivity.classGuid == ((Integer) botInfoArr[0]).intValue() && chatActivity.searchItem != null) {
                                                            chatActivity.searchItem.setShowSearchProgress(true);
                                                        }
                                                    } else if (i == NotificationCenter.didUpdatedMessagesViews) {
                                                        SparseIntArray array = (SparseIntArray) ((SparseArray) botInfoArr[0]).get((int) chatActivity.dialog_id);
                                                        if (array != null) {
                                                            found = false;
                                                            for (queryLoadIndex = 0; queryLoadIndex < array.size(); queryLoadIndex++) {
                                                                index = array.keyAt(queryLoadIndex);
                                                                obj22 = (MessageObject) chatActivity.messagesDict[0].get(index);
                                                                if (obj22 != null) {
                                                                    a = array.get(index);
                                                                    if (a > obj22.messageOwner.views) {
                                                                        obj22.messageOwner.views = a;
                                                                        found = true;
                                                                    }
                                                                }
                                                            }
                                                            if (found) {
                                                                updateVisibleRows();
                                                            }
                                                        }
                                                    } else if (i == NotificationCenter.peerSettingsDidLoaded) {
                                                        if (((Long) botInfoArr[0]).longValue() == chatActivity.dialog_id) {
                                                            updateSpamView();
                                                        }
                                                    } else if (i == NotificationCenter.newDraftReceived) {
                                                        if (((Long) botInfoArr[0]).longValue() == chatActivity.dialog_id) {
                                                            applyDraftMaybe(true);
                                                        }
                                                    } else if (i == NotificationCenter.userInfoDidLoaded) {
                                                        mid = botInfoArr[0];
                                                        if (chatActivity.currentUser != null && chatActivity.currentUser.id == mid.intValue()) {
                                                            TL_userFull userFull = botInfoArr[1];
                                                            if (chatActivity.headerItem != null) {
                                                                if (userFull.phone_calls_available) {
                                                                    chatActivity.headerItem.showSubItem(32);
                                                                } else {
                                                                    chatActivity.headerItem.hideSubItem(32);
                                                                }
                                                            }
                                                        }
                                                    } else if (i == NotificationCenter.didSetNewWallpapper) {
                                                        if (chatActivity.fragmentView != null) {
                                                            ((SizeNotifierFrameLayout) chatActivity.fragmentView).setBackgroundImage(Theme.getCachedWallpaper());
                                                            chatActivity.progressView2.getBackground().setColorFilter(Theme.colorFilter);
                                                            if (chatActivity.emptyView != null) {
                                                                chatActivity.emptyView.getBackground().setColorFilter(Theme.colorFilter);
                                                            }
                                                            if (chatActivity.bigEmptyView != null) {
                                                                chatActivity.bigEmptyView.getBackground().setColorFilter(Theme.colorFilter);
                                                            }
                                                            chatActivity.chatListView.invalidateViews();
                                                        }
                                                    } else if (i == NotificationCenter.channelRightsUpdated) {
                                                        Chat chat4 = botInfoArr[0];
                                                        if (!(chatActivity.currentChat == null || chat4.id != chatActivity.currentChat.id || chatActivity.chatActivityEnterView == null)) {
                                                            chatActivity.currentChat = chat4;
                                                            chatActivity.chatActivityEnterView.checkChannelRights();
                                                            checkRaiseSensors();
                                                            updateSecretStatus();
                                                        }
                                                    } else if (i == NotificationCenter.updateMentionsCount && chatActivity.dialog_id == ((Long) botInfoArr[0]).longValue()) {
                                                        guid = ((Integer) botInfoArr[1]).intValue();
                                                        if (chatActivity.newMentionsCount > guid) {
                                                            chatActivity.newMentionsCount = guid;
                                                            if (chatActivity.newMentionsCount <= 0) {
                                                                chatActivity.newMentionsCount = 0;
                                                                chatActivity.hasAllMentionsLocal = true;
                                                                showMentiondownButton(false, true);
                                                            } else {
                                                                chatActivity.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(chatActivity.newMentionsCount)}));
                                                            }
                                                        }
                                                    }
                                                } else if (((Long) args[0]).longValue() == chatActivity.dialog_id) {
                                                    updateVisibleRows();
                                                }
                                            }
                                        }
                                    }
                                    if (i == NotificationCenter.messagePlayingDidReset) {
                                        destroyTextureView();
                                    }
                                    if (chatActivity.chatListView != null) {
                                        View view;
                                        guid = chatActivity.chatListView.getChildCount();
                                        for (startLoadFrom = 0; startLoadFrom < guid; startLoadFrom++) {
                                            view = chatActivity.chatListView.getChildAt(startLoadFrom);
                                            if (view instanceof ChatMessageCell) {
                                                ChatMessageCell cell2 = (ChatMessageCell) view;
                                                obj2 = cell2.getMessageObject();
                                                if (obj2 != null) {
                                                    if (!obj2.isVoice()) {
                                                        if (!obj2.isMusic()) {
                                                            if (obj2.isRoundVideo() && !MediaController.getInstance().isPlayingMessage(obj2)) {
                                                                cell2.checkRoundVideoPlayback(true);
                                                            }
                                                        }
                                                    }
                                                    cell2.updateButtonState(false);
                                                }
                                            }
                                        }
                                        guid = chatActivity.mentionListView.getChildCount();
                                        for (startLoadFrom = 0; startLoadFrom < guid; startLoadFrom++) {
                                            view = chatActivity.mentionListView.getChildAt(startLoadFrom);
                                            if (view instanceof ContextLinkCell) {
                                                ContextLinkCell cell3 = (ContextLinkCell) view;
                                                obj2 = cell3.getMessageObject();
                                                if (obj2 != null && (obj2.isVoice() || obj2.isMusic())) {
                                                    cell3.updateButtonState(false);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        objArr = args;
        i = id;
        objArr = args;
    }

    public boolean processSwitchButton(TL_keyboardButtonSwitchInline button) {
        if (!(this.inlineReturn == 0 || button.same_peer)) {
            if (this.parentLayout != null) {
                String query = new StringBuilder();
                query.append("@");
                query.append(this.currentUser.username);
                query.append(" ");
                query.append(button.query);
                query = query.toString();
                if (this.inlineReturn == this.dialog_id) {
                    this.inlineReturn = 0;
                    this.chatActivityEnterView.setFieldText(query);
                } else {
                    DataQuery.getInstance(this.currentAccount).saveDraft(this.inlineReturn, query, null, null, false);
                    if (this.parentLayout.fragmentsStack.size() > 1) {
                        BaseFragment prevFragment = (BaseFragment) this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 2);
                        if ((prevFragment instanceof ChatActivity) && ((ChatActivity) prevFragment).dialog_id == this.inlineReturn) {
                            finishFragment();
                        } else {
                            Bundle bundle = new Bundle();
                            int lower_part = (int) this.inlineReturn;
                            int high_part = (int) (this.inlineReturn >> 32);
                            if (lower_part == 0) {
                                bundle.putInt("enc_id", high_part);
                            } else if (lower_part > 0) {
                                bundle.putInt("user_id", lower_part);
                            } else if (lower_part < 0) {
                                bundle.putInt("chat_id", -lower_part);
                            }
                            presentFragment(new ChatActivity(bundle), true);
                        }
                    }
                }
                return true;
            }
        }
        return false;
    }

    private void updateSearchButtons(int mask, int num, int count) {
        if (this.searchUpButton != null) {
            this.searchUpButton.setEnabled((mask & 1) != 0);
            this.searchDownButton.setEnabled((mask & 2) != 0);
            float f = 0.5f;
            this.searchUpButton.setAlpha(this.searchUpButton.isEnabled() ? 1.0f : 0.5f);
            ImageView imageView = this.searchDownButton;
            if (this.searchDownButton.isEnabled()) {
                f = 1.0f;
            }
            imageView.setAlpha(f);
            if (count < 0) {
                this.searchCountText.setText(TtmlNode.ANONYMOUS_REGION_ID);
            } else if (count == 0) {
                this.searchCountText.setText(LocaleController.getString("NoResult", R.string.NoResult));
            } else {
                this.searchCountText.setText(LocaleController.formatString("Of", R.string.Of, Integer.valueOf(num + 1), Integer.valueOf(count)));
            }
        }
    }

    public boolean needDelayOpenAnimation() {
        return this.firstLoading;
    }

    public void onTransitionAnimationStart(boolean isOpen, boolean backward) {
        NotificationCenter.getInstance(this.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoaded, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoaded, NotificationCenter.botKeyboardDidLoaded});
        NotificationCenter.getInstance(this.currentAccount).setAnimationInProgress(true);
        if (isOpen) {
            this.openAnimationEnded = false;
        }
    }

    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
        NotificationCenter.getInstance(this.currentAccount).setAnimationInProgress(false);
        if (isOpen) {
            this.openAnimationEnded = true;
            if (this.currentUser != null) {
                MessagesController.getInstance(this.currentAccount).loadFullUser(this.currentUser, this.classGuid, false);
            }
            if (VERSION.SDK_INT >= 21) {
                createChatAttachView();
            }
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                boolean isChannel = false;
                if (this.currentChat != null) {
                    boolean z = ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup;
                    isChannel = z;
                }
                SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                String key = isChannel ? "needShowRoundHintChannel" : "needShowRoundHint";
                if (preferences.getBoolean(key, true) && Utilities.random.nextFloat() < 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    preferences.edit().putBoolean(key, false).commit();
                }
            }
        }
    }

    protected void onDialogDismiss(Dialog dialog) {
        if (this.closeChatDialog != null && dialog == this.closeChatDialog) {
            MessagesController.getInstance(this.currentAccount).deleteDialog(this.dialog_id, 0);
            if (this.parentLayout == null || this.parentLayout.fragmentsStack.isEmpty() || this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1) == this) {
                finishFragment();
                return;
            }
            BaseFragment fragment = (BaseFragment) this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1);
            removeSelfFromStack();
            fragment.finishFragment();
        }
    }

    public boolean extendActionMode(Menu menu) {
        if (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) {
            if (this.chatActivityEnterView.getSelectionLength() != 0) {
                if (menu.findItem(16908321) == null) {
                }
            }
            return true;
        } else if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
            return true;
        }
        if (VERSION.SDK_INT >= edit) {
            menu.removeItem(16908341);
        }
        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
        stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, stringBuilder.length(), 33);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_bold, 6, stringBuilder);
        stringBuilder = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
        stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, stringBuilder.length(), 33);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_italic, 7, stringBuilder);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, 8, LocaleController.getString("Regular", R.string.Regular));
        return true;
    }

    private void updateBottomOverlay() {
        if (this.bottomOverlayChatText != null) {
            if (this.currentChat != null) {
                if (!ChatObject.isChannel(this.currentChat) || (this.currentChat instanceof TL_channelForbidden)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
                } else if (ChatObject.isNotInChat(this.currentChat)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                } else if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute));
                }
            } else if (this.userBlocked) {
                if (this.currentUser.bot) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", R.string.BotUnblock));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
                }
                if (this.botButtons != null) {
                    this.botButtons = null;
                    if (this.chatActivityEnterView != null) {
                        if (this.replyingMessageObject != null && this.botReplyButtons == this.replyingMessageObject) {
                            this.botReplyButtons = null;
                            showReplyPanel(false, null, null, null, false);
                        }
                        this.chatActivityEnterView.setButtons(this.botButtons, false);
                    }
                }
            } else if (this.botUser == null || !this.currentUser.bot) {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
            } else {
                this.bottomOverlayChatText.setText(LocaleController.getString("BotStart", R.string.BotStart));
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
            }
            if (this.searchItem == null || this.searchItem.getVisibility() != 0) {
                this.searchContainer.setVisibility(4);
                if ((this.currentChat == null || (!ChatObject.isNotInChat(this.currentChat) && ChatObject.canWriteToChat(this.currentChat))) && (this.currentUser == null || !(UserObject.isDeleted(this.currentUser) || this.userBlocked))) {
                    if (this.botUser == null || !this.currentUser.bot) {
                        this.chatActivityEnterView.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(4);
                    } else {
                        this.bottomOverlayChat.setVisibility(0);
                        this.chatActivityEnterView.setVisibility(4);
                    }
                    if (this.muteItem != null) {
                        this.muteItem.setVisibility(0);
                    }
                } else {
                    if (this.chatActivityEnterView.isEditingMessage()) {
                        this.chatActivityEnterView.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(4);
                        this.chatActivityEnterView.setFieldFocused();
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.chatActivityEnterView.openKeyboard();
                            }
                        }, 100);
                    } else {
                        this.bottomOverlayChat.setVisibility(0);
                        this.chatActivityEnterView.setFieldFocused(false);
                        this.chatActivityEnterView.setVisibility(4);
                        this.chatActivityEnterView.closeKeyboard();
                    }
                    if (this.muteItem != null) {
                        this.muteItem.setVisibility(8);
                    }
                    this.attachItem.setVisibility(8);
                    this.headerItem.setVisibility(0);
                }
                if (this.topViewWasVisible == 1) {
                    this.chatActivityEnterView.showTopView(false, false);
                    this.topViewWasVisible = 0;
                }
            } else {
                this.searchContainer.setVisibility(0);
                this.bottomOverlayChat.setVisibility(4);
                this.chatActivityEnterView.setFieldFocused(false);
                this.chatActivityEnterView.setVisibility(4);
                if (this.chatActivityEnterView.isTopViewVisible()) {
                    this.topViewWasVisible = 1;
                    this.chatActivityEnterView.hideTopView(false);
                } else {
                    this.topViewWasVisible = 2;
                }
            }
            checkRaiseSensors();
        }
    }

    public void showAlert(String name, String message) {
        if (!(this.alertView == null || name == null)) {
            if (message != null) {
                if (this.alertView.getTag() != null) {
                    this.alertView.setTag(null);
                    if (this.alertViewAnimator != null) {
                        this.alertViewAnimator.cancel();
                        this.alertViewAnimator = null;
                    }
                    this.alertView.setVisibility(0);
                    this.alertViewAnimator = new AnimatorSet();
                    AnimatorSet animatorSet = this.alertViewAnimator;
                    Animator[] animatorArr = new Animator[1];
                    animatorArr[0] = ObjectAnimator.ofFloat(this.alertView, "translationY", new float[]{0.0f});
                    animatorSet.playTogether(animatorArr);
                    this.alertViewAnimator.setDuration(200);
                    this.alertViewAnimator.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationEnd(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }

                        public void onAnimationCancel(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }
                    });
                    this.alertViewAnimator.start();
                }
                this.alertNameTextView.setText(name);
                this.alertTextView.setText(Emoji.replaceEmoji(message.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                if (this.hideAlertViewRunnable != null) {
                    AndroidUtilities.cancelRunOnUIThread(this.hideAlertViewRunnable);
                }
                Runnable anonymousClass88 = new Runnable() {

                    /* renamed from: org.telegram.ui.ChatActivity$88$1 */
                    class C10471 extends AnimatorListenerAdapter {
                        C10471() {
                        }

                        public void onAnimationEnd(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertView.setVisibility(8);
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }

                        public void onAnimationCancel(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }
                    }

                    public void run() {
                        if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                            ChatActivity.this.alertView.setTag(Integer.valueOf(1));
                            if (ChatActivity.this.alertViewAnimator != null) {
                                ChatActivity.this.alertViewAnimator.cancel();
                                ChatActivity.this.alertViewAnimator = null;
                            }
                            ChatActivity.this.alertViewAnimator = new AnimatorSet();
                            AnimatorSet access$25700 = ChatActivity.this.alertViewAnimator;
                            Animator[] animatorArr = new Animator[1];
                            animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.alertView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
                            access$25700.playTogether(animatorArr);
                            ChatActivity.this.alertViewAnimator.setDuration(200);
                            ChatActivity.this.alertViewAnimator.addListener(new C10471());
                            ChatActivity.this.alertViewAnimator.start();
                        }
                    }
                };
                this.hideAlertViewRunnable = anonymousClass88;
                AndroidUtilities.runOnUIThread(anonymousClass88, 3000);
            }
        }
    }

    private void hidePinnedMessageView(boolean animated) {
        if (this.pinnedMessageView.getTag() == null) {
            this.pinnedMessageView.setTag(Integer.valueOf(1));
            if (this.pinnedMessageViewAnimator != null) {
                this.pinnedMessageViewAnimator.cancel();
                this.pinnedMessageViewAnimator = null;
            }
            if (animated) {
                this.pinnedMessageViewAnimator = new AnimatorSet();
                AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                Animator[] animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.pinnedMessageView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
                animatorSet.playTogether(animatorArr);
                this.pinnedMessageViewAnimator.setDuration(200);
                this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                            ChatActivity.this.pinnedMessageView.setVisibility(8);
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }
                });
                this.pinnedMessageViewAnimator.start();
                return;
            }
            this.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
            this.pinnedMessageView.setVisibility(8);
        }
    }

    private void updatePinnedMessageView(boolean animated) {
        if (this.pinnedMessageView != null) {
            if (this.info != null) {
                if (!(this.pinnedMessageObject == null || this.info.pinned_msg_id == this.pinnedMessageObject.getId())) {
                    this.pinnedMessageObject = null;
                }
                if (this.info.pinned_msg_id != 0 && this.pinnedMessageObject == null) {
                    this.pinnedMessageObject = (MessageObject) this.messagesDict[0].get(this.info.pinned_msg_id);
                }
            }
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            if (!(this.info == null || this.info.pinned_msg_id == 0)) {
                int i = this.info.pinned_msg_id;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("pin_");
                stringBuilder.append(this.dialog_id);
                if (i != preferences.getInt(stringBuilder.toString(), 0)) {
                    if (this.actionBar != null) {
                        if (!this.actionBar.isActionModeShowed()) {
                            if (this.actionBar.isSearchFieldVisible()) {
                            }
                        }
                    }
                    if (this.pinnedMessageObject != null) {
                        int dp;
                        String mess;
                        if (this.pinnedMessageView.getTag() != null) {
                            this.pinnedMessageView.setTag(null);
                            if (this.pinnedMessageViewAnimator != null) {
                                this.pinnedMessageViewAnimator.cancel();
                                this.pinnedMessageViewAnimator = null;
                            }
                            if (animated) {
                                this.pinnedMessageView.setVisibility(0);
                                this.pinnedMessageViewAnimator = new AnimatorSet();
                                AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                                Animator[] animatorArr = new Animator[1];
                                animatorArr[0] = ObjectAnimator.ofFloat(this.pinnedMessageView, "translationY", new float[]{0.0f});
                                animatorSet.playTogether(animatorArr);
                                this.pinnedMessageViewAnimator.setDuration(200);
                                this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
                                    public void onAnimationEnd(Animator animation) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }
                                    }

                                    public void onAnimationCancel(Animator animation) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }
                                    }
                                });
                                this.pinnedMessageViewAnimator.start();
                            } else {
                                this.pinnedMessageView.setTranslationY(0.0f);
                                this.pinnedMessageView.setVisibility(0);
                            }
                        }
                        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) this.pinnedMessageNameTextView.getLayoutParams();
                        FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.pinnedMessageTextView.getLayoutParams();
                        PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(50.0f));
                        if (photoSize == null) {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs, AndroidUtilities.dp(50.0f));
                        }
                        if (!(photoSize == null || (photoSize instanceof TL_photoSizeEmpty) || (photoSize.location instanceof TL_fileLocationUnavailable))) {
                            if (this.pinnedMessageObject.type != 13) {
                                if (this.pinnedMessageObject.isRoundVideo()) {
                                    this.pinnedMessageImageView.setRoundRadius(AndroidUtilities.dp(16.0f));
                                } else {
                                    this.pinnedMessageImageView.setRoundRadius(0);
                                }
                                this.pinnedImageLocation = photoSize.location;
                                this.pinnedMessageImageView.setImage(this.pinnedImageLocation, "50_50", (Drawable) null);
                                this.pinnedMessageImageView.setVisibility(0);
                                dp = AndroidUtilities.dp(55.0f);
                                layoutParams2.leftMargin = dp;
                                layoutParams1.leftMargin = dp;
                                this.pinnedMessageNameTextView.setLayoutParams(layoutParams1);
                                this.pinnedMessageTextView.setLayoutParams(layoutParams2);
                                this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
                                if (this.pinnedMessageObject.type == 14) {
                                    this.pinnedMessageTextView.setText(String.format("%s - %s", new Object[]{this.pinnedMessageObject.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()}));
                                } else if (this.pinnedMessageObject.messageOwner.media instanceof TL_messageMediaGame) {
                                    this.pinnedMessageTextView.setText(Emoji.replaceEmoji(this.pinnedMessageObject.messageOwner.media.game.title, this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                } else if (this.pinnedMessageObject.messageText != null) {
                                    mess = this.pinnedMessageObject.messageText.toString();
                                    if (mess.length() > 150) {
                                        mess = mess.substring(0, 150);
                                    }
                                    this.pinnedMessageTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                }
                            }
                        }
                        this.pinnedMessageImageView.setImageBitmap(null);
                        this.pinnedImageLocation = null;
                        this.pinnedMessageImageView.setVisibility(4);
                        dp = AndroidUtilities.dp(18.0f);
                        layoutParams2.leftMargin = dp;
                        layoutParams1.leftMargin = dp;
                        this.pinnedMessageNameTextView.setLayoutParams(layoutParams1);
                        this.pinnedMessageTextView.setLayoutParams(layoutParams2);
                        this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
                        if (this.pinnedMessageObject.type == 14) {
                            this.pinnedMessageTextView.setText(String.format("%s - %s", new Object[]{this.pinnedMessageObject.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()}));
                        } else if (this.pinnedMessageObject.messageOwner.media instanceof TL_messageMediaGame) {
                            this.pinnedMessageTextView.setText(Emoji.replaceEmoji(this.pinnedMessageObject.messageOwner.media.game.title, this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                        } else if (this.pinnedMessageObject.messageText != null) {
                            mess = this.pinnedMessageObject.messageText.toString();
                            if (mess.length() > 150) {
                                mess = mess.substring(0, 150);
                            }
                            this.pinnedMessageTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                        }
                    } else {
                        this.pinnedImageLocation = null;
                        hidePinnedMessageView(animated);
                        if (this.loadingPinnedMessage != this.info.pinned_msg_id) {
                            this.loadingPinnedMessage = this.info.pinned_msg_id;
                            DataQuery.getInstance(this.currentAccount).loadPinnedMessage(this.currentChat.id, this.info.pinned_msg_id, true);
                        }
                    }
                    checkListViewPaddings();
                }
            }
            hidePinnedMessageView(animated);
            checkListViewPaddings();
        }
    }

    private void updateSpamView() {
        if (this.reportSpamView == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m0d("no spam view found");
            }
            return;
        }
        boolean show;
        SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
        if (this.currentEncryptedChat != null) {
            show = (this.currentEncryptedChat.admin_id == UserConfig.getInstance(this.currentAccount).getClientUserId() || ContactsController.getInstance(this.currentAccount).isLoadingContacts() || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) != null) ? false : true;
            if (show) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("spam3_");
                stringBuilder.append(this.dialog_id);
                if (preferences.getInt(stringBuilder.toString(), 0) == 1) {
                    show = false;
                }
            }
        } else {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("spam3_");
            stringBuilder2.append(this.dialog_id);
            show = preferences.getInt(stringBuilder2.toString(), 0) == 2;
        }
        AnimatorSet animatorSet;
        Animator[] animatorArr;
        if (show) {
            if (this.reportSpamView.getTag() != null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.m0d("show spam button");
                }
                this.reportSpamView.setTag(null);
                this.reportSpamView.setVisibility(0);
                if (this.reportSpamViewAnimator != null) {
                    this.reportSpamViewAnimator.cancel();
                }
                this.reportSpamViewAnimator = new AnimatorSet();
                animatorSet = this.reportSpamViewAnimator;
                animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.reportSpamView, "translationY", new float[]{0.0f});
                animatorSet.playTogether(animatorArr);
                this.reportSpamViewAnimator.setDuration(200);
                this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }
                });
                this.reportSpamViewAnimator.start();
            }
        } else if (this.reportSpamView.getTag() == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.m0d("hide spam button");
            }
            this.reportSpamView.setTag(Integer.valueOf(1));
            if (this.reportSpamViewAnimator != null) {
                this.reportSpamViewAnimator.cancel();
            }
            this.reportSpamViewAnimator = new AnimatorSet();
            animatorSet = this.reportSpamViewAnimator;
            animatorArr = new Animator[1];
            animatorArr[0] = ObjectAnimator.ofFloat(this.reportSpamView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
            animatorSet.playTogether(animatorArr);
            this.reportSpamViewAnimator.setDuration(200);
            this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                        ChatActivity.this.reportSpamView.setVisibility(8);
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }

                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }
            });
            this.reportSpamViewAnimator.start();
        }
        checkListViewPaddings();
    }

    private void updateContactStatus() {
        if (this.addContactItem != null) {
            if (this.currentUser == null) {
                this.addContactItem.setVisibility(8);
            } else {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(this.currentUser.id));
                if (user != null) {
                    this.currentUser = user;
                }
                if (!((this.currentEncryptedChat != null && !(this.currentEncryptedChat instanceof TL_encryptedChat)) || MessagesController.isSupportId(this.currentUser.id) || UserObject.isDeleted(this.currentUser) || ContactsController.getInstance(this.currentAccount).isLoadingContacts())) {
                    if (!(TextUtils.isEmpty(this.currentUser.phone) || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) == null)) {
                        if (ContactsController.getInstance(this.currentAccount).contactsDict.size() == 0) {
                            if (!ContactsController.getInstance(this.currentAccount).isLoadingContacts()) {
                            }
                        }
                    }
                    this.addContactItem.setVisibility(0);
                    if (TextUtils.isEmpty(this.currentUser.phone)) {
                        this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                        this.addToContactsButton.setVisibility(8);
                        this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                        this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    } else {
                        this.addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
                        this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(50.0f), 0);
                        this.addToContactsButton.setVisibility(0);
                        this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    }
                }
                this.addContactItem.setVisibility(8);
            }
            checkListViewPaddings();
        }
    }

    private void checkListViewPaddingsInternal() {
        if (this.chatLayoutManager != null) {
            try {
                int pos;
                int firstVisPos = this.chatLayoutManager.findFirstVisibleItemPosition();
                int lastVisPos = -1;
                if (!(this.wasManualScroll || this.unreadMessageObject == null)) {
                    pos = this.messages.indexOf(this.unreadMessageObject);
                    if (pos >= 0) {
                        lastVisPos = pos + this.chatAdapter.messagesStartRow;
                        firstVisPos = -1;
                    }
                }
                pos = 0;
                if (firstVisPos != -1) {
                    View firstVisView = this.chatLayoutManager.findViewByPosition(firstVisPos);
                    pos = firstVisView == null ? 0 : (this.chatListView.getMeasuredHeight() - firstVisView.getBottom()) - this.chatListView.getPaddingBottom();
                }
                if (this.chatListView.getPaddingTop() != AndroidUtilities.dp(52.0f) && ((this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) || (this.reportSpamView != null && this.reportSpamView.getTag() == null))) {
                    this.chatListView.setPadding(0, AndroidUtilities.dp(52.0f), 0, AndroidUtilities.dp(3.0f));
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.floatingDateView.getLayoutParams();
                    layoutParams.topMargin = AndroidUtilities.dp(52.0f);
                    this.floatingDateView.setLayoutParams(layoutParams);
                    this.chatListView.setTopGlowOffset(AndroidUtilities.dp(48.0f));
                } else if (this.chatListView.getPaddingTop() == AndroidUtilities.dp(4.0f) || ((this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) || (this.reportSpamView != null && this.reportSpamView.getTag() == null))) {
                    firstVisPos = -1;
                } else {
                    this.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.floatingDateView.getLayoutParams();
                    layoutParams2.topMargin = AndroidUtilities.dp(4.0f);
                    this.floatingDateView.setLayoutParams(layoutParams2);
                    this.chatListView.setTopGlowOffset(0);
                }
                if (firstVisPos != -1) {
                    this.chatLayoutManager.scrollToPositionWithOffset(firstVisPos, pos);
                } else if (lastVisPos != -1) {
                    this.chatLayoutManager.scrollToPositionWithOffset(lastVisPos, ((this.chatListView.getMeasuredHeight() - this.chatListView.getPaddingBottom()) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
                }
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }
    }

    private void checkListViewPaddings() {
        if (this.wasManualScroll || this.unreadMessageObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    ChatActivity.this.checkListViewPaddingsInternal();
                }
            });
            return;
        }
        if (this.messages.indexOf(this.unreadMessageObject) >= 0) {
            this.fixPaddingsInLayout = true;
            if (this.fragmentView != null) {
                this.fragmentView.requestLayout();
            }
        }
    }

    private void checkRaiseSensors() {
        if (this.chatActivityEnterView != null && this.chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_media) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (ApplicationLoader.mainInterfacePaused || ((this.bottomOverlayChat != null && this.bottomOverlayChat.getVisibility() == 0) || ((this.bottomOverlay != null && this.bottomOverlay.getVisibility() == 0) || (this.searchContainer != null && this.searchContainer.getVisibility() == 0)))) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else {
            MediaController.getInstance().setAllowStartRecord(true);
        }
    }

    public void dismissCurrentDialig() {
        if (this.chatAttachAlert == null || this.visibleDialog != this.chatAttachAlert) {
            super.dismissCurrentDialig();
            return;
        }
        this.chatAttachAlert.closeCamera(false);
        this.chatAttachAlert.dismissInternal();
        this.chatAttachAlert.hideCamera(true);
    }

    public void onResume() {
        super.onResume();
        AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.onResume();
        }
        checkActionBarMenu();
        if (!(this.replyImageLocation == null || this.replyImageView == null)) {
            this.replyImageView.setImage(this.replyImageLocation, "50_50", (Drawable) null);
        }
        if (!(this.pinnedImageLocation == null || this.pinnedMessageImageView == null)) {
            this.pinnedMessageImageView.setImage(this.pinnedImageLocation, "50_50", (Drawable) null);
        }
        NotificationsController.getInstance(this.currentAccount).setOpenedDialogId(this.dialog_id);
        if (this.scrollToTopOnResume) {
            if (!this.scrollToTopUnReadOnResume || this.scrollToMessage == null) {
                moveScrollToLastMessage();
            } else if (this.chatListView != null) {
                int yOffset;
                boolean bottom = true;
                if (this.scrollToMessagePosition == -9000) {
                    yOffset = getScrollOffsetForMessage(this.scrollToMessage);
                    bottom = false;
                } else if (this.scrollToMessagePosition == -10000) {
                    yOffset = -AndroidUtilities.dp(11.0f);
                    bottom = false;
                } else {
                    yOffset = this.scrollToMessagePosition;
                }
                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), yOffset, bottom);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            if (this.chatAdapter != null) {
                this.chatAdapter.notifyDataSetChanged();
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        if (!(this.bottomOverlayChat == null || this.bottomOverlayChat.getVisibility() == 0)) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    ChatActivity.this.openVideoEditor(ChatActivity.this.startVideoEdit, null);
                    ChatActivity.this.startVideoEdit = null;
                }
            });
        }
        if (this.chatListView != null && (this.chatActivityEnterView == null || !this.chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
    }

    public void onPause() {
        super.onPause();
        MessagesController.getInstance(this.currentAccount).markDialogAsReadNow(this.dialog_id);
        MediaController.getInstance().stopRaiseToEarSensors(this);
        this.paused = true;
        this.wasPaused = true;
        NotificationsController.getInstance(this.currentAccount).setOpenedDialogId(0);
        CharSequence draftMessage = null;
        MessageObject replyMessage = null;
        boolean searchWebpage = true;
        if (!(this.ignoreAttachOnPause || r0.chatActivityEnterView == null || r0.bottomOverlayChat.getVisibility() == 0)) {
            r0.chatActivityEnterView.onPause();
            replyMessage = r0.replyingMessageObject;
            if (!r0.chatActivityEnterView.isEditingMessage()) {
                CharSequence text = AndroidUtilities.getTrimmedString(r0.chatActivityEnterView.getFieldText());
                if (!(TextUtils.isEmpty(text) || TextUtils.equals(text, "@gif"))) {
                    draftMessage = text;
                }
            }
            searchWebpage = r0.chatActivityEnterView.isMessageWebPageSearchEnabled();
            r0.chatActivityEnterView.setFieldFocused(false);
        }
        if (r0.chatAttachAlert != null) {
            if (r0.ignoreAttachOnPause) {
                r0.ignoreAttachOnPause = false;
            } else {
                r0.chatAttachAlert.onPause();
            }
        }
        CharSequence[] message = new CharSequence[]{draftMessage};
        DataQuery.getInstance(r0.currentAccount).saveDraft(r0.dialog_id, message[0], DataQuery.getInstance(r0.currentAccount).getEntities(message), replyMessage != null ? replyMessage.messageOwner : null, !searchWebpage);
        MessagesController.getInstance(r0.currentAccount).cancelTyping(0, r0.dialog_id);
        if (!r0.pausedOnLastMessage) {
            StringBuilder stringBuilder;
            Editor editor = MessagesController.getNotificationsSettings(r0.currentAccount).edit();
            int messageId = 0;
            int offset = 0;
            if (r0.chatLayoutManager != null) {
                int position = r0.chatLayoutManager.findFirstVisibleItemPosition();
                if (position != 0) {
                    Holder holder = (Holder) r0.chatListView.findViewHolderForAdapterPosition(position);
                    if (holder != null) {
                        int messageId2;
                        int mid = 0;
                        if (holder.itemView instanceof ChatMessageCell) {
                            mid = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                        } else if (holder.itemView instanceof ChatActionCell) {
                            mid = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                        }
                        if (mid == 0) {
                            holder = (Holder) r0.chatListView.findViewHolderForAdapterPosition(position + 1);
                        }
                        boolean ignore = false;
                        int a = position - 1;
                        while (a >= r0.chatAdapter.messagesStartRow) {
                            MessageObject messageObject = (MessageObject) r0.messages.get(a - r0.chatAdapter.messagesStartRow);
                            if (messageObject.getId() == 0) {
                                a--;
                            } else {
                                if (!messageObject.isOut() && messageObject.isUnread()) {
                                    ignore = true;
                                    messageId = 0;
                                }
                                if (!(holder == null || ignore)) {
                                    if (holder.itemView instanceof ChatMessageCell) {
                                        if (holder.itemView instanceof ChatActionCell) {
                                            messageId2 = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                                        }
                                        if ((messageId > 0 || r0.currentEncryptedChat != null) && (messageId >= 0 || r0.currentEncryptedChat == null)) {
                                            messageId = 0;
                                        } else {
                                            offset = holder.itemView.getBottom() - r0.chatListView.getMeasuredHeight();
                                            if (BuildVars.LOGS_ENABLED) {
                                                stringBuilder = new StringBuilder();
                                                stringBuilder.append("save offset = ");
                                                stringBuilder.append(offset);
                                                stringBuilder.append(" for mid ");
                                                stringBuilder.append(messageId);
                                                FileLog.m0d(stringBuilder.toString());
                                            }
                                        }
                                    } else {
                                        messageId2 = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                                    }
                                    messageId = messageId2;
                                    if (messageId > 0) {
                                    }
                                    messageId = 0;
                                }
                            }
                        }
                        if (holder.itemView instanceof ChatMessageCell) {
                            if (holder.itemView instanceof ChatActionCell) {
                                messageId2 = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                            }
                            if (messageId > 0) {
                            }
                            messageId = 0;
                        } else {
                            messageId2 = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                        }
                        messageId = messageId2;
                        if (messageId > 0) {
                        }
                        messageId = 0;
                    }
                }
            }
            if (messageId != 0) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditem");
                stringBuilder.append(r0.dialog_id);
                editor.putInt(stringBuilder.toString(), messageId);
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditemo");
                stringBuilder.append(r0.dialog_id);
                editor.putInt(stringBuilder.toString(), offset);
            } else {
                r0.pausedOnLastMessage = true;
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditem");
                stringBuilder.append(r0.dialog_id);
                editor.remove(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditemo");
                stringBuilder.append(r0.dialog_id);
                editor.remove(stringBuilder.toString());
            }
            editor.commit();
        }
        if (r0.currentUser != null) {
            r0.chatLeaveTime = System.currentTimeMillis();
            updateInformationForScreenshotDetector();
        }
    }

    private void applyDraftMaybe(boolean canClear) {
        if (this.chatActivityEnterView != null) {
            DraftMessage draftMessage = DataQuery.getInstance(this.currentAccount).getDraft(this.dialog_id);
            Message draftReplyMessage = (draftMessage == null || draftMessage.reply_to_msg_id == 0) ? null : DataQuery.getInstance(this.currentAccount).getDraftMessage(this.dialog_id);
            if (this.chatActivityEnterView.getFieldText() == null) {
                if (draftMessage != null) {
                    CharSequence message;
                    this.chatActivityEnterView.setWebPage(null, draftMessage.no_webpage ^ true);
                    if (draftMessage.entities.isEmpty()) {
                        message = draftMessage.message;
                    } else {
                        message = SpannableStringBuilder.valueOf(draftMessage.message);
                        DataQuery.getInstance(this.currentAccount);
                        DataQuery.sortEntities(draftMessage.entities);
                        int addToOffset = 0;
                        for (int a = 0; a < draftMessage.entities.size(); a++) {
                            int user_id;
                            MessageEntity entity = (MessageEntity) draftMessage.entities.get(a);
                            if (!(entity instanceof TL_inputMessageEntityMentionName)) {
                                if (!(entity instanceof TL_messageEntityMentionName)) {
                                    if (entity instanceof TL_messageEntityCode) {
                                        message.insert((entity.offset + entity.length) + addToOffset, "`");
                                        message.insert(entity.offset + addToOffset, "`");
                                        addToOffset += 2;
                                    } else if (entity instanceof TL_messageEntityPre) {
                                        message.insert((entity.offset + entity.length) + addToOffset, "```");
                                        message.insert(entity.offset + addToOffset, "```");
                                        addToOffset += 6;
                                    } else if (entity instanceof TL_messageEntityBold) {
                                        message.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), entity.offset + addToOffset, (entity.offset + entity.length) + addToOffset, 33);
                                    } else if (entity instanceof TL_messageEntityItalic) {
                                        message.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), entity.offset + addToOffset, (entity.offset + entity.length) + addToOffset, 33);
                                    }
                                }
                            }
                            if (entity instanceof TL_inputMessageEntityMentionName) {
                                user_id = ((TL_inputMessageEntityMentionName) entity).user_id.user_id;
                            } else {
                                user_id = ((TL_messageEntityMentionName) entity).user_id;
                            }
                            if ((entity.offset + addToOffset) + entity.length < message.length() && message.charAt((entity.offset + addToOffset) + entity.length) == ' ') {
                                entity.length++;
                            }
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
                            stringBuilder.append(user_id);
                            message.setSpan(new URLSpanUserMention(stringBuilder.toString(), 1), entity.offset + addToOffset, (entity.offset + addToOffset) + entity.length, 33);
                        }
                    }
                    this.chatActivityEnterView.setFieldText(message);
                    if (getArguments().getBoolean("hasUrl", false)) {
                        this.chatActivityEnterView.setSelection(draftMessage.message.indexOf(10) + 1);
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                if (ChatActivity.this.chatActivityEnterView != null) {
                                    ChatActivity.this.chatActivityEnterView.setFieldFocused(true);
                                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                                }
                            }
                        }, 700);
                    }
                }
            } else if (canClear && draftMessage == null) {
                this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                showReplyPanel(false, null, null, null, false);
            }
            if (this.replyingMessageObject == null && draftReplyMessage != null) {
                this.replyingMessageObject = new MessageObject(this.currentAccount, draftReplyMessage, MessagesController.getInstance(this.currentAccount).getUsers(), false);
                showReplyPanel(true, this.replyingMessageObject, null, null, false);
            }
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser != null) {
            if (this.currentEncryptedChat != null) {
                ArrayList<Long> visibleMessages = new ArrayList();
                if (this.chatListView != null) {
                    int count = this.chatListView.getChildCount();
                    for (int a = 0; a < count; a++) {
                        View view = this.chatListView.getChildAt(a);
                        MessageObject object = null;
                        if (view instanceof ChatMessageCell) {
                            object = ((ChatMessageCell) view).getMessageObject();
                        }
                        if (!(object == null || object.getId() >= 0 || object.messageOwner.random_id == 0)) {
                            visibleMessages.add(Long.valueOf(object.messageOwner.random_id));
                        }
                    }
                }
                MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, visibleMessages, 0);
            } else {
                SecretMediaViewer viewer = SecretMediaViewer.getInstance();
                MessageObject messageObject = viewer.getCurrentMessageObject();
                if (!(messageObject == null || messageObject.isOut())) {
                    MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, viewer.getOpenTime(), viewer.getCloseTime(), this.currentUser, null, null, messageObject.getId());
                }
            }
        }
    }

    private boolean fixLayoutInternal() {
        if (AndroidUtilities.isTablet() || ApplicationLoader.applicationContext.getResources().getConfiguration().orientation != 2) {
            this.selectedMessagesCountTextView.setTextSize(20);
        } else {
            this.selectedMessagesCountTextView.setTextSize(18);
        }
        int count = this.chatListView.getChildCount();
        HashMap<Long, GroupedMessages> newGroups = null;
        int a = 0;
        while (true) {
            boolean z = true;
            if (a >= count) {
                break;
            }
            View child = this.chatListView.getChildAt(a);
            if (child instanceof ChatMessageCell) {
                GroupedMessages groupedMessages = ((ChatMessageCell) child).getCurrentMessagesGroup();
                if (groupedMessages != null && groupedMessages.hasSibling) {
                    if (newGroups == null) {
                        newGroups = new HashMap();
                    }
                    if (!newGroups.containsKey(Long.valueOf(groupedMessages.groupId))) {
                        newGroups.put(Long.valueOf(groupedMessages.groupId), groupedMessages);
                        int idx = this.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                        if (idx >= 0) {
                            this.chatAdapter.notifyItemRangeChanged(this.chatAdapter.messagesStartRow + idx, groupedMessages.messages.size());
                        }
                    }
                }
            }
            a++;
        }
        if (!AndroidUtilities.isTablet()) {
            return true;
        }
        if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
            this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            if (this.fragmentContextView != null && this.fragmentContextView.getParent() == null) {
                ((ViewGroup) this.fragmentView).addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
            }
        } else {
            ActionBar actionBar = this.actionBar;
            if (!(this.parentLayout == null || this.parentLayout.fragmentsStack.isEmpty() || this.parentLayout.fragmentsStack.get(0) == this)) {
                if (this.parentLayout.fragmentsStack.size() != 1) {
                    z = false;
                }
            }
            actionBar.setBackButtonDrawable(new BackDrawable(z));
            if (!(this.fragmentContextView == null || this.fragmentContextView.getParent() == null)) {
                this.fragmentView.setPadding(0, 0, 0, 0);
                ((ViewGroup) this.fragmentView).removeView(this.fragmentContextView);
            }
        }
        return false;
    }

    private void fixLayout() {
        if (this.avatarContainer != null) {
            this.avatarContainer.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    public void onConfigurationChanged(Configuration newConfig) {
        fixLayout();
        if (this.visibleDialog instanceof DatePickerDialog) {
            this.visibleDialog.dismiss();
        }
    }

    private void createDeleteMessagesAlert(MessageObject finalSelectedObject, GroupedMessages selectedGroup) {
        createDeleteMessagesAlert(finalSelectedObject, selectedGroup, 1);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void createDeleteMessagesAlert(MessageObject finalSelectedObject, GroupedMessages finalSelectedGroup, int loadParticipant) {
        ChatActivity chatActivity = this;
        final MessageObject messageObject = finalSelectedObject;
        final GroupedMessages groupedMessages = finalSelectedGroup;
        int i = loadParticipant;
        if (getParentActivity() != null) {
            int count;
            int count2;
            final boolean[] checks;
            final boolean[] deleteForAll;
            User user;
            boolean z;
            boolean canRevokeInbox;
            int revokeTimeLimit;
            int revokeTimeLimit2;
            int i2;
            User user2;
            int revokeTimeLimit3;
            final User userFinal;
            final MessageObject messageObject2;
            final GroupedMessages groupedMessages2;
            final boolean[] zArr;
            Builder builder = new Builder(getParentActivity());
            if (groupedMessages != null) {
                count = groupedMessages.messages.size();
            } else if (messageObject != null) {
                count = 1;
            } else {
                count = chatActivity.selectedMessagesIds[0].size() + chatActivity.selectedMessagesIds[1].size();
                count2 = count;
                builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", count2)));
                builder.setTitle(LocaleController.getString("Message", R.string.Message));
                checks = new boolean[3];
                deleteForAll = new boolean[1];
                user = null;
                z = chatActivity.currentUser == null && MessagesController.getInstance(chatActivity.currentAccount).canRevokePmInbox;
                canRevokeInbox = z;
                if (chatActivity.currentUser == null) {
                    revokeTimeLimit = MessagesController.getInstance(chatActivity.currentAccount).revokeTimePmLimit;
                } else {
                    revokeTimeLimit = MessagesController.getInstance(chatActivity.currentAccount).revokeTimeLimit;
                }
                revokeTimeLimit2 = revokeTimeLimit;
                boolean canBan;
                boolean z2;
                int from_id;
                int a;
                boolean exit;
                boolean currentDate;
                int dp;
                float f;
                FrameLayout frameLayout;
                if (chatActivity.currentChat == null && chatActivity.currentChat.megagroup) {
                    canBan = ChatObject.canBlockUsers(chatActivity.currentChat);
                    count = ConnectionsManager.getInstance(chatActivity.currentAccount).getCurrentTime();
                    boolean z3;
                    int i3;
                    if (messageObject != null) {
                        User user3;
                        if (messageObject.messageOwner.action == null || (messageObject.messageOwner.action instanceof TL_messageActionEmpty) || (messageObject.messageOwner.action instanceof TL_messageActionChatDeleteUser)) {
                            user = MessagesController.getInstance(chatActivity.currentAccount).getUser(Integer.valueOf(messageObject.messageOwner.from_id));
                        }
                        if (finalSelectedObject.isSendError()) {
                            user3 = user;
                            z3 = false;
                        } else {
                            user3 = user;
                            z3 = false;
                            if (finalSelectedObject.getDialogId() == chatActivity.mergeDialogId && ((messageObject.messageOwner.action == null || (messageObject.messageOwner.action instanceof TL_messageActionEmpty)) && finalSelectedObject.isOut() && count - messageObject.messageOwner.date <= revokeTimeLimit2)) {
                                z2 = true;
                                i3 = count;
                                i2 = count2;
                                user = user3;
                            }
                        }
                        z2 = false;
                        i3 = count;
                        i2 = count2;
                        user = user3;
                    } else {
                        boolean exit2;
                        z3 = false;
                        from_id = -1;
                        a = 1;
                        while (a >= 0) {
                            revokeTimeLimit = from_id;
                            from_id = 0;
                            while (true) {
                                user2 = user;
                                if (from_id >= chatActivity.selectedMessagesIds[a].size()) {
                                    break;
                                }
                                MessageObject user4 = (MessageObject) chatActivity.selectedMessagesIds[a].valueAt(from_id);
                                i2 = count2;
                                if (revokeTimeLimit == -1) {
                                    revokeTimeLimit = user4.messageOwner.from_id;
                                }
                                if (revokeTimeLimit < 0) {
                                    break;
                                } else if (revokeTimeLimit != user4.messageOwner.from_id) {
                                    break;
                                } else {
                                    from_id++;
                                    user = user2;
                                    count2 = i2;
                                }
                                if (from_id == -2) {
                                    break;
                                }
                                a--;
                                user = user2;
                                count2 = i2;
                            }
                            from_id = -2;
                            if (from_id == -2) {
                                break;
                            }
                            a--;
                            user = user2;
                            count2 = i2;
                        }
                        user2 = user;
                        i2 = count2;
                        exit = false;
                        z2 = true;
                        while (z2 < false) {
                            revokeTimeLimit = 0;
                            while (revokeTimeLimit < chatActivity.selectedMessagesIds[z2].size()) {
                                MessageObject msg = (MessageObject) chatActivity.selectedMessagesIds[z2].valueAt(revokeTimeLimit);
                                exit2 = exit;
                                if (!z2) {
                                    i3 = count;
                                    if (!z2 && msg.isOut() == 0) {
                                        currentDate = false;
                                        exit = true;
                                    }
                                    revokeTimeLimit++;
                                    exit = exit2;
                                    count = i3;
                                } else if (msg.isOut() && msg.messageOwner.action == null) {
                                    i3 = count;
                                    if (count - msg.messageOwner.date <= 172800) {
                                        z3 = true;
                                    }
                                    revokeTimeLimit++;
                                    exit = exit2;
                                    count = i3;
                                } else {
                                    i3 = count;
                                    currentDate = false;
                                    exit = true;
                                }
                                z3 = currentDate;
                            }
                            i3 = count;
                            exit2 = exit;
                            if (exit) {
                                exit2 = exit;
                                z2 = z3;
                                break;
                            }
                            z2--;
                            count = i3;
                        }
                        exit2 = exit;
                        z2 = z3;
                        if (from_id != -1) {
                            user = MessagesController.getInstance(chatActivity.currentAccount).getUser(Integer.valueOf(from_id));
                        } else {
                            user = user2;
                        }
                    }
                    if (user == null || user.id == UserConfig.getInstance(chatActivity.currentAccount).getClientUserId() || i == 2) {
                        revokeTimeLimit3 = revokeTimeLimit2;
                        if (z2) {
                            FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
                            CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                            cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                            if (chatActivity.currentChat != null) {
                                cell.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                            } else {
                                cell.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(chatActivity.currentUser)), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                            }
                            if (LocaleController.isRTL) {
                                dp = AndroidUtilities.dp(16.0f);
                                f = 8.0f;
                            } else {
                                f = 8.0f;
                                dp = AndroidUtilities.dp(8.0f);
                            }
                            if (!LocaleController.isRTL) {
                                f = 16.0f;
                            }
                            cell.setPadding(dp, 0, AndroidUtilities.dp(f), 0);
                            frameLayout2.addView(cell, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                            cell.setOnClickListener(new View.OnClickListener() {
                                public void onClick(View v) {
                                    CheckBoxCell cell = (CheckBoxCell) v;
                                    deleteForAll[0] = deleteForAll[0] ^ true;
                                    cell.setChecked(deleteForAll[0], true);
                                }
                            });
                            builder.setView(frameLayout2);
                        } else {
                            user = null;
                        }
                    } else if (i != 1 || chatActivity.currentChat.creator) {
                        frameLayout = new FrameLayout(getParentActivity());
                        int num = 0;
                        revokeTimeLimit = 0;
                        while (revokeTimeLimit < 3) {
                            boolean canBan2;
                            if (canBan || revokeTimeLimit != 0) {
                                float f2;
                                CheckBoxCell cell2 = new CheckBoxCell(getParentActivity(), 1);
                                cell2.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                cell2.setTag(Integer.valueOf(revokeTimeLimit));
                                if (revokeTimeLimit == 0) {
                                    canBan2 = canBan;
                                    cell2.setText(LocaleController.getString("DeleteBanUser", R.string.DeleteBanUser), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                                } else {
                                    canBan2 = canBan;
                                    if (revokeTimeLimit == 1) {
                                        cell2.setText(LocaleController.getString("DeleteReportSpam", R.string.DeleteReportSpam), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                                    } else {
                                        if (revokeTimeLimit == 2) {
                                            Object[] objArr = new Object[1];
                                            revokeTimeLimit3 = revokeTimeLimit2;
                                            objArr[0] = ContactsController.formatName(user.first_name, user.last_name);
                                            cell2.setText(LocaleController.formatString("DeleteAllFrom", R.string.DeleteAllFrom, objArr), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                                        } else {
                                            revokeTimeLimit3 = revokeTimeLimit2;
                                        }
                                        if (LocaleController.isRTL) {
                                            f2 = 8.0f;
                                            revokeTimeLimit2 = AndroidUtilities.dp(8.0f);
                                        } else {
                                            revokeTimeLimit2 = AndroidUtilities.dp(16.0f);
                                            f2 = 8.0f;
                                        }
                                        if (!LocaleController.isRTL) {
                                            f2 = 16.0f;
                                        }
                                        cell2.setPadding(revokeTimeLimit2, 0, AndroidUtilities.dp(f2), 0);
                                        frameLayout.addView(cell2, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, (float) (48 * num), 0.0f, 0.0f));
                                        cell2.setOnClickListener(new View.OnClickListener() {
                                            public void onClick(View v) {
                                                if (v.isEnabled()) {
                                                    CheckBoxCell cell = (CheckBoxCell) v;
                                                    Integer num = (Integer) cell.getTag();
                                                    checks[num.intValue()] = checks[num.intValue()] ^ true;
                                                    cell.setChecked(checks[num.intValue()], true);
                                                }
                                            }
                                        });
                                        num++;
                                    }
                                }
                                revokeTimeLimit3 = revokeTimeLimit2;
                                if (LocaleController.isRTL) {
                                    f2 = 8.0f;
                                    revokeTimeLimit2 = AndroidUtilities.dp(8.0f);
                                } else {
                                    revokeTimeLimit2 = AndroidUtilities.dp(16.0f);
                                    f2 = 8.0f;
                                }
                                if (LocaleController.isRTL) {
                                    f2 = 16.0f;
                                }
                                cell2.setPadding(revokeTimeLimit2, 0, AndroidUtilities.dp(f2), 0);
                                frameLayout.addView(cell2, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, (float) (48 * num), 0.0f, 0.0f));
                                cell2.setOnClickListener(/* anonymous class already generated */);
                                num++;
                            } else {
                                canBan2 = canBan;
                                revokeTimeLimit3 = revokeTimeLimit2;
                            }
                            revokeTimeLimit++;
                            canBan = canBan2;
                            revokeTimeLimit2 = revokeTimeLimit3;
                        }
                        revokeTimeLimit3 = revokeTimeLimit2;
                        builder.setView(frameLayout);
                    } else {
                        final AlertDialog[] progressDialog = new AlertDialog[]{new AlertDialog(getParentActivity(), 1)};
                        TL_channels_getParticipant req = new TL_channels_getParticipant();
                        req.channel = MessagesController.getInputChannel(chatActivity.currentChat);
                        req.user_id = MessagesController.getInstance(chatActivity.currentAccount).getInputUser(user);
                        revokeTimeLimit = ConnectionsManager.getInstance(chatActivity.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(final TLObject response, TL_error error) {
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        try {
                                            progressDialog[0].dismiss();
                                        } catch (Throwable th) {
                                        }
                                        progressDialog[0] = null;
                                        int loadType = 2;
                                        if (response != null) {
                                            TL_channels_channelParticipant participant = response;
                                            if (!((participant.participant instanceof TL_channelParticipantAdmin) || (participant.participant instanceof TL_channelParticipantCreator))) {
                                                loadType = 0;
                                            }
                                        }
                                        ChatActivity.this.createDeleteMessagesAlert(messageObject, groupedMessages, loadType);
                                    }
                                });
                            }
                        });
                        if (revokeTimeLimit != 0) {
                            count2 = revokeTimeLimit;
                            AndroidUtilities.runOnUIThread(new Runnable() {

                                /* renamed from: org.telegram.ui.ChatActivity$98$1 */
                                class C10511 implements OnClickListener {
                                    C10511() {
                                    }

                                    public void onClick(DialogInterface dialog, int which) {
                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(count2, true);
                                        try {
                                            dialog.dismiss();
                                        } catch (Throwable e) {
                                            FileLog.m3e(e);
                                        }
                                    }
                                }

                                public void run() {
                                    if (progressDialog[0] != null) {
                                        progressDialog[0].setMessage(LocaleController.getString("Loading", R.string.Loading));
                                        progressDialog[0].setCanceledOnTouchOutside(false);
                                        progressDialog[0].setCancelable(false);
                                        progressDialog[0].setButton(-2, LocaleController.getString("Cancel", R.string.Cancel), new C10511());
                                        ChatActivity.this.showDialog(progressDialog[0]);
                                    }
                                }
                            }, 1000);
                        }
                        return;
                    }
                    user2 = user;
                    revokeTimeLimit2 = revokeTimeLimit3;
                } else {
                    user2 = null;
                    revokeTimeLimit3 = revokeTimeLimit2;
                    i2 = count2;
                    if (ChatObject.isChannel(chatActivity.currentChat) && chatActivity.currentEncryptedChat == null) {
                        z2 = false;
                        from_id = ConnectionsManager.getInstance(chatActivity.currentAccount).getCurrentTime();
                        if ((chatActivity.currentUser == null || chatActivity.currentUser.id == UserConfig.getInstance(chatActivity.currentAccount).getClientUserId() || chatActivity.currentUser.bot) && chatActivity.currentChat == null) {
                            revokeTimeLimit2 = revokeTimeLimit3;
                        } else if (messageObject != null) {
                            if (finalSelectedObject.isSendError()) {
                                revokeTimeLimit2 = revokeTimeLimit3;
                            } else {
                                if (messageObject.messageOwner.action != null) {
                                    if (messageObject.messageOwner.action instanceof TL_messageActionEmpty) {
                                    }
                                    revokeTimeLimit2 = revokeTimeLimit3;
                                }
                                if (finalSelectedObject.isOut() || canRevokeInbox || (chatActivity.currentChat != null && (chatActivity.currentChat.creator || (chatActivity.currentChat.admin && chatActivity.currentChat.admins_enabled)))) {
                                    revokeTimeLimit2 = revokeTimeLimit3;
                                    if (from_id - messageObject.messageOwner.date <= revokeTimeLimit2) {
                                        currentDate = true;
                                        z2 = currentDate;
                                    }
                                }
                                revokeTimeLimit2 = revokeTimeLimit3;
                            }
                            currentDate = false;
                            z2 = currentDate;
                        } else {
                            revokeTimeLimit2 = revokeTimeLimit3;
                            currentDate = false;
                            exit = false;
                            for (a = 1; a >= 0; a--) {
                                canBan = exit;
                                for (int b = 0; b < chatActivity.selectedMessagesIds[a].size(); b++) {
                                    MessageObject msg2 = (MessageObject) chatActivity.selectedMessagesIds[a].valueAt(b);
                                    if (msg2.messageOwner.action == null) {
                                        if (!(msg2.isOut() || canRevokeInbox)) {
                                            if (chatActivity.currentChat != null) {
                                                if (!chatActivity.currentChat.creator) {
                                                    if (chatActivity.currentChat.admin && chatActivity.currentChat.admins_enabled) {
                                                    }
                                                }
                                            }
                                            currentDate = true;
                                            canBan = false;
                                            break;
                                        }
                                        if (!canBan && from_id - msg2.messageOwner.date <= revokeTimeLimit2) {
                                            canBan = true;
                                        }
                                    }
                                }
                                exit = canBan;
                                if (currentDate) {
                                    break;
                                }
                            }
                            z2 = exit;
                        }
                        if (z2) {
                            frameLayout = new FrameLayout(getParentActivity());
                            CheckBoxCell cell3 = new CheckBoxCell(getParentActivity(), 1);
                            cell3.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                            if (chatActivity.currentChat != null) {
                                cell3.setText(LocaleController.getString("DeleteForAll", R.string.DeleteForAll), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                            } else {
                                cell3.setText(LocaleController.formatString("DeleteForUser", R.string.DeleteForUser, UserObject.getFirstName(chatActivity.currentUser)), TtmlNode.ANONYMOUS_REGION_ID, false, false);
                            }
                            if (LocaleController.isRTL) {
                                dp = AndroidUtilities.dp(16.0f);
                                f = 8.0f;
                            } else {
                                f = 8.0f;
                                dp = AndroidUtilities.dp(8.0f);
                            }
                            if (!LocaleController.isRTL) {
                                f = 16.0f;
                            }
                            cell3.setPadding(dp, 0, AndroidUtilities.dp(f), 0);
                            frameLayout.addView(cell3, LayoutHelper.createFrame(-1, 48.0f, 51, 0.0f, 0.0f, 0.0f, 0.0f));
                            cell3.setOnClickListener(new View.OnClickListener() {
                                public void onClick(View v) {
                                    CheckBoxCell cell = (CheckBoxCell) v;
                                    deleteForAll[0] = deleteForAll[0] ^ true;
                                    cell.setChecked(deleteForAll[0], true);
                                }
                            });
                            builder.setView(frameLayout);
                        }
                    } else {
                        revokeTimeLimit2 = revokeTimeLimit3;
                    }
                }
                userFinal = user2;
                messageObject2 = messageObject;
                groupedMessages2 = finalSelectedGroup;
                zArr = deleteForAll;
                revokeTimeLimit2 = checks;
                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {

                    /* renamed from: org.telegram.ui.ChatActivity$102$1 */
                    class C20041 implements RequestDelegate {
                        C20041() {
                        }

                        public void run(TLObject response, TL_error error) {
                        }
                    }

                    public void onClick(DialogInterface dialogInterface, int i) {
                        ArrayList<Integer> ids;
                        ArrayList<Long> random_ids;
                        if (messageObject2 != null) {
                            ids = new ArrayList();
                            ArrayList<Long> random_ids2 = null;
                            if (groupedMessages2 != null) {
                                random_ids = null;
                                for (int a = 0; a < groupedMessages2.messages.size(); a++) {
                                    MessageObject messageObject = (MessageObject) groupedMessages2.messages.get(a);
                                    ids.add(Integer.valueOf(messageObject.getId()));
                                    if (!(ChatActivity.this.currentEncryptedChat == null || messageObject.messageOwner.random_id == 0 || messageObject.type == 10)) {
                                        if (random_ids == null) {
                                            random_ids = new ArrayList();
                                        }
                                        random_ids.add(Long.valueOf(messageObject.messageOwner.random_id));
                                    }
                                }
                                random_ids2 = random_ids;
                            } else {
                                ids.add(Integer.valueOf(messageObject2.getId()));
                                if (!(ChatActivity.this.currentEncryptedChat == null || messageObject2.messageOwner.random_id == 0 || messageObject2.type == 10)) {
                                    random_ids2 = new ArrayList();
                                    random_ids2.add(Long.valueOf(messageObject2.messageOwner.random_id));
                                }
                            }
                            MessagesController.getInstance(ChatActivity.this.currentAccount).deleteMessages(ids, random_ids2, ChatActivity.this.currentEncryptedChat, messageObject2.messageOwner.to_id.channel_id, zArr[0]);
                        } else {
                            ArrayList<Integer> ids2 = null;
                            for (int a2 = 1; a2 >= 0; a2--) {
                                MessageObject msg;
                                ids2 = new ArrayList();
                                for (int b = 0; b < ChatActivity.this.selectedMessagesIds[a2].size(); b++) {
                                    ids2.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a2].keyAt(b)));
                                }
                                random_ids = null;
                                int channelId = 0;
                                if (!ids2.isEmpty()) {
                                    msg = (MessageObject) ChatActivity.this.selectedMessagesIds[a2].get(((Integer) ids2.get(0)).intValue());
                                    if (null == null && msg.messageOwner.to_id.channel_id != 0) {
                                        channelId = msg.messageOwner.to_id.channel_id;
                                    }
                                }
                                int channelId2 = channelId;
                                if (ChatActivity.this.currentEncryptedChat != null) {
                                    random_ids = new ArrayList();
                                    for (channelId = 0; channelId < ChatActivity.this.selectedMessagesIds[a2].size(); channelId++) {
                                        msg = (MessageObject) ChatActivity.this.selectedMessagesIds[a2].valueAt(channelId);
                                        if (!(msg.messageOwner.random_id == 0 || msg.type == 10)) {
                                            random_ids.add(Long.valueOf(msg.messageOwner.random_id));
                                        }
                                    }
                                }
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteMessages(ids2, random_ids, ChatActivity.this.currentEncryptedChat, channelId2, zArr[0]);
                            }
                            ChatActivity.this.actionBar.hideActionMode();
                            ChatActivity.this.updatePinnedMessageView(true);
                            ids = ids2;
                        }
                        if (userFinal != null) {
                            if (revokeTimeLimit2[0]) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat(ChatActivity.this.currentChat.id, userFinal, ChatActivity.this.info);
                            }
                            if (revokeTimeLimit2[1]) {
                                TL_channels_reportSpam req = new TL_channels_reportSpam();
                                req.channel = MessagesController.getInputChannel(ChatActivity.this.currentChat);
                                req.user_id = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputUser(userFinal);
                                req.id = ids;
                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new C20041());
                            }
                            if (revokeTimeLimit2[2]) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserChannelHistory(ChatActivity.this.currentChat, userFinal, 0);
                            }
                        }
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder.create());
            }
            count2 = count;
            builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", count2)));
            builder.setTitle(LocaleController.getString("Message", R.string.Message));
            checks = new boolean[3];
            deleteForAll = new boolean[1];
            user = null;
            if (chatActivity.currentUser == null) {
            }
            canRevokeInbox = z;
            if (chatActivity.currentUser == null) {
                revokeTimeLimit = MessagesController.getInstance(chatActivity.currentAccount).revokeTimeLimit;
            } else {
                revokeTimeLimit = MessagesController.getInstance(chatActivity.currentAccount).revokeTimePmLimit;
            }
            revokeTimeLimit2 = revokeTimeLimit;
            if (chatActivity.currentChat == null) {
            }
            user2 = null;
            revokeTimeLimit3 = revokeTimeLimit2;
            i2 = count2;
            if (ChatObject.isChannel(chatActivity.currentChat)) {
            }
            revokeTimeLimit2 = revokeTimeLimit3;
            userFinal = user2;
            messageObject2 = messageObject;
            groupedMessages2 = finalSelectedGroup;
            zArr = deleteForAll;
            revokeTimeLimit2 = checks;
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), /* anonymous class already generated */);
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        }
    }

    private void createMenu(View v, boolean single, boolean listView) {
        createMenu(v, single, listView, true);
    }

    private void createMenu(View v, boolean single, boolean listView, boolean searchGroup) {
        View view = v;
        if (!this.actionBar.isActionModeShowed()) {
            MessageObject message = null;
            if (view instanceof ChatMessageCell) {
                message = ((ChatMessageCell) view).getMessageObject();
            } else if (view instanceof ChatActionCell) {
                message = ((ChatActionCell) view).getMessageObject();
            }
            MessageObject message2 = message;
            if (message2 != null) {
                int type = getMessageType(message2);
                if (single && (message2.messageOwner.action instanceof TL_messageActionPinMessage)) {
                    scrollToMessageId(message2.messageOwner.reply_to_msg_id, message2.messageOwner.id, true, 0, false);
                    return;
                }
                GroupedMessages groupedMessages = null;
                r6.selectedObject = null;
                r6.selectedObjectGroup = null;
                r6.forwardingMessage = null;
                r6.forwardingMessageGroup = null;
                for (int a = 1; a >= 0; a--) {
                    r6.selectedMessagesCanCopyIds[a].clear();
                    r6.selectedMessagesCanStarIds[a].clear();
                    r6.selectedMessagesIds[a].clear();
                }
                r6.cantDeleteMessagesCount = 0;
                r6.canEditMessagesCount = 0;
                r6.actionBar.hideActionMode();
                updatePinnedMessageView(true);
                if (searchGroup) {
                    groupedMessages = getValidGroupedMessage(message2);
                }
                boolean allowChatActions = true;
                boolean allowPin = message2.getDialogId() != r6.mergeDialogId && message2.getId() > 0 && ChatObject.isChannel(r6.currentChat) && ((r6.currentChat.creator || (r6.currentChat.admin_rights != null && ((r6.currentChat.megagroup && r6.currentChat.admin_rights.pin_messages) || (!r6.currentChat.megagroup && r6.currentChat.admin_rights.edit_messages)))) && (message2.messageOwner.action == null || (message2.messageOwner.action instanceof TL_messageActionEmpty)));
                boolean allowUnpin = message2.getDialogId() != r6.mergeDialogId && r6.info != null && r6.info.pinned_msg_id == message2.getId() && (r6.currentChat.creator || (r6.currentChat.admin_rights != null && ((r6.currentChat.megagroup && r6.currentChat.admin_rights.pin_messages) || (!r6.currentChat.megagroup && r6.currentChat.admin_rights.edit_messages))));
                boolean allowEdit = groupedMessages == null && message2.canEditMessage(r6.currentChat) && !r6.chatActivityEnterView.hasAudioToSend() && message2.getDialogId() != r6.mergeDialogId;
                if ((r6.currentEncryptedChat != null && AndroidUtilities.getPeerLayerVersion(r6.currentEncryptedChat.layer) < 46) || ((type == 1 && (message2.getDialogId() == r6.mergeDialogId || message2.needDrawBluredPreview())) || ((r6.currentEncryptedChat == null && message2.getId() < 0) || ((r6.bottomOverlayChat != null && r6.bottomOverlayChat.getVisibility() == 0) || r6.isBroadcast || (r6.currentChat != null && (ChatObject.isNotInChat(r6.currentChat) || !((!ChatObject.isChannel(r6.currentChat) || ChatObject.canPost(r6.currentChat) || r6.currentChat.megagroup) && ChatObject.canSendMessages(r6.currentChat)))))))) {
                    allowChatActions = false;
                }
                if (!(single || type < 2 || type == 20 || message2.needDrawBluredPreview())) {
                    if (!message2.isLiveLocation()) {
                        int i;
                        ActionBarMenu actionMode = r6.actionBar.createActionMode();
                        View item = actionMode.getItem(11);
                        if (item != null) {
                            i = 0;
                            item.setVisibility(0);
                        } else {
                            i = 0;
                        }
                        item = actionMode.getItem(12);
                        if (item != null) {
                            item.setVisibility(i);
                        }
                        r6.actionBar.showActionMode();
                        updatePinnedMessageView(true);
                        AnimatorSet animatorSet = new AnimatorSet();
                        ArrayList<Animator> animators = new ArrayList();
                        int a2 = 0;
                        while (true) {
                            ActionBarMenu actionMode2 = actionMode;
                            int a3 = a2;
                            if (a3 < r6.actionModeViews.size()) {
                                View view2 = (View) r6.actionModeViews.get(a3);
                                view2.setPivotY((float) (ActionBar.getCurrentActionBarHeight() / 2));
                                AndroidUtilities.clearDrawableAnimation(view2);
                                View item2 = item;
                                animators.add(ObjectAnimator.ofFloat(view2, "scaleY", new float[]{0.1f, 1.0f}));
                                a2 = a3 + 1;
                                actionMode = actionMode2;
                                item = item2;
                                view = v;
                            } else {
                                animatorSet.playTogether(animators);
                                animatorSet.setDuration(250);
                                animatorSet.start();
                                addToSelectedMessages(message2, listView);
                                r6.selectedMessagesCountTextView.setNumber(r6.selectedMessagesIds[0].size() + r6.selectedMessagesIds[1].size(), false);
                                updateVisibleRows();
                                return;
                            }
                        }
                    }
                }
                boolean z = listView;
                if (type >= 0) {
                    r6.selectedObject = message2;
                    r6.selectedObjectGroup = groupedMessages;
                    if (getParentActivity() != null) {
                        Builder builder = new Builder(getParentActivity());
                        ArrayList<CharSequence> items = new ArrayList();
                        final ArrayList<Integer> options = new ArrayList();
                        if (type == 0) {
                            items.add(LocaleController.getString("Retry", R.string.Retry));
                            options.add(Integer.valueOf(0));
                            items.add(LocaleController.getString("Delete", R.string.Delete));
                            options.add(Integer.valueOf(1));
                        } else if (type == 1) {
                            if (r6.currentChat == null || r6.isBroadcast) {
                                if (message2.messageOwner.action != null && (message2.messageOwner.action instanceof TL_messageActionPhoneCall)) {
                                    TL_messageActionPhoneCall call = message2.messageOwner.action;
                                    Object string = (((call.reason instanceof TL_phoneCallDiscardReasonMissed) || (call.reason instanceof TL_phoneCallDiscardReasonBusy)) && !message2.isOutOwner()) ? LocaleController.getString("CallBack", R.string.CallBack) : LocaleController.getString("CallAgain", R.string.CallAgain);
                                    items.add(string);
                                    options.add(Integer.valueOf(18));
                                    if (VoIPHelper.canRateCall(call)) {
                                        items.add(LocaleController.getString("CallMessageReportProblem", R.string.CallMessageReportProblem));
                                        options.add(Integer.valueOf(19));
                                    }
                                }
                                if (single && r6.selectedObject.getId() > 0 && allowChatActions) {
                                    items.add(LocaleController.getString("Reply", R.string.Reply));
                                    options.add(Integer.valueOf(8));
                                }
                                if (message2.canDeleteMessage(r6.currentChat)) {
                                    items.add(LocaleController.getString("Delete", R.string.Delete));
                                    options.add(Integer.valueOf(1));
                                }
                            } else {
                                if (allowChatActions) {
                                    items.add(LocaleController.getString("Reply", R.string.Reply));
                                    options.add(Integer.valueOf(8));
                                }
                                if (allowUnpin) {
                                    items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
                                    options.add(Integer.valueOf(14));
                                } else if (allowPin) {
                                    items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
                                    options.add(Integer.valueOf(13));
                                }
                                if (allowEdit) {
                                    items.add(LocaleController.getString("Edit", R.string.Edit));
                                    options.add(Integer.valueOf(12));
                                }
                                if (r6.selectedObject.contentType == 0 && r6.selectedObject.getId() > 0 && !r6.selectedObject.isOut() && (ChatObject.isChannel(r6.currentChat) || (r6.currentUser != null && r6.currentUser.bot))) {
                                    items.add(LocaleController.getString("ReportChat", R.string.ReportChat));
                                    options.add(Integer.valueOf(edit));
                                }
                                if (message2.canDeleteMessage(r6.currentChat)) {
                                    items.add(LocaleController.getString("Delete", R.string.Delete));
                                    options.add(Integer.valueOf(1));
                                }
                            }
                        } else if (type == 20) {
                            items.add(LocaleController.getString("Retry", R.string.Retry));
                            options.add(Integer.valueOf(0));
                            items.add(LocaleController.getString("Copy", R.string.Copy));
                            options.add(Integer.valueOf(3));
                            items.add(LocaleController.getString("Delete", R.string.Delete));
                            options.add(Integer.valueOf(1));
                        } else if (r6.currentEncryptedChat == null) {
                            if (allowChatActions) {
                                items.add(LocaleController.getString("Reply", R.string.Reply));
                                options.add(Integer.valueOf(8));
                            }
                            if (r6.selectedObject.type == 0 || r6.selectedObject.caption != null) {
                                items.add(LocaleController.getString("Copy", R.string.Copy));
                                options.add(Integer.valueOf(3));
                            }
                            if (ChatObject.isChannel(r6.currentChat) && r6.currentChat.megagroup && !TextUtils.isEmpty(r6.currentChat.username) && ChatObject.hasAdminRights(r6.currentChat)) {
                                items.add(LocaleController.getString("CopyLink", R.string.CopyLink));
                                options.add(Integer.valueOf(22));
                            }
                            if (type == 3) {
                                if ((r6.selectedObject.messageOwner.media instanceof TL_messageMediaWebPage) && MessageObject.isNewGifDocument(r6.selectedObject.messageOwner.media.webpage.document)) {
                                    items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                    options.add(Integer.valueOf(11));
                                }
                            } else if (type == 4) {
                                if (r6.selectedObject.isVideo()) {
                                    if (!r6.selectedObject.needDrawBluredPreview()) {
                                        items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                        options.add(Integer.valueOf(4));
                                        items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                        options.add(Integer.valueOf(6));
                                    }
                                } else if (r6.selectedObject.isMusic()) {
                                    items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                    options.add(Integer.valueOf(10));
                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    options.add(Integer.valueOf(6));
                                } else if (r6.selectedObject.getDocument() != null) {
                                    if (MessageObject.isNewGifDocument(r6.selectedObject.getDocument())) {
                                        items.add(LocaleController.getString("SaveToGIFs", R.string.SaveToGIFs));
                                        options.add(Integer.valueOf(11));
                                    }
                                    items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                    options.add(Integer.valueOf(10));
                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    options.add(Integer.valueOf(6));
                                } else if (!r6.selectedObject.needDrawBluredPreview()) {
                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    options.add(Integer.valueOf(4));
                                }
                            } else if (type == 5) {
                                items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
                                options.add(Integer.valueOf(5));
                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                options.add(Integer.valueOf(10));
                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                options.add(Integer.valueOf(6));
                            } else if (type == 10) {
                                items.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
                                options.add(Integer.valueOf(5));
                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                options.add(Integer.valueOf(10));
                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                options.add(Integer.valueOf(6));
                            } else if (type == 6) {
                                items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                options.add(Integer.valueOf(7));
                                items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                options.add(Integer.valueOf(10));
                                items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                options.add(Integer.valueOf(6));
                            } else if (type == 7) {
                                if (r6.selectedObject.isMask()) {
                                    items.add(LocaleController.getString("AddToMasks", R.string.AddToMasks));
                                    options.add(Integer.valueOf(9));
                                } else {
                                    items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                                    options.add(Integer.valueOf(9));
                                    if (DataQuery.getInstance(r6.currentAccount).isStickerInFavorites(r6.selectedObject.getDocument())) {
                                        items.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
                                        options.add(Integer.valueOf(21));
                                    } else if (DataQuery.getInstance(r6.currentAccount).canAddStickerToFavorites()) {
                                        items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                        options.add(Integer.valueOf(20));
                                    }
                                }
                            } else if (type == 8) {
                                User user = MessagesController.getInstance(r6.currentAccount).getUser(Integer.valueOf(r6.selectedObject.messageOwner.media.user_id));
                                if (!(user == null || user.id == UserConfig.getInstance(r6.currentAccount).getClientUserId() || ContactsController.getInstance(r6.currentAccount).contactsDict.get(Integer.valueOf(user.id)) != null)) {
                                    items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                    options.add(Integer.valueOf(15));
                                }
                                if (!TextUtils.isEmpty(r6.selectedObject.messageOwner.media.phone_number)) {
                                    items.add(LocaleController.getString("Copy", R.string.Copy));
                                    options.add(Integer.valueOf(16));
                                    items.add(LocaleController.getString("Call", R.string.Call));
                                    options.add(Integer.valueOf(17));
                                }
                            } else if (type == 9) {
                                if (DataQuery.getInstance(r6.currentAccount).isStickerInFavorites(r6.selectedObject.getDocument())) {
                                    items.add(LocaleController.getString("DeleteFromFavorites", R.string.DeleteFromFavorites));
                                    options.add(Integer.valueOf(21));
                                } else {
                                    items.add(LocaleController.getString("AddToFavorites", R.string.AddToFavorites));
                                    options.add(Integer.valueOf(20));
                                }
                            }
                            if (!(r6.selectedObject.needDrawBluredPreview() || r6.selectedObject.isLiveLocation())) {
                                items.add(LocaleController.getString("Forward", R.string.Forward));
                                options.add(Integer.valueOf(2));
                            }
                            if (allowUnpin) {
                                items.add(LocaleController.getString("UnpinMessage", R.string.UnpinMessage));
                                options.add(Integer.valueOf(14));
                            } else if (allowPin) {
                                items.add(LocaleController.getString("PinMessage", R.string.PinMessage));
                                options.add(Integer.valueOf(13));
                            }
                            if (allowEdit) {
                                items.add(LocaleController.getString("Edit", R.string.Edit));
                                options.add(Integer.valueOf(12));
                            }
                            if (r6.selectedObject.contentType == 0 && r6.selectedObject.getId() > 0 && !r6.selectedObject.isOut() && (ChatObject.isChannel(r6.currentChat) || (r6.currentUser != null && r6.currentUser.bot))) {
                                items.add(LocaleController.getString("ReportChat", R.string.ReportChat));
                                options.add(Integer.valueOf(edit));
                            }
                            if (message2.canDeleteMessage(r6.currentChat)) {
                                items.add(LocaleController.getString("Delete", R.string.Delete));
                                options.add(Integer.valueOf(1));
                            }
                        } else {
                            if (allowChatActions) {
                                items.add(LocaleController.getString("Reply", R.string.Reply));
                                options.add(Integer.valueOf(8));
                            }
                            if (r6.selectedObject.type == 0 || r6.selectedObject.caption != null) {
                                items.add(LocaleController.getString("Copy", R.string.Copy));
                                options.add(Integer.valueOf(3));
                            }
                            if (type == 4) {
                                if (r6.selectedObject.isVideo()) {
                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    options.add(Integer.valueOf(4));
                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    options.add(Integer.valueOf(6));
                                } else if (r6.selectedObject.isMusic()) {
                                    items.add(LocaleController.getString("SaveToMusic", R.string.SaveToMusic));
                                    options.add(Integer.valueOf(10));
                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    options.add(Integer.valueOf(6));
                                } else if (r6.selectedObject.isVideo() || r6.selectedObject.getDocument() == null) {
                                    items.add(LocaleController.getString("SaveToGallery", R.string.SaveToGallery));
                                    options.add(Integer.valueOf(4));
                                } else {
                                    items.add(LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads));
                                    options.add(Integer.valueOf(10));
                                    items.add(LocaleController.getString("ShareFile", R.string.ShareFile));
                                    options.add(Integer.valueOf(6));
                                }
                            } else if (type == 5) {
                                items.add(LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile));
                                options.add(Integer.valueOf(5));
                            } else if (type == 10) {
                                items.add(LocaleController.getString("ApplyThemeFile", R.string.ApplyThemeFile));
                                options.add(Integer.valueOf(5));
                            } else if (type == 7) {
                                items.add(LocaleController.getString("AddToStickers", R.string.AddToStickers));
                                options.add(Integer.valueOf(9));
                            } else if (type == 8) {
                                User user2 = MessagesController.getInstance(r6.currentAccount).getUser(Integer.valueOf(r6.selectedObject.messageOwner.media.user_id));
                                if (!(user2 == null || user2.id == UserConfig.getInstance(r6.currentAccount).getClientUserId() || ContactsController.getInstance(r6.currentAccount).contactsDict.get(Integer.valueOf(user2.id)) != null)) {
                                    items.add(LocaleController.getString("AddContactTitle", R.string.AddContactTitle));
                                    options.add(Integer.valueOf(15));
                                }
                                if (!TextUtils.isEmpty(r6.selectedObject.messageOwner.media.phone_number)) {
                                    items.add(LocaleController.getString("Copy", R.string.Copy));
                                    options.add(Integer.valueOf(16));
                                    items.add(LocaleController.getString("Call", R.string.Call));
                                    options.add(Integer.valueOf(17));
                                }
                            }
                            items.add(LocaleController.getString("Delete", R.string.Delete));
                            options.add(Integer.valueOf(1));
                        }
                        if (!options.isEmpty()) {
                            builder.setItems((CharSequence[]) items.toArray(new CharSequence[items.size()]), new OnClickListener() {
                                public void onClick(DialogInterface dialogInterface, int i) {
                                    if (ChatActivity.this.selectedObject != null && i >= 0) {
                                        if (i < options.size()) {
                                            ChatActivity.this.processSelectedOption(((Integer) options.get(i)).intValue());
                                        }
                                    }
                                }
                            });
                            builder.setTitle(LocaleController.getString("Message", R.string.Message));
                            showDialog(builder.create());
                        }
                    }
                }
            }
        }
    }

    private void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject != null) {
            if (getParentActivity() != null) {
                if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
                    this.actionBar.closeSearchField();
                    this.chatActivityEnterView.setFieldFocused();
                }
                this.mentionsAdapter.setNeedBotContext(false);
                this.chatListView.setOnItemLongClickListener((OnItemLongClickListenerExtended) null);
                this.chatListView.setOnItemClickListener((OnItemClickListenerExtended) null);
                this.chatListView.setClickable(false);
                this.chatListView.setLongClickable(false);
                this.chatActivityEnterView.setEditingMessageObject(messageObject, messageObject.isMediaEmpty() ^ true);
                updateBottomOverlay();
                this.actionModeTitleContainer.setVisibility(0);
                this.selectedMessagesCountTextView.setVisibility(8);
                checkEditTimer();
                this.chatActivityEnterView.setAllowStickersAndGifs(false, false);
                ActionBarMenu actionMode = this.actionBar.createActionMode();
                actionMode.getItem(19).setVisibility(8);
                actionMode.getItem(10).setVisibility(8);
                if (actionMode.getItem(11) != null) {
                    actionMode.getItem(11).setVisibility(8);
                }
                actionMode.getItem(12).setVisibility(8);
                actionMode.getItem(edit).setVisibility(8);
                actionMode.getItem(22).setVisibility(8);
                this.actionBar.showActionMode();
                updatePinnedMessageView(true);
                updateVisibleRows();
                TL_messages_getMessageEditData req = new TL_messages_getMessageEditData();
                req.peer = MessagesController.getInstance(this.currentAccount).getInputPeer((int) this.dialog_id);
                req.id = messageObject.getId();
                this.editingMessageObjectReqId = ConnectionsManager.getInstance(this.currentAccount).sendRequest(req, new RequestDelegate() {
                    public void run(final TLObject response, TL_error error) {
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.editingMessageObjectReqId = 0;
                                if (response == null) {
                                    Builder builder = new Builder(ChatActivity.this.getParentActivity());
                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                    builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                    ChatActivity.this.showDialog(builder.create());
                                    if (ChatActivity.this.chatActivityEnterView != null) {
                                        ChatActivity.this.chatActivityEnterView.setEditingMessageObject(null, false);
                                    }
                                } else if (ChatActivity.this.chatActivityEnterView != null) {
                                    ChatActivity.this.chatActivityEnterView.showEditDoneProgress(false, true);
                                }
                            }
                        });
                    }
                });
            }
        }
    }

    private String getMessageContent(MessageObject messageObject, int previousUid, boolean name) {
        String str = TtmlNode.ANONYMOUS_REGION_ID;
        if (name && previousUid != messageObject.messageOwner.from_id) {
            StringBuilder stringBuilder;
            if (messageObject.messageOwner.from_id > 0) {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(messageObject.messageOwner.from_id));
                if (user != null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append(ContactsController.formatName(user.first_name, user.last_name));
                    stringBuilder.append(":\n");
                    str = stringBuilder.toString();
                }
            } else if (messageObject.messageOwner.from_id < 0) {
                Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Integer.valueOf(-messageObject.messageOwner.from_id));
                if (chat != null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append(chat.title);
                    stringBuilder.append(":\n");
                    str = stringBuilder.toString();
                }
            }
        }
        StringBuilder stringBuilder2;
        if (messageObject.type == 0 && messageObject.messageOwner.message != null) {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageOwner.message);
            return stringBuilder2.toString();
        } else if (messageObject.messageOwner.media == null || messageObject.messageOwner.message == null) {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageText);
            return stringBuilder2.toString();
        } else {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageOwner.message);
            return stringBuilder2.toString();
        }
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String path = messageObject.messageOwner.attachPath;
        if (!(TextUtils.isEmpty(path) || new File(path).exists())) {
            path = null;
        }
        if (TextUtils.isEmpty(path)) {
            path = FileLoader.getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(path, getParentActivity(), messageObject.isVideo(), null, null);
    }

    private void processSelectedOption(int option) {
        if (this.selectedObject != null) {
            if (getParentActivity() != null) {
                int i = 3;
                int a = 0;
                Builder builder;
                String path;
                switch (option) {
                    case 0:
                        if (r7.selectedObjectGroup == null) {
                            if (SendMessagesHelper.getInstance(r7.currentAccount).retrySendMessage(r7.selectedObject, false)) {
                                updateVisibleRows();
                                moveScrollToLastMessage();
                                break;
                            }
                        }
                        boolean success = true;
                        for (i = 0; i < r7.selectedObjectGroup.messages.size(); i++) {
                            if (!SendMessagesHelper.getInstance(r7.currentAccount).retrySendMessage((MessageObject) r7.selectedObjectGroup.messages.get(i), false)) {
                                success = false;
                            }
                        }
                        if (success) {
                            moveScrollToLastMessage();
                        }
                        break;
                        break;
                    case 1:
                        if (getParentActivity() != null) {
                            createDeleteMessagesAlert(r7.selectedObject, r7.selectedObjectGroup);
                            break;
                        }
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                    case 2:
                        r7.forwardingMessage = r7.selectedObject;
                        r7.forwardingMessageGroup = r7.selectedObjectGroup;
                        Bundle args = new Bundle();
                        args.putBoolean("onlySelect", true);
                        args.putInt("dialogsType", 3);
                        DialogsActivity fragment = new DialogsActivity(args);
                        fragment.setDelegate(r7);
                        presentFragment(fragment);
                        break;
                    case 3:
                        AndroidUtilities.addToClipboard(getMessageContent(r7.selectedObject, 0, false));
                        break;
                    case 4:
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            if (r7.selectedObjectGroup == null) {
                                saveMessageToGallery(r7.selectedObject);
                                break;
                            }
                            while (true) {
                                i = a;
                                if (i >= r7.selectedObjectGroup.messages.size()) {
                                    break;
                                }
                                saveMessageToGallery((MessageObject) r7.selectedObjectGroup.messages.get(i));
                                a = i + 1;
                            }
                        } else {
                            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                            r7.selectedObject = null;
                            r7.selectedObjectGroup = null;
                            return;
                        }
                        break;
                    case 5:
                        File f;
                        File locFile = null;
                        if (!TextUtils.isEmpty(r7.selectedObject.messageOwner.attachPath)) {
                            f = new File(r7.selectedObject.messageOwner.attachPath);
                            if (f.exists()) {
                                locFile = f;
                            }
                        }
                        if (locFile == null) {
                            f = FileLoader.getPathToMessage(r7.selectedObject.messageOwner);
                            if (f.exists()) {
                                locFile = f;
                            }
                        }
                        if (locFile != null) {
                            if (!locFile.getName().toLowerCase().endsWith("attheme")) {
                                if (!LocaleController.getInstance().applyLanguageFile(locFile, r7.currentAccount)) {
                                    if (getParentActivity() != null) {
                                        Builder builder2 = new Builder(getParentActivity());
                                        builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                        builder2.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
                                        builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                        showDialog(builder2.create());
                                        break;
                                    }
                                    r7.selectedObject = null;
                                    r7.selectedObjectGroup = null;
                                    return;
                                }
                                presentFragment(new LanguageSelectActivity());
                                break;
                            }
                            if (r7.chatLayoutManager != null) {
                                int lastPosition = r7.chatLayoutManager.findFirstVisibleItemPosition();
                                if (lastPosition != 0) {
                                    r7.scrollToPositionOnRecreate = lastPosition;
                                    Holder holder = (Holder) r7.chatListView.findViewHolderForAdapterPosition(r7.scrollToPositionOnRecreate);
                                    if (holder != null) {
                                        r7.scrollToOffsetOnRecreate = (r7.chatListView.getMeasuredHeight() - holder.itemView.getBottom()) - r7.chatListView.getPaddingBottom();
                                    } else {
                                        r7.scrollToPositionOnRecreate = -1;
                                    }
                                } else {
                                    r7.scrollToPositionOnRecreate = -1;
                                }
                            }
                            ThemeInfo themeInfo = Theme.applyThemeFile(locFile, r7.selectedObject.getDocumentName(), true);
                            if (themeInfo != null) {
                                presentFragment(new ThemePreviewActivity(locFile, themeInfo));
                            } else {
                                r7.scrollToPositionOnRecreate = -1;
                                if (getParentActivity() == null) {
                                    r7.selectedObject = null;
                                    r7.selectedObjectGroup = null;
                                    return;
                                }
                                builder = new Builder(getParentActivity());
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                showDialog(builder.create());
                            }
                            break;
                        }
                        break;
                    case 6:
                        path = r7.selectedObject.messageOwner.attachPath;
                        if (!(path == null || path.length() <= 0 || new File(path).exists())) {
                            path = null;
                        }
                        if (path == null || path.length() == 0) {
                            path = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                        }
                        Intent intent = new Intent("android.intent.action.SEND");
                        intent.setType(r7.selectedObject.getDocument().mime_type);
                        File f2 = new File(path);
                        if (VERSION.SDK_INT >= 24) {
                            try {
                                intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", f2));
                                intent.setFlags(1);
                            } catch (Exception e) {
                                Exception ignore = e;
                                intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f2));
                            }
                        } else {
                            intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f2));
                        }
                        getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
                        break;
                    case 7:
                        path = r7.selectedObject.messageOwner.attachPath;
                        if (!(path == null || path.length() <= 0 || new File(path).exists())) {
                            path = null;
                        }
                        if (path == null || path.length() == 0) {
                            path = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                        }
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            MediaController.saveFile(path, getParentActivity(), 0, null, null);
                            break;
                        }
                        getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                        break;
                    case 8:
                        showReplyPanel(true, r7.selectedObject, null, null, false);
                        break;
                    case 9:
                        Context parentActivity = getParentActivity();
                        InputStickerSet inputStickerSet = r7.selectedObject.getInputStickerSet();
                        StickersAlertDelegate stickersAlertDelegate = (r7.bottomOverlayChat.getVisibility() == 0 || !ChatObject.canSendStickers(r7.currentChat)) ? null : r7.chatActivityEnterView;
                        showDialog(new StickersAlert(parentActivity, r7, inputStickerSet, null, stickersAlertDelegate));
                        break;
                    case 10:
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            String fileName = FileLoader.getDocumentFileName(r7.selectedObject.getDocument());
                            if (TextUtils.isEmpty(fileName)) {
                                fileName = r7.selectedObject.getFileName();
                            }
                            String path2 = r7.selectedObject.messageOwner.attachPath;
                            if (!(path2 == null || path2.length() <= 0 || new File(path2).exists())) {
                                path2 = null;
                            }
                            if (path2 == null || path2.length() == 0) {
                                path2 = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                            }
                            Context parentActivity2 = getParentActivity();
                            if (!r7.selectedObject.isMusic()) {
                                i = 2;
                            }
                            MediaController.saveFile(path2, parentActivity2, i, fileName, r7.selectedObject.getDocument() != null ? r7.selectedObject.getDocument().mime_type : TtmlNode.ANONYMOUS_REGION_ID);
                            break;
                        }
                        getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                    case 11:
                        Document document = r7.selectedObject.getDocument();
                        MessagesController.getInstance(r7.currentAccount).saveGif(document);
                        showGifHint();
                        r7.chatActivityEnterView.addRecentGif(document);
                        break;
                    case 12:
                        startEditingMessageObject(r7.selectedObject);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        break;
                    case 13:
                        final boolean[] checks;
                        i = r7.selectedObject.getId();
                        builder = new Builder(getParentActivity());
                        if (ChatObject.isChannel(r7.currentChat) && r7.currentChat.megagroup) {
                            builder.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
                            checks = new boolean[]{true};
                            FrameLayout frameLayout = new FrameLayout(getParentActivity());
                            CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                            cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                            cell.setText(LocaleController.getString("PinNotify", R.string.PinNotify), TtmlNode.ANONYMOUS_REGION_ID, true, false);
                            cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                            frameLayout.addView(cell, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                            cell.setOnClickListener(new View.OnClickListener() {
                                public void onClick(View v) {
                                    CheckBoxCell cell = (CheckBoxCell) v;
                                    checks[0] = checks[0] ^ true;
                                    cell.setChecked(checks[0], true);
                                }
                            });
                            builder.setView(frameLayout);
                        } else {
                            builder.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
                            checks = new boolean[]{false};
                        }
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {
                            public void onClick(DialogInterface dialogInterface, int i) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, i, checks[0]);
                            }
                        });
                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder.create());
                        break;
                    case 14:
                        Builder builder3 = new Builder(getParentActivity());
                        builder3.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
                        builder3.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {
                            public void onClick(DialogInterface dialogInterface, int i) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, 0, false);
                            }
                        });
                        builder3.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder3.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder3.create());
                        break;
                    case 15:
                        Bundle args2 = new Bundle();
                        args2.putInt("user_id", r7.selectedObject.messageOwner.media.user_id);
                        args2.putString("phone", r7.selectedObject.messageOwner.media.phone_number);
                        args2.putBoolean("addContact", true);
                        presentFragment(new ContactAddActivity(args2));
                        break;
                    case 16:
                        AndroidUtilities.addToClipboard(r7.selectedObject.messageOwner.media.phone_number);
                        break;
                    case 17:
                        try {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("tel:");
                            stringBuilder.append(r7.selectedObject.messageOwner.media.phone_number);
                            Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse(stringBuilder.toString()));
                            intent2.addFlags(268435456);
                            getParentActivity().startActivityForResult(intent2, 500);
                            break;
                        } catch (Throwable e2) {
                            FileLog.m3e(e2);
                            break;
                        }
                    case 18:
                        if (r7.currentUser != null) {
                            VoIPHelper.startCall(r7.currentUser, getParentActivity(), MessagesController.getInstance(r7.currentAccount).getUserFull(r7.currentUser.id));
                            break;
                        }
                        break;
                    case 19:
                        VoIPHelper.showRateAlert(getParentActivity(), (TL_messageActionPhoneCall) r7.selectedObject.messageOwner.action);
                        break;
                    case 20:
                        DataQuery.getInstance(r7.currentAccount).addRecentSticker(2, r7.selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                        break;
                    case 21:
                        DataQuery.getInstance(r7.currentAccount).addRecentSticker(2, r7.selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                        break;
                    case 22:
                        TL_channels_exportMessageLink req = new TL_channels_exportMessageLink();
                        req.id = r7.selectedObject.getId();
                        req.channel = MessagesController.getInputChannel(r7.currentChat);
                        ConnectionsManager.getInstance(r7.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(final TLObject response, TL_error error) {
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        if (response != null) {
                                            try {
                                                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", response.link));
                                                Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("LinkCopied", R.string.LinkCopied), 0).show();
                                            } catch (Throwable e) {
                                                FileLog.m3e(e);
                                            }
                                        }
                                    }
                                });
                            }
                        });
                        break;
                    case edit /*23*/:
                        showDialog(AlertsCreator.createReportAlert(getParentActivity(), r7.dialog_id, r7.selectedObject.getId(), r7));
                        break;
                    default:
                        break;
                }
                r7.selectedObject = null;
                r7.selectedObjectGroup = null;
            }
        }
    }

    public void didSelectDialogs(DialogsActivity fragment, ArrayList<Long> dids, CharSequence message, boolean param) {
        ArrayList<Long> arrayList = dids;
        int a = 0;
        if (this.forwardingMessage != null || r6.selectedMessagesIds[0].size() != 0 || r6.selectedMessagesIds[1].size() != 0) {
            int a2;
            ArrayList<MessageObject> fmessages;
            ArrayList<MessageObject> fmessages2 = new ArrayList();
            if (r6.forwardingMessage != null) {
                if (r6.forwardingMessageGroup != null) {
                    fmessages2.addAll(r6.forwardingMessageGroup.messages);
                } else {
                    fmessages2.add(r6.forwardingMessage);
                }
                r6.forwardingMessage = null;
                r6.forwardingMessageGroup = null;
            } else {
                for (a2 = 1; a2 >= 0; a2--) {
                    int b;
                    ArrayList<Integer> ids = new ArrayList();
                    for (b = 0; b < r6.selectedMessagesIds[a2].size(); b++) {
                        ids.add(Integer.valueOf(r6.selectedMessagesIds[a2].keyAt(b)));
                    }
                    Collections.sort(ids);
                    for (b = 0; b < ids.size(); b++) {
                        Integer id = (Integer) ids.get(b);
                        MessageObject messageObject = (MessageObject) r6.selectedMessagesIds[a2].get(id.intValue());
                        if (messageObject != null && id.intValue() > 0) {
                            fmessages2.add(messageObject);
                        }
                    }
                    r6.selectedMessagesCanCopyIds[a2].clear();
                    r6.selectedMessagesCanStarIds[a2].clear();
                    r6.selectedMessagesIds[a2].clear();
                }
                r6.cantDeleteMessagesCount = 0;
                r6.canEditMessagesCount = 0;
                r6.actionBar.hideActionMode();
                updatePinnedMessageView(true);
            }
            if (dids.size() > 1 || ((Long) arrayList.get(0)).longValue() == ((long) UserConfig.getInstance(r6.currentAccount).getClientUserId())) {
                fmessages = fmessages2;
            } else if (message != null) {
                fmessages = fmessages2;
            } else {
                long did = ((Long) arrayList.get(0)).longValue();
                if (did != r6.dialog_id) {
                    a2 = (int) did;
                    a = (int) (did >> 32);
                    Bundle args = new Bundle();
                    args.putBoolean("scrollToTopOnResume", r6.scrollToTopOnResume);
                    if (a2 == 0) {
                        args.putInt("enc_id", a);
                    } else if (a2 > 0) {
                        args.putInt("user_id", a2);
                    } else if (a2 < 0) {
                        args.putInt("chat_id", -a2);
                    }
                    if (a2 == 0) {
                        DialogsActivity dialogsActivity = fragment;
                    } else if (!MessagesController.getInstance(r6.currentAccount).checkCanOpenChat(args, fragment)) {
                        return;
                    }
                    ChatActivity chatActivity = new ChatActivity(args);
                    if (presentFragment(chatActivity, true)) {
                        chatActivity.showReplyPanel(true, null, fmessages2, null, false);
                        if (!AndroidUtilities.isTablet()) {
                            removeSelfFromStack();
                        }
                    } else {
                        fragment.finishFragment();
                    }
                    fmessages = fmessages2;
                } else {
                    fragment.finishFragment();
                    moveScrollToLastMessage();
                    showReplyPanel(true, null, fmessages2, null, null);
                    if (AndroidUtilities.isTablet()) {
                        r6.actionBar.hideActionMode();
                        updatePinnedMessageView(true);
                    }
                    updateVisibleRows();
                }
            }
            while (true) {
                a2 = a;
                if (a2 >= dids.size()) {
                    break;
                }
                long did2 = ((Long) arrayList.get(a2)).longValue();
                if (message != null) {
                    SendMessagesHelper.getInstance(r6.currentAccount).sendMessage(message.toString(), did2, null, null, true, null, null, null);
                }
                SendMessagesHelper.getInstance(r6.currentAccount).sendMessage(fmessages, did2);
                a = a2 + 1;
            }
            fragment.finishFragment();
        }
    }

    public boolean checkRecordLocked() {
        if (this.chatActivityEnterView == null || !this.chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        Builder builder = new Builder(getParentActivity());
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", R.string.DiscardVideoMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", R.string.DiscardVideoMessageDescription));
        } else {
            builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", R.string.DiscardVoiceMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", R.string.DiscardVoiceMessageDescription));
        }
        builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", R.string.DiscardVoiceMessageAction), new OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.cancelRecordingAudioVideo();
                }
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
        return true;
    }

    public boolean onBackPressed() {
        if (checkRecordLocked()) {
            return false;
        }
        if (this.actionBar != null && this.actionBar.isActionModeShowed()) {
            for (int a = 1; a >= 0; a--) {
                this.selectedMessagesIds[a].clear();
                this.selectedMessagesCanCopyIds[a].clear();
                this.selectedMessagesCanStarIds[a].clear();
            }
            this.chatActivityEnterView.setEditingMessageObject(null, false);
            this.actionBar.hideActionMode();
            updatePinnedMessageView(true);
            this.cantDeleteMessagesCount = 0;
            this.canEditMessagesCount = 0;
            updateVisibleRows();
            return false;
        } else if (this.chatActivityEnterView == null || !this.chatActivityEnterView.isPopupShowing()) {
            return true;
        } else {
            this.chatActivityEnterView.hidePopup(true);
            return false;
        }
    }

    private void updateVisibleRows() {
        if (this.chatListView != null) {
            int pos;
            int lastVisibleItem = -1;
            if (!(r0.wasManualScroll || r0.unreadMessageObject == null || r0.chatListView.getMeasuredHeight() == 0)) {
                pos = r0.messages.indexOf(r0.unreadMessageObject);
                if (pos >= 0) {
                    lastVisibleItem = r0.chatAdapter.messagesStartRow + pos;
                }
            }
            pos = r0.chatListView.getChildCount();
            Drawable drawable = null;
            MessageObject editingMessageObject = r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEditingMessageObject() : null;
            int a = 0;
            while (a < pos) {
                int i;
                View view = r0.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell cell = (ChatMessageCell) view;
                    MessageObject messageObject = cell.getMessageObject();
                    boolean disableSelection = false;
                    boolean selected = false;
                    boolean z = true;
                    if (r0.actionBar.isActionModeShowed()) {
                        i = a;
                        int idx = messageObject.getDialogId() == r0.dialog_id ? 0 : 1;
                        if (messageObject != editingMessageObject) {
                            if (r0.selectedMessagesIds[idx].indexOfKey(messageObject.getId()) < 0) {
                                view.setBackgroundDrawable(drawable);
                                disableSelection = true;
                            }
                        }
                        setCellSelectionBackground(messageObject, cell, idx);
                        selected = true;
                        disableSelection = true;
                    } else {
                        i = a;
                        view.setBackgroundDrawable(drawable);
                    }
                    cell.setMessageObject(cell.getMessageObject(), cell.getCurrentMessagesGroup(), cell.isPinnedBottom(), cell.isPinnedTop());
                    boolean z2 = !disableSelection;
                    boolean z3 = disableSelection && selected;
                    cell.setCheckPressed(z2, z3);
                    z2 = (r0.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID || messageObject == null || messageObject.getId() != r0.highlightMessageId) ? false : true;
                    cell.setHighlighted(z2);
                    if (r0.searchContainer != null && r0.searchContainer.getVisibility() == 0) {
                        DataQuery instance = DataQuery.getInstance(r0.currentAccount);
                        a = messageObject.getId();
                        DataQuery dataQuery = instance;
                        if (messageObject.getDialogId() != r0.mergeDialogId) {
                            z = false;
                        }
                        if (dataQuery.isMessageFound(a, z) && DataQuery.getInstance(r0.currentAccount).getLastSearchQuery() != null) {
                            cell.setHighlightedText(DataQuery.getInstance(r0.currentAccount).getLastSearchQuery());
                            drawable = null;
                        }
                    }
                    drawable = null;
                    cell.setHighlightedText(null);
                } else {
                    i = a;
                    if (view instanceof ChatActionCell) {
                        ChatActionCell cell2 = (ChatActionCell) view;
                        cell2.setMessageObject(cell2.getMessageObject());
                    }
                }
                a = i + 1;
            }
            r0.chatListView.invalidate();
            if (lastVisibleItem != -1) {
                r0.chatLayoutManager.scrollToPositionWithOffset(lastVisibleItem, ((r0.chatListView.getMeasuredHeight() - r0.chatListView.getPaddingBottom()) - r0.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
            }
        }
    }

    private void checkEditTimer() {
        if (this.chatActivityEnterView != null) {
            MessageObject messageObject = this.chatActivityEnterView.getEditingMessageObject();
            if (messageObject != null) {
                if (this.currentUser == null || !this.currentUser.self) {
                    int dt = messageObject.canEditMessageAnytime(this.currentChat) ? 360 : (MessagesController.getInstance(this.currentAccount).maxEditTime + 300) - Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date);
                    if (dt > 0) {
                        if (dt <= 300) {
                            if (this.actionModeSubTextView.getVisibility() != 0) {
                                this.actionModeSubTextView.setVisibility(0);
                            }
                            SimpleTextView simpleTextView = this.actionModeSubTextView;
                            Object[] objArr = new Object[1];
                            objArr[0] = String.format("%d:%02d", new Object[]{Integer.valueOf(dt / 60), Integer.valueOf(dt % 60)});
                            simpleTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, objArr));
                        } else if (this.actionModeSubTextView.getVisibility() != 8) {
                            this.actionModeSubTextView.setVisibility(8);
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.checkEditTimer();
                            }
                        }, 1000);
                    } else {
                        this.chatActivityEnterView.onEditTimeExpired();
                        this.actionModeSubTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired, new Object[0]));
                    }
                    return;
                }
                if (this.actionModeSubTextView.getVisibility() != 8) {
                    this.actionModeSubTextView.setVisibility(8);
                }
            }
        }
    }

    private ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject startMessageObject, boolean playingUnreadMedia) {
        ArrayList<MessageObject> messageObjects = new ArrayList();
        messageObjects.add(startMessageObject);
        int messageId = startMessageObject.getId();
        long startDialogId = startMessageObject.getDialogId();
        if (messageId != 0) {
            for (int a = this.messages.size() - 1; a >= 0; a--) {
                MessageObject messageObject = (MessageObject) this.messages.get(a);
                if (messageObject.getDialogId() != this.mergeDialogId || startMessageObject.getDialogId() == this.mergeDialogId) {
                    if (((this.currentEncryptedChat == null && messageObject.getId() > messageId) || (this.currentEncryptedChat != null && messageObject.getId() < messageId)) && ((messageObject.isVoice() || messageObject.isRoundVideo()) && (!playingUnreadMedia || (messageObject.isContentUnread() && !messageObject.isOut())))) {
                        messageObjects.add(messageObject);
                    }
                }
            }
        }
        return messageObjects;
    }

    private void alertUserOpenError(MessageObject message) {
        if (getParentActivity() != null) {
            Builder builder = new Builder(getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
            if (message.type == 3) {
                builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
            } else {
                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
            }
            showDialog(builder.create());
        }
    }

    private void openSearchWithText(String text) {
        boolean z = false;
        if (!this.actionBar.isSearchFieldVisible()) {
            this.avatarContainer.setVisibility(8);
            this.headerItem.setVisibility(8);
            this.attachItem.setVisibility(8);
            this.searchItem.setVisibility(0);
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if (text == null) {
            z = true;
        }
        this.openSearchKeyboard = z;
        this.searchItem.openSearch(this.openSearchKeyboard);
        if (text != null) {
            this.searchItem.getSearchField().setText(text);
            this.searchItem.getSearchField().setSelection(this.searchItem.getSearchField().length());
            DataQuery.getInstance(this.currentAccount).searchMessagesInChat(text, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.searchingUserMessages);
        }
        updatePinnedMessageView(true);
    }

    public void didSelectLocation(MessageMedia location, int live) {
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(location, this.dialog_id, this.replyingMessageObject, null, null);
        moveScrollToLastMessage();
        if (live == 1) {
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(this.currentAccount).cleanDraft(this.dialog_id, true);
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public User getCurrentUser() {
        return this.currentUser;
    }

    public Chat getCurrentChat() {
        return this.currentChat;
    }

    public boolean allowGroupPhotos() {
        if (this.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 73) {
                return false;
            }
        }
        return true;
    }

    public EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public ChatFull getCurrentChatInfo() {
        return this.info;
    }

    public void sendMedia(PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo) {
        ChatActivity chatActivity = this;
        PhotoEntry photoEntry2 = photoEntry;
        VideoEditedInfo videoEditedInfo2 = videoEditedInfo;
        if (photoEntry2.isVideo) {
            if (videoEditedInfo2 != null) {
                SendMessagesHelper.prepareSendingVideo(photoEntry2.path, videoEditedInfo2.estimatedSize, videoEditedInfo2.estimatedDuration, videoEditedInfo2.resultWidth, videoEditedInfo2.resultHeight, videoEditedInfo2, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.ttl);
            } else {
                SendMessagesHelper.prepareSendingVideo(photoEntry2.path, 0, 0, 0, 0, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.ttl);
            }
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        } else if (photoEntry2.imagePath != null) {
            SendMessagesHelper.prepareSendingPhoto(photoEntry2.imagePath, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.stickers, null, photoEntry2.ttl);
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        } else if (photoEntry2.path != null) {
            SendMessagesHelper.prepareSendingPhoto(photoEntry2.path, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.stickers, null, photoEntry2.ttl);
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        }
    }

    public void showOpenGameAlert(TL_game game, MessageObject messageObject, String urlStr, boolean ask, int uid) {
        TL_game tL_game = game;
        User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(uid));
        String name;
        final MessageObject messageObject2;
        final String str;
        if (ask) {
            Builder builder = new Builder(getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            if (user != null) {
                name = ContactsController.formatName(user.first_name, user.last_name);
            } else {
                name = TtmlNode.ANONYMOUS_REGION_ID;
            }
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, name));
            final TL_game tL_game2 = tL_game;
            messageObject2 = messageObject;
            str = urlStr;
            final int i = uid;
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new OnClickListener() {
                public void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.showOpenGameAlert(tL_game2, messageObject2, str, false, i);
                    Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("askgame_");
                    stringBuilder.append(i);
                    edit.putBoolean(stringBuilder.toString(), false).commit();
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (VERSION.SDK_INT < 21 || AndroidUtilities.isTablet() || !WebviewActivity.supportWebview()) {
            Activity parentActivity = getParentActivity();
            name = tL_game.short_name;
            String str2 = (user == null || user.username == null) ? TtmlNode.ANONYMOUS_REGION_ID : user.username;
            WebviewActivity.openGameInBrowser(urlStr, messageObject, parentActivity, name, str2);
        } else {
            if (r6.parentLayout.fragmentsStack.get(r6.parentLayout.fragmentsStack.size() - 1) == r6) {
                name = (user == null || TextUtils.isEmpty(user.username)) ? TtmlNode.ANONYMOUS_REGION_ID : user.username;
                presentFragment(new WebviewActivity(urlStr, name, tL_game.title, tL_game.short_name, messageObject));
            }
            messageObject2 = messageObject;
            str = urlStr;
        }
    }

    public void showOpenUrlAlert(final String url, boolean ask) {
        boolean z = false;
        if (!Browser.isInternalUrl(url, null)) {
            if (ask) {
                Builder builder = new Builder(getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.formatString("OpenUrlAlert", R.string.OpenUrlAlert, url));
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new OnClickListener() {
                    public void onClick(DialogInterface dialogInterface, int i) {
                        Browser.openUrl(ChatActivity.this.getParentActivity(), url, ChatActivity.this.inlineReturn == 0);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder.create());
                return;
            }
        }
        Context parentActivity = getParentActivity();
        if (this.inlineReturn == 0) {
            z = true;
        }
        Browser.openUrl(parentActivity, url, z);
    }

    private void removeMessageObject(MessageObject messageObject) {
        int index = this.messages.indexOf(messageObject);
        if (index != -1) {
            this.messages.remove(index);
            if (this.chatAdapter != null) {
                this.chatAdapter.notifyItemRemoved(this.chatAdapter.messagesStartRow + index);
            }
        }
    }

    private void setCellSelectionBackground(MessageObject message, ChatMessageCell messageCell, int idx) {
        GroupedMessages groupedMessages = getValidGroupedMessage(message);
        if (groupedMessages != null) {
            boolean hasUnselected = false;
            for (int a = 0; a < groupedMessages.messages.size(); a++) {
                if (this.selectedMessagesIds[idx].indexOfKey(((MessageObject) groupedMessages.messages.get(a)).getId()) < 0) {
                    hasUnselected = true;
                    break;
                }
            }
            if (!hasUnselected) {
                groupedMessages = null;
            }
        }
        if (groupedMessages == null) {
            messageCell.setBackgroundColor(Theme.getColor(Theme.key_chat_selectedBackground));
        } else {
            messageCell.setBackground(null);
        }
    }

    public ThemeDescription[] getThemeDescriptions() {
        View subtitleTextView;
        View emojiView;
        ThemeDescriptionDelegate selectedBackgroundDelegate = new ThemeDescriptionDelegate() {
            public void didSetColor() {
                ChatActivity.this.updateVisibleRows();
                if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.getEmojiView() != null) {
                    ChatActivity.this.chatActivityEnterView.getEmojiView().updateUIColors();
                }
            }
        };
        ThemeDescription[] themeDescriptionArr = new ThemeDescription[340];
        themeDescriptionArr[0] = new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper);
        themeDescriptionArr[1] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[2] = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[3] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon);
        themeDescriptionArr[4] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector);
        themeDescriptionArr[5] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, null, Theme.key_actionBarDefaultSubmenuBackground);
        themeDescriptionArr[6] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, null, Theme.key_actionBarDefaultSubmenuItem);
        themeDescriptionArr[7] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[8] = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[9] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon);
        View view = null;
        themeDescriptionArr[10] = new ThemeDescription(this.avatarContainer != null ? r0.avatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle);
        if (r0.avatarContainer != null) {
            subtitleTextView = r0.avatarContainer.getSubtitleTextView();
        } else {
            subtitleTextView = null;
        }
        themeDescriptionArr[11] = new ThemeDescription(subtitleTextView, ThemeDescription.FLAG_TEXTCOLOR, null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, null, null, Theme.key_actionBarDefaultSubtitle, null);
        themeDescriptionArr[12] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector);
        themeDescriptionArr[13] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch);
        themeDescriptionArr[14] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, Theme.key_actionBarDefaultSearchPlaceholder);
        themeDescriptionArr[15] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[16] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault);
        themeDescriptionArr[17] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop);
        themeDescriptionArr[18] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector);
        themeDescriptionArr[19] = new ThemeDescription(r0.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[20] = new ThemeDescription(r0.actionModeTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[21] = new ThemeDescription(r0.actionModeSubTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[22] = new ThemeDescription(r0.avatarContainer != null ? r0.avatarContainer.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon);
        if (r0.avatarContainer != null) {
            subtitleTextView = r0.avatarContainer.getTitleTextView();
        } else {
            subtitleTextView = null;
        }
        themeDescriptionArr[edit] = new ThemeDescription(subtitleTextView, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon);
        themeDescriptionArr[24] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.avatar_photoDrawable, Theme.avatar_broadcastDrawable, Theme.avatar_savedDrawable}, null, Theme.key_avatar_text);
        themeDescriptionArr[25] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed);
        themeDescriptionArr[26] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange);
        themeDescriptionArr[27] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet);
        themeDescriptionArr[28] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen);
        themeDescriptionArr[29] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan);
        themeDescriptionArr[bot_help] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue);
        themeDescriptionArr[bot_settings] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink);
        themeDescriptionArr[32] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed);
        themeDescriptionArr[33] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange);
        themeDescriptionArr[34] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet);
        themeDescriptionArr[35] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen);
        themeDescriptionArr[36] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan);
        themeDescriptionArr[37] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue);
        themeDescriptionArr[38] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink);
        themeDescriptionArr[39] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{Theme.chat_msgInDrawable, Theme.chat_msgInMediaDrawable}, null, Theme.key_chat_inBubble);
        themeDescriptionArr[search] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInSelectedDrawable, Theme.chat_msgInMediaSelectedDrawable}, null, Theme.key_chat_inBubbleSelected);
        themeDescriptionArr[41] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{Theme.chat_msgInShadowDrawable, Theme.chat_msgInMediaShadowDrawable}, null, Theme.key_chat_inBubbleShadow);
        themeDescriptionArr[42] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutDrawable, Theme.chat_msgOutMediaDrawable}, null, Theme.key_chat_outBubble);
        themeDescriptionArr[43] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutSelectedDrawable, Theme.chat_msgOutMediaSelectedDrawable}, null, Theme.key_chat_outBubbleSelected);
        themeDescriptionArr[44] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutShadowDrawable, Theme.chat_msgOutMediaShadowDrawable}, null, Theme.key_chat_outBubbleShadow);
        themeDescriptionArr[45] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, Theme.chat_actionTextPaint, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[46] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, Theme.chat_actionTextPaint, null, null, Theme.key_chat_serviceLink);
        themeDescriptionArr[47] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_shareIconDrawable, Theme.chat_replyIconDrawable, Theme.chat_botInlineDrawable, Theme.chat_botLinkDrawalbe, Theme.chat_goIconDrawable}, null, Theme.key_chat_serviceIcon);
        themeDescriptionArr[48] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[49] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected);
        themeDescriptionArr[50] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn);
        themeDescriptionArr[51] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut);
        themeDescriptionArr[52] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageLinkIn, null);
        themeDescriptionArr[53] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageLinkOut, null);
        themeDescriptionArr[54] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCheckDrawable, Theme.chat_msgOutHalfCheckDrawable}, null, Theme.key_chat_outSentCheck);
        themeDescriptionArr[55] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCheckSelectedDrawable, Theme.chat_msgOutHalfCheckSelectedDrawable}, null, Theme.key_chat_outSentCheckSelected);
        themeDescriptionArr[56] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutClockDrawable}, null, Theme.key_chat_outSentClock);
        themeDescriptionArr[57] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutSelectedClockDrawable}, null, Theme.key_chat_outSentClockSelected);
        themeDescriptionArr[58] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInClockDrawable}, null, Theme.key_chat_inSentClock);
        themeDescriptionArr[59] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInSelectedClockDrawable}, null, Theme.key_chat_inSentClockSelected);
        themeDescriptionArr[60] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck);
        themeDescriptionArr[61] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgStickerHalfCheckDrawable, Theme.chat_msgStickerCheckDrawable, Theme.chat_msgStickerClockDrawable, Theme.chat_msgStickerViewsDrawable}, null, Theme.key_chat_serviceText);
        themeDescriptionArr[62] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaClockDrawable}, null, Theme.key_chat_mediaSentClock);
        themeDescriptionArr[63] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutViewsDrawable}, null, Theme.key_chat_outViews);
        themeDescriptionArr[64] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutViewsSelectedDrawable}, null, Theme.key_chat_outViewsSelected);
        themeDescriptionArr[65] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable}, null, Theme.key_chat_inViews);
        themeDescriptionArr[66] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable}, null, Theme.key_chat_inViewsSelected);
        themeDescriptionArr[67] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable}, null, Theme.key_chat_mediaViews);
        themeDescriptionArr[68] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutMenuDrawable}, null, Theme.key_chat_outMenu);
        themeDescriptionArr[69] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutMenuSelectedDrawable}, null, Theme.key_chat_outMenuSelected);
        themeDescriptionArr[70] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu);
        themeDescriptionArr[71] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected);
        themeDescriptionArr[72] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu);
        themeDescriptionArr[73] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutInstantDrawable, Theme.chat_msgOutCallDrawable}, null, Theme.key_chat_outInstant);
        themeDescriptionArr[74] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCallSelectedDrawable}, null, Theme.key_chat_outInstantSelected);
        themeDescriptionArr[75] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInInstantDrawable, Theme.chat_msgInCallDrawable}, null, Theme.key_chat_inInstant);
        themeDescriptionArr[76] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInCallSelectedDrawable}, null, Theme.key_chat_inInstantSelected);
        themeDescriptionArr[77] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpRedDrawable, Theme.chat_msgCallDownRedDrawable}, null, Theme.key_calls_callReceivedRedIcon);
        themeDescriptionArr[78] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable, Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_calls_callReceivedGreenIcon);
        themeDescriptionArr[79] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError);
        themeDescriptionArr[80] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon);
        themeDescriptionArr[81] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, selectedBackgroundDelegate, Theme.key_chat_selectedBackground);
        themeDescriptionArr[82] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText);
        themeDescriptionArr[83] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText);
        themeDescriptionArr[84] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText);
        themeDescriptionArr[85] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText);
        themeDescriptionArr[86] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantSelectedText);
        themeDescriptionArr[87] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantSelectedText);
        themeDescriptionArr[88] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText);
        themeDescriptionArr[89] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText);
        themeDescriptionArr[90] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botButtonPaint, null, null, Theme.key_chat_botButtonText);
        themeDescriptionArr[91] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botProgressPaint, null, null, Theme.key_chat_botProgress);
        themeDescriptionArr[92] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText);
        themeDescriptionArr[93] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText);
        themeDescriptionArr[94] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText);
        themeDescriptionArr[95] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText);
        themeDescriptionArr[96] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText);
        themeDescriptionArr[97] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyLine);
        themeDescriptionArr[98] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyLine);
        themeDescriptionArr[99] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine);
        themeDescriptionArr[100] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText);
        themeDescriptionArr[101] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText);
        themeDescriptionArr[102] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText);
        themeDescriptionArr[103] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText);
        themeDescriptionArr[104] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText);
        themeDescriptionArr[105] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText);
        themeDescriptionArr[106] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText);
        themeDescriptionArr[107] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText);
        themeDescriptionArr[108] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText);
        themeDescriptionArr[109] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText);
        themeDescriptionArr[110] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine);
        themeDescriptionArr[111] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine);
        themeDescriptionArr[112] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText);
        themeDescriptionArr[113] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText);
        themeDescriptionArr[114] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText);
        themeDescriptionArr[115] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText);
        themeDescriptionArr[116] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText);
        themeDescriptionArr[117] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText);
        themeDescriptionArr[118] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress);
        themeDescriptionArr[119] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress);
        themeDescriptionArr[120] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress);
        themeDescriptionArr[121] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress);
        themeDescriptionArr[122] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress);
        themeDescriptionArr[123] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaTimeText);
        themeDescriptionArr[124] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText);
        themeDescriptionArr[125] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText);
        themeDescriptionArr[126] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText);
        themeDescriptionArr[127] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_adminText);
        themeDescriptionArr[128] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_adminSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_AC3] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_HDMV_DTS] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerfomerText);
        themeDescriptionArr[131] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerfomerText);
        themeDescriptionArr[132] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText);
        themeDescriptionArr[133] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_SPLICE_INFO] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_E_AC3] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText);
        themeDescriptionArr[136] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText);
        themeDescriptionArr[137] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_DTS] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar);
        themeDescriptionArr[139] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar);
        themeDescriptionArr[140] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected);
        themeDescriptionArr[141] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected);
        themeDescriptionArr[142] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill);
        themeDescriptionArr[143] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar);
        themeDescriptionArr[144] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill);
        themeDescriptionArr[145] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar);
        themeDescriptionArr[146] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar);
        themeDescriptionArr[147] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar);
        themeDescriptionArr[148] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected);
        themeDescriptionArr[149] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected);
        themeDescriptionArr[150] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill);
        themeDescriptionArr[151] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill);
        themeDescriptionArr[152] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress);
        themeDescriptionArr[153] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress);
        themeDescriptionArr[154] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected);
        themeDescriptionArr[155] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected);
        themeDescriptionArr[156] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText);
        themeDescriptionArr[157] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText);
        themeDescriptionArr[158] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText);
        themeDescriptionArr[159] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText);
        themeDescriptionArr[160] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText);
        themeDescriptionArr[161] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText);
        themeDescriptionArr[162] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground);
        themeDescriptionArr[163] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground);
        themeDescriptionArr[164] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected);
        themeDescriptionArr[165] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected);
        themeDescriptionArr[166] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueNameText);
        themeDescriptionArr[167] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueNameText);
        themeDescriptionArr[168] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText);
        themeDescriptionArr[169] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText);
        themeDescriptionArr[170] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText);
        themeDescriptionArr[171] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText);
        themeDescriptionArr[172] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText);
        themeDescriptionArr[173] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground);
        themeDescriptionArr[174] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, Theme.key_chat_textSelectBackground);
        themeDescriptionArr[175] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][0], Theme.chat_fileStatesDrawable[1][0], Theme.chat_fileStatesDrawable[2][0], Theme.chat_fileStatesDrawable[3][0], Theme.chat_fileStatesDrawable[4][0]}, null, Theme.key_chat_outLoader);
        themeDescriptionArr[176] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][0], Theme.chat_fileStatesDrawable[1][0], Theme.chat_fileStatesDrawable[2][0], Theme.chat_fileStatesDrawable[3][0], Theme.chat_fileStatesDrawable[4][0]}, null, Theme.key_chat_outBubble);
        themeDescriptionArr[177] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][1], Theme.chat_fileStatesDrawable[1][1], Theme.chat_fileStatesDrawable[2][1], Theme.chat_fileStatesDrawable[3][1], Theme.chat_fileStatesDrawable[4][1]}, null, Theme.key_chat_outLoaderSelected);
        themeDescriptionArr[178] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][1], Theme.chat_fileStatesDrawable[1][1], Theme.chat_fileStatesDrawable[2][1], Theme.chat_fileStatesDrawable[3][1], Theme.chat_fileStatesDrawable[4][1]}, null, Theme.key_chat_outBubbleSelected);
        themeDescriptionArr[179] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][0], Theme.chat_fileStatesDrawable[6][0], Theme.chat_fileStatesDrawable[7][0], Theme.chat_fileStatesDrawable[8][0], Theme.chat_fileStatesDrawable[9][0]}, null, Theme.key_chat_inLoader);
        themeDescriptionArr[180] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][0], Theme.chat_fileStatesDrawable[6][0], Theme.chat_fileStatesDrawable[7][0], Theme.chat_fileStatesDrawable[8][0], Theme.chat_fileStatesDrawable[9][0]}, null, Theme.key_chat_inBubble);
        themeDescriptionArr[181] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][1], Theme.chat_fileStatesDrawable[6][1], Theme.chat_fileStatesDrawable[7][1], Theme.chat_fileStatesDrawable[8][1], Theme.chat_fileStatesDrawable[9][1]}, null, Theme.key_chat_inLoaderSelected);
        themeDescriptionArr[182] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][1], Theme.chat_fileStatesDrawable[6][1], Theme.chat_fileStatesDrawable[7][1], Theme.chat_fileStatesDrawable[8][1], Theme.chat_fileStatesDrawable[9][1]}, null, Theme.key_chat_inBubbleSelected);
        themeDescriptionArr[183] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhoto);
        themeDescriptionArr[184] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhotoIcon);
        themeDescriptionArr[185] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoSelected);
        themeDescriptionArr[186] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoIconSelected);
        themeDescriptionArr[187] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhoto);
        themeDescriptionArr[188] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhotoIcon);
        themeDescriptionArr[PsExtractor.PRIVATE_STREAM_1] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoSelected);
        themeDescriptionArr[190] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoIconSelected);
        themeDescriptionArr[191] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhoto);
        themeDescriptionArr[PsExtractor.AUDIO_STREAM] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhotoIcon);
        themeDescriptionArr[193] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoSelected);
        themeDescriptionArr[194] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoIconSelected);
        themeDescriptionArr[195] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[9][0]}, null, Theme.key_chat_outFileIcon);
        themeDescriptionArr[196] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[9][1]}, null, Theme.key_chat_outFileSelectedIcon);
        themeDescriptionArr[197] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][0]}, null, Theme.key_chat_inFileIcon);
        themeDescriptionArr[198] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][1]}, null, Theme.key_chat_inFileSelectedIcon);
        themeDescriptionArr[199] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground);
        themeDescriptionArr[Callback.DEFAULT_DRAG_ANIMATION_DURATION] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon);
        themeDescriptionArr[201] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground);
        themeDescriptionArr[202] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon);
        themeDescriptionArr[203] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationBackground);
        themeDescriptionArr[204] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon);
        themeDescriptionArr[205] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationBackground);
        themeDescriptionArr[206] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon);
        themeDescriptionArr[207] = new ThemeDescription(r0.mentionContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[208] = new ThemeDescription(r0.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[209] = new ThemeDescription(r0.searchContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[210] = new ThemeDescription(r0.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[211] = new ThemeDescription(r0.bottomOverlay, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[212] = new ThemeDescription(r0.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[213] = new ThemeDescription(r0.bottomOverlayChat, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[214] = new ThemeDescription(r0.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[215] = new ThemeDescription(r0.chatActivityEnterView, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[216] = new ThemeDescription(r0.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[217] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"audioVideoButtonContainer"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[218] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, null, null, null, Theme.key_chat_messagePanelText);
        themeDescriptionArr[219] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordSendText"}, null, null, null, Theme.key_chat_fieldOverlayText);
        themeDescriptionArr[220] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, null, null, null, Theme.key_chat_messagePanelHint);
        themeDescriptionArr[221] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, null, Theme.key_chat_messagePanelSend);
        themeDescriptionArr[222] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"emojiButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[223] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[224] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[225] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[226] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"audioSendButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[227] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoSendButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[228] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonImage"}, null, null, null, Theme.key_chat_editDoneIcon);
        themeDescriptionArr[229] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioPanel"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[230] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[231] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[232] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[233] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[234] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockTopDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[235] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockArrowDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[236] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockBackgroundDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground);
        themeDescriptionArr[237] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLockShadow);
        themeDescriptionArr[238] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, null, null, null, Theme.key_chat_messagePanelVoiceDelete);
        themeDescriptionArr[239] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, null, null, null, Theme.key_chat_recordedVoiceBackground);
        themeDescriptionArr[PsExtractor.VIDEO_STREAM_MASK] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeText"}, null, null, null, Theme.key_chat_recordTime);
        themeDescriptionArr[241] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeContainer"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[242] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelText"}, null, null, null, Theme.key_chat_recordVoiceCancel);
        themeDescriptionArr[243] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordPanel"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[244] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, null, null, null, Theme.key_chat_messagePanelVoiceDuration);
        themeDescriptionArr[245] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelImage"}, null, null, null, Theme.key_chat_recordVoiceCancel);
        themeDescriptionArr[246] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, null, null, null, Theme.key_contextProgressInner1);
        themeDescriptionArr[247] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, null, null, null, Theme.key_contextProgressOuter1);
        themeDescriptionArr[248] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, null, null, null, Theme.key_chat_messagePanelCancelInlineBot);
        themeDescriptionArr[249] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, null, null, null, Theme.key_chat_recordedVoiceDot);
        themeDescriptionArr[Callback.DEFAULT_SWIPE_ANIMATION_DURATION] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, null, null, null, Theme.key_chat_messagePanelVoiceBackground);
        themeDescriptionArr[251] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paintRecord"}, null, null, null, Theme.key_chat_messagePanelVoiceShadow);
        themeDescriptionArr[252] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, null, null, null, Theme.key_chat_recordedVoiceProgress);
        themeDescriptionArr[253] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, null, null, null, Theme.key_chat_recordedVoiceProgressInner);
        themeDescriptionArr[254] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPause);
        themeDescriptionArr[255] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPause);
        themeDescriptionArr[256] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, null, null, null, Theme.key_chat_emojiPanelNewTrending);
        themeDescriptionArr[257] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPausePressed);
        themeDescriptionArr[258] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPausePressed);
        themeDescriptionArr[259] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackground);
        themeDescriptionArr[260] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelShadowLine);
        themeDescriptionArr[261] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelEmptyText);
        themeDescriptionArr[262] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIcon);
        themeDescriptionArr[263] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIconSelected);
        themeDescriptionArr[264] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelStickerPackSelector);
        themeDescriptionArr[265] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIconSelector);
        themeDescriptionArr[266] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackspace);
        themeDescriptionArr[267] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingTitle);
        if (r0.chatActivityEnterView != null) {
            emojiView = r0.chatActivityEnterView.getEmojiView();
        } else {
            emojiView = r0.chatActivityEnterView;
        }
        themeDescriptionArr[268] = new ThemeDescription(emojiView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingDescription);
        themeDescriptionArr[269] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText);
        themeDescriptionArr[270] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground);
        themeDescriptionArr[271] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed);
        themeDescriptionArr[272] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, null, null, null, Theme.key_inappPlayerBackground);
        themeDescriptionArr[273] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, null, null, null, Theme.key_inappPlayerPlayPause);
        themeDescriptionArr[274] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_inappPlayerTitle);
        themeDescriptionArr[275] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_inappPlayerPerformer);
        themeDescriptionArr[276] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, null, null, null, Theme.key_inappPlayerClose);
        themeDescriptionArr[277] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, null, null, null, Theme.key_returnToCallBackground);
        themeDescriptionArr[278] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_returnToCallText);
        themeDescriptionArr[279] = new ThemeDescription(r0.pinnedLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_topPanelLine);
        themeDescriptionArr[280] = new ThemeDescription(r0.pinnedMessageNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle);
        themeDescriptionArr[281] = new ThemeDescription(r0.pinnedMessageTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage);
        themeDescriptionArr[282] = new ThemeDescription(r0.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle);
        themeDescriptionArr[283] = new ThemeDescription(r0.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage);
        themeDescriptionArr[284] = new ThemeDescription(r0.closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose);
        themeDescriptionArr[285] = new ThemeDescription(r0.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose);
        themeDescriptionArr[286] = new ThemeDescription(r0.reportSpamView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[287] = new ThemeDescription(r0.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[288] = new ThemeDescription(r0.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[289] = new ThemeDescription(r0.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_addContact);
        themeDescriptionArr[290] = new ThemeDescription(r0.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_reportSpam);
        themeDescriptionArr[291] = new ThemeDescription(r0.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine);
        themeDescriptionArr[292] = new ThemeDescription(r0.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelName);
        themeDescriptionArr[293] = new ThemeDescription(r0.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelMessage);
        themeDescriptionArr[294] = new ThemeDescription(r0.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons);
        themeDescriptionArr[295] = new ThemeDescription(r0.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose);
        themeDescriptionArr[296] = new ThemeDescription(r0.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[297] = new ThemeDescription(r0.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[298] = new ThemeDescription(r0.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[299] = new ThemeDescription(r0.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[300] = new ThemeDescription(r0.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_searchPanelText);
        themeDescriptionArr[301] = new ThemeDescription(r0.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText);
        themeDescriptionArr[302] = new ThemeDescription(r0.bottomOverlayChatText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText);
        themeDescriptionArr[303] = new ThemeDescription(r0.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[304] = new ThemeDescription(r0.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[305] = new ThemeDescription(r0.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[306] = new ThemeDescription(r0.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_stickersHintPanel);
        themeDescriptionArr[307] = new ThemeDescription(r0.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{StickerCell.class}, null, null, null, Theme.key_chat_stickersHintPanel);
        themeDescriptionArr[308] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, null, null, null, Theme.key_chat_unreadMessagesStartBackground);
        themeDescriptionArr[309] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, null, null, null, Theme.key_chat_unreadMessagesStartArrowIcon);
        themeDescriptionArr[310] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_unreadMessagesStartText);
        themeDescriptionArr[311] = new ThemeDescription(r0.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[312] = new ThemeDescription(r0.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[313] = new ThemeDescription(r0.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[314] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[315] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[316] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_botSwitchToInlineText);
        themeDescriptionArr[317] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText);
        themeDescriptionArr[318] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText3);
        themeDescriptionArr[319] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, Theme.key_chat_inlineResultIcon);
        themeDescriptionArr[320] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2);
        themeDescriptionArr[321] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText);
        themeDescriptionArr[322] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteBlackText);
        themeDescriptionArr[323] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress);
        themeDescriptionArr[324] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress);
        themeDescriptionArr[325] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider);
        themeDescriptionArr[326] = new ThemeDescription(r0.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_gifSaveHintBackground);
        themeDescriptionArr[327] = new ThemeDescription(r0.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_gifSaveHintText);
        themeDescriptionArr[328] = new ThemeDescription(r0.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground);
        themeDescriptionArr[329] = new ThemeDescription(r0.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter);
        themeDescriptionArr[330] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton);
        themeDescriptionArr[331] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow);
        themeDescriptionArr[332] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon);
        themeDescriptionArr[333] = new ThemeDescription(r0.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground);
        themeDescriptionArr[334] = new ThemeDescription(r0.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter);
        themeDescriptionArr[335] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton);
        themeDescriptionArr[336] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow);
        themeDescriptionArr[337] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon);
        themeDescriptionArr[338] = new ThemeDescription(r0.avatarContainer != null ? r0.avatarContainer.getTimeItem() : null, 0, null, null, null, null, Theme.key_chat_secretTimerBackground);
        if (r0.avatarContainer != null) {
            view = r0.avatarContainer.getTimeItem();
        }
        themeDescriptionArr[339] = new ThemeDescription(view, 0, null, null, null, null, Theme.key_chat_secretTimerText);
        return themeDescriptionArr;
    }
}
