package org.telegram.tgnet;

import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageLoader;
import org.telegram.messenger.SharedConfig;

public class TLRPC {
    public static final int CHAT_FLAG_IS_PUBLIC = 64;
    public static final int LAYER = 140;
    public static final int MESSAGE_FLAG_EDITED = 32768;
    public static final int MESSAGE_FLAG_FWD = 4;
    public static final int MESSAGE_FLAG_HAS_BOT_ID = 2048;
    public static final int MESSAGE_FLAG_HAS_ENTITIES = 128;
    public static final int MESSAGE_FLAG_HAS_FROM_ID = 256;
    public static final int MESSAGE_FLAG_HAS_MARKUP = 64;
    public static final int MESSAGE_FLAG_HAS_MEDIA = 512;
    public static final int MESSAGE_FLAG_HAS_VIEWS = 1024;
    public static final int MESSAGE_FLAG_REPLY = 8;
    public static final int USER_FLAG_ACCESS_HASH = 1;
    public static final int USER_FLAG_FIRST_NAME = 2;
    public static final int USER_FLAG_LAST_NAME = 4;
    public static final int USER_FLAG_PHONE = 16;
    public static final int USER_FLAG_PHOTO = 32;
    public static final int USER_FLAG_STATUS = 64;
    public static final int USER_FLAG_UNUSED = 128;
    public static final int USER_FLAG_UNUSED2 = 256;
    public static final int USER_FLAG_UNUSED3 = 512;
    public static final int USER_FLAG_USERNAME = 8;

    public static class TL_chatChannelParticipant extends ChatParticipant {
        public static int constructor = -NUM;
        public ChannelParticipant channelParticipant;
    }

    public static class TL_updatesTooLong extends Updates {
        public static int constructor = -NUM;
    }

    public static class Vector extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Object> objects = new ArrayList<>();
    }

    public static class TL_stats_megagroupStats extends TLObject {
        public static int constructor = -NUM;
        public StatsGraph actions_graph;
        public StatsGraph growth_graph;
        public StatsGraph languages_graph;
        public TL_statsAbsValueAndPrev members;
        public StatsGraph members_graph;
        public TL_statsAbsValueAndPrev messages;
        public StatsGraph messages_graph;
        public StatsGraph new_members_by_source_graph;
        public TL_statsDateRangeDays period;
        public TL_statsAbsValueAndPrev posters;
        public ArrayList<TL_statsGroupTopAdmin> top_admins = new ArrayList<>();
        public StatsGraph top_hours_graph;
        public ArrayList<TL_statsGroupTopInviter> top_inviters = new ArrayList<>();
        public ArrayList<TL_statsGroupTopPoster> top_posters = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();
        public TL_statsAbsValueAndPrev viewers;
        public StatsGraph weekdays_graph;

        public static TL_stats_megagroupStats TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_stats_megagroupStats result = new TL_stats_megagroupStats();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stats_megagroupStats", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.period = TL_statsDateRangeDays.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.members = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.messages = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.viewers = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.posters = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.growth_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.members_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_members_by_source_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.languages_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.messages_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.actions_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.top_hours_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.weekdays_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_statsGroupTopPoster object = TL_statsGroupTopPoster.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.top_posters.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_statsGroupTopAdmin object2 = TL_statsGroupTopAdmin.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.top_admins.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            TL_statsGroupTopInviter object3 = TL_statsGroupTopInviter.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.top_inviters.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.period.serializeToStream(stream);
            this.members.serializeToStream(stream);
            this.messages.serializeToStream(stream);
            this.viewers.serializeToStream(stream);
            this.posters.serializeToStream(stream);
            this.growth_graph.serializeToStream(stream);
            this.members_graph.serializeToStream(stream);
            this.new_members_by_source_graph.serializeToStream(stream);
            this.languages_graph.serializeToStream(stream);
            this.messages_graph.serializeToStream(stream);
            this.actions_graph.serializeToStream(stream);
            this.top_hours_graph.serializeToStream(stream);
            this.weekdays_graph.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.top_posters.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.top_posters.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.top_admins.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.top_admins.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.top_inviters.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.top_inviters.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
        }
    }

    public static class TL_chatBannedRights extends TLObject {
        public static int constructor = -NUM;
        public boolean change_info;
        public boolean embed_links;
        public int flags;
        public boolean invite_users;
        public boolean pin_messages;
        public boolean send_games;
        public boolean send_gifs;
        public boolean send_inline;
        public boolean send_media;
        public boolean send_messages;
        public boolean send_polls;
        public boolean send_stickers;
        public int until_date;
        public boolean view_messages;

        public static TL_chatBannedRights TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_chatBannedRights result = new TL_chatBannedRights();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatBannedRights", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.view_messages = (readInt32 & 1) != 0;
            this.send_messages = (readInt32 & 2) != 0;
            this.send_media = (readInt32 & 4) != 0;
            this.send_stickers = (readInt32 & 8) != 0;
            this.send_gifs = (readInt32 & 16) != 0;
            this.send_games = (readInt32 & 32) != 0;
            this.send_inline = (readInt32 & 64) != 0;
            this.embed_links = (readInt32 & 128) != 0;
            this.send_polls = (readInt32 & 256) != 0;
            this.change_info = (readInt32 & 1024) != 0;
            this.invite_users = (32768 & readInt32) != 0;
            if ((readInt32 & 131072) != 0) {
                z = true;
            }
            this.pin_messages = z;
            this.until_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.view_messages ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.send_messages ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.send_media ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.send_stickers ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.send_gifs ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.send_games ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.send_inline ? i6 | 64 : i6 & -65;
            this.flags = i7;
            int i8 = this.embed_links ? i7 | 128 : i7 & -129;
            this.flags = i8;
            int i9 = this.send_polls ? i8 | 256 : i8 & -257;
            this.flags = i9;
            int i10 = this.change_info ? i9 | 1024 : i9 & -1025;
            this.flags = i10;
            int i11 = this.invite_users ? i10 | 32768 : i10 & -32769;
            this.flags = i11;
            int i12 = this.pin_messages ? i11 | 131072 : i11 & -131073;
            this.flags = i12;
            stream.writeInt32(i12);
            stream.writeInt32(this.until_date);
        }
    }

    public static class TL_stickers_suggestedShortName extends TLObject {
        public static int constructor = -NUM;
        public String short_name;

        public static TL_stickers_suggestedShortName TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_stickers_suggestedShortName result = new TL_stickers_suggestedShortName();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stickers_suggestedShortName", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.short_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.short_name);
        }
    }

    public static abstract class DraftMessage extends TLObject {
        public int date;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public String message;
        public boolean no_webpage;
        public int reply_to_msg_id;

        public static DraftMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DraftMessage result = null;
            switch (constructor) {
                case -1169445179:
                    result = new TL_draftMessageEmpty_layer81();
                    break;
                case -40996577:
                    result = new TL_draftMessage();
                    break;
                case 453805082:
                    result = new TL_draftMessageEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DraftMessage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_draftMessageEmpty extends DraftMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.date);
            }
        }
    }

    public static class TL_draftMessageEmpty_layer81 extends TL_draftMessageEmpty {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_draftMessage extends DraftMessage {
        public static int constructor = -40996577;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.no_webpage = (this.flags & 2) != 0;
            if ((this.flags & 1) != 0) {
                this.reply_to_msg_id = stream.readInt32(exception);
            }
            this.message = stream.readString(exception);
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            stream.writeString(this.message);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            stream.writeInt32(this.date);
        }
    }

    public static abstract class ChatPhoto extends TLObject {
        public int dc_id;
        public int flags;
        public boolean has_video;
        public FileLocation photo_big;
        public long photo_id;
        public FileLocation photo_small;
        public BitmapDrawable strippedBitmap;
        public byte[] stripped_thumb;

        public static ChatPhoto TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChatPhoto result = null;
            switch (constructor) {
                case -770990276:
                    result = new TL_chatPhoto_layer126();
                    break;
                case 476978193:
                    result = new TL_chatPhoto();
                    break;
                case 935395612:
                    result = new TL_chatPhotoEmpty();
                    break;
                case 1197267925:
                    result = new TL_chatPhoto_layer115();
                    break;
                case 1200680453:
                    result = new TL_chatPhoto_layer127();
                    break;
                case 1632839530:
                    result = new TL_chatPhoto_layer97();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChatPhoto", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_chatPhoto extends ChatPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.stripped_thumb = stream.readByteArray(exception);
            }
            this.dc_id = stream.readInt32(exception);
            this.photo_small = new TL_fileLocationToBeDeprecated();
            this.photo_small.volume_id = -this.photo_id;
            this.photo_small.local_id = 97;
            this.photo_big = new TL_fileLocationToBeDeprecated();
            this.photo_big.volume_id = -this.photo_id;
            this.photo_big.local_id = 99;
            if (this.stripped_thumb != null && Build.VERSION.SDK_INT >= 21) {
                try {
                    this.strippedBitmap = new BitmapDrawable(ImageLoader.getStrippedPhotoBitmap(this.stripped_thumb, "b"));
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.photo_id);
            if ((this.flags & 2) != 0) {
                stream.writeByteArray(this.stripped_thumb);
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_chatPhoto_layer115 extends TL_chatPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_chatPhotoEmpty extends ChatPhoto {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_chatPhoto_layer97 extends TL_chatPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
        }
    }

    public static class TL_chatPhoto_layer126 extends TL_chatPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_chatPhoto_layer127 extends TL_chatPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.stripped_thumb = stream.readByteArray(exception);
                if (Build.VERSION.SDK_INT >= 21) {
                    try {
                        this.strippedBitmap = new BitmapDrawable(ImageLoader.getStrippedPhotoBitmap(this.stripped_thumb, "b"));
                    } catch (Throwable e) {
                        FileLog.e(e);
                    }
                }
            }
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeByteArray(this.stripped_thumb);
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_help_termsOfService extends TLObject {
        public static int constructor = NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public TL_dataJSON id;
        public int min_age_confirm;
        public boolean popup;
        public String text;

        public static TL_help_termsOfService TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_termsOfService result = new TL_help_termsOfService();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_termsOfService", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.popup = (readInt32 & 1) != 0;
            this.id = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.text = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    this.min_age_confirm = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.popup ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.id.serializeToStream(stream);
            stream.writeString(this.text);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.entities.get(a).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.min_age_confirm);
            }
        }
    }

    public static class TL_payments_paymentReceipt extends TLObject {
        public static int constructor = NUM;
        public long bot_id;
        public String credentials_title;
        public String currency;
        public int date;
        public String description;
        public int flags;
        public TL_paymentRequestedInfo info;
        public TL_invoice invoice;
        public WebDocument photo;
        public long provider_id;
        public TL_shippingOption shipping;
        public long tip_amount;
        public String title;
        public long total_amount;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_payments_paymentReceipt TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_payments_paymentReceipt result = new TL_payments_paymentReceipt();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentReceipt", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.bot_id = stream.readInt64(exception);
            this.provider_id = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.description = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.photo = WebDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.invoice = TL_invoice.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.info = TL_paymentRequestedInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.shipping = TL_shippingOption.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                this.tip_amount = stream.readInt64(exception);
            }
            this.currency = stream.readString(exception);
            this.total_amount = stream.readInt64(exception);
            this.credentials_title = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.date);
            stream.writeInt64(this.bot_id);
            stream.writeInt64(this.provider_id);
            stream.writeString(this.title);
            stream.writeString(this.description);
            if ((this.flags & 4) != 0) {
                this.photo.serializeToStream(stream);
            }
            this.invoice.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.info.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.shipping.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt64(this.tip_amount);
            }
            stream.writeString(this.currency);
            stream.writeInt64(this.total_amount);
            stream.writeString(this.credentials_title);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class NotifyPeer extends TLObject {
        public static NotifyPeer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            NotifyPeer result = null;
            switch (constructor) {
                case -1613493288:
                    result = new TL_notifyPeer();
                    break;
                case -1261946036:
                    result = new TL_notifyUsers();
                    break;
                case -1073230141:
                    result = new TL_notifyChats();
                    break;
                case -703403793:
                    result = new TL_notifyBroadcasts();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in NotifyPeer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_notifyBroadcasts extends NotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_notifyChats extends NotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_notifyUsers extends NotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_notifyPeer extends NotifyPeer {
        public static int constructor = -NUM;
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_phone_joinAsPeers extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<Peer> peers = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_phone_joinAsPeers TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_joinAsPeers result = new TL_phone_joinAsPeers();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_joinAsPeers", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Peer object = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.peers.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_emojiKeywordsDifference extends TLObject {
        public static int constructor = NUM;
        public int from_version;
        public ArrayList<EmojiKeyword> keywords = new ArrayList<>();
        public String lang_code;
        public int version;

        public static TL_emojiKeywordsDifference TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_emojiKeywordsDifference result = new TL_emojiKeywordsDifference();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_emojiKeywordsDifference", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lang_code = stream.readString(exception);
            this.from_version = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    EmojiKeyword object = EmojiKeyword.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.keywords.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
            stream.writeInt32(this.from_version);
            stream.writeInt32(this.version);
            stream.writeInt32(NUM);
            int count = this.keywords.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.keywords.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class messages_SentEncryptedMessage extends TLObject {
        public int date;
        public EncryptedFile file;

        public static messages_SentEncryptedMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_SentEncryptedMessage result = null;
            switch (constructor) {
                case -1802240206:
                    result = new TL_messages_sentEncryptedFile();
                    break;
                case 1443858741:
                    result = new TL_messages_sentEncryptedMessage();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_SentEncryptedMessage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_sentEncryptedMessage extends messages_SentEncryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_messages_sentEncryptedFile extends messages_SentEncryptedMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.date = stream.readInt32(exception);
            this.file = EncryptedFile.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.date);
            this.file.serializeToStream(stream);
        }
    }

    public static class TL_error extends TLObject {
        public static int constructor = -NUM;
        public int code;
        public String text;

        public static TL_error TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_error result = new TL_error();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_error", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.code = stream.readInt32(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.code);
            stream.writeString(this.text);
        }
    }

    public static abstract class UrlAuthResult extends TLObject {
        public static UrlAuthResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            UrlAuthResult result = null;
            switch (constructor) {
                case -1886646706:
                    result = new TL_urlAuthResultAccepted();
                    break;
                case -1831650802:
                    result = new TL_urlAuthResultRequest();
                    break;
                case -1445536993:
                    result = new TL_urlAuthResultDefault();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in UrlAuthResult", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_urlAuthResultDefault extends UrlAuthResult {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_urlAuthResultRequest extends UrlAuthResult {
        public static int constructor = -NUM;
        public User bot;
        public String domain;
        public int flags;
        public boolean request_write_access;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.request_write_access = z;
            this.bot = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.domain = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.request_write_access ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.bot.serializeToStream(stream);
            stream.writeString(this.domain);
        }
    }

    public static class TL_urlAuthResultAccepted extends UrlAuthResult {
        public static int constructor = -NUM;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_messages_chatFull extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ChatFull full_chat;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_chatFull TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_chatFull result = new TL_messages_chatFull();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatFull", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.full_chat = ChatFull.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.full_chat.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_passwordSettings extends TLObject {
        public static int constructor = -NUM;
        public String email;
        public int flags;
        public TL_secureSecretSettings secure_settings;

        public static TL_account_passwordSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_passwordSettings result = new TL_account_passwordSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.email = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.secure_settings = TL_secureSecretSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.email);
            }
            if ((this.flags & 2) != 0) {
                this.secure_settings.serializeToStream(stream);
            }
        }
    }

    public static abstract class DocumentAttribute extends TLObject {
        public String alt;
        public int duration;
        public String file_name;
        public int flags;
        public int h;
        public boolean mask;
        public TL_maskCoords mask_coords;
        public String performer;
        public boolean round_message;
        public InputStickerSet stickerset;
        public boolean supports_streaming;
        public String title;
        public boolean voice;
        public int w;
        public byte[] waveform;

        public static DocumentAttribute TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DocumentAttribute result = null;
            switch (constructor) {
                case -1744710921:
                    result = new TL_documentAttributeHasStickers();
                    break;
                case -1739392570:
                    result = new TL_documentAttributeAudio();
                    break;
                case -1723033470:
                    result = new TL_documentAttributeSticker_old2();
                    break;
                case -556656416:
                    result = new TL_documentAttributeAudio_layer45();
                    break;
                case -83208409:
                    result = new TL_documentAttributeSticker_old();
                    break;
                case 85215461:
                    result = new TL_documentAttributeAudio_old();
                    break;
                case 250621158:
                    result = new TL_documentAttributeVideo();
                    break;
                case 297109817:
                    result = new TL_documentAttributeAnimated();
                    break;
                case 358154344:
                    result = new TL_documentAttributeFilename();
                    break;
                case 978674434:
                    result = new TL_documentAttributeSticker_layer55();
                    break;
                case 1494273227:
                    result = new TL_documentAttributeVideo_layer65();
                    break;
                case 1662637586:
                    result = new TL_documentAttributeSticker();
                    break;
                case 1815593308:
                    result = new TL_documentAttributeImageSize();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_documentAttributeSticker_layer55 extends TL_documentAttributeSticker {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.alt = stream.readString(exception);
            this.stickerset = InputStickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.alt);
            this.stickerset.serializeToStream(stream);
        }
    }

    public static class TL_documentAttributeAudio_old extends TL_documentAttributeAudio {
        public static int constructor = 85215461;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.duration = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.duration);
        }
    }

    public static class TL_documentAttributeSticker extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.mask = (this.flags & 2) != 0;
            this.alt = stream.readString(exception);
            this.stickerset = InputStickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.mask_coords = TL_maskCoords.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.mask ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeString(this.alt);
            this.stickerset.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.mask_coords.serializeToStream(stream);
            }
        }
    }

    public static class TL_documentAttributeAnimated extends DocumentAttribute {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeFilename extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.file_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.file_name);
        }
    }

    public static class TL_documentAttributeVideo extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.round_message = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.supports_streaming = z;
            this.duration = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.round_message ? this.flags | 1 : this.flags & -2;
            this.flags = this.supports_streaming ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_documentAttributeVideo_layer65 extends TL_documentAttributeVideo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.duration = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_documentAttributeAudio_layer45 extends TL_documentAttributeAudio {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.duration = stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.performer = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.duration);
            stream.writeString(this.title);
            stream.writeString(this.performer);
        }
    }

    public static class TL_documentAttributeSticker_old extends TL_documentAttributeSticker {
        public static int constructor = -83208409;

        public void readParams(AbstractSerializedData stream, boolean exception) {
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeHasStickers extends DocumentAttribute {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeSticker_old2 extends TL_documentAttributeSticker {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.alt = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.alt);
        }
    }

    public static class TL_documentAttributeImageSize extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_documentAttributeAudio extends DocumentAttribute {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.voice = (this.flags & 1024) != 0;
            this.duration = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.performer = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.waveform = stream.readByteArray(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.voice ? this.flags | 1024 : this.flags & -1025;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.duration);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.performer);
            }
            if ((this.flags & 4) != 0) {
                stream.writeByteArray(this.waveform);
            }
        }
    }

    public static class TL_textPhone extends RichText {
        public static int constructor = NUM;
        public String phone;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.phone = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            stream.writeString(this.phone);
        }
    }

    public static class TL_textSuperscript extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textImage extends RichText {
        public static int constructor = NUM;
        public long document_id;
        public int h;
        public int w;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.document_id = stream.readInt64(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.document_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_textEmpty extends RichText {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_textUrl extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.url = stream.readString(exception);
            this.webpage_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            stream.writeString(this.url);
            stream.writeInt64(this.webpage_id);
        }
    }

    public static class TL_textAnchor extends RichText {
        public static int constructor = NUM;
        public String name;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            stream.writeString(this.name);
        }
    }

    public static class TL_textStrike extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textMarked extends RichText {
        public static int constructor = 55281185;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textFixed extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textEmail extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.email = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            stream.writeString(this.email);
        }
    }

    public static class TL_textPlain extends RichText {
        public static int constructor = NUM;
        public String text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_textConcat extends RichText {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    RichText object = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.texts.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.texts.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((RichText) this.texts.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_textBold extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textItalic extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textUnderline extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_textSubscript extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_statsURL extends TLObject {
        public static int constructor = NUM;
        public String url;

        public static TL_statsURL TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsURL result = new TL_statsURL();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsURL", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_popularContact extends TLObject {
        public static int constructor = NUM;
        public long client_id;
        public int importers;

        public static TL_popularContact TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_popularContact result = new TL_popularContact();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_popularContact", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.client_id = stream.readInt64(exception);
            this.importers = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.client_id);
            stream.writeInt32(this.importers);
        }
    }

    public static class TL_messages_botCallbackAnswer extends TLObject {
        public static int constructor = NUM;
        public boolean alert;
        public int cache_time;
        public int flags;
        public boolean has_url;
        public String message;
        public boolean native_ui;
        public String url;

        public static TL_messages_botCallbackAnswer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_botCallbackAnswer result = new TL_messages_botCallbackAnswer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.alert = (readInt32 & 2) != 0;
            this.has_url = (readInt32 & 8) != 0;
            if ((readInt32 & 16) != 0) {
                z = true;
            }
            this.native_ui = z;
            if ((readInt32 & 1) != 0) {
                this.message = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.url = stream.readString(exception);
            }
            this.cache_time = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.alert ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            int i2 = this.has_url ? i | 8 : i & -9;
            this.flags = i2;
            int i3 = this.native_ui ? i2 | 16 : i2 & -17;
            this.flags = i3;
            stream.writeInt32(i3);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.message);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.url);
            }
            stream.writeInt32(this.cache_time);
        }
    }

    public static class TL_dataJSON extends TLObject {
        public static int constructor = NUM;
        public String data;

        public static TL_dataJSON TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_dataJSON result = new TL_dataJSON();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dataJSON", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.data = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.data);
        }
    }

    public static class TL_contactStatus extends TLObject {
        public static int constructor = NUM;
        public UserStatus status;
        public long user_id;

        public static TL_contactStatus TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contactStatus result = new TL_contactStatus();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactStatus", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            this.status.serializeToStream(stream);
        }
    }

    public static abstract class GroupCall extends TLObject {
        public long access_hash;
        public boolean can_change_join_muted;
        public boolean can_start_video;
        public int duration;
        public int flags;
        public long id;
        public boolean join_date_asc;
        public boolean join_muted;
        public boolean listeners_hidden;
        public int participants_count;
        public int record_start_date;
        public boolean record_video_active;
        public boolean rtmp_stream;
        public int schedule_date;
        public boolean schedule_start_subscribed;
        public int stream_dc_id;
        public String title;
        public int unmuted_video_count;
        public int unmuted_video_limit;
        public int version;

        public static GroupCall TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            GroupCall result = null;
            switch (constructor) {
                case -711498484:
                    result = new TL_groupCall();
                    break;
                case 2004925620:
                    result = new TL_groupCallDiscarded();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in GroupCall", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_groupCallDiscarded extends GroupCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.duration = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.duration);
        }
    }

    public static class TL_groupCall extends GroupCall {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.join_muted = (this.flags & 2) != 0;
            this.can_change_join_muted = (this.flags & 4) != 0;
            this.join_date_asc = (this.flags & 64) != 0;
            this.schedule_start_subscribed = (this.flags & 256) != 0;
            this.can_start_video = (this.flags & 512) != 0;
            this.record_video_active = (this.flags & 2048) != 0;
            this.rtmp_stream = (this.flags & 4096) != 0;
            if ((this.flags & 8192) != 0) {
                z = true;
            }
            this.listeners_hidden = z;
            if (SharedConfig.forceRtmpStream) {
                this.rtmp_stream = true;
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.participants_count = stream.readInt32(exception);
            if ((this.flags & 8) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.stream_dc_id = stream.readInt32(exception);
            }
            if ((this.flags & 32) != 0) {
                this.record_start_date = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.schedule_date = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.unmuted_video_count = stream.readInt32(exception);
            }
            this.unmuted_video_limit = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.join_muted ? this.flags | 2 : this.flags & -3;
            this.flags = this.can_change_join_muted ? this.flags | 4 : this.flags & -5;
            this.flags = this.join_date_asc ? this.flags | 64 : this.flags & -65;
            this.flags = this.schedule_start_subscribed ? this.flags | 256 : this.flags & -257;
            this.flags = this.can_start_video ? this.flags | 512 : this.flags & -513;
            this.flags = this.record_video_active ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.rtmp_stream ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.listeners_hidden ? this.flags | 8192 : this.flags & -8193;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.participants_count);
            if ((this.flags & 8) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.stream_dc_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.record_start_date);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.unmuted_video_count);
            }
            stream.writeInt32(this.unmuted_video_limit);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_channelBannedRights_layer92 extends TLObject {
        public static int constructor = NUM;
        public boolean embed_links;
        public int flags;
        public boolean send_games;
        public boolean send_gifs;
        public boolean send_inline;
        public boolean send_media;
        public boolean send_messages;
        public boolean send_stickers;
        public int until_date;
        public boolean view_messages;

        public static TL_channelBannedRights_layer92 TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channelBannedRights_layer92 result = new TL_channelBannedRights_layer92();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelBannedRights_layer92", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.view_messages = (readInt32 & 1) != 0;
            this.send_messages = (readInt32 & 2) != 0;
            this.send_media = (readInt32 & 4) != 0;
            this.send_stickers = (readInt32 & 8) != 0;
            this.send_gifs = (readInt32 & 16) != 0;
            this.send_games = (readInt32 & 32) != 0;
            this.send_inline = (readInt32 & 64) != 0;
            if ((readInt32 & 128) != 0) {
                z = true;
            }
            this.embed_links = z;
            this.until_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.view_messages ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.send_messages ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.send_media ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.send_stickers ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.send_gifs ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.send_games ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.send_inline ? i6 | 64 : i6 & -65;
            this.flags = i7;
            int i8 = this.embed_links ? i7 | 128 : i7 & -129;
            this.flags = i8;
            stream.writeInt32(i8);
            stream.writeInt32(this.until_date);
        }
    }

    public static abstract class DialogPeer extends TLObject {
        public static DialogPeer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DialogPeer result = null;
            switch (constructor) {
                case -445792507:
                    result = new TL_dialogPeer();
                    break;
                case 1363483106:
                    result = new TL_dialogPeerFolder();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DialogPeer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_dialogPeer extends DialogPeer {
        public static int constructor = -NUM;
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_dialogPeerFolder extends DialogPeer {
        public static int constructor = NUM;
        public int folder_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.folder_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.folder_id);
        }
    }

    public static abstract class MessagePeerReaction extends TLObject {
        public boolean big;
        public int flags;
        public Peer peer_id;
        public String reaction;
        public boolean unread;

        public static TL_messagePeerReaction TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TL_messagePeerReaction result = null;
            switch (constructor) {
                case -1826077446:
                    result = new TL_messagePeerReaction_layer137();
                    break;
                case 1370914559:
                    result = new TL_messagePeerReaction();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessagePeerReaction", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messagePeerReaction extends MessagePeerReaction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.big = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.unread = z;
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.reaction = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.big ? this.flags | 1 : this.flags & -2;
            this.flags = this.unread ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            this.peer_id.serializeToStream(stream);
            stream.writeString(this.reaction);
        }
    }

    public static class TL_messagePeerReaction_layer137 extends TL_messagePeerReaction {
        public static int constructor = -NUM;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.reaction = stream.readString(exception);
            this.peer_id = new TL_peerUser();
            this.peer_id.user_id = this.user_id;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeString(this.reaction);
        }
    }

    public static abstract class auth_Authorization extends TLObject {
        public static auth_Authorization TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            auth_Authorization result = null;
            switch (constructor) {
                case 872119224:
                    result = new TL_auth_authorization();
                    break;
                case 1148485274:
                    result = new TL_auth_authorizationSignUpRequired();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in auth_Authorization", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_auth_authorizationSignUpRequired extends auth_Authorization {
        public static int constructor = NUM;
        public int flags;
        public TL_help_termsOfService terms_of_service;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.terms_of_service = TL_help_termsOfService.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.terms_of_service.serializeToStream(stream);
            }
        }
    }

    public static class TL_auth_authorization extends auth_Authorization {
        public static int constructor = NUM;
        public int flags;
        public int otherwise_relogin_days;
        public boolean setup_password_required;
        public int tmp_sessions;
        public User user;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.setup_password_required = (readInt32 & 2) != 0;
            if ((readInt32 & 2) != 0) {
                this.otherwise_relogin_days = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                this.tmp_sessions = stream.readInt32(exception);
            }
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.setup_password_required ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.otherwise_relogin_days);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.tmp_sessions);
            }
            this.user.serializeToStream(stream);
        }
    }

    public static class TL_pollAnswer extends TLObject {
        public static int constructor = NUM;
        public byte[] option;
        public String text;

        public static TL_pollAnswer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pollAnswer result = new TL_pollAnswer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.option = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeByteArray(this.option);
        }
    }

    public static abstract class JSONValue extends TLObject {
        public static JSONValue TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            JSONValue result = null;
            switch (constructor) {
                case -1715350371:
                    result = new TL_jsonObject();
                    break;
                case -1222740358:
                    result = new TL_jsonString();
                    break;
                case -952869270:
                    result = new TL_jsonBool();
                    break;
                case -146520221:
                    result = new TL_jsonArray();
                    break;
                case 736157604:
                    result = new TL_jsonNumber();
                    break;
                case 1064139624:
                    result = new TL_jsonNull();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in JSONValue", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_jsonBool extends JSONValue {
        public static int constructor = -NUM;
        public boolean value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.value = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.value);
        }
    }

    public static class TL_jsonNull extends JSONValue {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_jsonString extends JSONValue {
        public static int constructor = -NUM;
        public String value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.value);
        }
    }

    public static class TL_jsonArray extends JSONValue {
        public static int constructor = -NUM;
        public ArrayList<JSONValue> value = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    JSONValue object = JSONValue.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.value.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.value.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.value.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_jsonObject extends JSONValue {
        public static int constructor = -NUM;
        public ArrayList<TL_jsonObjectValue> value = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_jsonObjectValue object = TL_jsonObjectValue.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.value.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.value.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.value.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_jsonNumber extends JSONValue {
        public static int constructor = NUM;
        public double value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.value = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.value);
        }
    }

    public static abstract class InputWallPaper extends TLObject {
        public static InputWallPaper TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputWallPaper result = null;
            switch (constructor) {
                case -1770371538:
                    result = new TL_inputWallPaperNoFile();
                    break;
                case -433014407:
                    result = new TL_inputWallPaper();
                    break;
                case 1913199744:
                    result = new TL_inputWallPaperSlug();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputWallPaper", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputWallPaper extends InputWallPaper {
        public static int constructor = -NUM;
        public long access_hash;
        public long id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputWallPaperNoFile extends InputWallPaper {
        public static int constructor = -NUM;
        public long id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_inputWallPaperSlug extends InputWallPaper {
        public static int constructor = NUM;
        public String slug;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.slug = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.slug);
        }
    }

    public static class TL_messages_historyImportParsed extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public boolean group;
        public boolean pm;
        public String title;

        public static TL_messages_historyImportParsed TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_historyImportParsed result = new TL_messages_historyImportParsed();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_historyImportParsed", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.pm = (readInt32 & 1) != 0;
            if ((readInt32 & 2) != 0) {
                z = true;
            }
            this.group = z;
            if ((readInt32 & 4) != 0) {
                this.title = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.pm ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.group ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
        }
    }

    public static class TL_folder extends TLObject {
        public static int constructor = -11252123;
        public boolean autofill_new_broadcasts;
        public boolean autofill_new_correspondents;
        public boolean autofill_public_groups;
        public int flags;
        public int id;
        public ChatPhoto photo;
        public String title;

        public static TL_folder TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_folder result = new TL_folder();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_folder", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.autofill_new_broadcasts = (readInt32 & 1) != 0;
            this.autofill_public_groups = (readInt32 & 2) != 0;
            if ((readInt32 & 4) != 0) {
                z = true;
            }
            this.autofill_new_correspondents = z;
            this.id = stream.readInt32(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 8) != 0) {
                this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.autofill_new_broadcasts ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.autofill_public_groups ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.autofill_new_correspondents ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeInt32(this.id);
            stream.writeString(this.title);
            if ((this.flags & 8) != 0) {
                this.photo.serializeToStream(stream);
            }
        }
    }

    public static abstract class messages_Messages extends TLObject {
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public int flags;
        public boolean inexact;
        public ArrayList<Message> messages = new ArrayList<>();
        public int next_rate;
        public int offset_id_offset;
        public int pts;
        public ArrayList<User> users = new ArrayList<>();

        public static messages_Messages TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_Messages result = null;
            switch (constructor) {
                case -1938715001:
                    result = new TL_messages_messages();
                    break;
                case 978610270:
                    result = new TL_messages_messagesSlice();
                    break;
                case 1682413576:
                    result = new TL_messages_channelMessages();
                    break;
                case 1951620897:
                    result = new TL_messages_messagesNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_Messages", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_messagesSlice extends messages_Messages {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.inexact = (this.flags & 2) != 0;
            this.count = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.next_rate = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.offset_id_offset = stream.readInt32(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.inexact ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.count);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.next_rate);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.offset_id_offset);
            }
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_messages extends messages_Messages {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_channelMessages extends messages_Messages {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.inexact = (this.flags & 2) != 0;
            this.pts = stream.readInt32(exception);
            this.count = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.offset_id_offset = stream.readInt32(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.inexact ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.count);
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.offset_id_offset);
            }
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_messagesNotModified extends messages_Messages {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
        }
    }

    public static class TL_statsGroupTopAdmin extends TLObject {
        public static int constructor = -NUM;
        public int banned;
        public int deleted;
        public int kicked;
        public long user_id;

        public static TL_statsGroupTopAdmin TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsGroupTopAdmin result = new TL_statsGroupTopAdmin();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsGroupTopAdmin", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.deleted = stream.readInt32(exception);
            this.kicked = stream.readInt32(exception);
            this.banned = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.deleted);
            stream.writeInt32(this.kicked);
            stream.writeInt32(this.banned);
        }
    }

    public static class TL_payments_paymentForm extends TLObject {
        public static int constructor = NUM;
        public long bot_id;
        public boolean can_save_credentials;
        public int flags;
        public long form_id;
        public TL_invoice invoice;
        public TL_dataJSON native_params;
        public String native_provider;
        public boolean password_missing;
        public long provider_id;
        public TL_paymentSavedCredentialsCard saved_credentials;
        public TL_paymentRequestedInfo saved_info;
        public String url;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_payments_paymentForm TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_payments_paymentForm result = new TL_payments_paymentForm();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentForm", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.can_save_credentials = (readInt32 & 4) != 0;
            this.password_missing = (readInt32 & 8) != 0;
            this.form_id = stream.readInt64(exception);
            this.bot_id = stream.readInt64(exception);
            this.invoice = TL_invoice.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.provider_id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            if ((this.flags & 16) != 0) {
                this.native_provider = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.native_params = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 1) != 0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.saved_credentials = TL_paymentSavedCredentialsCard.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.can_save_credentials ? this.flags | 4 : this.flags & -5;
            this.flags = i;
            int i2 = this.password_missing ? i | 8 : i & -9;
            this.flags = i2;
            stream.writeInt32(i2);
            stream.writeInt64(this.form_id);
            stream.writeInt64(this.bot_id);
            this.invoice.serializeToStream(stream);
            stream.writeInt64(this.provider_id);
            stream.writeString(this.url);
            if ((this.flags & 16) != 0) {
                stream.writeString(this.native_provider);
            }
            if ((this.flags & 16) != 0) {
                this.native_params.serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                this.saved_info.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.saved_credentials.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class ContactLink_layer101 extends TLObject {
        public static ContactLink_layer101 TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ContactLink_layer101 result = null;
            switch (constructor) {
                case -721239344:
                    result = new TL_contactLinkContact();
                    break;
                case -17968211:
                    result = new TL_contactLinkNone();
                    break;
                case 1599050311:
                    result = new TL_contactLinkUnknown();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ContactLink", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_contactLinkNone extends ContactLink_layer101 {
        public static int constructor = -17968211;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkContact extends ContactLink_layer101 {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkUnknown extends ContactLink_layer101 {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_link_layer101 extends TLObject {
        public static int constructor = NUM;
        public ContactLink_layer101 foreign_link;
        public ContactLink_layer101 my_link;
        public User user;

        public static TL_contacts_link_layer101 TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contacts_link_layer101 result = new TL_contacts_link_layer101();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.my_link = ContactLink_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.foreign_link = ContactLink_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.my_link.serializeToStream(stream);
            this.foreign_link.serializeToStream(stream);
            this.user.serializeToStream(stream);
        }
    }

    public static abstract class EncryptedFile extends TLObject {
        public long access_hash;
        public int dc_id;
        public long id;
        public int key_fingerprint;
        public int size;

        public static EncryptedFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            EncryptedFile result = null;
            switch (constructor) {
                case -1038136962:
                    result = new TL_encryptedFileEmpty();
                    break;
                case 1248893260:
                    result = new TL_encryptedFile();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_encryptedFile extends EncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
            this.key_fingerprint = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_encryptedFileEmpty extends EncryptedFile {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class Peer extends TLObject {
        public long channel_id;
        public long chat_id;
        public long user_id;

        public static Peer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Peer result = null;
            switch (constructor) {
                case -1649296275:
                    result = new TL_peerUser_layer131();
                    break;
                case -1566230754:
                    result = new TL_peerChannel();
                    break;
                case -1160714821:
                    result = new TL_peerChat_layer131();
                    break;
                case -1109531342:
                    result = new TL_peerChannel_layer131();
                    break;
                case 918946202:
                    result = new TL_peerChat();
                    break;
                case 1498486562:
                    result = new TL_peerUser();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Peer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_peerChannel_layer131 extends TL_peerChannel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.channel_id);
        }
    }

    public static class TL_peerUser extends Peer {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_peerChannel extends Peer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
        }
    }

    public static class TL_peerChat extends Peer {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_peerUser_layer131 extends TL_peerUser {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_peerChat_layer131 extends TL_peerChat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.chat_id);
        }
    }

    public static class TL_labeledPrice extends TLObject {
        public static int constructor = -NUM;
        public long amount;
        public String label;

        public static TL_labeledPrice TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_labeledPrice result = new TL_labeledPrice();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_labeledPrice", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.label = stream.readString(exception);
            this.amount = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.label);
            stream.writeInt64(this.amount);
        }
    }

    public static class TL_messages_exportedChatInvites extends TLObject {
        public static int constructor = -NUM;
        public int count;
        public ArrayList<ExportedChatInvite> invites = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_exportedChatInvites TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_exportedChatInvites result = new TL_messages_exportedChatInvites();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_exportedChatInvites", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    ExportedChatInvite object = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.invites.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.invites.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.invites.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputStickerSetItem extends TLObject {
        public static int constructor = -6249322;
        public InputDocument document;
        public String emoji;
        public int flags;
        public TL_maskCoords mask_coords;

        public static TL_inputStickerSetItem TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputStickerSetItem result = new TL_inputStickerSetItem();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputStickerSetItem", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.document = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.emoji = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.mask_coords = TL_maskCoords.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.document.serializeToStream(stream);
            stream.writeString(this.emoji);
            if ((this.flags & 1) != 0) {
                this.mask_coords.serializeToStream(stream);
            }
        }
    }

    public static class TL_langPackDifference extends TLObject {
        public static int constructor = -NUM;
        public int from_version;
        public String lang_code;
        public ArrayList<LangPackString> strings = new ArrayList<>();
        public int version;

        public static TL_langPackDifference TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_langPackDifference result = new TL_langPackDifference();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_langPackDifference", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lang_code = stream.readString(exception);
            this.from_version = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    LangPackString object = LangPackString.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.strings.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
            stream.writeInt32(this.from_version);
            stream.writeInt32(this.version);
            stream.writeInt32(NUM);
            int count = this.strings.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.strings.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class help_DeepLinkInfo extends TLObject {
        public static help_DeepLinkInfo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_DeepLinkInfo result = null;
            switch (constructor) {
                case 1722786150:
                    result = new TL_help_deepLinkInfoEmpty();
                    break;
                case 1783556146:
                    result = new TL_help_deepLinkInfo();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_DeepLinkInfo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_deepLinkInfoEmpty extends help_DeepLinkInfo {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_deepLinkInfo extends help_DeepLinkInfo {
        public static int constructor = NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public String message;
        public boolean update_app;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.update_app = (readInt32 & 1) != 0;
            this.message = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.update_app ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.message);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_chatAdminRights extends TLObject {
        public static int constructor = NUM;
        public boolean add_admins;
        public boolean anonymous;
        public boolean ban_users;
        public boolean change_info;
        public boolean delete_messages;
        public boolean edit_messages;
        public int flags;
        public boolean invite_users;
        public boolean manage_call;
        public boolean other;
        public boolean pin_messages;
        public boolean post_messages;

        public static TL_chatAdminRights TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_chatAdminRights result = new TL_chatAdminRights();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatAdminRights", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.change_info = (readInt32 & 1) != 0;
            this.post_messages = (readInt32 & 2) != 0;
            this.edit_messages = (readInt32 & 4) != 0;
            this.delete_messages = (readInt32 & 8) != 0;
            this.ban_users = (readInt32 & 16) != 0;
            this.invite_users = (readInt32 & 32) != 0;
            this.pin_messages = (readInt32 & 128) != 0;
            this.add_admins = (readInt32 & 512) != 0;
            this.anonymous = (readInt32 & 1024) != 0;
            this.manage_call = (readInt32 & 2048) != 0;
            if ((readInt32 & 4096) != 0) {
                z = true;
            }
            this.other = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.change_info ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.post_messages ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.edit_messages ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.delete_messages ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.ban_users ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.invite_users ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.pin_messages ? i6 | 128 : i6 & -129;
            this.flags = i7;
            int i8 = this.add_admins ? i7 | 512 : i7 & -513;
            this.flags = i8;
            int i9 = this.anonymous ? i8 | 1024 : i8 & -1025;
            this.flags = i9;
            int i10 = this.manage_call ? i9 | 2048 : i9 & -2049;
            this.flags = i10;
            int i11 = this.other ? i10 | 4096 : i10 & -4097;
            this.flags = i11;
            stream.writeInt32(i11);
        }
    }

    public static class TL_statsAbsValueAndPrev extends TLObject {
        public static int constructor = -NUM;
        public double current;
        public double previous;

        public static TL_statsAbsValueAndPrev TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsAbsValueAndPrev result = new TL_statsAbsValueAndPrev();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsAbsValueAndPrev", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.current = stream.readDouble(exception);
            this.previous = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.current);
            stream.writeDouble(this.previous);
        }
    }

    public static abstract class PollResults extends TLObject {
        public int flags;
        public boolean min;
        public ArrayList<Long> recent_voters = new ArrayList<>();
        public ArrayList<TL_pollAnswerVoters> results = new ArrayList<>();
        public String solution;
        public ArrayList<MessageEntity> solution_entities = new ArrayList<>();
        public int total_voters;

        public static PollResults TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PollResults result = null;
            switch (constructor) {
                case -1159937629:
                    result = new TL_pollResults_layer131();
                    break;
                case -932174686:
                    result = new TL_pollResults_layer111();
                    break;
                case -591909213:
                    result = new TL_pollResults();
                    break;
                case 1465219162:
                    result = new TL_pollResults_layer108();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PollResults", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pollResults_layer108 extends TL_pollResults {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_pollAnswerVoters object = TL_pollAnswerVoters.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.results.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.total_voters = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.results.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_pollAnswerVoters) this.results.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.total_voters);
            }
        }
    }

    public static class TL_pollResults_layer111 extends PollResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_pollAnswerVoters object = TL_pollAnswerVoters.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.results.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.total_voters = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.recent_voters.add(Long.valueOf((long) stream.readInt32(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.results.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_pollAnswerVoters) this.results.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.total_voters);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_voters.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt32((int) ((Long) this.recent_voters.get(a2)).longValue());
                }
            }
        }
    }

    public static class TL_pollResults_layer131 extends TL_pollResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_pollAnswerVoters object = TL_pollAnswerVoters.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.results.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.total_voters = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.recent_voters.add(Long.valueOf((long) stream.readInt32(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                this.solution = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                int magic3 = stream.readInt32(exception);
                if (magic3 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a3 = 0;
                    while (a3 < count3) {
                        MessageEntity object2 = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.solution_entities.add(object2);
                            a3++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.results.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_pollAnswerVoters) this.results.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.total_voters);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_voters.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt32((int) ((Long) this.recent_voters.get(a2)).longValue());
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.solution);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.solution_entities.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    ((MessageEntity) this.solution_entities.get(a3)).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_pollResults extends PollResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_pollAnswerVoters object = TL_pollAnswerVoters.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.results.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.total_voters = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.recent_voters.add(Long.valueOf(stream.readInt64(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                this.solution = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                int magic3 = stream.readInt32(exception);
                if (magic3 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a3 = 0;
                    while (a3 < count3) {
                        MessageEntity object2 = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.solution_entities.add(object2);
                            a3++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.results.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_pollAnswerVoters) this.results.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.total_voters);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_voters.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt64(((Long) this.recent_voters.get(a2)).longValue());
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.solution);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.solution_entities.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    ((MessageEntity) this.solution_entities.get(a3)).serializeToStream(stream);
                }
            }
        }
    }

    public static abstract class SecureFile extends TLObject {
        public static SecureFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecureFile result = null;
            switch (constructor) {
                case -534283678:
                    result = new TL_secureFile();
                    break;
                case 1679398724:
                    result = new TL_secureFileEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecureFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_secureFileEmpty extends SecureFile {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureFile extends SecureFile {
        public static int constructor = -NUM;
        public long access_hash;
        public int date;
        public int dc_id;
        public byte[] file_hash;
        public long id;
        public byte[] secret;
        public int size;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.file_hash = stream.readByteArray(exception);
            this.secret = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.date);
            stream.writeByteArray(this.file_hash);
            stream.writeByteArray(this.secret);
        }
    }

    public static class TL_messages_affectedMessages extends TLObject {
        public static int constructor = -NUM;
        public int pts;
        public int pts_count;

        public static TL_messages_affectedMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_affectedMessages result = new TL_messages_affectedMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_messages_chatInviteImporters extends TLObject {
        public static int constructor = -NUM;
        public int count;
        public ArrayList<TL_chatInviteImporter> importers = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_chatInviteImporters TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_chatInviteImporters result = new TL_messages_chatInviteImporters();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatInviteImporters", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_chatInviteImporter object = TL_chatInviteImporter.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.importers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.importers.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.importers.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_pollAnswerVoters extends TLObject {
        public static int constructor = NUM;
        public boolean chosen;
        public boolean correct;
        public int flags;
        public byte[] option;
        public int voters;

        public static TL_pollAnswerVoters TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pollAnswerVoters result = new TL_pollAnswerVoters();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswerVoters", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.chosen = (readInt32 & 1) != 0;
            if ((readInt32 & 2) != 0) {
                z = true;
            }
            this.correct = z;
            this.option = stream.readByteArray(exception);
            this.voters = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.chosen ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.correct ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            stream.writeByteArray(this.option);
            stream.writeInt32(this.voters);
        }
    }

    public static class TL_channels_channelParticipant extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ChannelParticipant participant;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_channels_channelParticipant TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channels_channelParticipant result = new TL_channels_channelParticipant();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipant", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participant.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_authorization extends TLObject {
        public static int constructor = -NUM;
        public int api_id;
        public String app_name;
        public String app_version;
        public boolean call_requests_disabled;
        public String country;
        public boolean current;
        public int date_active;
        public int date_created;
        public String device_model;
        public boolean encrypted_requests_disabled;
        public int flags;
        public long hash;
        public String ip;
        public boolean official_app;
        public boolean password_pending;
        public String platform;
        public String region;
        public String system_version;

        public static TL_authorization TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_authorization result = new TL_authorization();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_authorization", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.current = (readInt32 & 1) != 0;
            this.official_app = (readInt32 & 2) != 0;
            this.password_pending = (readInt32 & 4) != 0;
            this.encrypted_requests_disabled = (readInt32 & 8) != 0;
            if ((readInt32 & 16) != 0) {
                z = true;
            }
            this.call_requests_disabled = z;
            this.hash = stream.readInt64(exception);
            this.device_model = stream.readString(exception);
            this.platform = stream.readString(exception);
            this.system_version = stream.readString(exception);
            this.api_id = stream.readInt32(exception);
            this.app_name = stream.readString(exception);
            this.app_version = stream.readString(exception);
            this.date_created = stream.readInt32(exception);
            this.date_active = stream.readInt32(exception);
            this.ip = stream.readString(exception);
            this.country = stream.readString(exception);
            this.region = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.current ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.official_app ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.password_pending ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.encrypted_requests_disabled ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.call_requests_disabled ? i4 | 16 : i4 & -17;
            this.flags = i5;
            stream.writeInt32(i5);
            stream.writeInt64(this.hash);
            stream.writeString(this.device_model);
            stream.writeString(this.platform);
            stream.writeString(this.system_version);
            stream.writeInt32(this.api_id);
            stream.writeString(this.app_name);
            stream.writeString(this.app_version);
            stream.writeInt32(this.date_created);
            stream.writeInt32(this.date_active);
            stream.writeString(this.ip);
            stream.writeString(this.country);
            stream.writeString(this.region);
        }
    }

    public static abstract class StatsGraph extends TLObject {
        public static StatsGraph TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            StatsGraph result = null;
            switch (constructor) {
                case -1901828938:
                    result = new TL_statsGraph();
                    break;
                case -1092839390:
                    result = new TL_statsGraphError();
                    break;
                case 1244130093:
                    result = new TL_statsGraphAsync();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in StatsGraph", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_statsGraph extends StatsGraph {
        public static int constructor = -NUM;
        public int flags;
        public TL_dataJSON json;
        public String zoom_token;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.json = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.zoom_token = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.json.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.zoom_token);
            }
        }
    }

    public static class TL_statsGraphAsync extends StatsGraph {
        public static int constructor = NUM;
        public String token;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.token = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.token);
        }
    }

    public static class TL_statsGraphError extends StatsGraph {
        public static int constructor = -NUM;
        public String error;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.error = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.error);
        }
    }

    public static class TL_messageInteractionCounters extends TLObject {
        public static int constructor = -NUM;
        public int forwards;
        public int msg_id;
        public int views;

        public static TL_messageInteractionCounters TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messageInteractionCounters result = new TL_messageInteractionCounters();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageInteractionCounters", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.msg_id = stream.readInt32(exception);
            this.views = stream.readInt32(exception);
            this.forwards = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(this.views);
            stream.writeInt32(this.forwards);
        }
    }

    public static abstract class updates_Difference extends TLObject {
        public ArrayList<Chat> chats = new ArrayList<>();
        public int date;
        public TL_updates_state intermediate_state;
        public ArrayList<EncryptedMessage> new_encrypted_messages = new ArrayList<>();
        public ArrayList<Message> new_messages = new ArrayList<>();
        public ArrayList<Update> other_updates = new ArrayList<>();
        public int pts;
        public int seq;
        public TL_updates_state state;
        public ArrayList<User> users = new ArrayList<>();

        public static updates_Difference TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            updates_Difference result = null;
            switch (constructor) {
                case -1459938943:
                    result = new TL_updates_differenceSlice();
                    break;
                case 16030880:
                    result = new TL_updates_difference();
                    break;
                case 1258196845:
                    result = new TL_updates_differenceTooLong();
                    break;
                case 1567990072:
                    result = new TL_updates_differenceEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in updates_Difference", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_updates_difference extends updates_Difference {
        public static int constructor = 16030880;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.new_messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        EncryptedMessage object2 = EncryptedMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.new_encrypted_messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Update object3 = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.other_updates.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                Chat object4 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.chats.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                            int magic5 = stream.readInt32(exception);
                            if (magic5 == NUM) {
                                int count5 = stream.readInt32(exception);
                                int a5 = 0;
                                while (a5 < count5) {
                                    User object5 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                    if (object5 != null) {
                                        this.users.add(object5);
                                        a5++;
                                    } else {
                                        return;
                                    }
                                }
                                this.state = TL_updates_state.TLdeserialize(stream, stream.readInt32(exception), exception);
                            } else if (exception) {
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic5)}));
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.new_messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.new_messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.new_encrypted_messages.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((EncryptedMessage) this.new_encrypted_messages.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.other_updates.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Update) this.other_updates.get(a3)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.chats.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                ((Chat) this.chats.get(a4)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count5 = this.users.size();
            stream.writeInt32(count5);
            for (int a5 = 0; a5 < count5; a5++) {
                ((User) this.users.get(a5)).serializeToStream(stream);
            }
            this.state.serializeToStream(stream);
        }
    }

    public static class TL_updates_differenceSlice extends updates_Difference {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.new_messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        EncryptedMessage object2 = EncryptedMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.new_encrypted_messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Update object3 = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.other_updates.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                Chat object4 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.chats.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                            int magic5 = stream.readInt32(exception);
                            if (magic5 == NUM) {
                                int count5 = stream.readInt32(exception);
                                int a5 = 0;
                                while (a5 < count5) {
                                    User object5 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                    if (object5 != null) {
                                        this.users.add(object5);
                                        a5++;
                                    } else {
                                        return;
                                    }
                                }
                                this.intermediate_state = TL_updates_state.TLdeserialize(stream, stream.readInt32(exception), exception);
                            } else if (exception) {
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic5)}));
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.new_messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.new_messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.new_encrypted_messages.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((EncryptedMessage) this.new_encrypted_messages.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.other_updates.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Update) this.other_updates.get(a3)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.chats.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                ((Chat) this.chats.get(a4)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count5 = this.users.size();
            stream.writeInt32(count5);
            for (int a5 = 0; a5 < count5; a5++) {
                ((User) this.users.get(a5)).serializeToStream(stream);
            }
            this.intermediate_state.serializeToStream(stream);
        }
    }

    public static class TL_updates_differenceTooLong extends updates_Difference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pts = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_updates_differenceEmpty extends updates_Difference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.date = stream.readInt32(exception);
            this.seq = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.date);
            stream.writeInt32(this.seq);
        }
    }

    public static abstract class PrivacyKey extends TLObject {
        public static PrivacyKey TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PrivacyKey result = null;
            switch (constructor) {
                case -1777000467:
                    result = new TL_privacyKeyProfilePhoto();
                    break;
                case -1137792208:
                    result = new TL_privacyKeyStatusTimestamp();
                    break;
                case -778378131:
                    result = new TL_privacyKeyPhoneNumber();
                    break;
                case 961092808:
                    result = new TL_privacyKeyPhoneP2P();
                    break;
                case 1030105979:
                    result = new TL_privacyKeyPhoneCall();
                    break;
                case 1124062251:
                    result = new TL_privacyKeyAddedByPhone();
                    break;
                case 1343122938:
                    result = new TL_privacyKeyChatInvite();
                    break;
                case 1777096355:
                    result = new TL_privacyKeyForwards();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PrivacyKey", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_privacyKeyStatusTimestamp extends PrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyPhoneP2P extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyChatInvite extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyPhoneCall extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyAddedByPhone extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyForwards extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyPhoneNumber extends PrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyProfilePhoto extends PrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class GeoPoint extends TLObject {
        public double _long;
        public long access_hash;
        public int accuracy_radius;
        public int flags;
        public double lat;

        public static GeoPoint TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            GeoPoint result = null;
            switch (constructor) {
                case -1297942941:
                    result = new TL_geoPoint();
                    break;
                case 43446532:
                    result = new TL_geoPoint_layer119();
                    break;
                case 286776671:
                    result = new TL_geoPointEmpty();
                    break;
                case 541710092:
                    result = new TL_geoPoint_layer81();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in GeoPoint", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_geoPoint_layer119 extends TL_geoPoint {
        public static int constructor = 43446532;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this._long = stream.readDouble(exception);
            this.lat = stream.readDouble(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this._long);
            stream.writeDouble(this.lat);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_geoPoint_layer81 extends TL_geoPoint {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this._long = stream.readDouble(exception);
            this.lat = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this._long);
            stream.writeDouble(this.lat);
        }
    }

    public static class TL_geoPointEmpty extends GeoPoint {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_geoPoint extends GeoPoint {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this._long = stream.readDouble(exception);
            this.lat = stream.readDouble(exception);
            this.access_hash = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.accuracy_radius = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeDouble(this._long);
            stream.writeDouble(this.lat);
            stream.writeInt64(this.access_hash);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.accuracy_radius);
            }
        }
    }

    public static class TL_account_privacyRules extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<PrivacyRule> rules = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_account_privacyRules TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_privacyRules result = new TL_account_privacyRules();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_privacyRules", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PrivacyRule object = PrivacyRule.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rules.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.rules.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.rules.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static abstract class ChatInvite extends TLObject {
        public String about;
        public boolean broadcast;
        public boolean channel;
        public Chat chat;
        public int expires;
        public int flags;
        public boolean isPublic;
        public boolean megagroup;
        public ArrayList<User> participants = new ArrayList<>();
        public int participants_count;
        public Photo photo;
        public boolean request_needed;
        public String title;

        public static ChatInvite TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChatInvite result = null;
            switch (constructor) {
                case 806110401:
                    result = new TL_chatInvite();
                    break;
                case 1516793212:
                    result = new TL_chatInviteAlready();
                    break;
                case 1634294960:
                    result = new TL_chatInvitePeek();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChatInvite", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_chatInvite extends ChatInvite {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.channel = (this.flags & 1) != 0;
            this.broadcast = (this.flags & 2) != 0;
            this.isPublic = (this.flags & 4) != 0;
            this.megagroup = (this.flags & 8) != 0;
            this.request_needed = (this.flags & 64) != 0;
            this.title = stream.readString(exception);
            if ((this.flags & 32) != 0) {
                this.about = stream.readString(exception);
            }
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            if ((this.flags & 16) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.participants.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.channel ? this.flags | 1 : this.flags & -2;
            this.flags = this.broadcast ? this.flags | 2 : this.flags & -3;
            this.flags = this.isPublic ? this.flags | 4 : this.flags & -5;
            this.flags = this.megagroup ? this.flags | 8 : this.flags & -9;
            this.flags = this.about != null ? this.flags | 32 : this.flags & -33;
            this.flags = this.request_needed ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeString(this.title);
            if (this.about != null) {
                stream.writeString(this.about);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count = this.participants.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((User) this.participants.get(a)).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_chatInvitePeek extends ChatInvite {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.chat.serializeToStream(stream);
            stream.writeInt32(this.expires);
        }
    }

    public static class TL_chatInviteAlready extends ChatInvite {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.chat.serializeToStream(stream);
        }
    }

    public static class TL_inputGroupCall extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public long id;

        public static TL_inputGroupCall TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputGroupCall result = new TL_inputGroupCall();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputGroupCall", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class help_AppUpdate extends TLObject {
        public static help_AppUpdate TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_AppUpdate result = null;
            switch (constructor) {
                case -1000708810:
                    result = new TL_help_noAppUpdate();
                    break;
                case -860107216:
                    result = new TL_help_appUpdate();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_AppUpdate", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_appUpdate extends help_AppUpdate {
        public static int constructor = -NUM;
        public boolean can_not_skip;
        public Document document;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public int id;
        public Document sticker;
        public String text;
        public String url;
        public String version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.can_not_skip = (readInt32 & 1) != 0;
            this.id = stream.readInt32(exception);
            this.version = stream.readString(exception);
            this.text = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 4) != 0) {
                    this.url = stream.readString(exception);
                }
                if ((this.flags & 8) != 0) {
                    this.sticker = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.can_not_skip ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.id);
            stream.writeString(this.version);
            stream.writeString(this.text);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.entities.get(a).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 8) != 0) {
                this.sticker.serializeToStream(stream);
            }
        }
    }

    public static class TL_help_noAppUpdate extends help_AppUpdate {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_affectedFoundMessages extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> messages = new ArrayList<>();
        public int offset;
        public int pts;
        public int pts_count;

        public static TL_messages_affectedFoundMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_affectedFoundMessages result = new TL_messages_affectedFoundMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedFoundMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
            this.offset = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
            stream.writeInt32(this.offset);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
        }
    }

    public static class TL_channelAdminLogEvent extends TLObject {
        public static int constructor = NUM;
        public ChannelAdminLogEventAction action;
        public int date;
        public long id;
        public long user_id;

        public static TL_channelAdminLogEvent TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channelAdminLogEvent result = new TL_channelAdminLogEvent();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEvent", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
            this.action = ChannelAdminLogEventAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.date);
            stream.writeInt64(this.user_id);
            this.action.serializeToStream(stream);
        }
    }

    public static abstract class messages_FavedStickers extends TLObject {
        public long hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList<>();
        public ArrayList<Document> stickers = new ArrayList<>();

        public static messages_FavedStickers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_FavedStickers result = null;
            switch (constructor) {
                case -1634752813:
                    result = new TL_messages_favedStickersNotModified();
                    break;
                case 750063767:
                    result = new TL_messages_favedStickers();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_FavedStickers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_favedStickersNotModified extends messages_FavedStickers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_favedStickers extends messages_FavedStickers {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_stickerPack object = TL_stickerPack.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.packs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Document object2 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.stickers.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.packs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_stickerPack) this.packs.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.stickers.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Document) this.stickers.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static class TL_langPackLanguage extends TLObject {
        public static int constructor = -NUM;
        public String base_lang_code;
        public int flags;
        public String lang_code;
        public String name;
        public String native_name;
        public boolean official;
        public String plural_code;
        public boolean rtl;
        public int strings_count;
        public int translated_count;
        public String translations_url;

        public static TL_langPackLanguage TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_langPackLanguage result = new TL_langPackLanguage();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_langPackLanguage", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.official = (readInt32 & 1) != 0;
            if ((readInt32 & 4) != 0) {
                z = true;
            }
            this.rtl = z;
            this.name = stream.readString(exception);
            this.native_name = stream.readString(exception);
            this.lang_code = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                this.base_lang_code = stream.readString(exception);
            }
            this.plural_code = stream.readString(exception);
            this.strings_count = stream.readInt32(exception);
            this.translated_count = stream.readInt32(exception);
            this.translations_url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.official ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.rtl ? i | 4 : i & -5;
            this.flags = i2;
            stream.writeInt32(i2);
            stream.writeString(this.name);
            stream.writeString(this.native_name);
            stream.writeString(this.lang_code);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.base_lang_code);
            }
            stream.writeString(this.plural_code);
            stream.writeInt32(this.strings_count);
            stream.writeInt32(this.translated_count);
            stream.writeString(this.translations_url);
        }
    }

    public static class TL_chatInviteImporter extends TLObject {
        public static int constructor = -NUM;
        public String about;
        public long approved_by;
        public int date;
        public int flags;
        public boolean requested;
        public long user_id;

        public static TL_chatInviteImporter TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_chatInviteImporter result = new TL_chatInviteImporter();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatInviteImporter", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.requested = z;
            this.user_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.about = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.approved_by = stream.readInt64(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.requested ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.date);
            if ((this.flags & 4) != 0) {
                stream.writeString(this.about);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt64(this.approved_by);
            }
        }
    }

    public static abstract class SendMessageAction extends TLObject {
        public int progress;

        public static SendMessageAction TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SendMessageAction result = null;
            switch (constructor) {
                case -1997373508:
                    result = new TL_sendMessageRecordRoundAction();
                    break;
                case -1884362354:
                    result = new TL_sendMessageUploadDocumentAction_old();
                    break;
                case -1845219337:
                    result = new TL_sendMessageUploadVideoAction_old();
                    break;
                case -1727382502:
                    result = new TL_sendMessageUploadPhotoAction_old();
                    break;
                case -1584933265:
                    result = new TL_sendMessageRecordVideoAction();
                    break;
                case -1441998364:
                    result = new TL_sendMessageUploadDocumentAction();
                    break;
                case -1336228175:
                    result = new TL_sendMessageChooseStickerAction();
                    break;
                case -1234857938:
                    result = new TL_sendMessageEmojiInteractionSeen();
                    break;
                case -774682074:
                    result = new TL_sendMessageUploadPhotoAction();
                    break;
                case -718310409:
                    result = new TL_sendMessageRecordAudioAction();
                    break;
                case -651419003:
                    result = new TL_speakingInGroupCallAction();
                    break;
                case -606432698:
                    result = new TL_sendMessageHistoryImportAction();
                    break;
                case -580219064:
                    result = new TL_sendMessageGamePlayAction();
                    break;
                case -424899985:
                    result = new TL_sendMessageUploadAudioAction_old();
                    break;
                case -378127636:
                    result = new TL_sendMessageUploadVideoAction();
                    break;
                case -212740181:
                    result = new TL_sendMessageUploadAudioAction();
                    break;
                case -44119819:
                    result = new TL_sendMessageCancelAction();
                    break;
                case 381645902:
                    result = new TL_sendMessageTypingAction();
                    break;
                case 393186209:
                    result = new TL_sendMessageGeoLocationAction();
                    break;
                case 608050278:
                    result = new TL_sendMessageUploadRoundAction();
                    break;
                case 630664139:
                    result = new TL_sendMessageEmojiInteraction();
                    break;
                case 1653390447:
                    result = new TL_sendMessageChooseContactAction();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SendMessageAction", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_sendMessageGamePlayAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordAudioAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadVideoAction_old extends TL_sendMessageUploadVideoAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageEmojiInteraction extends SendMessageAction {
        public static int constructor = NUM;
        public String emoticon;
        public TL_dataJSON interaction;
        public int msg_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
            this.msg_id = stream.readInt32(exception);
            this.interaction = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
            stream.writeInt32(this.msg_id);
            this.interaction.serializeToStream(stream);
        }
    }

    public static class TL_sendMessageUploadAudioAction_old extends TL_sendMessageUploadAudioAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadAudioAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadPhotoAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadDocumentAction_old extends TL_sendMessageUploadDocumentAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadVideoAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageCancelAction extends SendMessageAction {
        public static int constructor = -44119819;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGeoLocationAction extends SendMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageChooseContactAction extends SendMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageChooseStickerAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordRoundAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadRoundAction extends SendMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageEmojiInteractionSeen extends SendMessageAction {
        public static int constructor = -NUM;
        public String emoticon;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_sendMessageTypingAction extends SendMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageHistoryImportAction extends SendMessageAction {
        public static int constructor = -NUM;
        public int progress;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadPhotoAction_old extends TL_sendMessageUploadPhotoAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadDocumentAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.progress = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.progress);
        }
    }

    public static class TL_speakingInGroupCallAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordVideoAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class auth_SentCodeType extends TLObject {
        public int length;
        public String pattern;
        public String prefix;

        public static auth_SentCodeType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            auth_SentCodeType result = null;
            switch (constructor) {
                case -2113903484:
                    result = new TL_auth_sentCodeTypeMissedCall();
                    break;
                case -1425815847:
                    result = new TL_auth_sentCodeTypeFlashCall();
                    break;
                case -1073693790:
                    result = new TL_auth_sentCodeTypeSms();
                    break;
                case 1035688326:
                    result = new TL_auth_sentCodeTypeApp();
                    break;
                case 1398007207:
                    result = new TL_auth_sentCodeTypeCall();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_auth_sentCodeTypeApp extends auth_SentCodeType {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeCall extends auth_SentCodeType {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeFlashCall extends auth_SentCodeType {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pattern = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.pattern);
        }
    }

    public static class TL_auth_sentCodeTypeMissedCall extends auth_SentCodeType {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prefix = stream.readString(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prefix);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeSms extends auth_SentCodeType {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.length);
        }
    }

    public static abstract class messages_StickerSetInstallResult extends TLObject {
        public ArrayList<StickerSetCovered> sets = new ArrayList<>();

        public static messages_StickerSetInstallResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_StickerSetInstallResult result = null;
            switch (constructor) {
                case 904138920:
                    result = new TL_messages_stickerSetInstallResultArchive();
                    break;
                case 946083368:
                    result = new TL_messages_stickerSetInstallResultSuccess();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSetInstallResult", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_stickerSetInstallResultSuccess extends messages_StickerSetInstallResult {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_stickerSetInstallResultArchive extends messages_StickerSetInstallResult {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    StickerSetCovered object = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sets.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.sets.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((StickerSetCovered) this.sets.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_peerSettings extends TLObject {
        public static int constructor = -NUM;
        public boolean add_contact;
        public boolean autoarchived;
        public boolean block_contact;
        public int flags;
        public int geo_distance;
        public boolean invite_members;
        public boolean need_contacts_exception;
        public boolean report_geo;
        public boolean report_spam;
        public boolean request_chat_broadcast;
        public int request_chat_date;
        public String request_chat_title;
        public boolean share_contact;

        public static TL_peerSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_peerSettings result = new TL_peerSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.report_spam = (readInt32 & 1) != 0;
            this.add_contact = (readInt32 & 2) != 0;
            this.block_contact = (readInt32 & 4) != 0;
            this.share_contact = (readInt32 & 8) != 0;
            this.need_contacts_exception = (readInt32 & 16) != 0;
            this.report_geo = (readInt32 & 32) != 0;
            this.autoarchived = (readInt32 & 128) != 0;
            this.invite_members = (readInt32 & 256) != 0;
            if ((readInt32 & 1024) != 0) {
                z = true;
            }
            this.request_chat_broadcast = z;
            if ((readInt32 & 64) != 0) {
                this.geo_distance = stream.readInt32(exception);
            }
            if ((this.flags & 512) != 0) {
                this.request_chat_title = stream.readString(exception);
            }
            if ((this.flags & 512) != 0) {
                this.request_chat_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.report_spam ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.add_contact ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.block_contact ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.share_contact ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.need_contacts_exception ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.report_geo ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.autoarchived ? i6 | 128 : i6 & -129;
            this.flags = i7;
            int i8 = this.invite_members ? i7 | 256 : i7 & -257;
            this.flags = i8;
            int i9 = this.request_chat_broadcast ? i8 | 1024 : i8 & -1025;
            this.flags = i9;
            stream.writeInt32(i9);
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.geo_distance);
            }
            if ((this.flags & 512) != 0) {
                stream.writeString(this.request_chat_title);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.request_chat_date);
            }
        }
    }

    public static class TL_statsGroupTopInviter extends TLObject {
        public static int constructor = NUM;
        public int invitations;
        public long user_id;

        public static TL_statsGroupTopInviter TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsGroupTopInviter result = new TL_statsGroupTopInviter();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsGroupTopInviter", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.invitations = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.invitations);
        }
    }

    public static abstract class InputDialogPeer extends TLObject {
        public static InputDialogPeer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputDialogPeer result = null;
            switch (constructor) {
                case -55902537:
                    result = new TL_inputDialogPeer();
                    break;
                case 1684014375:
                    result = new TL_inputDialogPeerFolder();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputDialogPeer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputDialogPeer extends InputDialogPeer {
        public static int constructor = -55902537;
        public InputPeer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_inputDialogPeerFolder extends InputDialogPeer {
        public static int constructor = NUM;
        public int folder_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.folder_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.folder_id);
        }
    }

    public static abstract class payments_PaymentResult extends TLObject {
        public static payments_PaymentResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            payments_PaymentResult result = null;
            switch (constructor) {
                case -666824391:
                    result = new TL_payments_paymentVerificationNeeded();
                    break;
                case 1314881805:
                    result = new TL_payments_paymentResult();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in payments_PaymentResult", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_payments_paymentVerificationNeeded extends payments_PaymentResult {
        public static int constructor = -NUM;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_payments_paymentResult extends payments_PaymentResult {
        public static int constructor = NUM;
        public Updates updates;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.updates = Updates.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.updates.serializeToStream(stream);
        }
    }

    public static class TL_channels_adminLogResults extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<TL_channelAdminLogEvent> events = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_channels_adminLogResults TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channels_adminLogResults result = new TL_channels_adminLogResults();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_adminLogResults", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_channelAdminLogEvent object = TL_channelAdminLogEvent.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.events.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.events.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.events.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputPhoneContact extends TLObject {
        public static int constructor = -NUM;
        public long client_id;
        public String first_name;
        public String last_name;
        public String phone;

        public static TL_inputPhoneContact TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputPhoneContact result = new TL_inputPhoneContact();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.client_id = stream.readInt64(exception);
            this.phone = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.client_id);
            stream.writeString(this.phone);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
        }
    }

    public static abstract class ThemeSettings extends TLObject {
        public int accent_color;
        public BaseTheme base_theme;
        public int flags;
        public ArrayList<Integer> message_colors = new ArrayList<>();
        public boolean message_colors_animated;
        public int outbox_accent_color;
        public WallPaper wallpaper;

        public static ThemeSettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ThemeSettings result = null;
            switch (constructor) {
                case -1917524116:
                    result = new TL_themeSettings_layer132();
                    break;
                case -1676371894:
                    result = new TL_themeSettings_layer131();
                    break;
                case -94849324:
                    result = new TL_themeSettings();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ThemeSettings", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_themeSettings extends ThemeSettings {
        public static int constructor = -94849324;

        public static TL_themeSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_themeSettings result = new TL_themeSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_themeSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.message_colors_animated = (this.flags & 4) != 0;
            this.base_theme = BaseTheme.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.accent_color = stream.readInt32(exception);
            if ((this.flags & 8) != 0) {
                this.outbox_accent_color = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.message_colors.add(Integer.valueOf(stream.readInt32(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper = WallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.message_colors_animated ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            this.base_theme.serializeToStream(stream);
            stream.writeInt32(this.accent_color);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.outbox_accent_color);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.message_colors.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeInt32(((Integer) this.message_colors.get(a)).intValue());
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper.serializeToStream(stream);
            }
        }
    }

    public static class TL_themeSettings_layer132 extends ThemeSettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.message_colors_animated = (this.flags & 4) != 0;
            this.base_theme = BaseTheme.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.accent_color = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.message_colors.add(Integer.valueOf(stream.readInt32(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper = WallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.message_colors_animated ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            this.base_theme.serializeToStream(stream);
            stream.writeInt32(this.accent_color);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.message_colors.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeInt32(((Integer) this.message_colors.get(a)).intValue());
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper.serializeToStream(stream);
            }
        }
    }

    public static class TL_themeSettings_layer131 extends ThemeSettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int color;
            int color2;
            this.flags = stream.readInt32(exception);
            this.base_theme = BaseTheme.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.accent_color = stream.readInt32(exception);
            if (!((this.flags & 1) == 0 || (color2 = stream.readInt32(exception)) == 0)) {
                this.message_colors.add(Integer.valueOf(color2));
            }
            if (!((this.flags & 1) == 0 || (color = stream.readInt32(exception)) == 0)) {
                this.message_colors.add(0, Integer.valueOf(color));
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper = WallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.base_theme.serializeToStream(stream);
            stream.writeInt32(this.accent_color);
            int i = 0;
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.message_colors.size() > 1 ? ((Integer) this.message_colors.get(1)).intValue() : 0);
            }
            if ((this.flags & 1) != 0) {
                if (this.message_colors.size() > 0) {
                    i = ((Integer) this.message_colors.get(0)).intValue();
                }
                stream.writeInt32(i);
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper.serializeToStream(stream);
            }
        }
    }

    public static class TL_pageCaption extends TLObject {
        public static int constructor = NUM;
        public RichText credit;
        public RichText text;

        public static TL_pageCaption TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pageCaption result = new TL_pageCaption();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pageCaption", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.credit = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            this.credit.serializeToStream(stream);
        }
    }

    public static abstract class PrivacyRule extends TLObject {
        public static PrivacyRule TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PrivacyRule result = null;
            switch (constructor) {
                case -1955338397:
                    result = new TL_privacyValueDisallowAll();
                    break;
                case -1198497870:
                    result = new TL_privacyValueAllowUsers();
                    break;
                case -463335103:
                    result = new TL_privacyValueDisallowUsers();
                    break;
                case -125240806:
                    result = new TL_privacyValueDisallowContacts();
                    break;
                case -123988:
                    result = new TL_privacyValueAllowContacts();
                    break;
                case 1103656293:
                    result = new TL_privacyValueDisallowChatParticipants();
                    break;
                case 1698855810:
                    result = new TL_privacyValueAllowAll();
                    break;
                case 1796427406:
                    result = new TL_privacyValueAllowChatParticipants();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PrivacyRule", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_privacyValueDisallowContacts extends PrivacyRule {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowUsers extends PrivacyRule {
        public static int constructor = -NUM;
        public ArrayList<Long> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.users.get(a).longValue());
            }
        }
    }

    public static class TL_privacyValueAllowChatParticipants extends PrivacyRule {
        public static int constructor = NUM;
        public ArrayList<Long> chats = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.chats.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.chats.get(a).longValue());
            }
        }
    }

    public static class TL_privacyValueDisallowChatParticipants extends PrivacyRule {
        public static int constructor = NUM;
        public ArrayList<Long> chats = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.chats.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.chats.get(a).longValue());
            }
        }
    }

    public static class TL_privacyValueAllowAll extends PrivacyRule {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowAll extends PrivacyRule {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowUsers extends PrivacyRule {
        public static int constructor = -NUM;
        public ArrayList<Long> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.users.get(a).longValue());
            }
        }
    }

    public static class TL_privacyValueAllowContacts extends PrivacyRule {
        public static int constructor = -123988;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_pageTableCell extends TLObject {
        public static int constructor = NUM;
        public boolean align_center;
        public boolean align_right;
        public int colspan;
        public int flags;
        public boolean header;
        public int rowspan;
        public RichText text;
        public boolean valign_bottom;
        public boolean valign_middle;

        public static TL_pageTableCell TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pageTableCell result = new TL_pageTableCell();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableCell", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.header = (readInt32 & 1) != 0;
            this.align_center = (readInt32 & 8) != 0;
            this.align_right = (readInt32 & 16) != 0;
            this.valign_middle = (readInt32 & 32) != 0;
            if ((readInt32 & 64) != 0) {
                z = true;
            }
            this.valign_bottom = z;
            if ((readInt32 & 128) != 0) {
                this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.colspan = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.rowspan = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.header ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.align_center ? i | 8 : i & -9;
            this.flags = i2;
            int i3 = this.align_right ? i2 | 16 : i2 & -17;
            this.flags = i3;
            int i4 = this.valign_middle ? i3 | 32 : i3 & -33;
            this.flags = i4;
            int i5 = this.valign_bottom ? i4 | 64 : i4 & -65;
            this.flags = i5;
            stream.writeInt32(i5);
            if ((this.flags & 128) != 0) {
                this.text.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.colspan);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.rowspan);
            }
        }
    }

    public static class TL_messageMediaUnsupported_old extends TL_messageMediaUnsupported {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.bytes = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_messageMediaAudio_layer45 extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.audio_unused = Audio.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.audio_unused.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaPhoto_old extends TL_messageMediaPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaInvoice extends MessageMedia {
        public static int constructor = -NUM;
        public WebDocument photo;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.shipping_address_requested = (this.flags & 2) != 0;
            if ((this.flags & 8) != 0) {
                z = true;
            }
            this.test = z;
            this.title = stream.readString(exception);
            this.description = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.photo = WebDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.receipt_msg_id = stream.readInt32(exception);
            }
            this.currency = stream.readString(exception);
            this.total_amount = stream.readInt64(exception);
            this.start_param = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.shipping_address_requested ? this.flags | 2 : this.flags & -3;
            this.flags = this.test ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeString(this.title);
            stream.writeString(this.description);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.receipt_msg_id);
            }
            stream.writeString(this.currency);
            stream.writeInt64(this.total_amount);
            stream.writeString(this.start_param);
        }
    }

    public static class TL_messageMediaUnsupported extends MessageMedia {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaEmpty extends MessageMedia {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaVenue extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
            this.venue_type = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
            stream.writeString(this.venue_type);
        }
    }

    public static class TL_messageMediaVenue_layer71 extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
        }
    }

    public static class TL_messageMediaVideo_old extends TL_messageMediaVideo_layer45 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.video_unused = Video.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.video_unused.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaDocument extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else {
                this.document = new TL_documentEmpty();
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaDocument_layer74 extends TL_messageMediaDocument {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else {
                this.document = new TL_documentEmpty();
            }
            if ((this.flags & 2) != 0) {
                this.captionLegacy = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.captionLegacy);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaDocument_old extends TL_messageMediaDocument {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.document.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaDocument_layer68 extends TL_messageMediaDocument {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.captionLegacy = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.document.serializeToStream(stream);
            stream.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaPhoto extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else {
                this.photo = new TL_photoEmpty();
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaPoll extends MessageMedia {
        public static int constructor = NUM;
        public Poll poll;
        public PollResults results;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.poll = Poll.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.results = PollResults.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.poll.serializeToStream(stream);
            this.results.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaPhoto_layer74 extends TL_messageMediaPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else {
                this.photo = new TL_photoEmpty();
            }
            if ((this.flags & 2) != 0) {
                this.captionLegacy = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.captionLegacy);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaGeoLive extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.heading = stream.readInt32(exception);
            }
            this.period = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.proximity_notification_radius = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.heading);
            }
            stream.writeInt32(this.period);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.proximity_notification_radius);
            }
        }
    }

    public static class TL_messageMediaGeoLive_layer119 extends TL_messageMediaGeoLive {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.period = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo.serializeToStream(stream);
            stream.writeInt32(this.period);
        }
    }

    public static class TL_messageMediaGame extends MessageMedia {
        public static int constructor = -38694904;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.game = TL_game.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.game.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaContact_layer81 extends TL_messageMediaContact {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_messageMediaPhoto_layer68 extends TL_messageMediaPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.captionLegacy = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo.serializeToStream(stream);
            stream.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaVideo_layer45 extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.video_unused = Video.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.captionLegacy = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.video_unused.serializeToStream(stream);
            stream.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaContact_layer131 extends TL_messageMediaContact {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.vcard = stream.readString(exception);
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.vcard);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_messageMediaContact extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.vcard = stream.readString(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.vcard);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_messageMediaDice extends MessageMedia {
        public static int constructor = NUM;
        public String emoticon;
        public int value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.value = stream.readInt32(exception);
            this.emoticon = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.value);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_messageMediaDice_layer111 extends TL_messageMediaDice {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.value = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.value);
        }
    }

    public static class TL_messageMediaGeo extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo.serializeToStream(stream);
        }
    }

    public static class TL_messageMediaWebPage extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.webpage = WebPage.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.webpage.serializeToStream(stream);
        }
    }

    public static abstract class LangPackString extends TLObject {
        public String few_value;
        public int flags;
        public String key;
        public String many_value;
        public String one_value;
        public String other_value;
        public String two_value;
        public String value;
        public String zero_value;

        public static LangPackString TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            LangPackString result = null;
            switch (constructor) {
                case -892239370:
                    result = new TL_langPackString();
                    break;
                case 695856818:
                    result = new TL_langPackStringDeleted();
                    break;
                case 1816636575:
                    result = new TL_langPackStringPluralized();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in LangPackString", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_langPackStringPluralized extends LangPackString {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.key = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.zero_value = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.one_value = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.two_value = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.few_value = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.many_value = stream.readString(exception);
            }
            this.other_value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.key);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.zero_value);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.one_value);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.two_value);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.few_value);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.many_value);
            }
            stream.writeString(this.other_value);
        }
    }

    public static class TL_langPackString extends LangPackString {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.key = stream.readString(exception);
            this.value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.key);
            stream.writeString(this.value);
        }
    }

    public static class TL_langPackStringDeleted extends LangPackString {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.key = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.key);
        }
    }

    public static class TL_auth_sentCode extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public auth_CodeType next_type;
        public String phone_code_hash;
        public int timeout;
        public auth_SentCodeType type;

        public static TL_auth_sentCode TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_auth_sentCode result = new TL_auth_sentCode();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.type = auth_SentCodeType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.phone_code_hash = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                this.next_type = auth_CodeType.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.timeout = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.type.serializeToStream(stream);
            stream.writeString(this.phone_code_hash);
            if ((this.flags & 2) != 0) {
                this.next_type.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.timeout);
            }
        }
    }

    public static abstract class BotInlineResult extends TLObject {
        public WebDocument content;
        public String description;
        public Document document;
        public int flags;
        public String id;
        public Photo photo;
        public long query_id;
        public BotInlineMessage send_message;
        public WebDocument thumb;
        public String title;
        public String type;
        public String url;

        public static BotInlineResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            BotInlineResult result = null;
            switch (constructor) {
                case 295067450:
                    result = new TL_botInlineResult();
                    break;
                case 400266251:
                    result = new TL_botInlineMediaResult();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_botInlineResult extends BotInlineResult {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readString(exception);
            this.type = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.url = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.thumb = WebDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.content = WebDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.send_message = BotInlineMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.id);
            stream.writeString(this.type);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 16) != 0) {
                this.thumb.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                this.content.serializeToStream(stream);
            }
            this.send_message.serializeToStream(stream);
        }
    }

    public static class TL_botInlineMediaResult extends BotInlineResult {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readString(exception);
            this.type = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            this.send_message = BotInlineMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.id);
            stream.writeString(this.type);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            this.send_message.serializeToStream(stream);
        }
    }

    public static class TL_notificationSoundDefault extends NotificationSound {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_notificationSoundNone extends NotificationSound {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_notificationSoundRingtone extends NotificationSound {
        public static int constructor = -9666487;
        public long id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_notificationSoundLocal extends NotificationSound {
        public static int constructor = -NUM;
        public String data;
        public String title;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            this.data = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeString(this.data);
        }
    }

    public static abstract class NotificationSound extends TLObject {
        public static NotificationSound TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            NotificationSound result = null;
            switch (constructor) {
                case -2096391452:
                    result = new TL_notificationSoundLocal();
                    break;
                case -1746354498:
                    result = new TL_notificationSoundDefault();
                    break;
                case -9666487:
                    result = new TL_notificationSoundRingtone();
                    break;
                case 1863070943:
                    result = new TL_notificationSoundNone();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in NotificationSound", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static abstract class PeerNotifySettings extends TLObject {
        public NotificationSound android_sound;
        public int events_mask;
        public int flags;
        public NotificationSound ios_sound;
        public int mute_until;
        public NotificationSound other_sound;
        public boolean show_previews;
        public boolean silent;
        public String sound;

        public static PeerNotifySettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PeerNotifySettings result = null;
            switch (constructor) {
                case -1923214866:
                    result = new TL_peerNotifySettings_layer47();
                    break;
                case -1697798976:
                    result = new TL_peerNotifySettings_layer77();
                    break;
                case -1472527322:
                    result = new TL_peerNotifySettings();
                    break;
                case -1353671392:
                    result = new TL_peerNotifySettings_layer139();
                    break;
                case 1889961234:
                    result = new TL_peerNotifySettingsEmpty_layer77();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PeerNotifySettings", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_peerNotifySettings_layer77 extends TL_peerNotifySettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.show_previews = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.silent = z;
            this.mute_until = stream.readInt32(exception);
            this.sound = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.show_previews ? this.flags | 1 : this.flags & -2;
            this.flags = this.silent ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.mute_until);
            stream.writeString(this.sound);
        }
    }

    public static class TL_peerNotifySettings extends PeerNotifySettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.show_previews = stream.readBool(exception);
            }
            if ((this.flags & 2) != 0) {
                this.silent = stream.readBool(exception);
            }
            if ((this.flags & 4) != 0) {
                this.mute_until = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.ios_sound = NotificationSound.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.android_sound = NotificationSound.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.other_sound = NotificationSound.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.show_previews);
            }
            if ((this.flags & 2) != 0) {
                stream.writeBool(this.silent);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.mute_until);
            }
            if ((this.flags & 8) != 0) {
                this.ios_sound.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                this.android_sound.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                this.other_sound.serializeToStream(stream);
            }
        }
    }

    public static class TL_peerNotifySettings_layer139 extends TL_peerNotifySettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.show_previews = stream.readBool(exception);
            }
            if ((this.flags & 2) != 0) {
                this.silent = stream.readBool(exception);
            }
            if ((this.flags & 4) != 0) {
                this.mute_until = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.sound = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.show_previews);
            }
            if ((this.flags & 2) != 0) {
                stream.writeBool(this.silent);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.mute_until);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.sound);
            }
        }
    }

    public static class TL_peerNotifySettings_layer47 extends TL_peerNotifySettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.mute_until = stream.readInt32(exception);
            this.sound = stream.readString(exception);
            this.show_previews = stream.readBool(exception);
            this.events_mask = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.mute_until);
            stream.writeString(this.sound);
            stream.writeBool(this.show_previews);
            stream.writeInt32(this.events_mask);
        }
    }

    public static class TL_peerNotifySettingsEmpty_layer77 extends PeerNotifySettings {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class contacts_Blocked extends TLObject {
        public ArrayList<TL_peerBlocked> blocked = new ArrayList<>();
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public ArrayList<User> users = new ArrayList<>();

        public static contacts_Blocked TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            contacts_Blocked result = null;
            switch (constructor) {
                case -513392236:
                    result = new TL_contacts_blockedSlice();
                    break;
                case 182326673:
                    result = new TL_contacts_blocked();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in contacts_Blocked", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_contacts_blocked extends contacts_Blocked {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_peerBlocked object = TL_peerBlocked.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocked.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocked.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_peerBlocked) this.blocked.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_contacts_blockedSlice extends contacts_Blocked {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_peerBlocked object = TL_peerBlocked.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocked.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count = this.blocked.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_peerBlocked) this.blocked.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputSecureValue extends TLObject {
        public static int constructor = -NUM;
        public TL_secureData data;
        public ArrayList<InputSecureFile> files = new ArrayList<>();
        public int flags;
        public InputSecureFile front_side;
        public SecurePlainData plain_data;
        public InputSecureFile reverse_side;
        public InputSecureFile selfie;
        public ArrayList<InputSecureFile> translation = new ArrayList<>();
        public SecureValueType type;

        public static TL_inputSecureValue TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputSecureValue result = new TL_inputSecureValue();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputSecureValue", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.data = TL_secureData.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.front_side = InputSecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.reverse_side = InputSecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                this.selfie = InputSecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        InputSecureFile object = InputSecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.translation.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        InputSecureFile object2 = InputSecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.files.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 32) != 0) {
                this.plain_data = SecurePlainData.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.type.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.data.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.front_side.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                this.reverse_side.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                this.selfie.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(NUM);
                int count = this.translation.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.translation.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.files.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    this.files.get(a2).serializeToStream(stream);
                }
            }
            if ((this.flags & 32) != 0) {
                this.plain_data.serializeToStream(stream);
            }
        }
    }

    public static abstract class messages_DhConfig extends TLObject {
        public int g;
        public byte[] p;
        public byte[] random;
        public int version;

        public static messages_DhConfig TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_DhConfig result = null;
            switch (constructor) {
                case -1058912715:
                    result = new TL_messages_dhConfigNotModified();
                    break;
                case 740433629:
                    result = new TL_messages_dhConfig();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_DhConfig", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_dhConfigNotModified extends messages_DhConfig {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.random);
        }
    }

    public static class TL_messages_dhConfig extends messages_DhConfig {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.g = stream.readInt32(exception);
            this.p = stream.readByteArray(exception);
            this.version = stream.readInt32(exception);
            this.random = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.g);
            stream.writeByteArray(this.p);
            stream.writeInt32(this.version);
            stream.writeByteArray(this.random);
        }
    }

    public static class TL_globalPrivacySettings extends TLObject {
        public static int constructor = -NUM;
        public boolean archive_and_mute_new_noncontact_peers;
        public int flags;

        public static TL_globalPrivacySettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_globalPrivacySettings result = new TL_globalPrivacySettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_globalPrivacySettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.archive_and_mute_new_noncontact_peers = stream.readBool(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.archive_and_mute_new_noncontact_peers);
            }
        }
    }

    public static abstract class help_UserInfo extends TLObject {
        public static help_UserInfo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_UserInfo result = null;
            switch (constructor) {
                case -206688531:
                    result = new TL_help_userInfoEmpty();
                    break;
                case 32192344:
                    result = new TL_help_userInfo();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_UserInfo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_userInfoEmpty extends help_UserInfo {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_userInfo extends help_UserInfo {
        public static int constructor = 32192344;
        public String author;
        public int date;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public String message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.author = stream.readString(exception);
                this.date = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.message);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.entities.get(a).serializeToStream(stream);
            }
            stream.writeString(this.author);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_secureValueHash extends TLObject {
        public static int constructor = -NUM;
        public byte[] hash;
        public SecureValueType type;

        public static TL_secureValueHash TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_secureValueHash result = new TL_secureValueHash();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_secureValueHash", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.hash = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.hash);
        }
    }

    public static abstract class messages_StickerSet extends TLObject {
        public ArrayList<Document> documents = new ArrayList<>();
        public ArrayList<TL_stickerPack> packs = new ArrayList<>();
        public StickerSet set;

        public static TL_messages_stickerSet TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TL_messages_stickerSet result = null;
            switch (constructor) {
                case -1240849242:
                    result = new TL_messages_stickerSet();
                    break;
                case -738646805:
                    result = new TL_messages_stickerSetNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSet", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_stickerSet extends messages_StickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.set = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_stickerPack object = TL_stickerPack.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.packs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Document object2 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.documents.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.set.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.packs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_stickerPack) this.packs.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.documents.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Document) this.documents.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_stickerSetNotModified extends TL_messages_stickerSet {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class InputGeoPoint extends TLObject {
        public double _long;
        public int accuracy_radius;
        public int flags;
        public double lat;

        public static InputGeoPoint TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputGeoPoint result = null;
            switch (constructor) {
                case -457104426:
                    result = new TL_inputGeoPointEmpty();
                    break;
                case 1210199983:
                    result = new TL_inputGeoPoint();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputGeoPoint", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputGeoPoint extends InputGeoPoint {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.lat = stream.readDouble(exception);
            this._long = stream.readDouble(exception);
            if ((this.flags & 1) != 0) {
                this.accuracy_radius = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeDouble(this.lat);
            stream.writeDouble(this._long);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.accuracy_radius);
            }
        }
    }

    public static class TL_inputGeoPointEmpty extends InputGeoPoint {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_inviteText extends TLObject {
        public static int constructor = NUM;
        public String message;

        public static TL_help_inviteText TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_inviteText result = new TL_help_inviteText();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_inviteText", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.message);
        }
    }

    public static abstract class Audio extends TLObject {
        public long access_hash;
        public int date;
        public int dc_id;
        public int duration;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public long user_id;

        public static Audio TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Audio result = null;
            switch (constructor) {
                case -945003370:
                    result = new TL_audio_old2();
                    break;
                case -102543275:
                    result = new TL_audio_layer45();
                    break;
                case 1114908135:
                    result = new TL_audio_old();
                    break;
                case 1431655926:
                    result = new TL_audioEncrypted();
                    break;
                case 1483311320:
                    result = new TL_audioEmpty_layer45();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Audio", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_audioEmpty_layer45 extends Audio {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_audio_layer45 extends Audio {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_audio_old extends TL_audio_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_audioEncrypted extends TL_audio_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_audio_old2 extends TL_audio_layer45 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_help_country extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_help_countryCode> country_codes = new ArrayList<>();
        public String default_name;
        public int flags;
        public boolean hidden;
        public String iso2;
        public String name;

        public static TL_help_country TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_country result = new TL_help_country();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_country", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.hidden = (readInt32 & 1) != 0;
            this.iso2 = stream.readString(exception);
            this.default_name = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                this.name = stream.readString(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_help_countryCode object = TL_help_countryCode.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.country_codes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.hidden ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.iso2);
            stream.writeString(this.default_name);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.name);
            }
            stream.writeInt32(NUM);
            int count = this.country_codes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.country_codes.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class SecurePasswordKdfAlgo extends TLObject {
        public static SecurePasswordKdfAlgo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecurePasswordKdfAlgo result = null;
            switch (constructor) {
                case -2042159726:
                    result = new TL_securePasswordKdfAlgoSHA512();
                    break;
                case -1141711456:
                    result = new TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000();
                    break;
                case 4883767:
                    result = new TL_securePasswordKdfAlgoUnknown();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecurePasswordKdfAlgo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends SecurePasswordKdfAlgo {
        public static int constructor = -NUM;
        public byte[] salt;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.salt = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.salt);
        }
    }

    public static class TL_securePasswordKdfAlgoSHA512 extends SecurePasswordKdfAlgo {
        public static int constructor = -NUM;
        public byte[] salt;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.salt = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.salt);
        }
    }

    public static class TL_securePasswordKdfAlgoUnknown extends SecurePasswordKdfAlgo {
        public static int constructor = 4883767;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_historyImport extends TLObject {
        public static int constructor = NUM;
        public long id;

        public static TL_messages_historyImport TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_historyImport result = new TL_messages_historyImport();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_historyImport", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static abstract class BotInfo extends TLObject {
        public ArrayList<TL_botCommand> commands = new ArrayList<>();
        public String description;
        public BotMenuButton menu_button;
        public long user_id;
        public int version;

        public static BotInfo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            BotInfo result = null;
            switch (constructor) {
                case -1729618630:
                    result = new TL_botInfo_layer131();
                    break;
                case -1154598962:
                    result = new TL_botInfoEmpty_layer48();
                    break;
                case -468280483:
                    result = new TL_botInfo();
                    break;
                case 164583517:
                    result = new TL_botInfo_layer48();
                    break;
                case 460632885:
                    result = new TL_botInfo_layer139();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in BotInfo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_botInfoEmpty_layer48 extends TL_botInfo {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_botInfo_layer131 extends TL_botInfo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
            this.description = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.commands.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
            stream.writeString(this.description);
            stream.writeInt32(NUM);
            int count = this.commands.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_botCommand) this.commands.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_botInfo_layer48 extends TL_botInfo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            stream.readString(exception);
            this.description = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.commands.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.version);
            stream.writeString("");
            stream.writeString(this.description);
            stream.writeInt32(NUM);
            int count = this.commands.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_botCommand) this.commands.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_botInfo_layer139 extends BotInfo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.description = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.commands.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeString(this.description);
            stream.writeInt32(NUM);
            int count = this.commands.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_botCommand) this.commands.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_botInfo extends BotInfo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.description = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.commands.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.menu_button = BotMenuButton.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeString(this.description);
            stream.writeInt32(NUM);
            int count = this.commands.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_botCommand) this.commands.get(a)).serializeToStream(stream);
            }
            this.menu_button.serializeToStream(stream);
        }
    }

    public static abstract class InputGame extends TLObject {
        public long access_hash;
        public InputUser bot_id;
        public long id;
        public String short_name;

        public static InputGame TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputGame result = null;
            switch (constructor) {
                case -1020139510:
                    result = new TL_inputGameShortName();
                    break;
                case 53231223:
                    result = new TL_inputGameID();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputGame", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputGameShortName extends InputGame {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.bot_id = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.short_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot_id.serializeToStream(stream);
            stream.writeString(this.short_name);
        }
    }

    public static class TL_inputGameID extends InputGame {
        public static int constructor = 53231223;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class MessageReplies extends TLObject {
        public long channel_id;
        public boolean comments;
        public int flags;
        public int max_id;
        public int read_max_id;
        public ArrayList<Peer> recent_repliers = new ArrayList<>();
        public int replies;
        public int replies_pts;

        public static MessageReplies TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageReplies result = null;
            switch (constructor) {
                case -2083123262:
                    result = new TL_messageReplies();
                    break;
                case 1093204652:
                    result = new TL_messageReplies_layer131();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageReplies", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageReplies_layer131 extends TL_messageReplies {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.comments = (this.flags & 1) != 0;
            this.replies = stream.readInt32(exception);
            this.replies_pts = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        Peer object = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.recent_repliers.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1) != 0) {
                this.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.max_id = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.read_max_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.comments ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.replies);
            stream.writeInt32(this.replies_pts);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.recent_repliers.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((Peer) this.recent_repliers.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.max_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.read_max_id);
            }
        }
    }

    public static class TL_messageReplies extends MessageReplies {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.comments = (this.flags & 1) != 0;
            this.replies = stream.readInt32(exception);
            this.replies_pts = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        Peer object = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.recent_repliers.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1) != 0) {
                this.channel_id = stream.readInt64(exception);
            }
            if ((this.flags & 4) != 0) {
                this.max_id = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.read_max_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.comments ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.replies);
            stream.writeInt32(this.replies_pts);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.recent_repliers.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((Peer) this.recent_repliers.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.max_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.read_max_id);
            }
        }
    }

    public static class TL_messages_sponsoredMessages extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<TL_sponsoredMessage> messages = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_sponsoredMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_sponsoredMessages result = new TL_messages_sponsoredMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_sponsoredMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_sponsoredMessage object = TL_sponsoredMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.messages.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_messageViews extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public int forwards;
        public MessageReplies replies;
        public int views;

        public static TL_messageViews TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messageViews result = new TL_messageViews();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageViews", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.replies = MessageReplies.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 4) != 0) {
                this.replies.serializeToStream(stream);
            }
        }
    }

    public static abstract class ReplyMarkup extends TLObject {
        public int flags;
        public String placeholder;
        public boolean resize;
        public ArrayList<TL_keyboardButtonRow> rows = new ArrayList<>();
        public boolean selective;
        public boolean single_use;

        public static ReplyMarkup TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ReplyMarkup result = null;
            switch (constructor) {
                case -2049074735:
                    result = new TL_replyKeyboardMarkup();
                    break;
                case -2035021048:
                    result = new TL_replyKeyboardForceReply();
                    break;
                case -1606526075:
                    result = new TL_replyKeyboardHide();
                    break;
                case -200242528:
                    result = new TL_replyKeyboardForceReply_layer129();
                    break;
                case 889353612:
                    result = new TL_replyKeyboardMarkup_layer129();
                    break;
                case 1218642516:
                    result = new TL_replyInlineMarkup();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_replyKeyboardMarkup extends ReplyMarkup {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.resize = (this.flags & 1) != 0;
            this.single_use = (this.flags & 2) != 0;
            this.selective = (this.flags & 4) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_keyboardButtonRow object = TL_keyboardButtonRow.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rows.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 8) != 0) {
                    this.placeholder = stream.readString(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.resize ? this.flags | 1 : this.flags & -2;
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.rows.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_keyboardButtonRow) this.rows.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.placeholder);
            }
        }
    }

    public static class TL_replyKeyboardHide extends ReplyMarkup {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.selective = (this.flags & 4) != 0;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
        }
    }

    public static class TL_replyKeyboardForceReply extends ReplyMarkup {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.single_use = (this.flags & 2) != 0;
            if ((this.flags & 4) == 0) {
                z = false;
            }
            this.selective = z;
            if ((this.flags & 8) != 0) {
                this.placeholder = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            if ((this.flags & 8) != 0) {
                stream.writeString(this.placeholder);
            }
        }
    }

    public static class TL_replyKeyboardMarkup_layer129 extends TL_replyKeyboardMarkup {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.resize = (this.flags & 1) != 0;
            this.single_use = (this.flags & 2) != 0;
            this.selective = (this.flags & 4) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_keyboardButtonRow object = TL_keyboardButtonRow.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rows.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.resize ? this.flags | 1 : this.flags & -2;
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.rows.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_keyboardButtonRow) this.rows.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_replyKeyboardForceReply_layer129 extends TL_replyKeyboardForceReply {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.single_use = (this.flags & 2) != 0;
            if ((this.flags & 4) == 0) {
                z = false;
            }
            this.selective = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
        }
    }

    public static class TL_replyInlineMarkup extends ReplyMarkup {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_keyboardButtonRow object = TL_keyboardButtonRow.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rows.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.rows.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_keyboardButtonRow) this.rows.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_webPageAttributeTheme extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Document> documents = new ArrayList<>();
        public int flags;
        public ThemeSettings settings;

        public static TL_webPageAttributeTheme TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_webPageAttributeTheme result = new TL_webPageAttributeTheme();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_webPageAttributeTheme", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.documents.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.settings = ThemeSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.documents.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.documents.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 2) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static abstract class contacts_Contacts extends TLObject {
        public ArrayList<TL_contact> contacts = new ArrayList<>();
        public int saved_count;
        public ArrayList<User> users = new ArrayList<>();

        public static contacts_Contacts TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            contacts_Contacts result = null;
            switch (constructor) {
                case -1219778094:
                    result = new TL_contacts_contactsNotModified();
                    break;
                case -353862078:
                    result = new TL_contacts_contacts();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in contacts_Contacts", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_contacts_contactsNotModified extends contacts_Contacts {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_contacts extends contacts_Contacts {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_contact object = TL_contact.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.contacts.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.saved_count = stream.readInt32(exception);
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.contacts.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_contact) this.contacts.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.saved_count);
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((User) this.users.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static abstract class SecureRequiredType extends TLObject {
        public static SecureRequiredType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecureRequiredType result = null;
            switch (constructor) {
                case -2103600678:
                    result = new TL_secureRequiredType();
                    break;
                case 41187252:
                    result = new TL_secureRequiredTypeOneOf();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecureRequiredType", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_secureRequiredType extends SecureRequiredType {
        public static int constructor = -NUM;
        public int flags;
        public boolean native_names;
        public boolean selfie_required;
        public boolean translation_required;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.native_names = (readInt32 & 1) != 0;
            this.selfie_required = (readInt32 & 2) != 0;
            if ((readInt32 & 4) != 0) {
                z = true;
            }
            this.translation_required = z;
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.native_names ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.selfie_required ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.translation_required ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            this.type.serializeToStream(stream);
        }
    }

    public static class TL_secureRequiredTypeOneOf extends SecureRequiredType {
        public static int constructor = 41187252;
        public ArrayList<SecureRequiredType> types = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    SecureRequiredType object = SecureRequiredType.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.types.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.types.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.types.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputPrivacyKey extends TLObject {
        public static InputPrivacyKey TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputPrivacyKey result = null;
            switch (constructor) {
                case -1529000952:
                    result = new TL_inputPrivacyKeyForwards();
                    break;
                case -1107622874:
                    result = new TL_inputPrivacyKeyChatInvite();
                    break;
                case -786326563:
                    result = new TL_inputPrivacyKeyAddedByPhone();
                    break;
                case -610373422:
                    result = new TL_inputPrivacyKeyPhoneP2P();
                    break;
                case -88417185:
                    result = new TL_inputPrivacyKeyPhoneCall();
                    break;
                case 55761658:
                    result = new TL_inputPrivacyKeyPhoneNumber();
                    break;
                case 1335282456:
                    result = new TL_inputPrivacyKeyStatusTimestamp();
                    break;
                case 1461304012:
                    result = new TL_inputPrivacyKeyProfilePhoto();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyKey", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPrivacyKeyStatusTimestamp extends InputPrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyChatInvite extends InputPrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyPhoneCall extends InputPrivacyKey {
        public static int constructor = -88417185;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyForwards extends InputPrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyPhoneNumber extends InputPrivacyKey {
        public static int constructor = 55761658;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyAddedByPhone extends InputPrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyProfilePhoto extends InputPrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyPhoneP2P extends InputPrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class messages_ExportedChatInvite extends TLObject {
        public ExportedChatInvite invite;
        public ArrayList<User> users = new ArrayList<>();

        public static messages_ExportedChatInvite TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_ExportedChatInvite result = null;
            switch (constructor) {
                case 410107472:
                    result = new TL_messages_exportedChatInvite();
                    break;
                case 572915951:
                    result = new TL_messages_exportedChatInviteReplaced();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_ExportedChatInvite", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_exportedChatInviteReplaced extends messages_ExportedChatInvite {
        public static int constructor = NUM;
        public ExportedChatInvite new_invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
            this.new_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((User) this.users.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_exportedChatInvite extends messages_ExportedChatInvite {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((User) this.users.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputTheme extends TLObject {
        public static InputTheme TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputTheme result = null;
            switch (constructor) {
                case -175567375:
                    result = new TL_inputThemeSlug();
                    break;
                case 1012306921:
                    result = new TL_inputTheme();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputTheme", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputThemeSlug extends InputTheme {
        public static int constructor = -NUM;
        public String slug;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.slug = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.slug);
        }
    }

    public static class TL_inputTheme extends InputTheme {
        public static int constructor = NUM;
        public long access_hash;
        public long id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class photos_Photos extends TLObject {
        public int count;
        public ArrayList<Photo> photos = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static photos_Photos TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            photos_Photos result = null;
            switch (constructor) {
                case -1916114267:
                    result = new TL_photos_photos();
                    break;
                case 352657236:
                    result = new TL_photos_photosSlice();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in photos_Photos", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_photos_photos extends photos_Photos {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Photo object = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.photos.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.photos.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Photo) this.photos.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((User) this.users.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static class TL_photos_photosSlice extends photos_Photos {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Photo object = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.photos.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count = this.photos.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Photo) this.photos.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((User) this.users.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static abstract class ChatFull extends TLObject {
        public String about;
        public int admins_count;
        public int available_min_id;
        public ArrayList<String> available_reactions = new ArrayList<>();
        public int banned_count;
        public boolean blocked;
        public ArrayList<BotInfo> bot_info = new ArrayList<>();
        public TL_inputGroupCall call;
        public int call_msg_id;
        public boolean can_delete_channel;
        public boolean can_set_location;
        public boolean can_set_stickers;
        public boolean can_set_username;
        public boolean can_view_participants;
        public boolean can_view_stats;
        public Photo chat_photo;
        public Peer default_send_as;
        public TL_chatInviteExported exported_invite;
        public int flags;
        public int flags2;
        public int folder_id;
        public Peer groupcall_default_join_as;
        public boolean has_scheduled;
        public boolean hidden_prehistory;
        public long id;
        public long inviterId;
        public int invitesCount;
        public int kicked_count;
        public long linked_chat_id;
        public ChannelLocation location;
        public long migrated_from_chat_id;
        public int migrated_from_max_id;
        public PeerNotifySettings notify_settings;
        public int online_count;
        public ChatParticipants participants;
        public int participants_count;
        public ArrayList<String> pending_suggestions = new ArrayList<>();
        public int pinned_msg_id;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public ArrayList<Long> recent_requesters = new ArrayList<>();
        public int requests_pending;
        public int slowmode_next_send_date;
        public int slowmode_seconds;
        public int stats_dc;
        public StickerSet stickerset;
        public String theme_emoticon;
        public int ttl_period;
        public int unread_count;
        public int unread_important_count;

        public static ChatFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChatFull result = null;
            switch (constructor) {
                case -1977734781:
                    result = new TL_chatFull_layer131();
                    break;
                case -1781833897:
                    result = new TL_channelFull_layer70();
                    break;
                case -1749097118:
                    result = new TL_channelFull_layer52();
                    break;
                case -1736252138:
                    result = new TL_channelFull_layer101();
                    break;
                case -1640751649:
                    result = new TL_channelFull_layer48();
                    break;
                case -1009430225:
                    result = new TL_channelFull_layer67();
                    break;
                case -877254512:
                    result = new TL_channelFull_layer89();
                    break;
                case -779165146:
                    result = new TL_chatFull();
                    break;
                case -516145888:
                    result = new TL_channelFull_layer139();
                    break;
                case -374179305:
                    result = new TL_channelFull_layer133();
                    break;
                case -362240487:
                    result = new TL_channelFull();
                    break;
                case -304961647:
                    result = new TL_chatFull_layer92();
                    break;
                case -281384243:
                    result = new TL_channelFull_layer122();
                    break;
                case -261341160:
                    result = new TL_chatFull_layer124();
                    break;
                case -253335766:
                    result = new TL_channelFull_layer121();
                    break;
                case -213431562:
                    result = new TL_chatFull_layer123();
                    break;
                case -88925533:
                    result = new TL_channelFull_old();
                    break;
                case 56920439:
                    result = new TL_channelFull_layer99();
                    break;
                case 231260545:
                    result = new TL_chatFull_layer122();
                    break;
                case 277964371:
                    result = new TL_channelFull_layer103();
                    break;
                case 401891279:
                    result = new TL_channelFull_layer71();
                    break;
                case 461151667:
                    result = new TL_chatFull_layer121();
                    break;
                case 478652186:
                    result = new TL_channelFull_layer98();
                    break;
                case 581055962:
                    result = new TL_chatFull_layer98();
                    break;
                case 625524791:
                    result = new TL_channelFull_layer124();
                    break;
                case 763976820:
                    result = new TL_channelFull_layer110();
                    break;
                case 771925524:
                    result = new TL_chatFull_layer87();
                    break;
                case 793980732:
                    result = new TL_channelFull_layer132();
                    break;
                case 1185349556:
                    result = new TL_chatFull_layer135();
                    break;
                case 1235264985:
                    result = new TL_chatFull_layer132();
                    break;
                case 1304281241:
                    result = new TL_chatFull_layer133();
                    break;
                case 1418477459:
                    result = new TL_channelFull_layer131();
                    break;
                case 1449537070:
                    result = new TL_channelFull_layer135();
                    break;
                case 1506802019:
                    result = new TL_channelFull_layer134();
                    break;
                case 1991201921:
                    result = new TL_channelFull_layer72();
                    break;
                case 2055070967:
                    result = new TL_channelFull_layer123();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChatFull", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channelFull_layer110 extends ChatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_view_stats = (this.flags & 4096) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_view_stats ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_chatFull_layer124 extends TL_chatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
        }
    }

    public static class TL_channelFull_layer124 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
        }
    }

    public static class TL_chatFull_layer123 extends TL_chatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
        }
    }

    public static class TL_channelFull_layer123 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatFull_layer131 extends TL_chatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatFull_layer132 extends TL_chatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 65536) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.theme_emoticon);
            }
        }
    }

    public static class TL_channelFull_layer132 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
        }
    }

    public static class TL_chatFull_layer133 extends ChatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 65536) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.theme_emoticon);
            }
        }
    }

    public static class TL_chatFull_layer135 extends ChatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 65536) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.requests_pending = stream.readInt32(exception);
            }
            if ((this.flags & 131072) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_requesters.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a2)).longValue());
                }
            }
        }
    }

    public static class TL_channelFull_layer135 extends ChatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.requests_pending = stream.readInt32(exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & NUM) != 0) {
                    this.default_send_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.recent_requesters.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a3)).longValue());
                }
            }
            if ((this.flags & NUM) != 0) {
                this.default_send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_channelFull_layer134 extends ChatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.requests_pending = stream.readInt32(exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.recent_requesters.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a3)).longValue());
                }
            }
        }
    }

    public static class TL_channelFull_layer133 extends ChatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
        }
    }

    public static class TL_chatFull extends ChatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8192) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 65536) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.requests_pending = stream.readInt32(exception);
            }
            if ((this.flags & 131072) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 262144) != 0) {
                int magic3 = stream.readInt32(exception);
                if (magic3 == NUM) {
                    int count3 = stream.readInt32(exception);
                    for (int a3 = 0; a3 < count3; a3++) {
                        this.available_reactions.add(stream.readString(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8192) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_requesters.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a2)).longValue());
                }
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.available_reactions.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    stream.writeString((String) this.available_reactions.get(a3));
                }
            }
        }
    }

    public static class TL_channelFull extends ChatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.flags2 = stream.readInt32(exception);
            this.can_delete_channel = (this.flags2 & 1) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.requests_pending = stream.readInt32(exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & NUM) != 0) {
                    this.default_send_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic4 = stream.readInt32(exception);
                    if (magic4 == NUM) {
                        int count4 = stream.readInt32(exception);
                        for (int a4 = 0; a4 < count4; a4++) {
                            this.available_reactions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            this.flags2 = this.can_delete_channel ? this.flags2 | 1 : this.flags2 & -2;
            stream.writeInt32(this.flags2);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.recent_requesters.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a3)).longValue());
                }
            }
            if ((this.flags & NUM) != 0) {
                this.default_send_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count4 = this.available_reactions.size();
                stream.writeInt32(count4);
                for (int a4 = 0; a4 < count4; a4++) {
                    stream.writeString((String) this.available_reactions.get(a4));
                }
            }
        }
    }

    public static class TL_channelFull_layer139 extends ChatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.theme_emoticon = stream.readString(exception);
                }
                if ((this.flags & NUM) != 0) {
                    this.requests_pending = stream.readInt32(exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & NUM) != 0) {
                    this.default_send_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & NUM) != 0) {
                    int magic4 = stream.readInt32(exception);
                    if (magic4 == NUM) {
                        int count4 = stream.readInt32(exception);
                        for (int a4 = 0; a4 < count4; a4++) {
                            this.available_reactions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(this.requests_pending);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count3 = this.recent_requesters.size();
                stream.writeInt32(count3);
                for (int a3 = 0; a3 < count3; a3++) {
                    stream.writeInt64(((Long) this.recent_requesters.get(a3)).longValue());
                }
            }
            if ((this.flags & NUM) != 0) {
                this.default_send_as.serializeToStream(stream);
            }
            if ((this.flags & NUM) != 0) {
                stream.writeInt32(NUM);
                int count4 = this.available_reactions.size();
                stream.writeInt32(count4);
                for (int a4 = 0; a4 < count4; a4++) {
                    stream.writeString((String) this.available_reactions.get(a4));
                }
            }
        }
    }

    public static class TL_channelFull_layer131 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = stream.readInt64(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = stream.readInt64(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 16777216) != 0) {
                    this.ttl_period = stream.readInt32(exception);
                }
                if ((this.flags & 33554432) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.pending_suggestions.add(stream.readString(exception));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 67108864) != 0) {
                    this.groupcall_default_join_as = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8388608) != 0) {
                this.exported_invite.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt64(this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
            if ((this.flags & 16777216) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.pending_suggestions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString((String) this.pending_suggestions.get(a2));
                }
            }
            if ((this.flags & 67108864) != 0) {
                this.groupcall_default_join_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_channelFull_layer122 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
                if ((this.flags & 2097152) != 0) {
                    this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            if (this.exported_invite != null) {
                this.exported_invite.serializeToStream(stream);
            } else {
                new TL_chatInviteEmpty_layer122().serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
            if ((this.flags & 2097152) != 0) {
                this.call.serializeToStream(stream);
            }
        }
    }

    public static class TL_channelFull_layer121 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.has_scheduled = (this.flags & 524288) != 0;
            this.can_view_stats = (this.flags & 1048576) != 0;
            this.blocked = (this.flags & 4194304) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.slowmode_seconds = stream.readInt32(exception);
                }
                if ((this.flags & 262144) != 0) {
                    this.slowmode_next_send_date = stream.readInt32(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.stats_dc = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.has_scheduled ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.can_view_stats ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.blocked ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.slowmode_seconds);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(this.slowmode_next_send_date);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(this.stats_dc);
            }
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_channelFull_layer103 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_view_stats = (this.flags & 4096) != 0;
            this.can_set_location = (this.flags & 65536) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 16384) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 32768) != 0) {
                    this.location = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                this.pts = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_view_stats ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.can_set_location ? this.flags | 65536 : this.flags & -65537;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            if ((this.flags & 32768) != 0) {
                this.location.serializeToStream(stream);
            }
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_channelFull_layer101 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_view_stats = (this.flags & 4096) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                if ((this.flags & 8192) != 0) {
                    this.linked_chat_id = (long) stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_view_stats ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32((int) this.linked_chat_id);
            }
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_channelFull_layer99 extends TL_channelFull {
        public static int constructor = 56920439;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_view_stats = (this.flags & 4096) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.folder_id = stream.readInt32(exception);
                }
                this.pts = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_view_stats ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_channelFull_layer98 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.can_view_stats = (this.flags & 4096) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.online_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.can_view_stats ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt32(this.online_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
        }
    }

    public static class TL_chatFull_layer87 extends TL_chatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            this.participants.serializeToStream(stream);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_channelFull_layer89 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.call_msg_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.call_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer72 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
            if ((this.flags & 512) != 0) {
                stream.writeInt32(this.available_min_id);
            }
        }
    }

    public static class TL_channelFull_layer71 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatFull_layer122 extends TL_chatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 4096) != 0) {
                this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 4096) != 0) {
                this.call.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatFull_layer121 extends TL_chatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 256) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
        }
    }

    public static class TL_chatFull_layer98 extends TL_chatFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_set_username = (this.flags & 128) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_set_username ? this.flags | 128 : this.flags & -129;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_chatFull_layer92 extends TL_chatFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = (long) stream.readInt32(exception);
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.bot_info.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            this.participants.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.chat_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.bot_info.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer70 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.banned_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer52 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.unread_important_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.unread_count);
            stream.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer67 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer48 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.unread_important_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInfo object = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bot_info.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = (long) stream.readInt32(exception);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.unread_count);
            stream.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.bot_info.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInfo) this.bot_info.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32((int) this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.migrated_from_max_id);
            }
        }
    }

    public static class TL_channelFull_old extends TL_channelFull {
        public static int constructor = -88925533;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.can_view_participants = (this.flags & 8) != 0;
            this.id = (long) stream.readInt32(exception);
            this.about = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = stream.readInt32(exception);
            }
            this.read_inbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.unread_important_count = stream.readInt32(exception);
            this.chat_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            TL_chatInviteExported TLdeserialize = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (TLdeserialize instanceof TL_chatInviteExported) {
                this.exported_invite = TLdeserialize;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.about);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.kicked_count);
            }
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.unread_count);
            stream.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
            this.exported_invite.serializeToStream(stream);
        }
    }

    public static class TL_inputPeerNotifySettings extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int mute_until;
        public boolean show_previews;
        public boolean silent;
        public NotificationSound sound;

        public static TL_inputPeerNotifySettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputPeerNotifySettings result = new TL_inputPeerNotifySettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPeerNotifySettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.show_previews = stream.readBool(exception);
            }
            if ((this.flags & 2) != 0) {
                this.silent = stream.readBool(exception);
            }
            if ((this.flags & 4) != 0) {
                this.mute_until = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.sound = NotificationSound.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.show_previews);
            }
            if ((this.flags & 2) != 0) {
                stream.writeBool(this.silent);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.mute_until);
            }
            if ((this.flags & 8) != 0) {
                this.sound.serializeToStream(stream);
            }
        }
    }

    public static abstract class auth_LoginToken extends TLObject {
        public static auth_LoginToken TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            auth_LoginToken result = null;
            switch (constructor) {
                case 110008598:
                    result = new TL_auth_loginTokenMigrateTo();
                    break;
                case 957176926:
                    result = new TL_auth_loginTokenSuccess();
                    break;
                case 1654593920:
                    result = new TL_auth_loginToken();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in auth_LoginToken", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_auth_loginToken extends auth_LoginToken {
        public static int constructor = NUM;
        public int expires;
        public byte[] token;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
            this.token = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
            stream.writeByteArray(this.token);
        }
    }

    public static class TL_auth_loginTokenMigrateTo extends auth_LoginToken {
        public static int constructor = NUM;
        public int dc_id;
        public byte[] token;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.token = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeByteArray(this.token);
        }
    }

    public static class TL_auth_loginTokenSuccess extends auth_LoginToken {
        public static int constructor = NUM;
        public auth_Authorization authorization;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.authorization = auth_Authorization.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.authorization.serializeToStream(stream);
        }
    }

    public static class TL_codeSettings extends TLObject {
        public static int constructor = -NUM;
        public boolean allow_app_hash;
        public boolean allow_flashcall;
        public boolean allow_missed_call;
        public boolean current_number;
        public int flags;
        public ArrayList<byte[]> logout_tokens = new ArrayList<>();

        public static TL_codeSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_codeSettings result = new TL_codeSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_codeSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.allow_flashcall = (readInt32 & 1) != 0;
            this.current_number = (readInt32 & 2) != 0;
            this.allow_app_hash = (readInt32 & 16) != 0;
            this.allow_missed_call = (readInt32 & 32) != 0;
            if ((readInt32 & 64) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.logout_tokens.add(stream.readByteArray(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.allow_flashcall ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.current_number ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.allow_app_hash ? i2 | 16 : i2 & -17;
            this.flags = i3;
            int i4 = this.allow_missed_call ? i3 | 32 : i3 & -33;
            this.flags = i4;
            stream.writeInt32(i4);
            if ((this.flags & 64) != 0) {
                stream.writeInt32(NUM);
                int count = this.logout_tokens.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeByteArray(this.logout_tokens.get(a));
                }
            }
        }
    }

    public static class TL_stats_messageStats extends TLObject {
        public static int constructor = -NUM;
        public StatsGraph views_graph;

        public static TL_stats_messageStats TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_stats_messageStats result = new TL_stats_messageStats();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stats_messageStats", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.views_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.views_graph.serializeToStream(stream);
        }
    }

    public static abstract class BaseTheme extends TLObject {
        public static BaseTheme TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            BaseTheme result = null;
            switch (constructor) {
                case -1212997976:
                    result = new TL_baseThemeNight();
                    break;
                case -1012849566:
                    result = new TL_baseThemeClassic();
                    break;
                case -69724536:
                    result = new TL_baseThemeDay();
                    break;
                case 1527845466:
                    result = new TL_baseThemeArctic();
                    break;
                case 1834973166:
                    result = new TL_baseThemeTinted();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in BaseTheme", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_baseThemeArctic extends BaseTheme {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_baseThemeNight extends BaseTheme {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_baseThemeClassic extends BaseTheme {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_baseThemeTinted extends BaseTheme {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_baseThemeDay extends BaseTheme {
        public static int constructor = -69724536;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_null extends TLObject {
        public static int constructor = NUM;

        public static TL_null TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_null result = new TL_null();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_null", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class Page extends TLObject {
        public ArrayList<PageBlock> blocks = new ArrayList<>();
        public ArrayList<Document> documents = new ArrayList<>();
        public int flags;
        public boolean part;
        public ArrayList<Photo> photos = new ArrayList<>();
        public boolean rtl;
        public String url;
        public boolean v2;
        public int views;

        public static Page TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Page result = null;
            switch (constructor) {
                case -1913754556:
                    result = new TL_pagePart_layer67();
                    break;
                case -1908433218:
                    result = new TL_pagePart_layer82();
                    break;
                case -1738178803:
                    result = new TL_page();
                    break;
                case -1366746132:
                    result = new TL_page_layer110();
                    break;
                case -677274263:
                    result = new TL_pageFull_layer67();
                    break;
                case 1433323434:
                    result = new TL_pageFull_layer82();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Page", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pagePart_layer67 extends TL_pagePart_layer82 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_pagePart_layer82 extends Page {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageFull_layer67 extends TL_page {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageFull_layer82 extends TL_page {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_page_layer110 extends TL_page {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.part = (this.flags & 1) != 0;
            this.rtl = (this.flags & 2) != 0;
            this.url = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.part ? this.flags | 1 : this.flags & -2;
            this.flags = this.rtl ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeString(this.url);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_page extends Page {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.part = (this.flags & 1) != 0;
            this.rtl = (this.flags & 2) != 0;
            this.v2 = (this.flags & 4) != 0;
            this.url = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Photo object2 = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.photos.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Document object3 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.documents.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        if ((this.flags & 8) != 0) {
                            this.views = stream.readInt32(exception);
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.part ? this.flags | 1 : this.flags & -2;
            this.flags = this.rtl ? this.flags | 2 : this.flags & -3;
            this.flags = this.v2 ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeString(this.url);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.photos.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Photo) this.photos.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.documents.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Document) this.documents.get(a3)).serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.views);
            }
        }
    }

    public static class TL_topPeerCategoryPeers extends TLObject {
        public static int constructor = -75283823;
        public TopPeerCategory category;
        public int count;
        public ArrayList<TL_topPeer> peers = new ArrayList<>();

        public static TL_topPeerCategoryPeers TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_topPeerCategoryPeers result = new TL_topPeerCategoryPeers();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeerCategoryPeers", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.category = TopPeerCategory.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_topPeer object = TL_topPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.category.serializeToStream(stream);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.peers.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.peers.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputUser extends TLObject {
        public long access_hash;
        public long user_id;

        public static InputUser TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputUser result = null;
            switch (constructor) {
                case -1182234929:
                    result = new TL_inputUserEmpty();
                    break;
                case -233744186:
                    result = new TL_inputUser();
                    break;
                case -138301121:
                    result = new TL_inputUserSelf();
                    break;
                case 497305826:
                    result = new TL_inputUserFromMessage();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputUser", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputUserSelf extends InputUser {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputUser extends InputUser {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputUserEmpty extends InputUser {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputUserFromMessage extends InputUser {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt64(this.user_id);
        }
    }

    public static abstract class KeyboardButton extends TLObject {
        public InputUser bot;
        public int button_id;
        public byte[] data;
        public int flags;
        public String fwd_text;
        public InputUser inputUser;
        public String query;
        public boolean quiz;
        public boolean request_write_access;
        public boolean requires_password;
        public boolean same_peer;
        public String text;
        public String url;
        public long user_id;

        public static KeyboardButton TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            KeyboardButton result = null;
            switch (constructor) {
                case -1598009252:
                    result = new TL_keyboardButtonSimpleWebView();
                    break;
                case -1560655744:
                    result = new TL_keyboardButton();
                    break;
                case -1344716869:
                    result = new TL_keyboardButtonBuy();
                    break;
                case -1318425559:
                    result = new TL_keyboardButtonRequestPhone();
                    break;
                case -1144565411:
                    result = new TL_keyboardButtonRequestPoll();
                    break;
                case -802258988:
                    result = new TL_inputKeyboardButtonUrlAuth();
                    break;
                case -376962181:
                    result = new TL_inputKeyboardButtonUserProfile();
                    break;
                case -59151553:
                    result = new TL_keyboardButtonRequestGeoLocation();
                    break;
                case 90744648:
                    result = new TL_keyboardButtonSwitchInline();
                    break;
                case 280464681:
                    result = new TL_keyboardButtonUrlAuth();
                    break;
                case 326529584:
                    result = new TL_keyboardButtonWebView();
                    break;
                case 629866245:
                    result = new TL_keyboardButtonUrl();
                    break;
                case 814112961:
                    result = new TL_keyboardButtonUserProfile();
                    break;
                case 901503851:
                    result = new TL_keyboardButtonCallback();
                    break;
                case 1358175439:
                    result = new TL_keyboardButtonGame();
                    break;
                case 1748655686:
                    result = new TL_keyboardButtonCallback_layer117();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_keyboardButtonRequestPhone extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonGame extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonUrl extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.url);
        }
    }

    public static class TL_keyboardButtonSwitchInline extends KeyboardButton {
        public static int constructor = 90744648;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.same_peer = z;
            this.text = stream.readString(exception);
            this.query = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.same_peer ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeString(this.text);
            stream.writeString(this.query);
        }
    }

    public static class TL_keyboardButtonRequestGeoLocation extends KeyboardButton {
        public static int constructor = -59151553;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonUrlAuth extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.text = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.fwd_text = stream.readString(exception);
            }
            this.url = stream.readString(exception);
            this.button_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.text);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.fwd_text);
            }
            stream.writeString(this.url);
            stream.writeInt32(this.button_id);
        }
    }

    public static class TL_inputKeyboardButtonUrlAuth extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.request_write_access = z;
            this.text = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                this.fwd_text = stream.readString(exception);
            }
            this.url = stream.readString(exception);
            this.bot = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.request_write_access ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeString(this.text);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.fwd_text);
            }
            stream.writeString(this.url);
            this.bot.serializeToStream(stream);
        }
    }

    public static class TL_keyboardButtonRequestPoll extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.quiz = stream.readBool(exception);
            }
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.quiz);
            }
            stream.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonBuy extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_inputKeyboardButtonUserProfile extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.inputUser = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            this.inputUser.serializeToStream(stream);
        }
    }

    public static class TL_keyboardButtonUserProfile extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_keyboardButtonCallback extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.requires_password = z;
            this.text = stream.readString(exception);
            this.data = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.requires_password ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeString(this.text);
            stream.writeByteArray(this.data);
        }
    }

    public static class TL_keyboardButtonCallback_layer117 extends TL_keyboardButtonCallback {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.data = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeByteArray(this.data);
        }
    }

    public static class TL_keyboardButton extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static abstract class VideoSize extends TLObject {
        public int flags;
        public int h;
        public FileLocation location;
        public int size;
        public String type;
        public double video_start_ts;
        public int w;

        public static VideoSize TLdeserialize(long photo_id, long document_id, AbstractSerializedData stream, int constructor, boolean exception) {
            VideoSize result = null;
            switch (constructor) {
                case -567037804:
                    result = new TL_videoSize();
                    break;
                case -399391402:
                    result = new TL_videoSize_layer127();
                    break;
                case 1130084743:
                    result = new TL_videoSize_layer115();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                    if (result.location == null) {
                        if (TextUtils.isEmpty(result.type) || (photo_id == 0 && document_id == 0)) {
                            result.location = new TL_fileLocationUnavailable();
                        } else {
                            TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated = new TL_fileLocationToBeDeprecated();
                            result.location = tL_fileLocationToBeDeprecated;
                            if (photo_id != 0) {
                                tL_fileLocationToBeDeprecated.volume_id = -photo_id;
                                result.location.local_id = result.type.charAt(0);
                            } else {
                                tL_fileLocationToBeDeprecated.volume_id = -document_id;
                                result.location.local_id = result.type.charAt(0) + 1000;
                            }
                        }
                    }
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in VideoSize", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_videoSize_layer115 extends TL_videoSize {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.location = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
        }
    }

    public static class TL_videoSize_layer127 extends TL_videoSize {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.type = stream.readString(exception);
            this.location = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.video_start_ts = stream.readDouble(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.type);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            if ((this.flags & 1) != 0) {
                stream.writeDouble(this.video_start_ts);
            }
        }
    }

    public static class TL_videoSize extends VideoSize {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.video_start_ts = stream.readDouble(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            if ((this.flags & 1) != 0) {
                stream.writeDouble(this.video_start_ts);
            }
        }
    }

    public static abstract class BotInlineMessage extends TLObject {
        public String address;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public String first_name;
        public int flags;
        public GeoPoint geo;
        public int heading;
        public String last_name;
        public String message;
        public boolean no_webpage;
        public int period;
        public String phone_number;
        public String provider;
        public int proximity_notification_radius;
        public ReplyMarkup reply_markup;
        public String title;
        public String vcard;
        public String venue_id;
        public String venue_type;

        public static BotInlineMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            BotInlineMessage result = null;
            switch (constructor) {
                case -1970903652:
                    result = new TL_botInlineMessageMediaVenue();
                    break;
                case -1937807902:
                    result = new TL_botInlineMessageText();
                    break;
                case -1222451611:
                    result = new TL_botInlineMessageMediaGeo_layer119();
                    break;
                case 85477117:
                    result = new TL_botInlineMessageMediaGeo();
                    break;
                case 175419739:
                    result = new TL_botInlineMessageMediaAuto_layer74();
                    break;
                case 416402882:
                    result = new TL_botInlineMessageMediaContact();
                    break;
                case 894081801:
                    result = new TL_botInlineMessageMediaInvoice();
                    break;
                case 904770772:
                    result = new TL_botInlineMessageMediaContact_layer81();
                    break;
                case 982505656:
                    result = new TL_botInlineMessageMediaGeo_layer71();
                    break;
                case 1130767150:
                    result = new TL_botInlineMessageMediaVenue_layer77();
                    break;
                case 1984755728:
                    result = new TL_botInlineMessageMediaAuto();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_botInlineMessageMediaVenue_layer77 extends TL_botInlineMessageMediaVenue {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaVenue extends BotInlineMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
            this.venue_type = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
            stream.writeString(this.venue_type);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo_layer71 extends TL_botInlineMessageMediaGeo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaAuto extends BotInlineMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.message);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaAuto_layer74 extends TL_botInlineMessageMediaAuto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.message);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaContact_layer81 extends TL_botInlineMessageMediaContact {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaContact extends BotInlineMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.vcard = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.vcard);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageText extends BotInlineMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.no_webpage = (this.flags & 1) != 0;
            this.message = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeString(this.message);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo extends BotInlineMessage {
        public static int constructor = 85477117;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.heading = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.period = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.proximity_notification_radius = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.heading);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.period);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.proximity_notification_radius);
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo_layer119 extends TL_botInlineMessageMediaGeo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.period = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.geo.serializeToStream(stream);
            stream.writeInt32(this.period);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_botInlineMessageMediaInvoice extends BotInlineMessage {
        public static int constructor = NUM;
        public String currency;
        public String description;
        public WebDocument photo;
        public boolean shipping_address_requested;
        public boolean test;
        public long total_amount;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.shipping_address_requested = (this.flags & 2) != 0;
            if ((this.flags & 8) != 0) {
                z = true;
            }
            this.test = z;
            this.title = stream.readString(exception);
            this.description = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.photo = WebDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.currency = stream.readString(exception);
            this.total_amount = stream.readInt64(exception);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.shipping_address_requested ? this.flags | 2 : this.flags & -3;
            this.flags = this.test ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeString(this.title);
            stream.writeString(this.description);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(stream);
            }
            stream.writeString(this.currency);
            stream.writeInt64(this.total_amount);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
        }
    }

    public static class TL_keyboardButtonRow extends TLObject {
        public static int constructor = NUM;
        public ArrayList<KeyboardButton> buttons = new ArrayList<>();

        public static TL_keyboardButtonRow TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_keyboardButtonRow result = new TL_keyboardButtonRow();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    KeyboardButton object = KeyboardButton.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.buttons.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.buttons.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.buttons.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class Bool extends TLObject {
        public static Bool TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Bool result = null;
            switch (constructor) {
                case -1720552011:
                    result = new TL_boolTrue();
                    break;
                case -1132882121:
                    result = new TL_boolFalse();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Bool", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_boolTrue extends Bool {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_boolFalse extends Bool {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_discussionMessage extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int flags;
        public int max_id;
        public ArrayList<Message> messages = new ArrayList<>();
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int unread_count;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_discussionMessage TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_discussionMessage result = new TL_messages_discussionMessage();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_discussionMessage", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 1) != 0) {
                    this.max_id = stream.readInt32(exception);
                }
                if ((this.flags & 2) != 0) {
                    this.read_inbox_max_id = stream.readInt32(exception);
                }
                if ((this.flags & 4) != 0) {
                    this.read_outbox_max_id = stream.readInt32(exception);
                }
                this.unread_count = stream.readInt32(exception);
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.messages.get(a).serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.max_id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.read_inbox_max_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.read_outbox_max_id);
            }
            stream.writeInt32(this.unread_count);
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_searchCounter extends TLObject {
        public static int constructor = -NUM;
        public int count;
        public MessagesFilter filter;
        public int flags;
        public boolean inexact;

        public static TL_messages_searchCounter TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_searchCounter result = new TL_messages_searchCounter();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_searchCounter", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.inexact = (readInt32 & 2) != 0;
            this.filter = MessagesFilter.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.inexact ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.count);
        }
    }

    public static class TL_inputAppEvent extends TLObject {
        public static int constructor = NUM;
        public JSONValue data;
        public long peer;
        public double time;
        public String type;

        public static TL_inputAppEvent TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputAppEvent result = new TL_inputAppEvent();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputAppEvent", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.time = stream.readDouble(exception);
            this.type = stream.readString(exception);
            this.peer = stream.readInt64(exception);
            this.data = JSONValue.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.time);
            stream.writeString(this.type);
            stream.writeInt64(this.peer);
            this.data.serializeToStream(stream);
        }
    }

    public static class TL_auth_exportedAuthorization extends TLObject {
        public static int constructor = -NUM;
        public byte[] bytes;
        public long id;

        public static TL_auth_exportedAuthorization TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_auth_exportedAuthorization result = new TL_auth_exportedAuthorization();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_exportedAuthorization", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.bytes = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeByteArray(this.bytes);
        }
    }

    public static abstract class WebPage extends TLObject {
        public ArrayList<TL_webPageAttributeTheme> attributes = new ArrayList<>();
        public String author;
        public Page cached_page;
        public int date;
        public String description;
        public String display_url;
        public Document document;
        public int duration;
        public int embed_height;
        public String embed_type;
        public String embed_url;
        public int embed_width;
        public int flags;
        public int hash;
        public long id;
        public Photo photo;
        public String site_name;
        public String title;
        public String type;
        public String url;

        public static WebPage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            WebPage result = null;
            switch (constructor) {
                case -2054908813:
                    result = new TL_webPageNotModified_layer110();
                    break;
                case -1558273867:
                    result = new TL_webPage_old();
                    break;
                case -981018084:
                    result = new TL_webPagePending();
                    break;
                case -897446185:
                    result = new TL_webPage_layer58();
                    break;
                case -736472729:
                    result = new TL_webPageUrlPending();
                    break;
                case -392411726:
                    result = new TL_webPage();
                    break;
                case -350980120:
                    result = new TL_webPageEmpty();
                    break;
                case -94051982:
                    result = new TL_webPage_layer107();
                    break;
                case 1594340540:
                    result = new TL_webPage_layer104();
                    break;
                case 1930545681:
                    result = new TL_webPageNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in WebPage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_webPage extends WebPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            this.display_url = stream.readString(exception);
            this.hash = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.type = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = stream.readString(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.duration = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.author = stream.readString(exception);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page = Page.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4096) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_webPageAttributeTheme object = TL_webPageAttributeTheme.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.attributes.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.url);
            stream.writeString(this.display_url);
            stream.writeInt32(this.hash);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page.serializeToStream(stream);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeInt32(NUM);
                int count = this.attributes.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_webPageAttributeTheme) this.attributes.get(a)).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_webPage_layer107 extends TL_webPage {
        public static int constructor = -94051982;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            this.display_url = stream.readString(exception);
            this.hash = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.type = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = stream.readString(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.duration = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.author = stream.readString(exception);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    TL_webPageAttributeTheme attribute = new TL_webPageAttributeTheme();
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            attribute.documents.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                    this.attributes.add(attribute);
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page = Page.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.url);
            stream.writeString(this.display_url);
            stream.writeInt32(this.hash);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(NUM);
                stream.writeInt32(0);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page.serializeToStream(stream);
            }
        }
    }

    public static class TL_webPage_layer104 extends TL_webPage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            this.display_url = stream.readString(exception);
            this.hash = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.type = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = stream.readString(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.duration = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.author = stream.readString(exception);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page = Page.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.url);
            stream.writeString(this.display_url);
            stream.writeInt32(this.hash);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page.serializeToStream(stream);
            }
        }
    }

    public static class TL_webPage_old extends TL_webPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            this.display_url = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.type = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = stream.readString(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.duration = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.author = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.url);
            stream.writeString(this.display_url);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.author);
            }
        }
    }

    public static class TL_webPageEmpty extends WebPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_webPageUrlPending extends WebPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_webPagePending extends WebPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_webPageNotModified_layer110 extends TL_webPageNotModified {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_webPageNotModified extends WebPage {
        public static int constructor = NUM;
        public int cached_page_views;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.cached_page_views = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.cached_page_views);
            }
        }
    }

    public static class TL_webPage_layer58 extends TL_webPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.url = stream.readString(exception);
            this.display_url = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.type = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = stream.readString(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.duration = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.author = stream.readString(exception);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.url);
            stream.writeString(this.display_url);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(stream);
            }
        }
    }

    public static abstract class messages_FeaturedStickers extends TLObject {
        public static messages_FeaturedStickers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_FeaturedStickers result = null;
            switch (constructor) {
                case -2067782896:
                    result = new TL_messages_featuredStickers();
                    break;
                case -958657434:
                    result = new TL_messages_featuredStickersNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_FeaturedStickers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_featuredStickers extends messages_FeaturedStickers {
        public static int constructor = -NUM;
        public int count;
        public long hash;
        public ArrayList<StickerSetCovered> sets = new ArrayList<>();
        public ArrayList<Long> unread = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    StickerSetCovered object = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sets.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count3; a2++) {
                        this.unread.add(Long.valueOf(stream.readInt64(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.sets.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.sets.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.unread.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                stream.writeInt64(this.unread.get(a2).longValue());
            }
        }
    }

    public static class TL_messages_featuredStickersNotModified extends messages_FeaturedStickers {
        public static int constructor = -NUM;
        public int count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
        }
    }

    public static abstract class SecureValueError extends TLObject {
        public static SecureValueError TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecureValueError result = null;
            switch (constructor) {
                case -2037765467:
                    result = new TL_secureValueErrorReverseSide();
                    break;
                case -2036501105:
                    result = new TL_secureValueError();
                    break;
                case -1592506512:
                    result = new TL_secureValueErrorTranslationFile();
                    break;
                case -449327402:
                    result = new TL_secureValueErrorSelfie();
                    break;
                case -391902247:
                    result = new TL_secureValueErrorData();
                    break;
                case 12467706:
                    result = new TL_secureValueErrorFrontSide();
                    break;
                case 878931416:
                    result = new TL_secureValueErrorTranslationFiles();
                    break;
                case 1717706985:
                    result = new TL_secureValueErrorFiles();
                    break;
                case 2054162547:
                    result = new TL_secureValueErrorFile();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecureValueError", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_secureValueErrorFile extends SecureValueError {
        public static int constructor = NUM;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.file_hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.file_hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorFrontSide extends SecureValueError {
        public static int constructor = 12467706;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.file_hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.file_hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorFiles extends SecureValueError {
        public static int constructor = NUM;
        public ArrayList<byte[]> file_hash = new ArrayList<>();
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.file_hash.add(stream.readByteArray(exception));
                }
                this.text = stream.readString(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.file_hash.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeByteArray(this.file_hash.get(a));
            }
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorReverseSide extends SecureValueError {
        public static int constructor = -NUM;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.file_hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.file_hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorTranslationFile extends SecureValueError {
        public static int constructor = -NUM;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.file_hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.file_hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueError extends SecureValueError {
        public static int constructor = -NUM;
        public byte[] hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorData extends SecureValueError {
        public static int constructor = -NUM;
        public byte[] data_hash;
        public String field;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.data_hash = stream.readByteArray(exception);
            this.field = stream.readString(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.data_hash);
            stream.writeString(this.field);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorTranslationFiles extends SecureValueError {
        public static int constructor = NUM;
        public ArrayList<byte[]> file_hash = new ArrayList<>();
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.file_hash.add(stream.readByteArray(exception));
                }
                this.text = stream.readString(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.file_hash.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeByteArray(this.file_hash.get(a));
            }
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValueErrorSelfie extends SecureValueError {
        public static int constructor = -NUM;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.file_hash = stream.readByteArray(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeByteArray(this.file_hash);
            stream.writeString(this.text);
        }
    }

    public static class TL_secureValue extends TLObject {
        public static int constructor = NUM;
        public TL_secureData data;
        public ArrayList<SecureFile> files = new ArrayList<>();
        public int flags;
        public SecureFile front_side;
        public byte[] hash;
        public SecurePlainData plain_data;
        public SecureFile reverse_side;
        public SecureFile selfie;
        public ArrayList<SecureFile> translation = new ArrayList<>();
        public SecureValueType type;

        public static TL_secureValue TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_secureValue result = new TL_secureValue();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_secureValue", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.type = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.data = TL_secureData.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.front_side = SecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.reverse_side = SecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                this.selfie = SecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        SecureFile object = SecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.translation.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        SecureFile object2 = SecureFile.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.files.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 32) != 0) {
                this.plain_data = SecurePlainData.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.hash = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.type.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.data.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.front_side.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                this.reverse_side.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                this.selfie.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(NUM);
                int count = this.translation.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.translation.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.files.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    this.files.get(a2).serializeToStream(stream);
                }
            }
            if ((this.flags & 32) != 0) {
                this.plain_data.serializeToStream(stream);
            }
            stream.writeByteArray(this.hash);
        }
    }

    public static abstract class PhoneCallDiscardReason extends TLObject {
        public byte[] encrypted_key;

        public static PhoneCallDiscardReason TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PhoneCallDiscardReason result = null;
            switch (constructor) {
                case -2048646399:
                    result = new TL_phoneCallDiscardReasonMissed();
                    break;
                case -527056480:
                    result = new TL_phoneCallDiscardReasonDisconnect();
                    break;
                case -84416311:
                    result = new TL_phoneCallDiscardReasonBusy();
                    break;
                case 1471006352:
                    result = new TL_phoneCallDiscardReasonHangup();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PhoneCallDiscardReason", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_phoneCallDiscardReasonHangup extends PhoneCallDiscardReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonBusy extends PhoneCallDiscardReason {
        public static int constructor = -84416311;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonMissed extends PhoneCallDiscardReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonDisconnect extends PhoneCallDiscardReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_dialogFilter extends TLObject {
        public static int constructor = NUM;
        public boolean bots;
        public boolean broadcasts;
        public boolean contacts;
        public String emoticon;
        public boolean exclude_archived;
        public boolean exclude_muted;
        public ArrayList<InputPeer> exclude_peers = new ArrayList<>();
        public boolean exclude_read;
        public int flags;
        public boolean groups;
        public int id;
        public ArrayList<InputPeer> include_peers = new ArrayList<>();
        public boolean non_contacts;
        public ArrayList<InputPeer> pinned_peers = new ArrayList<>();
        public String title;

        public static TL_dialogFilter TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_dialogFilter result = new TL_dialogFilter();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dialogFilter", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.contacts = (readInt32 & 1) != 0;
            this.non_contacts = (readInt32 & 2) != 0;
            this.groups = (readInt32 & 4) != 0;
            this.broadcasts = (readInt32 & 8) != 0;
            this.bots = (readInt32 & 16) != 0;
            this.exclude_muted = (readInt32 & 2048) != 0;
            this.exclude_read = (readInt32 & 4096) != 0;
            this.exclude_archived = (readInt32 & 8192) != 0;
            this.id = stream.readInt32(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 33554432) != 0) {
                this.emoticon = stream.readString(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    InputPeer object = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.pinned_peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        InputPeer object2 = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.include_peers.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            InputPeer object3 = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.exclude_peers.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.contacts ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.non_contacts ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.groups ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.broadcasts ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.bots ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.exclude_muted ? i5 | 2048 : i5 & -2049;
            this.flags = i6;
            int i7 = this.exclude_read ? i6 | 4096 : i6 & -4097;
            this.flags = i7;
            int i8 = this.exclude_archived ? i7 | 8192 : i7 & -8193;
            this.flags = i8;
            stream.writeInt32(i8);
            stream.writeInt32(this.id);
            stream.writeString(this.title);
            if ((this.flags & 33554432) != 0) {
                stream.writeString(this.emoticon);
            }
            stream.writeInt32(NUM);
            int count = this.pinned_peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.pinned_peers.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.include_peers.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.include_peers.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.exclude_peers.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.exclude_peers.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_auth_passwordRecovery extends TLObject {
        public static int constructor = NUM;
        public String email_pattern;

        public static TL_auth_passwordRecovery TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_auth_passwordRecovery result = new TL_auth_passwordRecovery();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_passwordRecovery", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.email_pattern = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.email_pattern);
        }
    }

    public static class TL_botCommand extends TLObject {
        public static int constructor = -NUM;
        public String command;
        public String description;

        public static TL_botCommand TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_botCommand result = new TL_botCommand();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.command = stream.readString(exception);
            this.description = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.command);
            stream.writeString(this.description);
        }
    }

    public static abstract class InputNotifyPeer extends TLObject {
        public static InputNotifyPeer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputNotifyPeer result = null;
            switch (constructor) {
                case -1311015810:
                    result = new TL_inputNotifyBroadcasts();
                    break;
                case -1195615476:
                    result = new TL_inputNotifyPeer();
                    break;
                case 423314455:
                    result = new TL_inputNotifyUsers();
                    break;
                case 1251338318:
                    result = new TL_inputNotifyChats();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputNotifyPeer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputNotifyChats extends InputNotifyPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyPeer extends InputNotifyPeer {
        public static int constructor = -NUM;
        public InputPeer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_inputNotifyUsers extends InputNotifyPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyBroadcasts extends InputNotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class InputFileLocation extends TLObject {
        public long access_hash;
        public byte[] file_reference;
        public int flags;
        public long id;
        public int local_id;
        public long secret;
        public String thumb_size;
        public long volume_id;

        public static InputFileLocation TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputFileLocation result = null;
            switch (constructor) {
                case -1652231205:
                    result = new TL_inputStickerSetThumb();
                    break;
                case -1160743548:
                    result = new TL_inputDocumentFileLocation();
                    break;
                case -876089816:
                    result = new TL_inputSecureFileLocation();
                    break;
                case -539317279:
                    result = new TL_inputFileLocation();
                    break;
                case -182231723:
                    result = new TL_inputEncryptedFileLocation();
                    break;
                case 93890858:
                    result = new TL_inputGroupCallStream();
                    break;
                case 925204121:
                    result = new TL_inputPeerPhotoFileLocation();
                    break;
                case 1075322878:
                    result = new TL_inputPhotoFileLocation();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputFileLocation", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPhotoFileLocation extends InputFileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.thumb_size = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeString(this.thumb_size);
        }
    }

    public static class TL_inputDocumentFileLocation extends InputFileLocation {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.thumb_size = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeString(this.thumb_size);
        }
    }

    public static class TL_inputPeerPhotoFileLocation extends InputFileLocation {
        public static int constructor = NUM;
        public boolean big;
        public InputPeer peer;
        public long photo_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.big = z;
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.big ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.photo_id);
        }
    }

    public static class TL_inputEncryptedFileLocation extends InputFileLocation {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputStickerSetThumb extends InputFileLocation {
        public static int constructor = -NUM;
        public InputStickerSet stickerset;
        public int thumb_version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.stickerset = InputStickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.thumb_version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.stickerset.serializeToStream(stream);
            stream.writeInt32(this.thumb_version);
        }
    }

    public static class TL_inputGroupCallStream extends InputFileLocation {
        public static int constructor = 93890858;
        public TL_inputGroupCall call;
        public int flags;
        public int scale;
        public long time_ms;
        public int video_channel;
        public int video_quality;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.time_ms = stream.readInt64(exception);
            this.scale = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.video_channel = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                this.video_quality = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.call.serializeToStream(stream);
            stream.writeInt64(this.time_ms);
            stream.writeInt32(this.scale);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.video_channel);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.video_quality);
            }
        }
    }

    public static class TL_inputFileLocation extends InputFileLocation {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
            this.secret = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
            stream.writeInt64(this.secret);
            stream.writeByteArray(this.file_reference);
        }
    }

    public static class TL_inputSecureFileLocation extends InputFileLocation {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_photos_photo extends TLObject {
        public static int constructor = NUM;
        public Photo photo;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_photos_photo TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_photos_photo result = new TL_photos_photo();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_photos_photo", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class help_TermsOfServiceUpdate extends TLObject {
        public static help_TermsOfServiceUpdate TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_TermsOfServiceUpdate result = null;
            switch (constructor) {
                case -483352705:
                    result = new TL_help_termsOfServiceUpdateEmpty();
                    break;
                case 686618977:
                    result = new TL_help_termsOfServiceUpdate();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_TermsOfServiceUpdate", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_termsOfServiceUpdate extends help_TermsOfServiceUpdate {
        public static int constructor = NUM;
        public int expires;
        public TL_help_termsOfService terms_of_service;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
            this.terms_of_service = TL_help_termsOfService.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
            this.terms_of_service.serializeToStream(stream);
        }
    }

    public static class TL_help_termsOfServiceUpdateEmpty extends help_TermsOfServiceUpdate {
        public static int constructor = -NUM;
        public int expires;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
        }
    }

    public static class TL_messages_chatAdminsWithInvites extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_chatAdminWithInvites> admins = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_chatAdminsWithInvites TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_chatAdminsWithInvites result = new TL_messages_chatAdminsWithInvites();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatAdminsWithInvites", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_chatAdminWithInvites object = TL_chatAdminWithInvites.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.admins.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.admins.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.admins.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_phone_groupCall extends TLObject {
        public static int constructor = -NUM;
        public GroupCall call;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<TL_groupCallParticipant> participants = new ArrayList<>();
        public String participants_next_offset;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_phone_groupCall TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_groupCall result = new TL_phone_groupCall();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCall", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = GroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_groupCallParticipant object = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.participants_next_offset = stream.readString(exception);
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.participants.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.participants.get(a).serializeToStream(stream);
            }
            stream.writeString(this.participants_next_offset);
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static abstract class PhoneCall extends TLObject {
        public long access_hash;
        public long admin_id;
        public ArrayList<PhoneConnection> connections = new ArrayList<>();
        public int date;
        public int duration;
        public int flags;
        public byte[] g_a_hash;
        public byte[] g_a_or_b;
        public byte[] g_b;
        public long id;
        public long key_fingerprint;
        public boolean need_debug;
        public boolean need_rating;
        public boolean p2p_allowed;
        public long participant_id;
        public PhoneCallProtocol protocol;
        public PhoneCallDiscardReason reason;
        public int receive_date;
        public int start_date;
        public boolean video;

        public static PhoneCall TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PhoneCall result = null;
            switch (constructor) {
                case -1770029977:
                    result = new TL_phoneCall();
                    break;
                case -987599081:
                    result = new TL_phoneCallWaiting();
                    break;
                case 347139340:
                    result = new TL_phoneCallRequested();
                    break;
                case 912311057:
                    result = new TL_phoneCallAccepted();
                    break;
                case 1355435489:
                    result = new TL_phoneCallDiscarded();
                    break;
                case 1399245077:
                    result = new TL_phoneCallEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PhoneCall", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_phoneCallRequested extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.video = (this.flags & 64) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.g_a_hash = stream.readByteArray(exception);
            this.protocol = PhoneCallProtocol.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.video ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            stream.writeByteArray(this.g_a_hash);
            this.protocol.serializeToStream(stream);
        }
    }

    public static class TL_phoneCall extends PhoneCall {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.p2p_allowed = (this.flags & 32) != 0;
            this.video = (this.flags & 64) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.g_a_or_b = stream.readByteArray(exception);
            this.key_fingerprint = stream.readInt64(exception);
            this.protocol = PhoneCallProtocol.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhoneConnection object = PhoneConnection.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.connections.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.start_date = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.p2p_allowed ? this.flags | 32 : this.flags & -33;
            this.flags = this.video ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            stream.writeByteArray(this.g_a_or_b);
            stream.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.connections.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhoneConnection) this.connections.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.start_date);
        }
    }

    public static class TL_phoneCallEmpty extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_phoneCallAccepted extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.video = (this.flags & 64) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.g_b = stream.readByteArray(exception);
            this.protocol = PhoneCallProtocol.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.video ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            stream.writeByteArray(this.g_b);
            this.protocol.serializeToStream(stream);
        }
    }

    public static class TL_phoneCallWaiting extends PhoneCall {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.video = (this.flags & 64) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.protocol = PhoneCallProtocol.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.receive_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.video ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            this.protocol.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.receive_date);
            }
        }
    }

    public static class TL_phoneCallDiscarded extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.need_rating = (this.flags & 4) != 0;
            this.need_debug = (this.flags & 8) != 0;
            if ((this.flags & 64) != 0) {
                z = true;
            }
            this.video = z;
            this.id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.reason = PhoneCallDiscardReason.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.duration = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.need_rating ? this.flags | 4 : this.flags & -5;
            this.flags = this.need_debug ? this.flags | 8 : this.flags & -9;
            this.flags = this.video ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            if ((this.flags & 1) != 0) {
                this.reason.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.duration);
            }
        }
    }

    public static abstract class help_CountriesList extends TLObject {
        public static help_CountriesList TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_CountriesList result = null;
            switch (constructor) {
                case -2016381538:
                    result = new TL_help_countriesList();
                    break;
                case -1815339214:
                    result = new TL_help_countriesListNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_CountriesList", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_countriesListNotModified extends help_CountriesList {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_countriesList extends help_CountriesList {
        public static int constructor = -NUM;
        public ArrayList<TL_help_country> countries = new ArrayList<>();
        public int hash;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_help_country object = TL_help_country.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.countries.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.hash = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.countries.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.countries.get(a).serializeToStream(stream);
            }
            stream.writeInt32(this.hash);
        }
    }

    public static abstract class User extends TLObject {
        public long access_hash;
        public boolean apply_min_photo;
        public boolean bot;
        public boolean bot_attach_menu;
        public boolean bot_chat_history;
        public int bot_info_version;
        public boolean bot_inline_geo;
        public String bot_inline_placeholder;
        public boolean bot_menu_webview;
        public boolean bot_nochats;
        public boolean contact;
        public boolean deleted;
        public boolean explicit_content;
        public boolean fake;
        public String first_name;
        public int flags;
        public long id;
        public boolean inactive;
        public String lang_code;
        public String last_name;
        public boolean min;
        public boolean mutual_contact;
        public String phone;
        public UserProfilePhoto photo;
        public boolean restricted;
        public ArrayList<TL_restrictionReason> restriction_reason = new ArrayList<>();
        public boolean scam;
        public boolean self;
        public UserStatus status;
        public boolean support;
        public String username;
        public boolean verified;

        public static User TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            User result = null;
            switch (constructor) {
                case -1820043071:
                    result = new TL_user_layer131();
                    break;
                case -1298475060:
                    result = new TL_userDeleted_old();
                    break;
                case -894214632:
                    result = new TL_userContact_old2();
                    break;
                case -787638374:
                    result = new TL_user_layer65();
                    break;
                case -742634630:
                    result = new TL_userEmpty();
                    break;
                case -704549510:
                    result = new TL_userDeleted_old2();
                    break;
                case -640891665:
                    result = new TL_userRequest_old2();
                    break;
                case -218397927:
                    result = new TL_userContact_old();
                    break;
                case 123533224:
                    result = new TL_userForeign_old2();
                    break;
                case 476112392:
                    result = new TL_userSelf_old3();
                    break;
                case 537022650:
                    result = new TL_userEmpty_layer131();
                    break;
                case 585404530:
                    result = new TL_user_old();
                    break;
                case 585682608:
                    result = new TL_userRequest_old();
                    break;
                case 773059779:
                    result = new TL_user_layer104();
                    break;
                case 1073147056:
                    result = new TL_user();
                    break;
                case 1377093789:
                    result = new TL_userForeign_old();
                    break;
                case 1879553105:
                    result = new TL_userSelf_old2();
                    break;
                case 1912944108:
                    result = new TL_userSelf_old();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in User", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_userContact_old2 extends User {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userContact_old extends TL_userContact_old2 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userEmpty extends User {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_user extends User {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & 8192) != 0;
            this.bot = (this.flags & 16384) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & 65536) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & 1048576) != 0;
            this.bot_inline_geo = (this.flags & 2097152) != 0;
            this.support = (this.flags & 8388608) != 0;
            this.scam = (this.flags & 16777216) != 0;
            this.apply_min_photo = (this.flags & 33554432) != 0;
            this.fake = (this.flags & 67108864) != 0;
            this.bot_attach_menu = (this.flags & NUM) != 0;
            this.bot_menu_webview = (this.flags & NUM) != 0;
            this.id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.username = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.bot_info_version = stream.readInt32(exception);
            }
            if ((this.flags & 262144) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_restrictionReason object = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.restriction_reason.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = stream.readString(exception);
            }
            if ((this.flags & 4194304) != 0) {
                this.lang_code = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.bot ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.support ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.scam ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.apply_min_photo ? this.flags | 33554432 : this.flags & -33554433;
            this.flags = this.fake ? this.flags | 67108864 : this.flags & -67108865;
            this.flags = this.bot_attach_menu ? this.flags | NUM : this.flags & -NUM;
            this.flags = this.bot_menu_webview ? this.flags | NUM : this.flags & -NUM;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(NUM);
                int count = this.restriction_reason.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 524288) != 0) {
                stream.writeString(this.bot_inline_placeholder);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeString(this.lang_code);
            }
        }
    }

    public static class TL_user_layer131 extends TL_user {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & 8192) != 0;
            this.bot = (this.flags & 16384) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & 65536) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & 1048576) != 0;
            this.bot_inline_geo = (this.flags & 2097152) != 0;
            this.support = (this.flags & 8388608) != 0;
            this.scam = (this.flags & 16777216) != 0;
            this.apply_min_photo = (this.flags & 33554432) != 0;
            this.fake = (this.flags & 67108864) != 0;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.username = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.bot_info_version = stream.readInt32(exception);
            }
            if ((this.flags & 262144) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_restrictionReason object = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.restriction_reason.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = stream.readString(exception);
            }
            if ((this.flags & 4194304) != 0) {
                this.lang_code = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.bot ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.support ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.scam ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.apply_min_photo ? this.flags | 33554432 : this.flags & -33554433;
            this.flags = this.fake ? this.flags | 67108864 : this.flags & -67108865;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeInt32(NUM);
                int count = this.restriction_reason.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 524288) != 0) {
                stream.writeString(this.bot_inline_placeholder);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeString(this.lang_code);
            }
        }
    }

    public static class TL_user_layer104 extends TL_user {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & 8192) != 0;
            this.bot = (this.flags & 16384) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & 65536) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & 1048576) != 0;
            this.bot_inline_geo = (this.flags & 2097152) != 0;
            this.support = (this.flags & 8388608) != 0;
            if ((this.flags & 16777216) != 0) {
                z = true;
            }
            this.scam = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.username = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.bot_info_version = stream.readInt32(exception);
            }
            if ((this.flags & 262144) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = stream.readString(exception);
            }
            if ((this.flags & 4194304) != 0) {
                this.lang_code = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.bot ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.support ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.scam ? this.flags | 16777216 : this.flags & -16777217;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 524288) != 0) {
                stream.writeString(this.bot_inline_placeholder);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeString(this.lang_code);
            }
        }
    }

    public static class TL_userSelf_old extends TL_userSelf_old3 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.inactive = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
            stream.writeBool(this.inactive);
        }
    }

    public static class TL_userSelf_old3 extends User {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userDeleted_old2 extends User {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
        }
    }

    public static class TL_userEmpty_layer131 extends TL_userEmpty {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
        }
    }

    public static class TL_userRequest_old extends TL_userRequest_old2 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userForeign_old extends TL_userForeign_old2 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeInt64(this.access_hash);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userForeign_old2 extends User {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
            stream.writeInt64(this.access_hash);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userRequest_old2 extends User {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_userDeleted_old extends TL_userDeleted_old2 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
        }
    }

    public static class TL_user_layer65 extends TL_user {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & 8192) != 0;
            this.bot = (this.flags & 16384) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & 65536) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & 1048576) != 0;
            if ((this.flags & 2097152) != 0) {
                z = true;
            }
            this.bot_inline_geo = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.username = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.bot_info_version = stream.readInt32(exception);
            }
            if ((this.flags & 262144) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.bot ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 524288) != 0) {
                stream.writeString(this.bot_inline_placeholder);
            }
        }
    }

    public static class TL_user_old extends TL_user {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & 8192) != 0;
            this.bot = (this.flags & 16384) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & 65536) != 0;
            this.verified = (this.flags & 131072) != 0;
            if ((this.flags & 262144) != 0) {
                z = true;
            }
            this.explicit_content = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.username = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.bot_info_version = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.bot ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | 65536 : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.explicit_content ? this.flags | 262144 : this.flags & -262145;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.bot_info_version);
            }
        }
    }

    public static class TL_userSelf_old2 extends TL_userSelf_old3 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
            this.phone = stream.readString(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.inactive = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
            stream.writeString(this.phone);
            this.photo.serializeToStream(stream);
            this.status.serializeToStream(stream);
            stream.writeBool(this.inactive);
        }
    }

    public static class TL_phone_groupCallStreamRtmpUrl extends TLObject {
        public static int constructor = NUM;
        public String key;
        public String url;

        public static TL_phone_groupCallStreamRtmpUrl TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_groupCallStreamRtmpUrl result = new TL_phone_groupCallStreamRtmpUrl();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCallStreamRtmpUrl", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.key = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeString(this.key);
        }
    }

    public static abstract class RecentMeUrl extends TLObject {
        public long chat_id;
        public ChatInvite chat_invite;
        public StickerSetCovered set;
        public String url;
        public long user_id;

        public static RecentMeUrl TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            RecentMeUrl result = null;
            switch (constructor) {
                case -1294306862:
                    result = new TL_recentMeUrlChat();
                    break;
                case -1188296222:
                    result = new TL_recentMeUrlUser();
                    break;
                case -1140172836:
                    result = new TL_recentMeUrlStickerSet();
                    break;
                case -347535331:
                    result = new TL_recentMeUrlChatInvite();
                    break;
                case 1189204285:
                    result = new TL_recentMeUrlUnknown();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in RecentMeUrl", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_recentMeUrlChat extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.chat_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_recentMeUrlStickerSet extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.set = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            this.set.serializeToStream(stream);
        }
    }

    public static class TL_recentMeUrlUnknown extends RecentMeUrl {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_recentMeUrlChatInvite extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.chat_invite = ChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            this.chat_invite.serializeToStream(stream);
        }
    }

    public static class TL_recentMeUrlUser extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_statsGroupTopPoster extends TLObject {
        public static int constructor = -NUM;
        public int avg_chars;
        public int messages;
        public long user_id;

        public static TL_statsGroupTopPoster TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsGroupTopPoster result = new TL_statsGroupTopPoster();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsGroupTopPoster", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.messages = stream.readInt32(exception);
            this.avg_chars = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.messages);
            stream.writeInt32(this.avg_chars);
        }
    }

    public static class TL_statsDateRangeDays extends TLObject {
        public static int constructor = -NUM;
        public int max_date;
        public int min_date;

        public static TL_statsDateRangeDays TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsDateRangeDays result = new TL_statsDateRangeDays();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsDateRangeDays", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.min_date = stream.readInt32(exception);
            this.max_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.min_date);
            stream.writeInt32(this.max_date);
        }
    }

    public static class TL_payments_bankCardData extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_bankCardOpenUrl> open_urls = new ArrayList<>();
        public String title;

        public static TL_payments_bankCardData TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_payments_bankCardData result = new TL_payments_bankCardData();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_bankCardData", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_bankCardOpenUrl object = TL_bankCardOpenUrl.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.open_urls.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeInt32(NUM);
            int count = this.open_urls.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.open_urls.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_highScores extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_highScore> scores = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_highScores TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_highScores result = new TL_messages_highScores();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_highScores", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_highScore object = TL_highScore.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.scores.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.scores.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.scores.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_phone_phoneCall extends TLObject {
        public static int constructor = -NUM;
        public PhoneCall phone_call;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_phone_phoneCall TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_phoneCall result = new TL_phone_phoneCall();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_phoneCall", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_call = PhoneCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.phone_call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class ChannelParticipantsFilter extends TLObject {
        public String q;

        public static ChannelParticipantsFilter TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChannelParticipantsFilter result = null;
            switch (constructor) {
                case -1548400251:
                    result = new TL_channelParticipantsKicked();
                    break;
                case -1328445861:
                    result = new TL_channelParticipantsBots();
                    break;
                case -1268741783:
                    result = new TL_channelParticipantsAdmins();
                    break;
                case -1150621555:
                    result = new TL_channelParticipantsContacts();
                    break;
                case -566281095:
                    result = new TL_channelParticipantsRecent();
                    break;
                case -531931925:
                    result = new TL_channelParticipantsMentions();
                    break;
                case 106343499:
                    result = new TL_channelParticipantsSearch();
                    break;
                case 338142689:
                    result = new TL_channelParticipantsBanned();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantsFilter", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channelParticipantsMentions extends ChannelParticipantsFilter {
        public static int constructor = -NUM;
        public int flags;
        public int top_msg_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.q = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.top_msg_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.q);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.top_msg_id);
            }
        }
    }

    public static class TL_channelParticipantsContacts extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.q = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsAdmins extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsKicked extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.q = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsSearch extends ChannelParticipantsFilter {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.q = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsBots extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsBanned extends ChannelParticipantsFilter {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.q = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsRecent extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class MessageAction extends TLObject {
        public String address;
        public TL_inputGroupCall call;
        public long call_id;
        public long channel_id;
        public long chat_id;
        public String currency;
        public int duration;
        public DecryptedMessageAction encryptedAction;
        public int flags;
        public long game_id;
        public long inviter_id;
        public String message;
        public UserProfilePhoto newUserPhoto;
        public Photo photo;
        public PhoneCallDiscardReason reason;
        public int score;
        public String title;
        public long total_amount;
        public int ttl;
        public long user_id;
        public ArrayList<Long> users = new ArrayList<>();
        public boolean video;

        public static MessageAction TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageAction result = null;
            switch (constructor) {
                case -2132731265:
                    result = new TL_messageActionPhoneCall();
                    break;
                case -1834538890:
                    result = new TL_messageActionGameScore();
                    break;
                case -1799538451:
                    result = new TL_messageActionPinMessage();
                    break;
                case -1781355374:
                    result = new TL_messageActionChannelCreate();
                    break;
                case -1780220945:
                    result = new TL_messageActionChatDeletePhoto();
                    break;
                case -1730095465:
                    result = new TL_messageActionGeoProximityReached();
                    break;
                case -1615153660:
                    result = new TL_messageActionHistoryClear();
                    break;
                case -1539362612:
                    result = new TL_messageActionChatDeleteUser();
                    break;
                case -1503425638:
                    result = new TL_messageActionChatCreate_layer131();
                    break;
                case -1441072131:
                    result = new TL_messageActionSetMessagesTTL();
                    break;
                case -1434950843:
                    result = new TL_messageActionSetChatTheme();
                    break;
                case -1410748418:
                    result = new TL_messageActionBotAllowed();
                    break;
                case -1336546578:
                    result = new TL_messageActionChannelMigrateFrom_layer131();
                    break;
                case -1297179892:
                    result = new TL_messageActionChatDeleteUser_layer131();
                    break;
                case -1281329567:
                    result = new TL_messageActionGroupCallScheduled();
                    break;
                case -1262252875:
                    result = new TL_messageActionWebViewDataSent();
                    break;
                case -1247687078:
                    result = new TL_messageActionChatEditTitle();
                    break;
                case -1230047312:
                    result = new TL_messageActionEmpty();
                    break;
                case -1119368275:
                    result = new TL_messageActionChatCreate();
                    break;
                case -648257196:
                    result = new TL_messageActionSecureValuesSent();
                    break;
                case -519864430:
                    result = new TL_messageActionChatMigrateTo();
                    break;
                case -365344535:
                    result = new TL_messageActionChannelMigrateFrom();
                    break;
                case -339958837:
                    result = new TL_messageActionChatJoinedByRequest();
                    break;
                case -202219658:
                    result = new TL_messageActionContactSignUp();
                    break;
                case -123931160:
                    result = new TL_messageActionChatJoinedByLink_layer131();
                    break;
                case -85549226:
                    result = new TL_messageActionCustomAction();
                    break;
                case 29007925:
                    result = new TL_messageActionPhoneNumberRequest();
                    break;
                case 51520707:
                    result = new TL_messageActionChatJoinedByLink();
                    break;
                case 365886720:
                    result = new TL_messageActionChatAddUser();
                    break;
                case 1080663248:
                    result = new TL_messageActionPaymentSent();
                    break;
                case 1200788123:
                    result = new TL_messageActionScreenshotTaken();
                    break;
                case 1205698681:
                    result = new TL_messageActionWebViewDataSentMe();
                    break;
                case 1217033015:
                    result = new TL_messageActionChatAddUser_layer131();
                    break;
                case 1345295095:
                    result = new TL_messageActionInviteToGroupCall();
                    break;
                case 1371385889:
                    result = new TL_messageActionChatMigrateTo_layer131();
                    break;
                case 1431655760:
                    result = new TL_messageActionUserJoined();
                    break;
                case 1431655761:
                    result = new TL_messageActionUserUpdatedPhoto();
                    break;
                case 1431655762:
                    result = new TL_messageActionTTLChange();
                    break;
                case 1431655767:
                    result = new TL_messageActionCreatedBroadcastList();
                    break;
                case 1431655925:
                    result = new TL_messageActionLoginUnknownLocation();
                    break;
                case 1431655927:
                    result = new TL_messageEncryptedAction();
                    break;
                case 1581055051:
                    result = new TL_messageActionChatAddUser_old();
                    break;
                case 1991897370:
                    result = new TL_messageActionInviteToGroupCall_layer131();
                    break;
                case 2047704898:
                    result = new TL_messageActionGroupCall();
                    break;
                case 2144015272:
                    result = new TL_messageActionChatEditPhoto();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageAction", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageActionLoginUnknownLocation extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeString(this.address);
        }
    }

    public static class TL_messageEncryptedAction extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.encryptedAction = DecryptedMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.encryptedAction.serializeToStream(stream);
        }
    }

    public static class TL_messageActionCustomAction extends MessageAction {
        public static int constructor = -85549226;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.message);
        }
    }

    public static class TL_messageActionChatCreate extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionChatCreate_layer131 extends TL_messageActionChatCreate {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf((long) stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32((int) ((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionInviteToGroupCall extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionChannelMigrateFrom extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            this.chat_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_messageActionGroupCall extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.duration = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.call.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.duration);
            }
        }
    }

    public static class TL_messageActionSetChatTheme extends MessageAction {
        public static int constructor = -NUM;
        public String emoticon;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_messages_getMessageReadParticipants extends TLObject {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                vector.objects.add(Long.valueOf(stream.readInt64(exception)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_messageActionChatDeleteUser extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_messageActionChatAddUser extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionChatMigrateTo_layer131 extends TL_messageActionChatMigrateTo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.channel_id);
        }
    }

    public static class TL_messageActionHistoryClear extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatEditPhoto extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo.serializeToStream(stream);
        }
    }

    public static class TL_messageActionScreenshotTaken extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionPhoneNumberRequest extends MessageAction {
        public static int constructor = 29007925;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatJoinedByRequest extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatMigrateTo extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
        }
    }

    public static class TL_messageActionChatJoinedByLink extends MessageAction {
        public static int constructor = 51520707;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.inviter_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.inviter_id);
        }
    }

    public static class TL_messageActionChannelMigrateFrom_layer131 extends TL_messageActionChannelMigrateFrom {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
            this.chat_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
            stream.writeInt32((int) this.chat_id);
        }
    }

    public static class TL_messageActionChatAddUser_layer131 extends TL_messageActionChatAddUser {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf((long) stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32((int) ((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionChatDeleteUser_layer131 extends TL_messageActionChatDeleteUser {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_messageActionCreatedBroadcastList extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionInviteToGroupCall_layer131 extends TL_messageActionInviteToGroupCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.users.add(Long.valueOf((long) stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32((int) ((Long) this.users.get(a)).longValue());
            }
        }
    }

    public static class TL_messageActionWebViewDataSentMe extends MessageAction {
        public static int constructor = NUM;
        public String data;
        public String text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.data = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.data);
        }
    }

    public static class TL_messageActionWebViewDataSent extends MessageAction {
        public static int constructor = -NUM;
        public String text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static class TL_messageActionUserJoined extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionUserUpdatedPhoto extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.newUserPhoto = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.newUserPhoto.serializeToStream(stream);
        }
    }

    public static class TL_messageActionContactSignUp extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatAddUser_old extends TL_messageActionChatAddUser {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_messageActionTTLChange extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.ttl = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.ttl);
        }
    }

    public static class TL_messageActionSetMessagesTTL extends MessageAction {
        public static int constructor = -NUM;
        public int period;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.period = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.period);
        }
    }

    public static class TL_messageActionChatJoinedByLink_layer131 extends TL_messageActionChatJoinedByLink {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.inviter_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.inviter_id);
        }
    }

    public static class TL_messageActionChannelCreate extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
        }
    }

    public static class TL_messageActionSecureValuesSent extends MessageAction {
        public static int constructor = -NUM;
        public ArrayList<SecureValueType> types = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    SecureValueType object = SecureValueType.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.types.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.types.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.types.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messageActionPinMessage extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionGeoProximityReached extends MessageAction {
        public static int constructor = -NUM;
        public int distance;
        public Peer from_id;
        public Peer to_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.to_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.distance = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.from_id.serializeToStream(stream);
            this.to_id.serializeToStream(stream);
            stream.writeInt32(this.distance);
        }
    }

    public static class TL_messageActionChatDeletePhoto extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionPhoneCall extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.video = (this.flags & 4) != 0;
            this.call_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.reason = PhoneCallDiscardReason.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.duration = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.video ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.call_id);
            if ((this.flags & 1) != 0) {
                this.reason.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.duration);
            }
        }
    }

    public static class TL_messageActionChatEditTitle extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
        }
    }

    public static class TL_messageActionPaymentSent extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.currency = stream.readString(exception);
            this.total_amount = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.currency);
            stream.writeInt64(this.total_amount);
        }
    }

    public static class TL_messageActionBotAllowed extends MessageAction {
        public static int constructor = -NUM;
        public String domain;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.domain = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.domain);
        }
    }

    public static class TL_messageActionEmpty extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageActionGameScore extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.game_id = stream.readInt64(exception);
            this.score = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.game_id);
            stream.writeInt32(this.score);
        }
    }

    public static class TL_messageActionGroupCallScheduled extends MessageAction {
        public static int constructor = -NUM;
        public int schedule_date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.schedule_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(this.schedule_date);
        }
    }

    public static abstract class ReportReason extends TLObject {
        public static ReportReason TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ReportReason result = null;
            switch (constructor) {
                case -1685456582:
                    result = new TL_inputReportReasonCopyright();
                    break;
                case -1376497949:
                    result = new TL_inputReportReasonChildAbuse();
                    break;
                case -1041980751:
                    result = new TL_inputReportReasonOther();
                    break;
                case -606798099:
                    result = new TL_inputReportReasonGeoIrrelevant();
                    break;
                case -170010905:
                    result = new TL_inputReportReasonFake();
                    break;
                case 505595789:
                    result = new TL_inputReportReasonViolence();
                    break;
                case 777640226:
                    result = new TL_inputReportReasonPornography();
                    break;
                case 1490799288:
                    result = new TL_inputReportReasonSpam();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ReportReason", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputReportReasonGeoIrrelevant extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonOther extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonFake extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonCopyright extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonSpam extends ReportReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonViolence extends ReportReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonChildAbuse extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonPornography extends ReportReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonIllegalDrugs extends ReportReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonPersonalDetails extends ReportReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_archivedStickers extends TLObject {
        public static int constructor = NUM;
        public int count;
        public ArrayList<StickerSetCovered> sets = new ArrayList<>();

        public static TL_messages_archivedStickers TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_archivedStickers result = new TL_messages_archivedStickers();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_archivedStickers", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    StickerSetCovered object = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sets.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.sets.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.sets.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class DecryptedMessage extends TLObject {
        public DecryptedMessageAction action;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public long grouped_id;
        public DecryptedMessageMedia media;
        public String message;
        public byte[] random_bytes;
        public long random_id;
        public long reply_to_random_id;
        public boolean silent;
        public int ttl;
        public String via_bot_name;

        public static DecryptedMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DecryptedMessage result = null;
            switch (constructor) {
                case -1848883596:
                    result = new TL_decryptedMessage();
                    break;
                case -1438109059:
                    result = new TL_decryptedMessageService_layer8();
                    break;
                case 528568095:
                    result = new TL_decryptedMessage_layer8();
                    break;
                case 541931640:
                    result = new TL_decryptedMessage_layer17();
                    break;
                case 917541342:
                    result = new TL_decryptedMessage_layer45();
                    break;
                case 1930838368:
                    result = new TL_decryptedMessageService();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_decryptedMessage_layer17 extends TL_decryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.ttl = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = DecryptedMessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            stream.writeInt32(this.ttl);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_decryptedMessageService extends DecryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.action = DecryptedMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_decryptedMessageService_layer8 extends TL_decryptedMessageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.random_bytes = stream.readByteArray(exception);
            this.action = DecryptedMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            stream.writeByteArray(this.random_bytes);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_decryptedMessage_layer8 extends TL_decryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.random_bytes = stream.readByteArray(exception);
            this.message = stream.readString(exception);
            this.media = DecryptedMessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            stream.writeByteArray(this.random_bytes);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_decryptedMessage extends DecryptedMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.silent = (this.flags & 32) != 0;
            this.random_id = stream.readInt64(exception);
            this.ttl = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = DecryptedMessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_random_id = stream.readInt64(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.random_id);
            stream.writeInt32(this.ttl);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt64(this.reply_to_random_id);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
        }
    }

    public static class TL_decryptedMessage_layer45 extends TL_decryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.random_id = stream.readInt64(exception);
            this.ttl = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = DecryptedMessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_name = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_random_id = stream.readInt64(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.random_id);
            stream.writeInt32(this.ttl);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt64(this.reply_to_random_id);
            }
        }
    }

    public static abstract class account_Themes extends TLObject {
        public static account_Themes TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            account_Themes result = null;
            switch (constructor) {
                case -1707242387:
                    result = new TL_account_themes();
                    break;
                case -199313886:
                    result = new TL_account_themesNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in account_Themes", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_account_themes extends account_Themes {
        public static int constructor = -NUM;
        public long hash;
        public ArrayList<TL_theme> themes = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_theme object = Theme.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.themes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.themes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.themes.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_themesNotModified extends account_Themes {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_invoice extends TLObject {
        public static int constructor = NUM;
        public String currency;
        public boolean email_requested;
        public boolean email_to_provider;
        public int flags;
        public boolean flexible;
        public long max_tip_amount;
        public boolean name_requested;
        public boolean phone_requested;
        public boolean phone_to_provider;
        public ArrayList<TL_labeledPrice> prices = new ArrayList<>();
        public boolean shipping_address_requested;
        public ArrayList<Long> suggested_tip_amounts = new ArrayList<>();
        public boolean test;

        public static TL_invoice TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_invoice result = new TL_invoice();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_invoice", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.test = (readInt32 & 1) != 0;
            this.name_requested = (readInt32 & 2) != 0;
            this.phone_requested = (readInt32 & 4) != 0;
            this.email_requested = (readInt32 & 8) != 0;
            this.shipping_address_requested = (readInt32 & 16) != 0;
            this.flexible = (readInt32 & 32) != 0;
            this.phone_to_provider = (readInt32 & 64) != 0;
            this.email_to_provider = (readInt32 & 128) != 0;
            this.currency = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_labeledPrice object = TL_labeledPrice.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.prices.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 256) != 0) {
                    this.max_tip_amount = stream.readInt64(exception);
                }
                if ((this.flags & 256) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        for (int a2 = 0; a2 < count2; a2++) {
                            this.suggested_tip_amounts.add(Long.valueOf(stream.readInt64(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.test ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.name_requested ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.phone_requested ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.email_requested ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.shipping_address_requested ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.flexible ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.phone_to_provider ? i6 | 64 : i6 & -65;
            this.flags = i7;
            int i8 = this.email_to_provider ? i7 | 128 : i7 & -129;
            this.flags = i8;
            stream.writeInt32(i8);
            stream.writeString(this.currency);
            stream.writeInt32(NUM);
            int count = this.prices.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.prices.get(a).serializeToStream(stream);
            }
            if ((this.flags & 256) != 0) {
                stream.writeInt64(this.max_tip_amount);
            }
            if ((this.flags & 256) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.suggested_tip_amounts.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeInt64(this.suggested_tip_amounts.get(a2).longValue());
                }
            }
        }
    }

    public static abstract class account_WallPapers extends TLObject {
        public static account_WallPapers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            account_WallPapers result = null;
            switch (constructor) {
                case -842824308:
                    result = new TL_account_wallPapers();
                    break;
                case 471437699:
                    result = new TL_account_wallPapersNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in account_WallPapers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_account_wallPapersNotModified extends account_WallPapers {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_wallPapers extends account_WallPapers {
        public static int constructor = -NUM;
        public long hash;
        public ArrayList<WallPaper> wallpapers = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    WallPaper object = WallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.wallpapers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.wallpapers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.wallpapers.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputWebDocument extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
        public String mime_type;
        public int size;
        public String url;

        public static TL_inputWebDocument TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputWebDocument result = new TL_inputWebDocument();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputWebDocument", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.attributes.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class MessageReactions extends TLObject {
        public boolean can_see_list;
        public int flags;
        public boolean min;
        public ArrayList<TL_messagePeerReaction> recent_reactions = new ArrayList<>();
        public ArrayList<TL_reactionCount> results = new ArrayList<>();

        public static TL_messageReactions TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TL_messageReactions result = null;
            switch (constructor) {
                case -1199954735:
                    result = new TL_messageReactions_layer137();
                    break;
                case 142306870:
                    result = new TL_messageReactionsOld();
                    break;
                case 1328256121:
                    result = new TL_messageReactions();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageReactions", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageReactions extends MessageReactions {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            this.can_see_list = (this.flags & 4) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_reactionCount object = TL_reactionCount.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        int a2 = 0;
                        while (a2 < count2) {
                            TL_messagePeerReaction object2 = MessagePeerReaction.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object2 != null) {
                                this.recent_reactions.add(object2);
                                a2++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            this.flags = this.can_see_list ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_reactionCount) this.results.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_reactions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_messagePeerReaction) this.recent_reactions.get(a2)).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_messageReactionsOld extends TL_messageReactions {
        public static int constructor = NUM;

        public static TL_messageReactions TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (TL_messageReactions.constructor == constructor2) {
                TL_messageReactions result = new TL_messageReactions();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageReactions", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            this.can_see_list = (this.flags & 4) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_reactionCount object = TL_reactionCount.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        int a2 = 0;
                        while (a2 < count2) {
                            TL_messagePeerReaction object2 = TL_messagePeerReaction.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object2 != null) {
                                this.recent_reactions.add(object2);
                                a2++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            this.flags = this.can_see_list ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_reactionCount) this.results.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.recent_reactions.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_messagePeerReaction) this.recent_reactions.get(a2)).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_messageReactions_layer137 extends TL_messageReactions {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.min = (this.flags & 1) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_reactionCount object = TL_reactionCount.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.min ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_reactionCount) this.results.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class Video extends TLObject {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public int h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public long user_id;
        public int w;

        public static Video TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Video result = null;
            switch (constructor) {
                case -1056548696:
                    result = new TL_videoEmpty_layer45();
                    break;
                case -291550643:
                    result = new TL_video_old3();
                    break;
                case -148338733:
                    result = new TL_video_layer45();
                    break;
                case 948937617:
                    result = new TL_video_old2();
                    break;
                case 1431655763:
                    result = new TL_videoEncrypted();
                    break;
                case 1510253727:
                    result = new TL_video_old();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Video", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_video_old3 extends TL_video_layer45 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_video_layer45 extends Video {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_videoEncrypted extends TL_video_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.caption = stream.readString(exception);
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.caption);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_video_old extends TL_video_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.caption = stream.readString(exception);
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.caption);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_video_old2 extends TL_video_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.caption = stream.readString(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.caption);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
        }
    }

    public static class TL_videoEmpty_layer45 extends Video {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static abstract class InputPaymentCredentials extends TLObject {
        public TL_dataJSON data;
        public int flags;
        public String id;
        public TL_dataJSON payment_token;
        public boolean save;
        public byte[] tmp_password;

        public static InputPaymentCredentials TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputPaymentCredentials result = null;
            switch (constructor) {
                case -1966921727:
                    result = new TL_inputPaymentCredentialsGooglePay();
                    break;
                case -1056001329:
                    result = new TL_inputPaymentCredentialsSaved();
                    break;
                case 873977640:
                    result = new TL_inputPaymentCredentials();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputPaymentCredentials", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPaymentCredentials extends InputPaymentCredentials {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.save = z;
            this.data = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.save ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.data.serializeToStream(stream);
        }
    }

    public static class TL_inputPaymentCredentialsGooglePay extends InputPaymentCredentials {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.payment_token = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.payment_token.serializeToStream(stream);
        }
    }

    public static class TL_inputPaymentCredentialsSaved extends InputPaymentCredentials {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readString(exception);
            this.tmp_password = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.id);
            stream.writeByteArray(this.tmp_password);
        }
    }

    public static class TL_exportedMessageLink extends TLObject {
        public static int constructor = NUM;
        public String html;
        public String link;

        public static TL_exportedMessageLink TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_exportedMessageLink result = new TL_exportedMessageLink();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_exportedMessageLink", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.link = stream.readString(exception);
            this.html = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.link);
            stream.writeString(this.html);
        }
    }

    public static class TL_groupCallParticipantVideo extends TLObject {
        public static int constructor = NUM;
        public int audio_source;
        public String endpoint;
        public int flags;
        public boolean paused;
        public ArrayList<TL_groupCallParticipantVideoSourceGroup> source_groups = new ArrayList<>();

        public static TL_groupCallParticipantVideo TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_groupCallParticipantVideo result = new TL_groupCallParticipantVideo();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallParticipantVideo", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.paused = (readInt32 & 1) != 0;
            this.endpoint = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_groupCallParticipantVideoSourceGroup object = TL_groupCallParticipantVideoSourceGroup.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.source_groups.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    this.audio_source = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.paused ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.endpoint);
            stream.writeInt32(NUM);
            int count = this.source_groups.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.source_groups.get(a).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.audio_source);
            }
        }
    }

    public static abstract class TopPeerCategory extends TLObject {
        public static TopPeerCategory TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TopPeerCategory result = null;
            switch (constructor) {
                case -1472172887:
                    result = new TL_topPeerCategoryForwardUsers();
                    break;
                case -1419371685:
                    result = new TL_topPeerCategoryBotsPM();
                    break;
                case -1122524854:
                    result = new TL_topPeerCategoryGroups();
                    break;
                case -68239120:
                    result = new TL_topPeerCategoryForwardChats();
                    break;
                case 104314861:
                    result = new TL_topPeerCategoryCorrespondents();
                    break;
                case 344356834:
                    result = new TL_topPeerCategoryBotsInline();
                    break;
                case 371037736:
                    result = new TL_topPeerCategoryChannels();
                    break;
                case 511092620:
                    result = new TL_topPeerCategoryPhoneCalls();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TopPeerCategory", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_topPeerCategoryChannels extends TopPeerCategory {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryPhoneCalls extends TopPeerCategory {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryGroups extends TopPeerCategory {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryBotsInline extends TopPeerCategory {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryForwardUsers extends TopPeerCategory {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryForwardChats extends TopPeerCategory {
        public static int constructor = -68239120;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryBotsPM extends TopPeerCategory {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryCorrespondents extends TopPeerCategory {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messageReplyHeader extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int reply_to_msg_id;
        public Peer reply_to_peer_id;
        public long reply_to_random_id;
        public int reply_to_top_id;

        public static TL_messageReplyHeader TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messageReplyHeader result = new TL_messageReplyHeader();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageReplyHeader", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.reply_to_msg_id = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.reply_to_peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.reply_to_top_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.reply_to_msg_id);
            if ((this.flags & 1) != 0) {
                this.reply_to_peer_id.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.reply_to_top_id);
            }
        }
    }

    public static class TL_payments_validatedRequestedInfo extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public String id;
        public ArrayList<TL_shippingOption> shipping_options = new ArrayList<>();

        public static TL_payments_validatedRequestedInfo TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_payments_validatedRequestedInfo result = new TL_payments_validatedRequestedInfo();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_validatedRequestedInfo", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.id = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_shippingOption object = TL_shippingOption.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.shipping_options.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.shipping_options.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.shipping_options.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_jsonObjectValue extends TLObject {
        public static int constructor = -NUM;
        public String key;
        public JSONValue value;

        public static TL_jsonObjectValue TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_jsonObjectValue result = new TL_jsonObjectValue();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_jsonObjectValue", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.key = stream.readString(exception);
            this.value = JSONValue.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.key);
            this.value.serializeToStream(stream);
        }
    }

    public static class TL_users_userFull extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public UserFull full_user;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_users_userFull TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_users_userFull result = new TL_users_userFull();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_users_userFull", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.full_user = UserFull.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.full_user.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_shippingOption extends TLObject {
        public static int constructor = -NUM;
        public String id;
        public ArrayList<TL_labeledPrice> prices = new ArrayList<>();
        public String title;

        public static TL_shippingOption TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_shippingOption result = new TL_shippingOption();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_shippingOption", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readString(exception);
            this.title = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_labeledPrice object = TL_labeledPrice.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.prices.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.id);
            stream.writeString(this.title);
            stream.writeInt32(NUM);
            int count = this.prices.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.prices.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputDocument extends TLObject {
        public long access_hash;
        public byte[] file_reference;
        public long id;

        public static InputDocument TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputDocument result = null;
            switch (constructor) {
                case 448771445:
                    result = new TL_inputDocument();
                    break;
                case 1928391342:
                    result = new TL_inputDocumentEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputDocument", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputDocumentEmpty extends InputDocument {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputDocument extends InputDocument {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
        }
    }

    public static class TL_folderPeer extends TLObject {
        public static int constructor = -NUM;
        public int folder_id;
        public Peer peer;

        public static TL_folderPeer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_folderPeer result = new TL_folderPeer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_folderPeer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.folder_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.folder_id);
        }
    }

    public static class TL_stats_broadcastStats extends TLObject {
        public static int constructor = -NUM;
        public TL_statsPercentValue enabled_notifications;
        public TL_statsAbsValueAndPrev followers;
        public StatsGraph followers_graph;
        public StatsGraph growth_graph;
        public StatsGraph interactions_graph;
        public StatsGraph iv_interactions_graph;
        public StatsGraph languages_graph;
        public StatsGraph mute_graph;
        public StatsGraph new_followers_by_source_graph;
        public TL_statsDateRangeDays period;
        public ArrayList<TL_messageInteractionCounters> recent_message_interactions = new ArrayList<>();
        public TL_statsAbsValueAndPrev shares_per_post;
        public StatsGraph top_hours_graph;
        public StatsGraph views_by_source_graph;
        public TL_statsAbsValueAndPrev views_per_post;

        public static TL_stats_broadcastStats TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_stats_broadcastStats result = new TL_stats_broadcastStats();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stats_broadcastStats", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.period = TL_statsDateRangeDays.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.followers = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.views_per_post = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.shares_per_post = TL_statsAbsValueAndPrev.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.enabled_notifications = TL_statsPercentValue.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.growth_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.followers_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.mute_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.top_hours_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.interactions_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.iv_interactions_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.views_by_source_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_followers_by_source_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.languages_graph = StatsGraph.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_messageInteractionCounters object = TL_messageInteractionCounters.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.recent_message_interactions.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.period.serializeToStream(stream);
            this.followers.serializeToStream(stream);
            this.views_per_post.serializeToStream(stream);
            this.shares_per_post.serializeToStream(stream);
            this.enabled_notifications.serializeToStream(stream);
            this.growth_graph.serializeToStream(stream);
            this.followers_graph.serializeToStream(stream);
            this.mute_graph.serializeToStream(stream);
            this.top_hours_graph.serializeToStream(stream);
            this.interactions_graph.serializeToStream(stream);
            this.iv_interactions_graph.serializeToStream(stream);
            this.views_by_source_graph.serializeToStream(stream);
            this.new_followers_by_source_graph.serializeToStream(stream);
            this.languages_graph.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.recent_message_interactions.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.recent_message_interactions.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class SecureValueType extends TLObject {
        public static SecureValueType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecureValueType result = null;
            switch (constructor) {
                case -1995211763:
                    result = new TL_secureValueTypeBankStatement();
                    break;
                case -1954007928:
                    result = new TL_secureValueTypeRentalAgreement();
                    break;
                case -1908627474:
                    result = new TL_secureValueTypeEmail();
                    break;
                case -1717268701:
                    result = new TL_secureValueTypeInternalPassport();
                    break;
                case -1713143702:
                    result = new TL_secureValueTypePassportRegistration();
                    break;
                case -1658158621:
                    result = new TL_secureValueTypePersonalDetails();
                    break;
                case -1596951477:
                    result = new TL_secureValueTypeIdentityCard();
                    break;
                case -1289704741:
                    result = new TL_secureValueTypePhone();
                    break;
                case -874308058:
                    result = new TL_secureValueTypeAddress();
                    break;
                case -368907213:
                    result = new TL_secureValueTypeTemporaryRegistration();
                    break;
                case -63531698:
                    result = new TL_secureValueTypeUtilityBill();
                    break;
                case 115615172:
                    result = new TL_secureValueTypeDriverLicense();
                    break;
                case 1034709504:
                    result = new TL_secureValueTypePassport();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecureValueType", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_secureValueTypeAddress extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypePassportRegistration extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeIdentityCard extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeUtilityBill extends SecureValueType {
        public static int constructor = -63531698;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeBankStatement extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeEmail extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypePersonalDetails extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeTemporaryRegistration extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypePassport extends SecureValueType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeRentalAgreement extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeDriverLicense extends SecureValueType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypePhone extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureValueTypeInternalPassport extends SecureValueType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_peerBlocked extends TLObject {
        public static int constructor = -NUM;
        public int date;
        public Peer peer_id;

        public static TL_peerBlocked TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_peerBlocked result = new TL_peerBlocked();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_peerBlocked", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_messages_affectedHistory extends TLObject {
        public static int constructor = -NUM;
        public int offset;
        public int pts;
        public int pts_count;

        public static TL_messages_affectedHistory TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_affectedHistory result = new TL_messages_affectedHistory();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedHistory", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
            this.offset = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
            stream.writeInt32(this.offset);
        }
    }

    public static abstract class Document extends TLObject {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
        public int date;
        public int dc_id;
        public String file_name;
        public String file_name_fixed;
        public byte[] file_reference;
        public int flags;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public ArrayList<PhotoSize> thumbs = new ArrayList<>();
        public long user_id;
        public int version;
        public ArrayList<VideoSize> video_thumbs = new ArrayList<>();

        public static Document TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Document result = null;
            switch (constructor) {
                case -2027738169:
                    result = new TL_document_layer82();
                    break;
                case -1683841855:
                    result = new TL_document_layer113();
                    break;
                case -1627626714:
                    result = new TL_document_old();
                    break;
                case -106717361:
                    result = new TL_document_layer53();
                    break;
                case 512177195:
                    result = new TL_document();
                    break;
                case 922273905:
                    result = new TL_documentEmpty();
                    break;
                case 1431655766:
                    result = new TL_documentEncrypted_old();
                    break;
                case 1431655768:
                    result = new TL_documentEncrypted();
                    break;
                case 1498631756:
                    result = new TL_document_layer92();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                    result.file_name_fixed = FileLoader.getDocumentFileName(result);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Document", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_document_layer92 extends TL_document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_document_layer82 extends TL_document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
            stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(0);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_documentEncrypted_old extends TL_document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.file_name = stream.readString(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.file_name);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_document extends Document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            boolean z = exception;
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        int a2 = a;
                        int count2 = count;
                        PhotoSize object = PhotoSize.TLdeserialize(0, this.id, 0, stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.thumbs.add(object);
                            a = a2 + 1;
                            count = count2;
                        } else {
                            return;
                        }
                    }
                    int i = a;
                    int i2 = count;
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a3 = 0;
                    while (a3 < count3) {
                        VideoSize object2 = VideoSize.TLdeserialize(0, this.id, stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.video_thumbs.add(object2);
                            a3++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            this.dc_id = stream.readInt32(exception);
            int magic3 = stream.readInt32(exception);
            if (magic3 == NUM) {
                int count4 = stream.readInt32(exception);
                int a4 = 0;
                while (a4 < count4) {
                    DocumentAttribute object3 = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), z);
                    if (object3 != null) {
                        this.attributes.add(object3);
                        a4++;
                    } else {
                        return;
                    }
                }
                AbstractSerializedData abstractSerializedData = stream;
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.thumbs.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((PhotoSize) this.thumbs.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.video_thumbs.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((VideoSize) this.video_thumbs.get(a2)).serializeToStream(stream);
                }
            }
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count3 = this.attributes.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((DocumentAttribute) this.attributes.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static class TL_document_layer113 extends TL_document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            boolean z = exception;
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        int a2 = a;
                        int count2 = count;
                        PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.thumbs.add(object);
                            a = a2 + 1;
                            count = count2;
                        } else {
                            return;
                        }
                    }
                    int i = a;
                    int i2 = count;
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            this.dc_id = stream.readInt32(exception);
            int magic2 = stream.readInt32(exception);
            if (magic2 == NUM) {
                int count3 = stream.readInt32(exception);
                int a3 = 0;
                while (a3 < count3) {
                    DocumentAttribute object2 = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), z);
                    if (object2 != null) {
                        this.attributes.add(object2);
                        a3++;
                    } else {
                        return;
                    }
                }
                AbstractSerializedData abstractSerializedData = stream;
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.thumbs.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((PhotoSize) this.thumbs.get(a)).serializeToStream(stream);
                }
            }
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count2 = this.attributes.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((DocumentAttribute) this.attributes.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static class TL_document_old extends TL_document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.file_name = stream.readString(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.file_name);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_documentEmpty extends Document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_documentEncrypted extends Document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.key = stream.readByteArray(exception);
                this.iv = stream.readByteArray(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_document_layer53 extends TL_document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumbs.add(PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception));
            this.dc_id = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class PasswordKdfAlgo extends TLObject {
        public static PasswordKdfAlgo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PasswordKdfAlgo result = null;
            switch (constructor) {
                case -732254058:
                    result = new TL_passwordKdfAlgoUnknown();
                    break;
                case 982592842:
                    result = new TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PasswordKdfAlgo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_passwordKdfAlgoUnknown extends PasswordKdfAlgo {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends PasswordKdfAlgo {
        public static int constructor = NUM;
        public int g;
        public byte[] p;
        public byte[] salt1;
        public byte[] salt2;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.salt1 = stream.readByteArray(exception);
            this.salt2 = stream.readByteArray(exception);
            this.g = stream.readInt32(exception);
            this.p = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.salt1);
            stream.writeByteArray(this.salt2);
            stream.writeInt32(this.g);
            stream.writeByteArray(this.p);
        }
    }

    public static abstract class PageBlock extends TLObject {
        public boolean bottom;
        public boolean first;
        public int groupId;
        public int level;
        public int mid;
        public PhotoSize thumb;
        public TLObject thumbObject;

        public static PageBlock TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PageBlock result = null;
            switch (constructor) {
                case -2143067670:
                    result = new TL_pageBlockAudio();
                    break;
                case -1879401953:
                    result = new TL_pageBlockSubtitle();
                    break;
                case -1702174239:
                    result = new TL_pageBlockOrderedList();
                    break;
                case -1538310410:
                    result = new TL_pageBlockMap();
                    break;
                case -1468953147:
                    result = new TL_pageBlockEmbed();
                    break;
                case -1162877472:
                    result = new TL_pageBlockAuthorDate();
                    break;
                case -1085412734:
                    result = new TL_pageBlockTable();
                    break;
                case -1076861716:
                    result = new TL_pageBlockHeader();
                    break;
                case -1066346178:
                    result = new TL_pageBlockPreformatted();
                    break;
                case -840826671:
                    result = new TL_pageBlockEmbed_layer82();
                    break;
                case -837994576:
                    result = new TL_pageBlockAnchor();
                    break;
                case -650782469:
                    result = new TL_pageBlockEmbed_layer60();
                    break;
                case -640214938:
                    result = new TL_pageBlockVideo_layer82();
                    break;
                case -618614392:
                    result = new TL_pageBlockDivider();
                    break;
                case -454524911:
                    result = new TL_pageBlockList();
                    break;
                case -372860542:
                    result = new TL_pageBlockPhoto_layer82();
                    break;
                case -283684427:
                    result = new TL_pageBlockChannel();
                    break;
                case -248793375:
                    result = new TL_pageBlockSubheader();
                    break;
                case -229005301:
                    result = new TL_pageBlockEmbedPost();
                    break;
                case 52401552:
                    result = new TL_pageBlockSlideshow();
                    break;
                case 145955919:
                    result = new TL_pageBlockCollage_layer82();
                    break;
                case 319588707:
                    result = new TL_pageBlockSlideshow_layer82();
                    break;
                case 324435594:
                    result = new TL_pageBlockUnsupported();
                    break;
                case 370236054:
                    result = new TL_pageBlockRelatedArticles();
                    break;
                case 391759200:
                    result = new TL_pageBlockPhoto();
                    break;
                case 504660880:
                    result = new TL_pageBlockKicker();
                    break;
                case 641563686:
                    result = new TL_pageBlockBlockquote();
                    break;
                case 690781161:
                    result = new TL_pageBlockEmbedPost_layer82();
                    break;
                case 834148991:
                    result = new TL_pageBlockAudio_layer82();
                    break;
                case 972174080:
                    result = new TL_pageBlockCover();
                    break;
                case 978896884:
                    result = new TL_pageBlockList_layer82();
                    break;
                case 1029399794:
                    result = new TL_pageBlockAuthorDate_layer60();
                    break;
                case 1182402406:
                    result = new TL_pageBlockParagraph();
                    break;
                case 1216809369:
                    result = new TL_pageBlockFooter();
                    break;
                case 1329878739:
                    result = new TL_pageBlockPullquote();
                    break;
                case 1705048653:
                    result = new TL_pageBlockCollage();
                    break;
                case 1890305021:
                    result = new TL_pageBlockTitle();
                    break;
                case 1987480557:
                    result = new TL_pageBlockDetails();
                    break;
                case 2089805750:
                    result = new TL_pageBlockVideo();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PageBlock", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pageBlockOrderedList extends PageBlock {
        public static int constructor = -NUM;
        public ArrayList<PageListOrderedItem> items = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageListOrderedItem object = PageListOrderedItem.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.items.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageBlockEmbedPost extends PageBlock {
        public static int constructor = -NUM;
        public String author;
        public long author_photo_id;
        public ArrayList<PageBlock> blocks = new ArrayList<>();
        public TL_pageCaption caption;
        public int date;
        public String url;
        public long webpage_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.webpage_id = stream.readInt64(exception);
            this.author_photo_id = stream.readInt64(exception);
            this.author = stream.readString(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.webpage_id);
            stream.writeInt64(this.author_photo_id);
            stream.writeString(this.author);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.blocks.get(a).serializeToStream(stream);
            }
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockParagraph extends PageBlock {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockKicker extends PageBlock {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockFooter extends PageBlock {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockHeader extends PageBlock {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockPreformatted extends PageBlock {
        public static int constructor = -NUM;
        public String language;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.language = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            stream.writeString(this.language);
        }
    }

    public static class TL_pageBlockRelatedArticles extends PageBlock {
        public static int constructor = NUM;
        public ArrayList<TL_pageRelatedArticle> articles = new ArrayList<>();
        public RichText title;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.title = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pageRelatedArticle object = TL_pageRelatedArticle.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.articles.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.title.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.articles.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.articles.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageBlockSubheader extends PageBlock {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockSlideshow extends PageBlock {
        public static int constructor = 52401552;
        public TL_pageCaption caption;
        public ArrayList<PageBlock> items = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.items.get(a).serializeToStream(stream);
            }
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockAnchor extends PageBlock {
        public static int constructor = -NUM;
        public String name;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.name);
        }
    }

    public static class TL_pageBlockMap extends PageBlock {
        public static int constructor = -NUM;
        public TL_pageCaption caption;
        public GeoPoint geo;
        public int h;
        public int w;
        public int zoom;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.zoom = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo.serializeToStream(stream);
            stream.writeInt32(this.zoom);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockDivider extends PageBlock {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_pageBlockPhoto extends PageBlock {
        public static int constructor = NUM;
        public TL_pageCaption caption;
        public int flags;
        public long photo_id;
        public String url;
        public long webpage_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.photo_id = stream.readInt64(exception);
            this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.url = stream.readString(exception);
            }
            if ((this.flags & 1) != 0) {
                this.webpage_id = stream.readInt64(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.photo_id);
            this.caption.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.webpage_id);
            }
        }
    }

    public static class TL_pageBlockList extends PageBlock {
        public static int constructor = -NUM;
        public ArrayList<PageListItem> items = new ArrayList<>();
        public boolean ordered;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageListItem object = PageListItem.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.items.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageBlockUnsupported extends PageBlock {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_pageBlockCollage extends PageBlock {
        public static int constructor = NUM;
        public TL_pageCaption caption;
        public ArrayList<PageBlock> items = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.items.get(a).serializeToStream(stream);
            }
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockEmbed extends PageBlock {
        public static int constructor = -NUM;
        public boolean allow_scrolling;
        public TL_pageCaption caption;
        public int flags;
        public boolean full_width;
        public int h;
        public String html;
        public long poster_photo_id;
        public String url;
        public int w;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.full_width = (readInt32 & 1) != 0;
            if ((readInt32 & 8) != 0) {
                z = true;
            }
            this.allow_scrolling = z;
            if ((readInt32 & 2) != 0) {
                this.url = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.html = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.poster_photo_id = stream.readInt64(exception);
            }
            if ((this.flags & 32) != 0) {
                this.w = stream.readInt32(exception);
            }
            if ((this.flags & 32) != 0) {
                this.h = stream.readInt32(exception);
            }
            this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.full_width ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.allow_scrolling ? i | 8 : i & -9;
            this.flags = i2;
            stream.writeInt32(i2);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.html);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.poster_photo_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.w);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.h);
            }
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockSubtitle extends PageBlock {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockBlockquote extends PageBlock {
        public static int constructor = NUM;
        public RichText caption;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockDetails extends PageBlock {
        public static int constructor = NUM;
        public ArrayList<PageBlock> blocks = new ArrayList<>();
        public int flags;
        public boolean open;
        public RichText title;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.open = (readInt32 & 1) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.title = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.open ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.blocks.get(a).serializeToStream(stream);
            }
            this.title.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockChannel extends PageBlock {
        public static int constructor = -NUM;
        public Chat channel;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockVideo extends PageBlock {
        public static int constructor = NUM;
        public boolean autoplay;
        public TL_pageCaption caption;
        public int flags;
        public boolean loop;
        public long video_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.autoplay = (readInt32 & 1) != 0;
            if ((readInt32 & 2) != 0) {
                z = true;
            }
            this.loop = z;
            this.video_id = stream.readInt64(exception);
            this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.autoplay ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.loop ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            stream.writeInt64(this.video_id);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockEmbed_layer60 extends TL_pageBlockEmbed {
        public static int constructor = -NUM;
        public boolean allow_scrolling;
        public RichText caption;
        public int flags;
        public boolean full_width;
        public int h;
        public String html;
        public String url;
        public int w;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.full_width = (readInt32 & 1) != 0;
            if ((readInt32 & 8) != 0) {
                z = true;
            }
            this.allow_scrolling = z;
            if ((readInt32 & 2) != 0) {
                this.url = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.html = stream.readString(exception);
            }
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.caption = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.full_width ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.allow_scrolling ? i | 8 : i & -9;
            this.flags = i2;
            stream.writeInt32(i2);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.html);
            }
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockPullquote extends PageBlock {
        public static int constructor = NUM;
        public RichText caption;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockAudio extends PageBlock {
        public static int constructor = -NUM;
        public long audio_id;
        public TL_pageCaption caption;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.audio_id = stream.readInt64(exception);
            this.caption = TL_pageCaption.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.audio_id);
            this.caption.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockTable extends PageBlock {
        public static int constructor = -NUM;
        public boolean bordered;
        public int flags;
        public ArrayList<TL_pageTableRow> rows = new ArrayList<>();
        public boolean striped;
        public RichText title;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.bordered = (readInt32 & 1) != 0;
            this.striped = (readInt32 & 2) != 0;
            this.title = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pageTableRow object = TL_pageTableRow.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rows.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.bordered ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.striped ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.title.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.rows.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.rows.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageBlockTitle extends PageBlock {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockCover extends PageBlock {
        public static int constructor = NUM;
        public PageBlock cover;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.cover = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.cover.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockAuthorDate extends PageBlock {
        public static int constructor = -NUM;
        public RichText author;
        public int published_date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.author = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.published_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.author.serializeToStream(stream);
            stream.writeInt32(this.published_date);
        }
    }

    public static abstract class InputPrivacyRule extends TLObject {
        public static InputPrivacyRule TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputPrivacyRule result = null;
            switch (constructor) {
                case -2079962673:
                    result = new TL_inputPrivacyValueAllowChatParticipants();
                    break;
                case -1877932953:
                    result = new TL_inputPrivacyValueDisallowUsers();
                    break;
                case -697604407:
                    result = new TL_inputPrivacyValueDisallowAll();
                    break;
                case -380694650:
                    result = new TL_inputPrivacyValueDisallowChatParticipants();
                    break;
                case 195371015:
                    result = new TL_inputPrivacyValueDisallowContacts();
                    break;
                case 218751099:
                    result = new TL_inputPrivacyValueAllowContacts();
                    break;
                case 320652927:
                    result = new TL_inputPrivacyValueAllowUsers();
                    break;
                case 407582158:
                    result = new TL_inputPrivacyValueAllowAll();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyRule", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPrivacyValueDisallowAll extends InputPrivacyRule {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueDisallowUsers extends InputPrivacyRule {
        public static int constructor = -NUM;
        public ArrayList<InputUser> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    InputUser object = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputPrivacyValueAllowContacts extends InputPrivacyRule {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowChatParticipants extends InputPrivacyRule {
        public static int constructor = -NUM;
        public ArrayList<Long> chats = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.chats.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.chats.get(a).longValue());
            }
        }
    }

    public static class TL_inputPrivacyValueDisallowContacts extends InputPrivacyRule {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowAll extends InputPrivacyRule {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowUsers extends InputPrivacyRule {
        public static int constructor = NUM;
        public ArrayList<InputUser> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    InputUser object = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputPrivacyValueDisallowChatParticipants extends InputPrivacyRule {
        public static int constructor = -NUM;
        public ArrayList<Long> chats = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.chats.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.chats.get(a).longValue());
            }
        }
    }

    public static class TL_maskCoords extends TLObject {
        public static int constructor = -NUM;
        public int n;
        public double x;
        public double y;
        public double zoom;

        public static TL_maskCoords TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_maskCoords result = new TL_maskCoords();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_maskCoords", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.n = stream.readInt32(exception);
            this.x = stream.readDouble(exception);
            this.y = stream.readDouble(exception);
            this.zoom = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.n);
            stream.writeDouble(this.x);
            stream.writeDouble(this.y);
            stream.writeDouble(this.zoom);
        }
    }

    public static class TL_messages_votesList extends TLObject {
        public static int constructor = NUM;
        public int count;
        public int flags;
        public String next_offset;
        public ArrayList<User> users = new ArrayList<>();
        public ArrayList<MessageUserVote> votes = new ArrayList<>();

        public static TL_messages_votesList TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_votesList result = new TL_messages_votesList();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_votesList", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    MessageUserVote object = MessageUserVote.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.votes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    if ((this.flags & 1) != 0) {
                        this.next_offset = stream.readString(exception);
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.votes.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.votes.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeString(this.next_offset);
            }
        }
    }

    public static class TL_highScore extends TLObject {
        public static int constructor = NUM;
        public int pos;
        public int score;
        public long user_id;

        public static TL_highScore TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_highScore result = new TL_highScore();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_highScore", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pos = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
            this.score = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pos);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.score);
        }
    }

    public static abstract class InputMedia extends TLObject {
        public String address;
        public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
        public InputFile file;
        public String first_name;
        public int flags;
        public boolean force_file;
        public InputGeoPoint geo_point;
        public int heading;
        public String last_name;
        public String mime_type;
        public boolean nosound_video;
        public int period;
        public String phone_number;
        public String provider;
        public int proximity_notification_radius;
        public ArrayList<InputDocument> stickers = new ArrayList<>();
        public boolean stopped;
        public InputFile thumb;
        public String title;
        public int ttl_seconds;
        public String vcard;
        public String venue_id;
        public String venue_type;

        public static InputMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputMedia result = null;
            switch (constructor) {
                case -1771768449:
                    result = new TL_inputMediaEmpty();
                    break;
                case -1759532989:
                    result = new TL_inputMediaGeoLive();
                    break;
                case -1279654347:
                    result = new TL_inputMediaPhoto();
                    break;
                case -1052959727:
                    result = new TL_inputMediaVenue();
                    break;
                case -750828557:
                    result = new TL_inputMediaGame();
                    break;
                case -440664550:
                    result = new TL_inputMediaPhotoExternal();
                    break;
                case -428884101:
                    result = new TL_inputMediaDice();
                    break;
                case -122978821:
                    result = new TL_inputMediaContact();
                    break;
                case -104578748:
                    result = new TL_inputMediaGeoPoint();
                    break;
                case -78455655:
                    result = new TL_inputMediaDocumentExternal();
                    break;
                case 261416433:
                    result = new TL_inputMediaPoll();
                    break;
                case 505969924:
                    result = new TL_inputMediaUploadedPhoto();
                    break;
                case 860303448:
                    result = new TL_inputMediaDocument();
                    break;
                case 1530447553:
                    result = new TL_inputMediaUploadedDocument();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputMedia", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputMediaContact extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.vcard = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.vcard);
        }
    }

    public static class TL_inputMediaDocument extends InputMedia {
        public static int constructor = NUM;
        public InputDocument id;
        public String query;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.query = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.id.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.query);
            }
        }
    }

    public static class TL_inputMediaGame extends InputMedia {
        public static int constructor = -NUM;
        public InputGame id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = InputGame.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_inputMediaDice extends InputMedia {
        public static int constructor = -NUM;
        public String emoticon;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_inputMediaGeoPoint extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo_point = InputGeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo_point.serializeToStream(stream);
        }
    }

    public static class TL_inputMediaDocumentExternal extends InputMedia {
        public static int constructor = -78455655;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.url = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.url);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaEmpty extends InputMedia {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMediaPoll extends InputMedia {
        public static int constructor = NUM;
        public ArrayList<byte[]> correct_answers = new ArrayList<>();
        public Poll poll;
        public String solution;
        public ArrayList<MessageEntity> solution_entities = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.poll = Poll.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.correct_answers.add(stream.readByteArray(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.solution = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.solution_entities.add(object);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.poll.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.correct_answers.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeByteArray(this.correct_answers.get(a));
                }
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.solution);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.solution_entities.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    this.solution_entities.get(a2).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_inputMediaUploadedPhoto extends InputMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.file = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        InputDocument object = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.stickers.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.file.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.stickers.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((InputDocument) this.stickers.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaVenue extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo_point = InputGeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
            this.venue_type = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo_point.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
            stream.writeString(this.venue_type);
        }
    }

    public static class TL_inputMediaGeoLive extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.stopped = z;
            this.geo_point = InputGeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.heading = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.period = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.proximity_notification_radius = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.stopped ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.geo_point.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.heading);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.period);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.proximity_notification_radius);
            }
        }
    }

    public static class TL_inputMediaUploadedDocument extends InputMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.nosound_video = (this.flags & 8) != 0;
            this.force_file = (this.flags & 16) != 0;
            this.file = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.thumb = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.mime_type = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 1) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        int a2 = 0;
                        while (a2 < count2) {
                            InputDocument object2 = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object2 != null) {
                                this.stickers.add(object2);
                                a2++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    this.ttl_seconds = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.nosound_video ? this.flags | 8 : this.flags & -9;
            this.flags = this.force_file ? this.flags | 16 : this.flags & -17;
            stream.writeInt32(this.flags);
            this.file.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.thumb.serializeToStream(stream);
            }
            stream.writeString(this.mime_type);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.stickers.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((InputDocument) this.stickers.get(a2)).serializeToStream(stream);
                }
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaPhotoExternal extends InputMedia {
        public static int constructor = -NUM;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.url = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.url);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaPhoto extends InputMedia {
        public static int constructor = -NUM;
        public InputPhoto id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = InputPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.id.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static abstract class StickerSetCovered extends TLObject {
        public Document cover;
        public ArrayList<Document> covers = new ArrayList<>();
        public StickerSet set;

        public static StickerSetCovered TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            StickerSetCovered result = null;
            switch (constructor) {
                case 872932635:
                    result = new TL_stickerSetMultiCovered();
                    break;
                case 1678812626:
                    result = new TL_stickerSetCovered();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in StickerSetCovered", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_stickerSetMultiCovered extends StickerSetCovered {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.set = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.covers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.set.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.covers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Document) this.covers.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_stickerSetCovered extends StickerSetCovered {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.set = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.cover = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.set.serializeToStream(stream);
            this.cover.serializeToStream(stream);
        }
    }

    public static abstract class EncryptedMessage extends TLObject {
        public byte[] bytes;
        public int chat_id;
        public int date;
        public EncryptedFile file;
        public long random_id;

        public static EncryptedMessage TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            EncryptedMessage result = null;
            switch (constructor) {
                case -317144808:
                    result = new TL_encryptedMessage();
                    break;
                case 594758406:
                    result = new TL_encryptedMessageService();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedMessage", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_encryptedMessageService extends EncryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.chat_id = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.bytes = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            stream.writeInt32(this.chat_id);
            stream.writeInt32(this.date);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_encryptedMessage extends EncryptedMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_id = stream.readInt64(exception);
            this.chat_id = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.bytes = stream.readByteArray(exception);
            this.file = EncryptedFile.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.random_id);
            stream.writeInt32(this.chat_id);
            stream.writeInt32(this.date);
            stream.writeByteArray(this.bytes);
            this.file.serializeToStream(stream);
        }
    }

    public static abstract class InputStickerSet extends TLObject {
        public long access_hash;
        public long id;
        public String short_name;

        public static InputStickerSet TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputStickerSet result = null;
            switch (constructor) {
                case -2044933984:
                    result = new TL_inputStickerSetShortName();
                    break;
                case -1645763991:
                    result = new TL_inputStickerSetID();
                    break;
                case -427863538:
                    result = new TL_inputStickerSetDice();
                    break;
                case -4838507:
                    result = new TL_inputStickerSetEmpty();
                    break;
                case 42402760:
                    result = new TL_inputStickerSetAnimatedEmoji();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputStickerSet", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputStickerSetDice extends InputStickerSet {
        public static int constructor = -NUM;
        public String emoticon;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_inputStickerSetEmpty extends InputStickerSet {
        public static int constructor = -4838507;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputStickerSetID extends InputStickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputStickerSetShortName extends InputStickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.short_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.short_name);
        }
    }

    public static class TL_inputStickerSetAnimatedEmoji extends InputStickerSet {
        public static int constructor = 42402760;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelAdminLogEventsFilter extends TLObject {
        public static int constructor = -NUM;
        public boolean ban;
        public boolean delete;
        public boolean demote;
        public boolean edit;
        public int flags;
        public boolean group_call;
        public boolean info;
        public boolean invite;
        public boolean invites;
        public boolean join;
        public boolean kick;
        public boolean leave;
        public boolean pinned;
        public boolean promote;
        public boolean settings;
        public boolean unban;
        public boolean unkick;

        public static TL_channelAdminLogEventsFilter TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channelAdminLogEventsFilter result = new TL_channelAdminLogEventsFilter();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEventsFilter", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.join = (readInt32 & 1) != 0;
            this.leave = (readInt32 & 2) != 0;
            this.invite = (readInt32 & 4) != 0;
            this.ban = (readInt32 & 8) != 0;
            this.unban = (readInt32 & 16) != 0;
            this.kick = (readInt32 & 32) != 0;
            this.unkick = (readInt32 & 64) != 0;
            this.promote = (readInt32 & 128) != 0;
            this.demote = (readInt32 & 256) != 0;
            this.info = (readInt32 & 512) != 0;
            this.settings = (readInt32 & 1024) != 0;
            this.pinned = (readInt32 & 2048) != 0;
            this.edit = (readInt32 & 4096) != 0;
            this.delete = (readInt32 & 8192) != 0;
            this.group_call = (readInt32 & 16384) != 0;
            if ((readInt32 & 32768) != 0) {
                z = true;
            }
            this.invites = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.join ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.leave ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.invite ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.ban ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.unban ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.kick ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.unkick ? i6 | 64 : i6 & -65;
            this.flags = i7;
            int i8 = this.promote ? i7 | 128 : i7 & -129;
            this.flags = i8;
            int i9 = this.demote ? i8 | 256 : i8 & -257;
            this.flags = i9;
            int i10 = this.info ? i9 | 512 : i9 & -513;
            this.flags = i10;
            int i11 = this.settings ? i10 | 1024 : i10 & -1025;
            this.flags = i11;
            int i12 = this.pinned ? i11 | 2048 : i11 & -2049;
            this.flags = i12;
            int i13 = this.edit ? i12 | 4096 : i12 & -4097;
            this.flags = i13;
            int i14 = this.delete ? i13 | 8192 : i13 & -8193;
            this.flags = i14;
            int i15 = this.group_call ? i14 | 16384 : i14 & -16385;
            this.flags = i15;
            int i16 = this.invites ? i15 | 32768 : i15 & -32769;
            this.flags = i16;
            stream.writeInt32(i16);
        }
    }

    public static abstract class UserStatus extends TLObject {
        public int expires;

        public static UserStatus TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            UserStatus result = null;
            switch (constructor) {
                case -496024847:
                    result = new TL_userStatusRecently();
                    break;
                case -306628279:
                    result = new TL_userStatusOnline();
                    break;
                case 9203775:
                    result = new TL_userStatusOffline();
                    break;
                case 129960444:
                    result = new TL_userStatusLastWeek();
                    break;
                case 164646985:
                    result = new TL_userStatusEmpty();
                    break;
                case 2011940674:
                    result = new TL_userStatusLastMonth();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in UserStatus", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_userStatusOffline extends UserStatus {
        public static int constructor = 9203775;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusLastWeek extends UserStatus {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_userStatusEmpty extends UserStatus {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_userStatusLastMonth extends UserStatus {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_userStatusOnline extends UserStatus {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusRecently extends UserStatus {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_peerSettings extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public TL_peerSettings settings;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_peerSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_peerSettings result = new TL_messages_peerSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.settings.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_checkedHistoryImportPeer extends TLObject {
        public static int constructor = -NUM;
        public String confirm_text;

        public static TL_messages_checkedHistoryImportPeer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_checkedHistoryImportPeer result = new TL_messages_checkedHistoryImportPeer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_checkedHistoryImportPeer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.confirm_text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.confirm_text);
        }
    }

    public static class TL_messages_messageEditData extends TLObject {
        public static int constructor = NUM;
        public boolean caption;
        public int flags;

        public static TL_messages_messageEditData TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_messageEditData result = new TL_messages_messageEditData();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.caption = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.caption ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
        }
    }

    public static abstract class MessageUserVote extends TLObject {
        public int date;
        public long user_id;

        public static MessageUserVote TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageUserVote result = null;
            switch (constructor) {
                case -1973033641:
                    result = new TL_messageUserVoteMultiple();
                    break;
                case 886196148:
                    result = new TL_messageUserVote();
                    break;
                case 1017491692:
                    result = new TL_messageUserVoteInputOption();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageUserVote", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageUserVote extends MessageUserVote {
        public static int constructor = NUM;
        public byte[] option;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.option = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeByteArray(this.option);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_messageUserVoteInputOption extends MessageUserVote {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_messageUserVoteMultiple extends MessageUserVote {
        public static int constructor = -NUM;
        public ArrayList<byte[]> options = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.options.add(stream.readByteArray(exception));
                }
                this.date = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(NUM);
            int count = this.options.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeByteArray(this.options.get(a));
            }
            stream.writeInt32(this.date);
        }
    }

    public static class TL_contacts_importedContacts extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_importedContact> imported = new ArrayList<>();
        public ArrayList<TL_popularContact> popular_invites = new ArrayList<>();
        public ArrayList<Long> retry_contacts = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_contacts_importedContacts TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contacts_importedContacts result = new TL_contacts_importedContacts();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_importedContact object = TL_importedContact.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.imported.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_popularContact object2 = TL_popularContact.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.popular_invites.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.retry_contacts.add(Long.valueOf(stream.readInt64(exception)));
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object3 != null) {
                                    this.users.add(object3);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.imported.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.imported.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.popular_invites.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.popular_invites.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.retry_contacts.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                stream.writeInt64(this.retry_contacts.get(a3).longValue());
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
        }
    }

    public static class TL_dialogFilterSuggested extends TLObject {
        public static int constructor = NUM;
        public String description;
        public TL_dialogFilter filter;

        public static TL_dialogFilterSuggested TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_dialogFilterSuggested result = new TL_dialogFilterSuggested();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dialogFilterSuggested", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.filter = TL_dialogFilter.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.description = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.filter.serializeToStream(stream);
            stream.writeString(this.description);
        }
    }

    public static class TL_inlineBotSwitchPM extends TLObject {
        public static int constructor = NUM;
        public String start_param;
        public String text;

        public static TL_inlineBotSwitchPM TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inlineBotSwitchPM result = new TL_inlineBotSwitchPM();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.start_param = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.start_param);
        }
    }

    public static abstract class Update extends TLObject {
        public static Update TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Update result = null;
            switch (constructor) {
                case -2112423005:
                    result = new TL_updateTheme();
                    break;
                case -2092401936:
                    result = new TL_updateChatUserTyping();
                    break;
                case -2027964103:
                    result = new TL_updateGeoLiveViewed();
                    break;
                case -1937192669:
                    result = new TL_updateChannelUserTyping();
                    break;
                case -1906403213:
                    result = new TL_updateDcOptions();
                    break;
                case -1870238482:
                    result = new TL_updateDeleteScheduledMessages();
                    break;
                case -1842450928:
                    result = new TL_updateReadChannelInbox();
                    break;
                case -1821035490:
                    result = new TL_updateSavedGifs();
                    break;
                case -1738720581:
                    result = new TL_updateChannelParticipant();
                    break;
                case -1706939360:
                    result = new TL_updateRecentStickers();
                    break;
                case -1667805217:
                    result = new TL_updateReadHistoryInbox();
                    break;
                case -1576161051:
                    result = new TL_updateDeleteMessages();
                    break;
                case -1574314746:
                    result = new TL_updateConfig();
                    break;
                case -1512627963:
                    result = new TL_updateDialogFilterOrder();
                    break;
                case -1425052898:
                    result = new TL_updatePhoneCall();
                    break;
                case -1398708869:
                    result = new TL_updateMessagePoll();
                    break;
                case -1304443240:
                    result = new TL_updateChannelAvailableMessages();
                    break;
                case -1264392051:
                    result = new TL_updateEncryption();
                    break;
                case -1263546448:
                    result = new TL_updatePeerLocated();
                    break;
                case -1218471511:
                    result = new TL_updateReadChannelOutbox();
                    break;
                case -1147422299:
                    result = new TL_updatePeerHistoryTTL();
                    break;
                case -1094555409:
                    result = new TL_updateNotifySettings();
                    break;
                case -1071741569:
                    result = new TL_updateUserTyping();
                    break;
                case -1020437742:
                    result = new TL_updateDeleteChannelMessages();
                    break;
                case -1007549728:
                    result = new TL_updateUserName();
                    break;
                case -761649164:
                    result = new TL_updateChannelMessageForwards();
                    break;
                case -693004986:
                    result = new TL_updateReadChannelDiscussionInbox();
                    break;
                case -674602590:
                    result = new TL_updateChatParticipantAdmin();
                    break;
                case -513517117:
                    result = new TL_updateDialogUnreadMark();
                    break;
                case -483443337:
                    result = new TL_updateChatParticipantDelete();
                    break;
                case -469536605:
                    result = new TL_updateEditMessage();
                    break;
                case -451831443:
                    result = new TL_updateFavedStickers();
                    break;
                case -440534818:
                    result = new TL_updateUserStatus();
                    break;
                case -337352679:
                    result = new TL_updateServiceNotification();
                    break;
                case -309990731:
                    result = new TL_updatePinnedMessages();
                    break;
                case -299124375:
                    result = new TL_updateDraftMessage();
                    break;
                case -298113238:
                    result = new TL_updatePrivacy();
                    break;
                case -232346616:
                    result = new TL_updateChannelMessageViews();
                    break;
                case -232290676:
                    result = new TL_updateUserPhoto();
                    break;
                case -219423922:
                    result = new TL_updateGroupCallParticipants();
                    break;
                case -124097970:
                    result = new TL_updateChat();
                    break;
                case -99664734:
                    result = new TL_updatePinnedDialogs();
                    break;
                case 88680979:
                    result = new TL_updateUserPhone();
                    break;
                case 125178264:
                    result = new TL_updateChatParticipants();
                    break;
                case 192428418:
                    result = new TL_updateGroupCallConnection();
                    break;
                case 196268545:
                    result = new TL_updateStickerSetsOrder();
                    break;
                case 277713951:
                    result = new TL_updateChannelTooLong();
                    break;
                case 314359194:
                    result = new TL_updateNewEncryptedMessage();
                    break;
                case 347227392:
                    result = new TL_updateGroupCall();
                    break;
                case 347625491:
                    result = new TL_updateBotMenuButton();
                    break;
                case 357013699:
                    result = new TL_updateMessageReactions();
                    break;
                case 361936797:
                    result = new TL_updateWebViewResultSent();
                    break;
                case 386986326:
                    result = new TL_updateEncryptedChatTyping();
                    break;
                case 397910539:
                    result = new TL_updateAttachMenuBots();
                    break;
                case 422972864:
                    result = new TL_updateFolderPeers();
                    break;
                case 457133559:
                    result = new TL_updateEditChannelMessage();
                    break;
                case 522914557:
                    result = new TL_updateNewMessage();
                    break;
                case 610945826:
                    result = new TL_updatePeerBlocked();
                    break;
                case 643940105:
                    result = new TL_updatePhoneCallSignalingData();
                    break;
                case 654302845:
                    result = new TL_updateDialogFilter();
                    break;
                case 791390623:
                    result = new TL_updateChannelWebPage();
                    break;
                case 791617983:
                    result = new TL_updateReadHistoryOutbox();
                    break;
                case 889491791:
                    result = new TL_updateDialogFilters();
                    break;
                case 956179895:
                    result = new TL_updateEncryptedMessagesRead();
                    break;
                case 967122427:
                    result = new TL_updateNewScheduledMessage();
                    break;
                case 1037718609:
                    result = new TL_updateChatParticipantAdd();
                    break;
                case 1135492588:
                    result = new TL_updateStickerSets();
                    break;
                case 1153291573:
                    result = new TL_updateChannelReadMessagesContents();
                    break;
                case 1180041828:
                    result = new TL_updateLangPackTooLong();
                    break;
                case 1299263278:
                    result = new TL_updateBotCommands();
                    break;
                case 1318109142:
                    result = new TL_updateMessageID();
                    break;
                case 1421875280:
                    result = new TL_updateChatDefaultBannedRights();
                    break;
                case 1442983757:
                    result = new TL_updateLangPack();
                    break;
                case 1448076945:
                    result = new TL_updateLoginToken();
                    break;
                case 1461528386:
                    result = new TL_updateReadFeaturedStickers();
                    break;
                case 1538885128:
                    result = new TL_updatePinnedChannelMessages();
                    break;
                case 1656358105:
                    result = new TL_updateNewChannelMessage();
                    break;
                case 1666927625:
                    result = new TL_updateChannel();
                    break;
                case 1753886890:
                    result = new TL_updateNewStickerSet();
                    break;
                case 1757493555:
                    result = new TL_updateReadMessagesContents();
                    break;
                case 1767677564:
                    result = new TL_updateReadChannelDiscussionOutbox();
                    break;
                case 1786671974:
                    result = new TL_updatePeerSettings();
                    break;
                case 1852826908:
                    result = new TL_updateDialogPinned();
                    break;
                case 1885586395:
                    result = new TL_updatePendingJoinRequests();
                    break;
                case 1887741886:
                    result = new TL_updateContactsReset();
                    break;
                case 1960361625:
                    result = new TL_updateSavedRingtones();
                    break;
                case 2139689491:
                    result = new TL_updateWebPage();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Update", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_updateMessagePoll extends Update {
        public static int constructor = -NUM;
        public int flags;
        public Poll poll;
        public long poll_id;
        public PollResults results;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.poll_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.poll = Poll.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.results = PollResults.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.poll_id);
            if ((this.flags & 1) != 0) {
                this.poll.serializeToStream(stream);
            }
            this.results.serializeToStream(stream);
        }
    }

    public static class TL_updatePeerHistoryTTL extends Update {
        public static int constructor = -NUM;
        public int flags;
        public Peer peer;
        public int ttl_period;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.ttl_period);
            }
        }
    }

    public static class TL_updateChat extends Update {
        public static int constructor = -NUM;
        public long chat_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_updateDeleteMessages extends Update {
        public static int constructor = -NUM;
        public ArrayList<Integer> messages = new ArrayList<>();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updatePinnedChannelMessages extends Update {
        public static int constructor = NUM;
        public long channel_id;
        public int flags;
        public ArrayList<Integer> messages = new ArrayList<>();
        public boolean pinned;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.pinned = (readInt32 & 1) != 0;
            this.channel_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.pinned ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateGroupCallParticipants extends Update {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public ArrayList<TL_groupCallParticipant> participants = new ArrayList<>();
        public int version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_groupCallParticipant object = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.version = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.participants.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.participants.get(a).serializeToStream(stream);
            }
            stream.writeInt32(this.version);
        }
    }

    public static class TL_updateReadFeaturedStickers extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateEncryptedChatTyping extends Update {
        public static int constructor = NUM;
        public int chat_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.chat_id);
        }
    }

    public static class TL_updateReadChannelDiscussionInbox extends Update {
        public static int constructor = -NUM;
        public long broadcast_id;
        public int broadcast_post;
        public long channel_id;
        public int flags;
        public int read_max_id;
        public int top_msg_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
            this.top_msg_id = stream.readInt32(exception);
            this.read_max_id = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.broadcast_id = stream.readInt64(exception);
            }
            if ((this.flags & 1) != 0) {
                this.broadcast_post = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.top_msg_id);
            stream.writeInt32(this.read_max_id);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.broadcast_id);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.broadcast_post);
            }
        }
    }

    public static class TL_updateReadHistoryOutbox extends Update {
        public static int constructor = NUM;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.max_id = stream.readInt32(exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewChannelMessage extends Update {
        public static int constructor = NUM;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDialogPinned extends Update {
        public static int constructor = NUM;
        public int flags;
        public int folder_id;
        public DialogPeer peer;
        public boolean pinned;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.pinned = (readInt32 & 1) != 0;
            if ((readInt32 & 2) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            this.peer = DialogPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.pinned ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.folder_id);
            }
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_updatePeerSettings extends Update {
        public static int constructor = NUM;
        public Peer peer;
        public TL_peerSettings settings;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_updateUserPhone extends Update {
        public static int constructor = 88680979;
        public String phone;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.phone = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeString(this.phone);
        }
    }

    public static class TL_updateMessageID extends Update {
        public static int constructor = NUM;
        public int id;
        public long random_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.random_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.random_id);
        }
    }

    public static class TL_updateReadChannelOutbox extends Update {
        public static int constructor = -NUM;
        public long channel_id;
        public int max_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.max_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.max_id);
        }
    }

    public static class TL_updateChannelUserTyping extends Update {
        public static int constructor = -NUM;
        public SendMessageAction action;
        public long channel_id;
        public int flags;
        public Peer from_id;
        public int top_msg_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.top_msg_id = stream.readInt32(exception);
            }
            this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.action = SendMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.channel_id);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.top_msg_id);
            }
            this.from_id.serializeToStream(stream);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_updateStickerSets extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateFolderPeers extends Update {
        public static int constructor = NUM;
        public ArrayList<TL_folderPeer> folder_peers = new ArrayList<>();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_folderPeer object = TL_folderPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.folder_peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.folder_peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.folder_peers.get(a).serializeToStream(stream);
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewMessage extends Update {
        public static int constructor = NUM;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewScheduledMessage extends Update {
        public static int constructor = NUM;
        public Message message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_updateNewEncryptedMessage extends Update {
        public static int constructor = NUM;
        public EncryptedMessage message;
        public int qts;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = EncryptedMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.qts = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
            stream.writeInt32(this.qts);
        }
    }

    public static class TL_updateUserStatus extends Update {
        public static int constructor = -NUM;
        public UserStatus status;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.status = UserStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            this.status.serializeToStream(stream);
        }
    }

    public static class TL_updateChannelMessageViews extends Update {
        public static int constructor = -NUM;
        public long channel_id;
        public int id;
        public int views;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.id = stream.readInt32(exception);
            this.views = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.id);
            stream.writeInt32(this.views);
        }
    }

    public static class TL_updateGroupCallConnection extends Update {
        public static int constructor = NUM;
        public int flags;
        public TL_dataJSON params;
        public boolean presentation;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.presentation = z;
            this.params = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.presentation ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.params.serializeToStream(stream);
        }
    }

    public static class TL_updateBotCommands extends Update {
        public static int constructor = NUM;
        public long bot_id;
        public ArrayList<TL_botCommand> commands = new ArrayList<>();
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.bot_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_botCommand object = TL_botCommand.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.commands.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.bot_id);
            stream.writeInt32(NUM);
            int count = this.commands.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.commands.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateGeoLiveViewed extends Update {
        public static int constructor = -NUM;
        public int msg_id;
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_updateNotifySettings extends Update {
        public static int constructor = -NUM;
        public PeerNotifySettings notify_settings;
        public NotifyPeer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = NotifyPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.notify_settings.serializeToStream(stream);
        }
    }

    public static class TL_updateChannelParticipant extends Update {
        public static int constructor = -NUM;
        public long actor_id;
        public long channel_id;
        public int date;
        public int flags;
        public ExportedChatInvite invite;
        public ChannelParticipant new_participant;
        public ChannelParticipant prev_participant;
        public int qts;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.actor_id = stream.readInt64(exception);
            this.user_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.prev_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.new_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.qts = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.date);
            stream.writeInt64(this.actor_id);
            stream.writeInt64(this.user_id);
            if ((this.flags & 1) != 0) {
                this.prev_participant.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.new_participant.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                this.invite.serializeToStream(stream);
            }
            stream.writeInt32(this.qts);
        }
    }

    public static class TL_updateReadChannelDiscussionOutbox extends Update {
        public static int constructor = NUM;
        public long channel_id;
        public int read_max_id;
        public int top_msg_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.top_msg_id = stream.readInt32(exception);
            this.read_max_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.top_msg_id);
            stream.writeInt32(this.read_max_id);
        }
    }

    public static class TL_updateChatParticipantDelete extends Update {
        public static int constructor = -NUM;
        public long chat_id;
        public long user_id;
        public int version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            this.user_id = stream.readInt64(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_updateEditMessage extends Update {
        public static int constructor = -NUM;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateWebPage extends Update {
        public static int constructor = NUM;
        public int pts;
        public int pts_count;
        public WebPage webpage;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.webpage = WebPage.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.webpage.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateFavedStickers extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateChatParticipantAdd extends Update {
        public static int constructor = NUM;
        public long chat_id;
        public int date;
        public long inviter_id;
        public long user_id;
        public int version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            this.user_id = stream.readInt64(exception);
            this.inviter_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.inviter_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_updateChatUserTyping extends Update {
        public static int constructor = -NUM;
        public SendMessageAction action;
        public long chat_id;
        public Peer from_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.action = SendMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            this.from_id.serializeToStream(stream);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_updateLoginToken extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateEncryption extends Update {
        public static int constructor = -NUM;
        public EncryptedChat chat;
        public int date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat = EncryptedChat.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.chat.serializeToStream(stream);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_updateGroupCall extends Update {
        public static int constructor = NUM;
        public GroupCall call;
        public long chat_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            this.call = GroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_updateChannelTooLong extends Update {
        public static int constructor = NUM;
        public long channel_id;
        public int flags;
        public int pts;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.pts = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.channel_id);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.pts);
            }
        }
    }

    public static class TL_updateUserTyping extends Update {
        public static int constructor = -NUM;
        public SendMessageAction action;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.action = SendMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_updateServiceNotification extends Update {
        public static int constructor = -NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public int inbox_date;
        public MessageMedia media;
        public String message;
        public boolean popup;
        public String type;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.popup = (readInt32 & 1) != 0;
            if ((readInt32 & 2) != 0) {
                this.inbox_date = stream.readInt32(exception);
            }
            this.type = stream.readString(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.popup ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.inbox_date);
            }
            stream.writeString(this.type);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.entities.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateSavedRingtones extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateLangPack extends Update {
        public static int constructor = NUM;
        public TL_langPackDifference difference;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.difference = TL_langPackDifference.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.difference.serializeToStream(stream);
        }
    }

    public static class TL_updateChannelAvailableMessages extends Update {
        public static int constructor = -NUM;
        public int available_min_id;
        public long channel_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.available_min_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.available_min_id);
        }
    }

    public static class TL_updateChatParticipantAdmin extends Update {
        public static int constructor = -NUM;
        public long chat_id;
        public boolean is_admin;
        public long user_id;
        public int version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            this.user_id = stream.readInt64(exception);
            this.is_admin = stream.readBool(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            stream.writeInt64(this.user_id);
            stream.writeBool(this.is_admin);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_updateChannelReadMessagesContents extends Update {
        public static int constructor = NUM;
        public long channel_id;
        public ArrayList<Integer> messages = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
        }
    }

    public static class TL_updatePrivacy extends Update {
        public static int constructor = -NUM;
        public PrivacyKey key;
        public ArrayList<PrivacyRule> rules = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.key = PrivacyKey.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PrivacyRule object = PrivacyRule.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.rules.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.key.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.rules.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.rules.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateConfig extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateDialogUnreadMark extends Update {
        public static int constructor = -NUM;
        public int flags;
        public DialogPeer peer;
        public boolean unread;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.unread = z;
            this.peer = DialogPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_updateDraftMessage extends Update {
        public static int constructor = -NUM;
        public DraftMessage draft;
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.draft = DraftMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.draft.serializeToStream(stream);
        }
    }

    public static class TL_updateUserName extends Update {
        public static int constructor = -NUM;
        public String first_name;
        public String last_name;
        public long user_id;
        public String username;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.username = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.username);
        }
    }

    public static class TL_updateMessageReactions extends Update {
        public static int constructor = NUM;
        public int msg_id;
        public Peer peer;
        public TL_messageReactions reactions;
        public boolean updateUnreadState = true;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.reactions = TL_messageReactions.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            this.reactions.serializeToStream(stream);
        }
    }

    public static class TL_updatePhoneCall extends Update {
        public static int constructor = -NUM;
        public PhoneCall phone_call;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_call = PhoneCall.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.phone_call.serializeToStream(stream);
        }
    }

    public static class TL_updateDialogFilter extends Update {
        public static int constructor = NUM;
        public TL_dialogFilter filter;
        public int flags;
        public int id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.filter = TL_dialogFilter.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                this.filter.serializeToStream(stream);
            }
        }
    }

    public static class TL_updatePeerBlocked extends Update {
        public static int constructor = NUM;
        public boolean blocked;
        public Peer peer_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.blocked = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer_id.serializeToStream(stream);
            stream.writeBool(this.blocked);
        }
    }

    public static class TL_updatePinnedMessages extends Update {
        public static int constructor = -NUM;
        public int flags;
        public ArrayList<Integer> messages = new ArrayList<>();
        public Peer peer;
        public boolean pinned;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.pinned = (readInt32 & 1) != 0;
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.pinned ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updatePhoneCallSignalingData extends Update {
        public static int constructor = NUM;
        public byte[] data;
        public long phone_call_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_call_id = stream.readInt64(exception);
            this.data = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.phone_call_id);
            stream.writeByteArray(this.data);
        }
    }

    public static class TL_updatePinnedDialogs extends Update {
        public static int constructor = -99664734;
        public int flags;
        public int folder_id;
        public ArrayList<DialogPeer> order = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 2) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        DialogPeer object = DialogPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.order.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.order.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.order.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_updatePeerLocated extends Update {
        public static int constructor = -NUM;
        public ArrayList<PeerLocated> peers = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PeerLocated object = PeerLocated.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.peers.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateRecentStickers extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateReadHistoryInbox extends Update {
        public static int constructor = -NUM;
        public int flags;
        public int folder_id;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;
        public int still_unread_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.max_id = stream.readInt32(exception);
            this.still_unread_count = stream.readInt32(exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.folder_id);
            }
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.still_unread_count);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDialogFilterOrder extends Update {
        public static int constructor = -NUM;
        public ArrayList<Integer> order = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.order.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.order.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.order.get(a).intValue());
            }
        }
    }

    public static class TL_updateSavedGifs extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateContactsReset extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateChannel extends Update {
        public static int constructor = NUM;
        public long channel_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
        }
    }

    public static class TL_updateChannelWebPage extends Update {
        public static int constructor = NUM;
        public long channel_id;
        public int pts;
        public int pts_count;
        public WebPage webpage;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.webpage = WebPage.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            this.webpage.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDeleteScheduledMessages extends Update {
        public static int constructor = -NUM;
        public ArrayList<Integer> messages = new ArrayList<>();
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
        }
    }

    public static class TL_updateChannelMessageForwards extends Update {
        public static int constructor = -NUM;
        public long channel_id;
        public int forwards;
        public int id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.id = stream.readInt32(exception);
            this.forwards = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.id);
            stream.writeInt32(this.forwards);
        }
    }

    public static class TL_updateDeleteChannelMessages extends Update {
        public static int constructor = -NUM;
        public long channel_id;
        public ArrayList<Integer> messages = new ArrayList<>();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateUserPhoto extends Update {
        public static int constructor = -NUM;
        public int date;
        public UserProfilePhoto photo;
        public boolean previous;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.photo = UserProfilePhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.previous = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt32(this.date);
            this.photo.serializeToStream(stream);
            stream.writeBool(this.previous);
        }
    }

    public static class TL_updateDialogFilters extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updatePendingJoinRequests extends Update {
        public static int constructor = NUM;
        public Peer peer;
        public ArrayList<Long> recent_requesters = new ArrayList<>();
        public int requests_pending;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.requests_pending = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.recent_requesters.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.requests_pending);
            stream.writeInt32(NUM);
            int count = this.recent_requesters.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.recent_requesters.get(a).longValue());
            }
        }
    }

    public static class TL_updateDcOptions extends Update {
        public static int constructor = -NUM;
        public ArrayList<TL_dcOption> dc_options = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_dcOption object = TL_dcOption.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.dc_options.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.dc_options.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.dc_options.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateEditChannelMessage extends Update {
        public static int constructor = NUM;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewStickerSet extends Update {
        public static int constructor = NUM;
        public TL_messages_stickerSet stickerset;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.stickerset = messages_StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.stickerset.serializeToStream(stream);
        }
    }

    public static class TL_updateTheme extends Update {
        public static int constructor = -NUM;
        public Theme theme;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.theme = Theme.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.theme.serializeToStream(stream);
        }
    }

    public static class TL_updateLangPackTooLong extends Update {
        public static int constructor = NUM;
        public String lang_code;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lang_code = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
        }
    }

    public static class TL_updateEncryptedMessagesRead extends Update {
        public static int constructor = NUM;
        public int chat_id;
        public int date;
        public int max_date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt32(exception);
            this.max_date = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.chat_id);
            stream.writeInt32(this.max_date);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_updateStickerSetsOrder extends Update {
        public static int constructor = NUM;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.masks = (readInt32 & 1) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.order.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.masks ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(NUM);
            int count = this.order.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.order.get(a).longValue());
            }
        }
    }

    public static class TL_updateReadChannelInbox extends Update {
        public static int constructor = -NUM;
        public long channel_id;
        public int flags;
        public int folder_id;
        public int max_id;
        public int pts;
        public int still_unread_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            this.channel_id = stream.readInt64(exception);
            this.max_id = stream.readInt32(exception);
            this.still_unread_count = stream.readInt32(exception);
            this.pts = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeInt64(this.channel_id);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.still_unread_count);
            stream.writeInt32(this.pts);
        }
    }

    public static class TL_updateReadMessagesContents extends Update {
        public static int constructor = NUM;
        public ArrayList<Integer> messages = new ArrayList<>();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.messages.add(Integer.valueOf(stream.readInt32(exception)));
                }
                this.pts = stream.readInt32(exception);
                this.pts_count = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.messages.get(a).intValue());
            }
            stream.writeInt32(this.pts);
            stream.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateChatParticipants extends Update {
        public static int constructor = NUM;
        public ChatParticipants participants;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participants = ChatParticipants.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participants.serializeToStream(stream);
        }
    }

    public static class TL_updateChatDefaultBannedRights extends Update {
        public static int constructor = NUM;
        public TL_chatBannedRights default_banned_rights;
        public Peer peer;
        public int version;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.default_banned_rights.serializeToStream(stream);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_receivedNotifyMessage extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int id;

        public static TL_receivedNotifyMessage TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_receivedNotifyMessage result = new TL_receivedNotifyMessage();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_receivedNotifyMessage", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.flags = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt32(this.flags);
        }
    }

    public static abstract class InputEncryptedFile extends TLObject {
        public long access_hash;
        public long id;
        public int key_fingerprint;
        public String md5_checksum;
        public int parts;

        public static InputEncryptedFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputEncryptedFile result = null;
            switch (constructor) {
                case 406307684:
                    result = new TL_inputEncryptedFileEmpty();
                    break;
                case 767652808:
                    result = new TL_inputEncryptedFileBigUploaded();
                    break;
                case 1511503333:
                    result = new TL_inputEncryptedFile();
                    break;
                case 1690108678:
                    result = new TL_inputEncryptedFileUploaded();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputEncryptedFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputEncryptedFile extends InputEncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFileBigUploaded extends InputEncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.parts = stream.readInt32(exception);
            this.key_fingerprint = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.parts);
            stream.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_inputEncryptedFileEmpty extends InputEncryptedFile {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputEncryptedFileUploaded extends InputEncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.parts = stream.readInt32(exception);
            this.md5_checksum = stream.readString(exception);
            this.key_fingerprint = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.parts);
            stream.writeString(this.md5_checksum);
            stream.writeInt32(this.key_fingerprint);
        }
    }

    public static abstract class messages_AllStickers extends TLObject {
        public ArrayList<Document> documents = new ArrayList<>();
        public String hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList<>();
        public ArrayList<StickerSet> sets = new ArrayList<>();

        public static messages_AllStickers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_AllStickers result = null;
            switch (constructor) {
                case -843329861:
                    result = new TL_messages_allStickers();
                    break;
                case -395967805:
                    result = new TL_messages_allStickersNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_allStickers extends messages_AllStickers {
        public static int constructor = -NUM;
        public long hash;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    StickerSet object = StickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sets.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.sets.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((StickerSet) this.sets.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_allStickersNotModified extends messages_AllStickers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_messageViews extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();
        public ArrayList<TL_messageViews> views = new ArrayList<>();

        public static TL_messages_messageViews TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_messageViews result = new TL_messages_messageViews();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageViews", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_messageViews object = TL_messageViews.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.views.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.views.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.views.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static abstract class DecryptedMessageAction extends TLObject {
        public SendMessageAction action;
        public int end_seq_no;
        public long exchange_id;
        public byte[] g_a;
        public byte[] g_b;
        public long key_fingerprint;
        public int layer;
        public ArrayList<Long> random_ids = new ArrayList<>();
        public int start_seq_no;
        public int ttl_seconds;

        public static DecryptedMessageAction TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DecryptedMessageAction result = null;
            switch (constructor) {
                case -1967000459:
                    result = new TL_decryptedMessageActionScreenshotMessages();
                    break;
                case -1586283796:
                    result = new TL_decryptedMessageActionSetMessageTTL();
                    break;
                case -1473258141:
                    result = new TL_decryptedMessageActionNoop();
                    break;
                case -860719551:
                    result = new TL_decryptedMessageActionTyping();
                    break;
                case -586814357:
                    result = new TL_decryptedMessageActionAbortKey();
                    break;
                case -332526693:
                    result = new TL_decryptedMessageActionCommitKey();
                    break;
                case -217806717:
                    result = new TL_decryptedMessageActionNotifyLayer();
                    break;
                case -204906213:
                    result = new TL_decryptedMessageActionRequestKey();
                    break;
                case 206520510:
                    result = new TL_decryptedMessageActionReadMessages();
                    break;
                case 1360072880:
                    result = new TL_decryptedMessageActionResend();
                    break;
                case 1700872964:
                    result = new TL_decryptedMessageActionDeleteMessages();
                    break;
                case 1729750108:
                    result = new TL_decryptedMessageActionFlushHistory();
                    break;
                case 1877046107:
                    result = new TL_decryptedMessageActionAcceptKey();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageAction", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_decryptedMessageActionSetMessageTTL extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.ttl_seconds = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.ttl_seconds);
        }
    }

    public static class TL_decryptedMessageActionNotifyLayer extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.layer = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.layer);
        }
    }

    public static class TL_decryptedMessageActionDeleteMessages extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.random_ids.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.random_ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.random_ids.get(a)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionCommitKey extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.exchange_id = stream.readInt64(exception);
            this.key_fingerprint = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.exchange_id);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionAbortKey extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.exchange_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.exchange_id);
        }
    }

    public static class TL_decryptedMessageActionFlushHistory extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageActionTyping extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.action = SendMessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_decryptedMessageActionAcceptKey extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.exchange_id = stream.readInt64(exception);
            this.g_b = stream.readByteArray(exception);
            this.key_fingerprint = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.exchange_id);
            stream.writeByteArray(this.g_b);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionReadMessages extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.random_ids.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.random_ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.random_ids.get(a)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionResend extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.start_seq_no = stream.readInt32(exception);
            this.end_seq_no = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.start_seq_no);
            stream.writeInt32(this.end_seq_no);
        }
    }

    public static class TL_decryptedMessageActionRequestKey extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.exchange_id = stream.readInt64(exception);
            this.g_a = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.exchange_id);
            stream.writeByteArray(this.g_a);
        }
    }

    public static class TL_decryptedMessageActionScreenshotMessages extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.random_ids.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.random_ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(((Long) this.random_ids.get(a)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionNoop extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class InputCheckPasswordSRP extends TLObject {
        public static InputCheckPasswordSRP TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputCheckPasswordSRP result = null;
            switch (constructor) {
                case -1736378792:
                    result = new TL_inputCheckPasswordEmpty();
                    break;
                case -763367294:
                    result = new TL_inputCheckPasswordSRP();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputCheckPasswordSRP", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputCheckPasswordEmpty extends InputCheckPasswordSRP {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputCheckPasswordSRP extends InputCheckPasswordSRP {
        public static int constructor = -NUM;
        public byte[] A;
        public byte[] M1;
        public long srp_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.srp_id = stream.readInt64(exception);
            this.A = stream.readByteArray(exception);
            this.M1 = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.srp_id);
            stream.writeByteArray(this.A);
            stream.writeByteArray(this.M1);
        }
    }

    public static class TL_account_password extends TLObject {
        public static int constructor = NUM;
        public PasswordKdfAlgo current_algo;
        public String email_unconfirmed_pattern;
        public int flags;
        public boolean has_password;
        public boolean has_recovery;
        public boolean has_secure_values;
        public String hint;
        public PasswordKdfAlgo new_algo;
        public SecurePasswordKdfAlgo new_secure_algo;
        public int pending_reset_date;
        public byte[] secure_random;
        public byte[] srp_B;
        public long srp_id;

        public static TL_account_password TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_password result = new TL_account_password();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_password", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.has_recovery = (readInt32 & 1) != 0;
            this.has_secure_values = (readInt32 & 2) != 0;
            if ((readInt32 & 4) != 0) {
                z = true;
            }
            this.has_password = z;
            if ((readInt32 & 4) != 0) {
                this.current_algo = PasswordKdfAlgo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.srp_B = stream.readByteArray(exception);
            }
            if ((this.flags & 4) != 0) {
                this.srp_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.hint = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.email_unconfirmed_pattern = stream.readString(exception);
            }
            this.new_algo = PasswordKdfAlgo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_secure_algo = SecurePasswordKdfAlgo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.secure_random = stream.readByteArray(exception);
            if ((this.flags & 32) != 0) {
                this.pending_reset_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.has_recovery ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.has_secure_values ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.has_password ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            if ((this.flags & 4) != 0) {
                this.current_algo.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeByteArray(this.srp_B);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt64(this.srp_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.hint);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.email_unconfirmed_pattern);
            }
            this.new_algo.serializeToStream(stream);
            this.new_secure_algo.serializeToStream(stream);
            stream.writeByteArray(this.secure_random);
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.pending_reset_date);
            }
        }
    }

    public static class TL_chatAdminWithInvites extends TLObject {
        public static int constructor = -NUM;
        public long admin_id;
        public int invites_count;
        public int revoked_invites_count;

        public static TL_chatAdminWithInvites TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_chatAdminWithInvites result = new TL_chatAdminWithInvites();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatAdminWithInvites", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.admin_id = stream.readInt64(exception);
            this.invites_count = stream.readInt32(exception);
            this.revoked_invites_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.admin_id);
            stream.writeInt32(this.invites_count);
            stream.writeInt32(this.revoked_invites_count);
        }
    }

    public static class TL_auth_loggedOut extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public byte[] future_auth_token;

        public static TL_auth_loggedOut TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_auth_loggedOut result = new TL_auth_loggedOut();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_loggedOut", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.future_auth_token = stream.readByteArray(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeByteArray(this.future_auth_token);
            }
        }
    }

    public static abstract class UserProfilePhoto extends TLObject {
        public int dc_id;
        public int flags;
        public boolean has_video;
        public FileLocation photo_big;
        public long photo_id;
        public FileLocation photo_small;
        public BitmapDrawable strippedBitmap;
        public byte[] stripped_thumb;

        public static UserProfilePhoto TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            UserProfilePhoto result = null;
            switch (constructor) {
                case -2100168954:
                    result = new TL_userProfilePhoto();
                    break;
                case -1727196013:
                    result = new TL_userProfilePhoto_old();
                    break;
                case -865771401:
                    result = new TL_userProfilePhoto_layer127();
                    break;
                case -715532088:
                    result = new TL_userProfilePhoto_layer97();
                    break;
                case -321430132:
                    result = new TL_userProfilePhoto_layer115();
                    break;
                case 1326562017:
                    result = new TL_userProfilePhotoEmpty();
                    break;
                case 1775479590:
                    result = new TL_userProfilePhoto_layer126();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in UserProfilePhoto", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_userProfilePhoto_layer126 extends TL_userProfilePhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_id = stream.readInt64(exception);
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_userProfilePhoto_layer127 extends TL_userProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_id = stream.readInt64(exception);
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.stripped_thumb = stream.readByteArray(exception);
                if (Build.VERSION.SDK_INT >= 21) {
                    try {
                        this.strippedBitmap = new BitmapDrawable(ImageLoader.getStrippedPhotoBitmap(this.stripped_thumb, "b"));
                    } catch (Throwable e) {
                        FileLog.e(e);
                    }
                }
            }
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeByteArray(this.stripped_thumb);
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_userProfilePhoto_layer115 extends TL_userProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_id = stream.readInt64(exception);
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_userProfilePhotoEmpty extends UserProfilePhoto {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_userProfilePhoto_layer97 extends TL_userProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_id = stream.readInt64(exception);
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
        }
    }

    public static class TL_userProfilePhoto_old extends TL_userProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_small = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.photo_big = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.photo_small.serializeToStream(stream);
            this.photo_big.serializeToStream(stream);
        }
    }

    public static class TL_userProfilePhoto extends UserProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.has_video = z;
            this.photo_id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.stripped_thumb = stream.readByteArray(exception);
            }
            this.dc_id = stream.readInt32(exception);
            this.photo_small = new TL_fileLocationToBeDeprecated();
            this.photo_small.volume_id = -this.photo_id;
            this.photo_small.local_id = 97;
            this.photo_big = new TL_fileLocationToBeDeprecated();
            this.photo_big.volume_id = -this.photo_id;
            this.photo_big.local_id = 99;
            if (this.stripped_thumb != null && Build.VERSION.SDK_INT >= 21) {
                try {
                    this.strippedBitmap = new BitmapDrawable(ImageLoader.getStrippedPhotoBitmap(this.stripped_thumb, "b"));
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_video ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.photo_id);
            if ((this.flags & 2) != 0) {
                stream.writeByteArray(this.stripped_thumb);
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static abstract class MessageEntity extends TLObject {
        public String language;
        public int length;
        public int offset;
        public String url;

        public static MessageEntity TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageEntity result = null;
            switch (constructor) {
                case -2106619040:
                    result = new TL_messageEntityItalic();
                    break;
                case -1687559349:
                    result = new TL_messageEntityPhone();
                    break;
                case -1672577397:
                    result = new TL_messageEntityUnderline();
                    break;
                case -1148011883:
                    result = new TL_messageEntityUnknown();
                    break;
                case -1117713463:
                    result = new TL_messageEntityBold();
                    break;
                case -1090087980:
                    result = new TL_messageEntityStrike();
                    break;
                case -595914432:
                    result = new TL_messageEntityMentionName();
                    break;
                case -100378723:
                    result = new TL_messageEntityMention();
                    break;
                case 34469328:
                    result = new TL_messageEntityBlockquote();
                    break;
                case 546203849:
                    result = new TL_inputMessageEntityMentionName();
                    break;
                case 681706865:
                    result = new TL_messageEntityCode();
                    break;
                case 852137487:
                    result = new TL_messageEntitySpoiler();
                    break;
                case 892193368:
                    result = new TL_messageEntityMentionName_layer131();
                    break;
                case 1280209983:
                    result = new TL_messageEntityCashtag();
                    break;
                case 1692693954:
                    result = new TL_messageEntityEmail();
                    break;
                case 1827637959:
                    result = new TL_messageEntityBotCommand();
                    break;
                case 1859134776:
                    result = new TL_messageEntityUrl();
                    break;
                case 1868782349:
                    result = new TL_messageEntityHashtag();
                    break;
                case 1938967520:
                    result = new TL_messageEntityPre();
                    break;
                case 1981704948:
                    result = new TL_messageEntityBankCard();
                    break;
                case 1990644519:
                    result = new TL_messageEntityTextUrl();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageEntity", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageEntityTextUrl extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
            stream.writeString(this.url);
        }
    }

    public static class TL_messageEntityBotCommand extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityEmail extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityPre extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
            this.language = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
            stream.writeString(this.language);
        }
    }

    public static class TL_messageEntityUnknown extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityUrl extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityItalic extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMention extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntitySpoiler extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMentionName_layer131 extends TL_messageEntityMentionName {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_inputMessageEntityMentionName extends MessageEntity {
        public static int constructor = NUM;
        public InputUser user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
            this.user_id = InputUser.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_messageEntityCashtag extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityBold extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityHashtag extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityCode extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityStrike extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityBlockquote extends MessageEntity {
        public static int constructor = 34469328;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityUnderline extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityBankCard extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityPhone extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMentionName extends MessageEntity {
        public static int constructor = -NUM;
        public long user_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.length = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.length);
            stream.writeInt64(this.user_id);
        }
    }

    public static abstract class ChannelLocation extends TLObject {
        public static ChannelLocation TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChannelLocation result = null;
            switch (constructor) {
                case -1078612597:
                    result = new TL_channelLocationEmpty();
                    break;
                case 547062491:
                    result = new TL_channelLocation();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChannelLocation", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channelLocationEmpty extends ChannelLocation {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelLocation extends ChannelLocation {
        public static int constructor = NUM;
        public String address;
        public GeoPoint geo_point;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo_point = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.address = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo_point.serializeToStream(stream);
            stream.writeString(this.address);
        }
    }

    public static abstract class Photo extends TLObject {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public byte[] file_reference;
        public int flags;
        public GeoPoint geo;
        public boolean has_stickers;
        public long id;
        public ArrayList<PhotoSize> sizes = new ArrayList<>();
        public long user_id;
        public ArrayList<VideoSize> video_sizes = new ArrayList<>();

        public static Photo TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Photo result = null;
            switch (constructor) {
                case -1836524247:
                    result = new TL_photo_layer82();
                    break;
                case -1673036328:
                    result = new TL_photo_layer97();
                    break;
                case -1014792074:
                    result = new TL_photo_old2();
                    break;
                case -840088834:
                    result = new TL_photo_layer55();
                    break;
                case -797637467:
                    result = new TL_photo_layer115();
                    break;
                case -82216347:
                    result = new TL_photo();
                    break;
                case 582313809:
                    result = new TL_photo_old();
                    break;
                case 590459437:
                    result = new TL_photoEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Photo", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_photo_layer97 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.has_stickers = (this.flags & 1) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_photo_layer55 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_photo_old2 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            this.geo.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_photoEmpty extends Photo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_photo_old extends TL_photo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.caption = stream.readString(exception);
            this.geo = GeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32(this.date);
            stream.writeString(this.caption);
            this.geo.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_photo_layer115 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.has_stickers = (this.flags & 1) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.dc_id = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_photo extends Photo {
        public static int constructor = -82216347;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.has_stickers = (this.flags & 1) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    int a2 = a;
                    PhotoSize object = PhotoSize.TLdeserialize(this.id, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a = a2 + 1;
                    } else {
                        return;
                    }
                }
                int i = a;
                if ((this.flags & 2) != 0) {
                    int magic2 = stream.readInt32(exception);
                    if (magic2 == NUM) {
                        int count2 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count2) {
                            VideoSize object2 = VideoSize.TLdeserialize(this.id, 0, stream, stream.readInt32(exception), exception);
                            if (object2 != null) {
                                this.video_sizes.add(object2);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                    } else {
                        return;
                    }
                }
                this.dc_id = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.video_sizes.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((VideoSize) this.video_sizes.get(a2)).serializeToStream(stream);
                }
            }
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_photo_layer82 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.has_stickers = (this.flags & 1) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sizes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PhotoSize) this.sizes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_encryptedChatRequested_layer131 extends TL_encryptedChatRequested {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
            this.g_a = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
            stream.writeByteArray(this.g_a);
        }
    }

    public static class TL_encryptedChatRequested_old extends TL_encryptedChatRequested {
        public static int constructor = -39213129;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
            this.g_a = stream.readByteArray(exception);
            this.nonce = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
            stream.writeByteArray(this.g_a);
            stream.writeByteArray(this.nonce);
        }
    }

    public static class TL_encryptedChatRequested_layer115 extends EncryptedChat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
            this.g_a = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
            stream.writeByteArray(this.g_a);
        }
    }

    public static class TL_encryptedChat_layer131 extends TL_encryptedChat {
        public static int constructor = -94974410;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
            this.g_a_or_b = stream.readByteArray(exception);
            this.key_fingerprint = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
            stream.writeByteArray(this.g_a_or_b);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedChat_old extends TL_encryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
            this.g_a_or_b = stream.readByteArray(exception);
            this.nonce = stream.readByteArray(exception);
            this.key_fingerprint = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
            stream.writeByteArray(this.g_a_or_b);
            stream.writeByteArray(this.nonce);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedChatEmpty extends EncryptedChat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatWaiting_layer131 extends TL_encryptedChatWaiting {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.participant_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32((int) this.participant_id);
        }
    }

    public static class TL_encryptedChatDiscarded_layer122 extends TL_encryptedChatDiscarded {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatDiscarded extends EncryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.history_deleted = z;
            this.id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.history_deleted ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChat extends EncryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.g_a_or_b = stream.readByteArray(exception);
            this.key_fingerprint = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            stream.writeByteArray(this.g_a_or_b);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedChatRequested extends EncryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
            this.g_a = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
            stream.writeByteArray(this.g_a);
        }
    }

    public static class TL_encryptedChatWaiting extends EncryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_id = stream.readInt64(exception);
            this.participant_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeInt64(this.admin_id);
            stream.writeInt64(this.participant_id);
        }
    }

    public static abstract class messages_FoundStickerSets extends TLObject {
        public static messages_FoundStickerSets TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_FoundStickerSets result = null;
            switch (constructor) {
                case -1963942446:
                    result = new TL_messages_foundStickerSets();
                    break;
                case 223655517:
                    result = new TL_messages_foundStickerSetsNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_FoundStickerSets", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_foundStickerSetsNotModified extends messages_FoundStickerSets {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_foundStickerSets extends messages_FoundStickerSets {
        public static int constructor = -NUM;
        public long hash;
        public ArrayList<StickerSetCovered> sets = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    StickerSetCovered object = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.sets.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.sets.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.sets.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_contact extends TLObject {
        public static int constructor = NUM;
        public boolean mutual;
        public long user_id;

        public static TL_contact TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contact result = new TL_contact();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contact", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.mutual = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeBool(this.mutual);
        }
    }

    public static class TL_groupCallParticipantVideoSourceGroup extends TLObject {
        public static int constructor = -NUM;
        public String semantics;
        public ArrayList<Integer> sources = new ArrayList<>();

        public static TL_groupCallParticipantVideoSourceGroup TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_groupCallParticipantVideoSourceGroup result = new TL_groupCallParticipantVideoSourceGroup();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallParticipantVideoSourceGroup", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.semantics = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.sources.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.semantics);
            stream.writeInt32(NUM);
            int count = this.sources.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.sources.get(a).intValue());
            }
        }
    }

    public static class TL_help_countryCode extends TLObject {
        public static int constructor = NUM;
        public String country_code;
        public int flags;
        public ArrayList<String> patterns = new ArrayList<>();
        public ArrayList<String> prefixes = new ArrayList<>();

        public static TL_help_countryCode TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_countryCode result = new TL_help_countryCode();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_countryCode", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.country_code = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.prefixes.add(stream.readString(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.patterns.add(stream.readString(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.country_code);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.prefixes.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeString(this.prefixes.get(a));
                }
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.patterns.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    stream.writeString(this.patterns.get(a2));
                }
            }
        }
    }

    public static class TL_secureData extends TLObject {
        public static int constructor = -NUM;
        public byte[] data;
        public byte[] data_hash;
        public byte[] secret;

        public static TL_secureData TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_secureData result = new TL_secureData();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_secureData", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.data = stream.readByteArray(exception);
            this.data_hash = stream.readByteArray(exception);
            this.secret = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.data);
            stream.writeByteArray(this.data_hash);
            stream.writeByteArray(this.secret);
        }
    }

    public static class TL_config extends TLObject {
        public static int constructor = NUM;
        public String autoupdate_url_prefix;
        public int base_lang_pack_version;
        public boolean blocked_mode;
        public int call_connect_timeout_ms;
        public int call_packet_timeout_ms;
        public int call_receive_timeout_ms;
        public int call_ring_timeout_ms;
        public int caption_length_max;
        public int channels_read_media_period;
        public int chat_size_max;
        public int date;
        public ArrayList<TL_dcOption> dc_options = new ArrayList<>();
        public String dc_txt_domain_name;
        public boolean default_p2p_contacts;
        public int edit_time_limit;
        public int expires;
        public int flags;
        public int forwarded_count_max;
        public String gif_search_username;
        public boolean ignore_phone_entities;
        public String img_search_username;
        public int lang_pack_version;
        public String me_url_prefix;
        public int megagroup_size_max;
        public int message_length_max;
        public int notify_cloud_delay_ms;
        public int notify_default_delay_ms;
        public int offline_blur_timeout_ms;
        public int offline_idle_timeout_ms;
        public int online_cloud_timeout_ms;
        public int online_update_period_ms;
        public boolean pfs_enabled;
        public boolean phonecalls_enabled;
        public int pinned_dialogs_count_max;
        public int pinned_infolder_count_max;
        public boolean preload_featured_stickers;
        public int push_chat_limit;
        public int push_chat_period_ms;
        public int rating_e_decay;
        public boolean revoke_pm_inbox;
        public int revoke_pm_time_limit;
        public int revoke_time_limit;
        public int saved_gifs_limit;
        public String static_maps_provider;
        public int stickers_faved_limit;
        public int stickers_recent_limit;
        public String suggested_lang_code;
        public boolean test_mode;
        public int this_dc;
        public int tmp_sessions;
        public String venue_search_username;
        public int webfile_dc_id;

        public static TL_config TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_config result = new TL_config();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_config", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.phonecalls_enabled = (readInt32 & 2) != 0;
            this.default_p2p_contacts = (readInt32 & 8) != 0;
            this.preload_featured_stickers = (readInt32 & 16) != 0;
            this.ignore_phone_entities = (readInt32 & 32) != 0;
            this.revoke_pm_inbox = (readInt32 & 64) != 0;
            this.blocked_mode = (readInt32 & 256) != 0;
            this.pfs_enabled = (readInt32 & 8192) != 0;
            this.date = stream.readInt32(exception);
            this.expires = stream.readInt32(exception);
            this.test_mode = stream.readBool(exception);
            this.this_dc = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_dcOption object = TL_dcOption.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.dc_options.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.dc_txt_domain_name = stream.readString(exception);
                this.chat_size_max = stream.readInt32(exception);
                this.megagroup_size_max = stream.readInt32(exception);
                this.forwarded_count_max = stream.readInt32(exception);
                this.online_update_period_ms = stream.readInt32(exception);
                this.offline_blur_timeout_ms = stream.readInt32(exception);
                this.offline_idle_timeout_ms = stream.readInt32(exception);
                this.online_cloud_timeout_ms = stream.readInt32(exception);
                this.notify_cloud_delay_ms = stream.readInt32(exception);
                this.notify_default_delay_ms = stream.readInt32(exception);
                this.push_chat_period_ms = stream.readInt32(exception);
                this.push_chat_limit = stream.readInt32(exception);
                this.saved_gifs_limit = stream.readInt32(exception);
                this.edit_time_limit = stream.readInt32(exception);
                this.revoke_time_limit = stream.readInt32(exception);
                this.revoke_pm_time_limit = stream.readInt32(exception);
                this.rating_e_decay = stream.readInt32(exception);
                this.stickers_recent_limit = stream.readInt32(exception);
                this.stickers_faved_limit = stream.readInt32(exception);
                this.channels_read_media_period = stream.readInt32(exception);
                if ((this.flags & 1) != 0) {
                    this.tmp_sessions = stream.readInt32(exception);
                }
                this.pinned_dialogs_count_max = stream.readInt32(exception);
                this.pinned_infolder_count_max = stream.readInt32(exception);
                this.call_receive_timeout_ms = stream.readInt32(exception);
                this.call_ring_timeout_ms = stream.readInt32(exception);
                this.call_connect_timeout_ms = stream.readInt32(exception);
                this.call_packet_timeout_ms = stream.readInt32(exception);
                this.me_url_prefix = stream.readString(exception);
                if ((this.flags & 128) != 0) {
                    this.autoupdate_url_prefix = stream.readString(exception);
                }
                if ((this.flags & 512) != 0) {
                    this.gif_search_username = stream.readString(exception);
                }
                if ((this.flags & 1024) != 0) {
                    this.venue_search_username = stream.readString(exception);
                }
                if ((this.flags & 2048) != 0) {
                    this.img_search_username = stream.readString(exception);
                }
                if ((this.flags & 4096) != 0) {
                    this.static_maps_provider = stream.readString(exception);
                }
                this.caption_length_max = stream.readInt32(exception);
                this.message_length_max = stream.readInt32(exception);
                this.webfile_dc_id = stream.readInt32(exception);
                if ((this.flags & 4) != 0) {
                    this.suggested_lang_code = stream.readString(exception);
                }
                if ((this.flags & 4) != 0) {
                    this.lang_pack_version = stream.readInt32(exception);
                }
                if ((this.flags & 4) != 0) {
                    this.base_lang_pack_version = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.phonecalls_enabled ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            int i2 = this.default_p2p_contacts ? i | 8 : i & -9;
            this.flags = i2;
            int i3 = this.preload_featured_stickers ? i2 | 16 : i2 & -17;
            this.flags = i3;
            int i4 = this.ignore_phone_entities ? i3 | 32 : i3 & -33;
            this.flags = i4;
            int i5 = this.revoke_pm_inbox ? i4 | 64 : i4 & -65;
            this.flags = i5;
            int i6 = this.blocked_mode ? i5 | 256 : i5 & -257;
            this.flags = i6;
            int i7 = this.pfs_enabled ? i6 | 8192 : i6 & -8193;
            this.flags = i7;
            stream.writeInt32(i7);
            stream.writeInt32(this.date);
            stream.writeInt32(this.expires);
            stream.writeBool(this.test_mode);
            stream.writeInt32(this.this_dc);
            stream.writeInt32(NUM);
            int count = this.dc_options.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.dc_options.get(a).serializeToStream(stream);
            }
            stream.writeString(this.dc_txt_domain_name);
            stream.writeInt32(this.chat_size_max);
            stream.writeInt32(this.megagroup_size_max);
            stream.writeInt32(this.forwarded_count_max);
            stream.writeInt32(this.online_update_period_ms);
            stream.writeInt32(this.offline_blur_timeout_ms);
            stream.writeInt32(this.offline_idle_timeout_ms);
            stream.writeInt32(this.online_cloud_timeout_ms);
            stream.writeInt32(this.notify_cloud_delay_ms);
            stream.writeInt32(this.notify_default_delay_ms);
            stream.writeInt32(this.push_chat_period_ms);
            stream.writeInt32(this.push_chat_limit);
            stream.writeInt32(this.saved_gifs_limit);
            stream.writeInt32(this.edit_time_limit);
            stream.writeInt32(this.revoke_time_limit);
            stream.writeInt32(this.revoke_pm_time_limit);
            stream.writeInt32(this.rating_e_decay);
            stream.writeInt32(this.stickers_recent_limit);
            stream.writeInt32(this.stickers_faved_limit);
            stream.writeInt32(this.channels_read_media_period);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.tmp_sessions);
            }
            stream.writeInt32(this.pinned_dialogs_count_max);
            stream.writeInt32(this.pinned_infolder_count_max);
            stream.writeInt32(this.call_receive_timeout_ms);
            stream.writeInt32(this.call_ring_timeout_ms);
            stream.writeInt32(this.call_connect_timeout_ms);
            stream.writeInt32(this.call_packet_timeout_ms);
            stream.writeString(this.me_url_prefix);
            if ((this.flags & 128) != 0) {
                stream.writeString(this.autoupdate_url_prefix);
            }
            if ((this.flags & 512) != 0) {
                stream.writeString(this.gif_search_username);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeString(this.venue_search_username);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.img_search_username);
            }
            if ((this.flags & 4096) != 0) {
                stream.writeString(this.static_maps_provider);
            }
            stream.writeInt32(this.caption_length_max);
            stream.writeInt32(this.message_length_max);
            stream.writeInt32(this.webfile_dc_id);
            if ((this.flags & 4) != 0) {
                stream.writeString(this.suggested_lang_code);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.lang_pack_version);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.base_lang_pack_version);
            }
        }
    }

    public static abstract class contacts_TopPeers extends TLObject {
        public static contacts_TopPeers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            contacts_TopPeers result = null;
            switch (constructor) {
                case -1255369827:
                    result = new TL_contacts_topPeersDisabled();
                    break;
                case -567906571:
                    result = new TL_contacts_topPeersNotModified();
                    break;
                case 1891070632:
                    result = new TL_contacts_topPeers();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in contacts_TopPeers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_contacts_topPeers extends contacts_TopPeers {
        public static int constructor = NUM;
        public ArrayList<TL_topPeerCategoryPeers> categories = new ArrayList<>();
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_topPeerCategoryPeers object = TL_topPeerCategoryPeers.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.categories.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.categories.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.categories.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_contacts_topPeersDisabled extends contacts_TopPeers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_topPeersNotModified extends contacts_TopPeers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_support extends TLObject {
        public static int constructor = NUM;
        public String phone_number;
        public User user;

        public static TL_help_support TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_support result = new TL_help_support();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_support", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            this.user.serializeToStream(stream);
        }
    }

    public static class TL_account_tmpPassword extends TLObject {
        public static int constructor = -NUM;
        public byte[] tmp_password;
        public int valid_until;

        public static TL_account_tmpPassword TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_tmpPassword result = new TL_account_tmpPassword();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_tmpPassword", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.tmp_password = stream.readByteArray(exception);
            this.valid_until = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.tmp_password);
            stream.writeInt32(this.valid_until);
        }
    }

    public static abstract class messages_Chats extends TLObject {
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;

        public static messages_Chats TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_Chats result = null;
            switch (constructor) {
                case -1663561404:
                    result = new TL_messages_chatsSlice();
                    break;
                case 1694474197:
                    result = new TL_messages_chats();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_Chats", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_chats extends messages_Chats {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Chat) this.chats.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_chatsSlice extends messages_Chats {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Chat) this.chats.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputChannel extends TLObject {
        public long access_hash;
        public long channel_id;

        public static InputChannel TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputChannel result = null;
            switch (constructor) {
                case -1343524562:
                    result = new TL_inputChannel_layer131();
                    break;
                case -292807034:
                    result = new TL_inputChannelEmpty();
                    break;
                case -212145112:
                    result = new TL_inputChannel();
                    break;
                case 707290417:
                    result = new TL_inputChannelFromMessage_layer131();
                    break;
                case 1536380829:
                    result = new TL_inputChannelFromMessage();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputChannel", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputChannelFromMessage_layer131 extends TL_inputChannelFromMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.channel_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32((int) this.channel_id);
        }
    }

    public static class TL_inputChannel_layer131 extends TL_inputChannel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.channel_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputChannel extends InputChannel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputChannelEmpty extends InputChannel {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputChannelFromMessage extends InputChannel {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt64(this.channel_id);
        }
    }

    public static class TL_messageRange extends TLObject {
        public static int constructor = NUM;
        public int max_id;
        public int min_id;

        public static TL_messageRange TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messageRange result = new TL_messageRange();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageRange", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.min_id = stream.readInt32(exception);
            this.max_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.min_id);
            stream.writeInt32(this.max_id);
        }
    }

    public static abstract class Poll extends TLObject {
        public ArrayList<TL_pollAnswer> answers = new ArrayList<>();
        public int close_date;
        public int close_period;
        public boolean closed;
        public int flags;
        public long id;
        public boolean multiple_choice;
        public boolean public_voters;
        public String question;
        public boolean quiz;

        public static Poll TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Poll result = null;
            switch (constructor) {
                case -2032041631:
                    result = new TL_poll();
                    break;
                case -1351325818:
                    result = new TL_poll_toDelete();
                    break;
                case -716006138:
                    result = new TL_poll_layer111();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Poll", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_poll extends Poll {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            this.closed = (this.flags & 1) != 0;
            this.public_voters = (this.flags & 2) != 0;
            this.multiple_choice = (this.flags & 4) != 0;
            this.quiz = (this.flags & 8) != 0;
            this.question = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pollAnswer object = TL_pollAnswer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.answers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.close_period = stream.readInt32(exception);
                }
                if ((this.flags & 32) != 0) {
                    this.close_date = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.closed ? this.flags | 1 : this.flags & -2;
            this.flags = this.public_voters ? this.flags | 2 : this.flags & -3;
            this.flags = this.multiple_choice ? this.flags | 4 : this.flags & -5;
            this.flags = this.quiz ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeString(this.question);
            stream.writeInt32(NUM);
            int count = this.answers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_pollAnswer) this.answers.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.close_period);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.close_date);
            }
        }
    }

    public static class TL_poll_toDelete extends TL_poll {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            this.closed = (this.flags & 1) != 0;
            this.public_voters = (this.flags & 2) != 0;
            this.multiple_choice = (this.flags & 4) != 0;
            this.quiz = (this.flags & 8) != 0;
            this.question = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pollAnswer object = TL_pollAnswer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.answers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.close_date = stream.readInt32(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.closed ? this.flags | 1 : this.flags & -2;
            this.flags = this.public_voters ? this.flags | 2 : this.flags & -3;
            this.flags = this.multiple_choice ? this.flags | 4 : this.flags & -5;
            this.flags = this.quiz ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeString(this.question);
            stream.writeInt32(NUM);
            int count = this.answers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_pollAnswer) this.answers.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.close_date);
            }
        }
    }

    public static class TL_poll_layer111 extends TL_poll {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            this.closed = (this.flags & 1) != 0;
            this.public_voters = (this.flags & 2) != 0;
            this.multiple_choice = (this.flags & 4) != 0;
            this.quiz = (this.flags & 8) != 0;
            this.question = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pollAnswer object = TL_pollAnswer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.answers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.closed ? this.flags | 1 : this.flags & -2;
            this.flags = this.public_voters ? this.flags | 2 : this.flags & -3;
            this.flags = this.multiple_choice ? this.flags | 4 : this.flags & -5;
            this.flags = this.quiz ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeString(this.question);
            stream.writeInt32(NUM);
            int count = this.answers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_pollAnswer) this.answers.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class messages_BotResults extends TLObject {
        public int cache_time;
        public int flags;
        public boolean gallery;
        public String next_offset;
        public long query_id;
        public ArrayList<BotInlineResult> results = new ArrayList<>();
        public TL_inlineBotSwitchPM switch_pm;
        public ArrayList<User> users = new ArrayList<>();

        public static messages_BotResults TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_BotResults result = null;
            switch (constructor) {
                case -1803769784:
                    result = new TL_messages_botResults();
                    break;
                case -858565059:
                    result = new TL_messages_botResults_layer71();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_BotResults", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_botResults_layer71 extends TL_messages_botResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.gallery = (this.flags & 1) != 0;
            this.query_id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.next_offset = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInlineResult object = BotInlineResult.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.cache_time = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.gallery ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.query_id);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.next_offset);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInlineResult) this.results.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.cache_time);
        }
    }

    public static class TL_messages_botResults extends messages_BotResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.gallery = (this.flags & 1) != 0;
            this.query_id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.next_offset = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    BotInlineResult object = BotInlineResult.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.cache_time = stream.readInt32(exception);
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.gallery ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.query_id);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.next_offset);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((BotInlineResult) this.results.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.cache_time);
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((User) this.users.get(a2)).serializeToStream(stream);
            }
        }
    }

    public static class TL_inputFolderPeer extends TLObject {
        public static int constructor = -70073706;
        public int folder_id;
        public InputPeer peer;

        public static TL_inputFolderPeer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputFolderPeer result = new TL_inputFolderPeer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputFolderPeer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.folder_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.folder_id);
        }
    }

    public static abstract class PhoneConnection extends TLObject {
        public int flags;
        public long id;
        public String ip;
        public String ipv6;
        public String password;
        public byte[] peer_tag;
        public int port;
        public boolean stun;
        public boolean turn;
        public String username;

        public static PhoneConnection TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PhoneConnection result = null;
            switch (constructor) {
                case -1655957568:
                    result = new TL_phoneConnection();
                    break;
                case 1667228533:
                    result = new TL_phoneConnectionWebrtc();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PhoneConnection", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_phoneConnection extends PhoneConnection {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.ip = stream.readString(exception);
            this.ipv6 = stream.readString(exception);
            this.port = stream.readInt32(exception);
            this.peer_tag = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeString(this.ip);
            stream.writeString(this.ipv6);
            stream.writeInt32(this.port);
            stream.writeByteArray(this.peer_tag);
        }
    }

    public static class TL_phoneConnectionWebrtc extends PhoneConnection {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.turn = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.stun = z;
            this.id = stream.readInt64(exception);
            this.ip = stream.readString(exception);
            this.ipv6 = stream.readString(exception);
            this.port = stream.readInt32(exception);
            this.username = stream.readString(exception);
            this.password = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.turn ? this.flags | 1 : this.flags & -2;
            this.flags = this.stun ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.ip);
            stream.writeString(this.ipv6);
            stream.writeInt32(this.port);
            stream.writeString(this.username);
            stream.writeString(this.password);
        }
    }

    public static class TL_inputBotInlineMessageID extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public int dc_id;
        public long id;

        public static TL_inputBotInlineMessageID TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputBotInlineMessageID result = new TL_inputBotInlineMessageID();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class SecurePlainData extends TLObject {
        public static SecurePlainData TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            SecurePlainData result = null;
            switch (constructor) {
                case 569137759:
                    result = new TL_securePlainEmail();
                    break;
                case 2103482845:
                    result = new TL_securePlainPhone();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in SecurePlainData", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_securePlainEmail extends SecurePlainData {
        public static int constructor = NUM;
        public String email;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.email = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.email);
        }
    }

    public static class TL_securePlainPhone extends SecurePlainData {
        public static int constructor = NUM;
        public String phone;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone);
        }
    }

    public static class TL_secureSecretSettings extends TLObject {
        public static int constructor = NUM;
        public SecurePasswordKdfAlgo secure_algo;
        public byte[] secure_secret;
        public long secure_secret_id;

        public static TL_secureSecretSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_secureSecretSettings result = new TL_secureSecretSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_secureSecretSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.secure_algo = SecurePasswordKdfAlgo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.secure_secret = stream.readByteArray(exception);
            this.secure_secret_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.secure_algo.serializeToStream(stream);
            stream.writeByteArray(this.secure_secret);
            stream.writeInt64(this.secure_secret_id);
        }
    }

    public static class TL_emojiLanguage extends TLObject {
        public static int constructor = -NUM;
        public String lang_code;

        public static TL_emojiLanguage TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_emojiLanguage result = new TL_emojiLanguage();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_emojiLanguage", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lang_code = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
        }
    }

    public static abstract class Theme extends TLObject {
        public static TL_theme TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TL_theme result = null;
            switch (constructor) {
                case -1609668650:
                    result = new TL_theme();
                    break;
                case -402474788:
                    result = new TL_theme_layer133();
                    break;
                case -136770336:
                    result = new TL_theme_layer106();
                    break;
                case 42930452:
                    result = new TL_theme_layer131();
                    break;
                case 1211967244:
                    result = new TL_themeDocumentNotModified_layer106();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Theme", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_theme_layer133 extends TL_theme {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.isDefault = (this.flags & 2) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.for_chat = z;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                this.settings.add(ThemeSettings.TLdeserialize(stream, stream.readInt32(exception), exception));
            }
            if ((this.flags & 16) != 0) {
                this.installs_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            this.flags = this.for_chat ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            stream.writeString(this.title);
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                ((ThemeSettings) this.settings.get(0)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.installs_count);
            }
        }
    }

    public static class TL_theme extends Theme {
        public static int constructor = -NUM;
        public long access_hash;
        public boolean creator;
        public Document document;
        public String emoticon;
        public int flags;
        public boolean for_chat;
        public long id;
        public int installs_count;
        public boolean isDefault;
        public ArrayList<ThemeSettings> settings = new ArrayList<>();
        public String slug;
        public String title;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.creator = (readInt32 & 1) != 0;
            this.isDefault = (readInt32 & 2) != 0;
            this.for_chat = (readInt32 & 32) != 0;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_themeSettings object = TL_themeSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.settings.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 64) != 0) {
                this.emoticon = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.installs_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.isDefault ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.for_chat ? i2 | 32 : i2 & -33;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            stream.writeString(this.title);
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.settings.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.settings.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 64) != 0) {
                stream.writeString(this.emoticon);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.installs_count);
            }
        }
    }

    public static class TL_theme_layer131 extends TL_theme {
        public static int constructor = 42930452;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.isDefault = z;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 8) != 0) {
                this.settings.add(ThemeSettings.TLdeserialize(stream, stream.readInt32(exception), exception));
            }
            this.installs_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            stream.writeString(this.title);
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                ((ThemeSettings) this.settings.get(0)).serializeToStream(stream);
            }
            stream.writeInt32(this.installs_count);
        }
    }

    public static class TL_theme_layer106 extends TL_theme {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.isDefault = z;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 4) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.installs_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            stream.writeString(this.title);
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            stream.writeInt32(this.installs_count);
        }
    }

    public static class TL_themeDocumentNotModified_layer106 extends TL_theme {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class updates_ChannelDifference extends TLObject {
        public ArrayList<Chat> chats = new ArrayList<>();
        public Dialog dialog;
        public int flags;
        public boolean isFinal;
        public ArrayList<Message> messages = new ArrayList<>();
        public ArrayList<Message> new_messages = new ArrayList<>();
        public ArrayList<Update> other_updates = new ArrayList<>();
        public int pts;
        public int timeout;
        public ArrayList<User> users = new ArrayList<>();

        public static updates_ChannelDifference TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            updates_ChannelDifference result = null;
            switch (constructor) {
                case -1531132162:
                    result = new TL_updates_channelDifferenceTooLong();
                    break;
                case 543450958:
                    result = new TL_updates_channelDifference();
                    break;
                case 1041346555:
                    result = new TL_updates_channelDifferenceEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in updates_ChannelDifference", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_updates_channelDifferenceEmpty extends updates_ChannelDifference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.isFinal = z;
            this.pts = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.timeout = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.pts);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.timeout);
            }
        }
    }

    public static class TL_updates_channelDifference extends updates_ChannelDifference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.isFinal = (this.flags & 1) != 0;
            this.pts = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.timeout = stream.readInt32(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.new_messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Update object2 = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.other_updates.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.pts);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.timeout);
            }
            stream.writeInt32(NUM);
            int count = this.new_messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.new_messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.other_updates.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Update) this.other_updates.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Chat) this.chats.get(a3)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                ((User) this.users.get(a4)).serializeToStream(stream);
            }
        }
    }

    public static class TL_updates_channelDifferenceTooLong extends updates_ChannelDifference {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.isFinal = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                this.timeout = stream.readInt32(exception);
            }
            this.dialog = Dialog.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Message object = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.messages.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.timeout);
            }
            this.dialog.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.messages.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Message) this.messages.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Chat) this.chats.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((User) this.users.get(a3)).serializeToStream(stream);
            }
        }
    }

    public static abstract class ChannelMessagesFilter extends TLObject {
        public boolean exclude_new_messages;
        public int flags;
        public ArrayList<TL_messageRange> ranges = new ArrayList<>();

        public static ChannelMessagesFilter TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChannelMessagesFilter result = null;
            switch (constructor) {
                case -1798033689:
                    result = new TL_channelMessagesFilterEmpty();
                    break;
                case -847783593:
                    result = new TL_channelMessagesFilter();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChannelMessagesFilter", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_sponsoredMessage extends TLObject {
        public static int constructor = NUM;
        public int channel_post;
        public ChatInvite chat_invite;
        public String chat_invite_hash;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public Peer from_id;
        public String message;
        public byte[] random_id;
        public String start_param;

        public static TL_sponsoredMessage TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_sponsoredMessage result = new TL_sponsoredMessage();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_sponsoredMessage", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.random_id = stream.readByteArray(exception);
            if ((this.flags & 8) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.chat_invite = ChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.chat_invite_hash = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                this.start_param = stream.readString(exception);
            }
            this.message = stream.readString(exception);
            if ((this.flags & 2) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeByteArray(this.random_id);
            if ((this.flags & 8) != 0) {
                this.from_id.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                this.chat_invite.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.chat_invite_hash);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 1) != 0) {
                stream.writeString(this.start_param);
            }
            stream.writeString(this.message);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_account_authorizationForm extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<SecureValueError> errors = new ArrayList<>();
        public int flags;
        public String privacy_policy_url;
        public ArrayList<SecureRequiredType> required_types = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();
        public ArrayList<TL_secureValue> values = new ArrayList<>();

        public static TL_account_authorizationForm TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_authorizationForm result = new TL_account_authorizationForm();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizationForm", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    SecureRequiredType object = SecureRequiredType.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.required_types.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_secureValue object2 = TL_secureValue.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.values.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            SecureValueError object3 = SecureValueError.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.errors.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                            if ((this.flags & 1) != 0) {
                                this.privacy_policy_url = stream.readString(exception);
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.required_types.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.required_types.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.values.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.values.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.errors.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.errors.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeString(this.privacy_policy_url);
            }
        }
    }

    public static class TL_help_recentMeUrls extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<RecentMeUrl> urls = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_help_recentMeUrls TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_recentMeUrls result = new TL_help_recentMeUrls();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_recentMeUrls", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    RecentMeUrl object = RecentMeUrl.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.urls.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.urls.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.urls.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_channelMessagesFilterEmpty extends ChannelMessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelMessagesFilter extends ChannelMessagesFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.exclude_new_messages = (this.flags & 2) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_messageRange object = TL_messageRange.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.ranges.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.exclude_new_messages ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(NUM);
            int count = this.ranges.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_messageRange) this.ranges.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_bankCardOpenUrl extends TLObject {
        public static int constructor = -NUM;
        public String name;
        public String url;

        public static TL_bankCardOpenUrl TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_bankCardOpenUrl result = new TL_bankCardOpenUrl();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_bankCardOpenUrl", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeString(this.name);
        }
    }

    public static class TL_contacts_resolvedPeer extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public Peer peer;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_contacts_resolvedPeer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contacts_resolvedPeer result = new TL_contacts_resolvedPeer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_resolvedPeer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_searchResultPosition extends TLObject {
        public static int constructor = NUM;
        public int date;
        public int msg_id;
        public int offset;

        public static TL_searchResultPosition TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_searchResultPosition result = new TL_searchResultPosition();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_searchResultPosition", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.msg_id = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.offset = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(this.date);
            stream.writeInt32(this.offset);
        }
    }

    public static class TL_messages_searchResultsPositions extends TLObject {
        public static int constructor = NUM;
        public int count;
        public ArrayList<TL_searchResultPosition> positions = new ArrayList<>();

        public static TL_messages_searchResultsPositions TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_searchResultsPositions result = new TL_messages_searchResultsPositions();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_searchResultsPositions", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_searchResultPosition object = TL_searchResultPosition.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.positions.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.positions.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.positions.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_searchResultsCalendarPeriod extends TLObject {
        public static int constructor = -NUM;
        public int count;
        public int date;
        public int max_msg_id;
        public int min_msg_id;

        public static TL_searchResultsCalendarPeriod TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_searchResultsCalendarPeriod result = new TL_searchResultsCalendarPeriod();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_searchResultsCalendarPeriod", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.date = stream.readInt32(exception);
            this.min_msg_id = stream.readInt32(exception);
            this.max_msg_id = stream.readInt32(exception);
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.date);
            stream.writeInt32(this.min_msg_id);
            stream.writeInt32(this.max_msg_id);
            stream.writeInt32(this.count);
        }
    }

    public static class TL_inputSingleMedia extends TLObject {
        public static int constructor = NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public InputMedia media;
        public String message;
        public long random_id;

        public static TL_inputSingleMedia TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputSingleMedia result = new TL_inputSingleMedia();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputSingleMedia", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.media = InputMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.random_id = stream.readInt64(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.media.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeString(this.message);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_inputPhoneCall extends TLObject {
        public static int constructor = NUM;
        public long access_hash;
        public long id;

        public static TL_inputPhoneCall TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputPhoneCall result = new TL_inputPhoneCall();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneCall", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class WebDocument extends TLObject {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
        public String mime_type;
        public int size;
        public String url;

        public static WebDocument TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            WebDocument result = null;
            switch (constructor) {
                case -971322408:
                    result = new TL_webDocument_layer81();
                    break;
                case -104284986:
                    result = new TL_webDocumentNoProxy();
                    break;
                case 475467473:
                    result = new TL_webDocument();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in WebDocument", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_webDocumentNoProxy extends WebDocument {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_webDocument_layer81 extends TL_webDocument {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.size = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(0);
        }
    }

    public static class TL_webDocument extends WebDocument {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
            this.size = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class help_PromoData extends TLObject {
        public static help_PromoData TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_PromoData result = null;
            switch (constructor) {
                case -1942390465:
                    result = new TL_help_promoData();
                    break;
                case -1728664459:
                    result = new TL_help_promoDataEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_PromoData", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_promoData extends help_PromoData {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int expires;
        public int flags;
        public Peer peer;
        public boolean proxy;
        public String psa_message;
        public String psa_type;
        public ArrayList<User> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.proxy = (readInt32 & 1) != 0;
            this.expires = stream.readInt32(exception);
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.chats.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    if ((this.flags & 2) != 0) {
                        this.psa_type = stream.readString(exception);
                    }
                    if ((this.flags & 4) != 0) {
                        this.psa_message = stream.readString(exception);
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.proxy ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.expires);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.chats.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.chats.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.psa_type);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.psa_message);
            }
        }
    }

    public static class TL_help_promoDataEmpty extends help_PromoData {
        public static int constructor = -NUM;
        public int expires;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
        }
    }

    public static abstract class ChannelParticipant extends TLObject {
        public TL_chatAdminRights admin_rights;
        public TL_channelAdminRights_layer92 admin_rights_layer92;
        public TL_chatBannedRights banned_rights;
        public TL_channelBannedRights_layer92 banned_rights_layer92;
        public boolean can_edit;
        public int date;
        public int flags;
        public long inviter_id;
        public long kicked_by;
        public boolean left;
        public Peer peer;
        public long promoted_by;
        public String rank;
        public boolean self;
        public long user_id;
        public boolean via_invite;

        public static ChannelParticipant TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChannelParticipant result = null;
            switch (constructor) {
                case -2138237532:
                    result = new TL_channelParticipantCreator_layer118();
                    break;
                case -1933187430:
                    result = new TL_channelParticipantKicked_layer67();
                    break;
                case -1861910545:
                    result = new TL_channelParticipantModerator_layer67();
                    break;
                case -1743180447:
                    result = new TL_channelParticipantEditor_layer67();
                    break;
                case -1557620115:
                    result = new TL_channelParticipantSelf_layer131();
                    break;
                case -1473271656:
                    result = new TL_channelParticipantAdmin_layer92();
                    break;
                case -1072953408:
                    result = new TL_channelParticipant();
                    break;
                case -1010402965:
                    result = new TL_channelParticipantLeft_layer125();
                    break;
                case -859915345:
                    result = new TL_channelParticipantAdmin_layer131();
                    break;
                case -471670279:
                    result = new TL_channelParticipantCreator_layer103();
                    break;
                case 367766557:
                    result = new TL_channelParticipant_layer131();
                    break;
                case 453242886:
                    result = new TL_channelParticipantLeft();
                    break;
                case 470789295:
                    result = new TL_channelParticipantBanned_layer125();
                    break;
                case 573315206:
                    result = new TL_channelParticipantBanned_layer92();
                    break;
                case 682146919:
                    result = new TL_channelParticipantSelf_layer133();
                    break;
                case 803602899:
                    result = new TL_channelParticipantCreator();
                    break;
                case 885242707:
                    result = new TL_channelParticipantAdmin();
                    break;
                case 900251559:
                    result = new TL_channelParticipantSelf();
                    break;
                case 1149094475:
                    result = new TL_channelParticipantCreator_layer131();
                    break;
                case 1352785878:
                    result = new TL_channelParticipantBanned_layer131();
                    break;
                case 1571450403:
                    result = new TL_channelParticipantAdmin_layer103();
                    break;
                case 1844969806:
                    result = new TL_channelParticipantBanned();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipant", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channelParticipant extends ChannelParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.peer.user_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantSelf extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.via_invite = z;
            this.user_id = stream.readInt64(exception);
            this.inviter_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.via_invite ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantSelf_layer133 extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = stream.readInt64(exception);
            this.inviter_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.peer.user_id);
            stream.writeInt64(this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantCreator extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.peer = new TL_peerUser();
            this.peer.user_id = stream.readInt64(exception);
            this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.rank = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.peer.user_id);
            this.admin_rights.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.rank);
            }
        }
    }

    public static class TL_channelParticipantAdmin extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.can_edit = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.self = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.inviter_id = stream.readInt64(exception);
            }
            this.promoted_by = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.rank = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_edit ? this.flags | 1 : this.flags & -2;
            this.flags = this.self ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.peer.user_id);
            if ((this.flags & 2) != 0) {
                stream.writeInt64(this.inviter_id);
            }
            stream.writeInt64(this.promoted_by);
            stream.writeInt32(this.date);
            this.admin_rights.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeString(this.rank);
            }
        }
    }

    public static class TL_channelParticipantBanned extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.left = z;
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.kicked_by = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.left ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.kicked_by);
            stream.writeInt32(this.date);
            this.banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_channelParticipantBanned_layer125 extends TL_channelParticipantBanned {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.left = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.kicked_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.left ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.kicked_by);
            stream.writeInt32(this.date);
            this.banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_channelParticipantLeft extends ChannelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_channelParticipantLeft_layer125 extends TL_channelParticipantLeft {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
        }
    }

    public static class TL_channelParticipantBanned_layer131 extends TL_channelParticipantBanned {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.left = z;
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.kicked_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.left ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32((int) this.kicked_by);
            stream.writeInt32(this.date);
            this.banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_channelParticipantCreator_layer103 extends TL_channelParticipantCreator {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
        }
    }

    public static class TL_channelParticipant_layer131 extends TL_channelParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantKicked_layer67 extends ChannelParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.kicked_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.kicked_by);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantSelf_layer131 extends TL_channelParticipantSelf {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantAdmin_layer131 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.can_edit = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.self = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.inviter_id = (long) stream.readInt32(exception);
            }
            this.promoted_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.rank = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_edit ? this.flags | 1 : this.flags & -2;
            this.flags = this.self ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.inviter_id);
            }
            stream.writeInt32((int) this.promoted_by);
            stream.writeInt32(this.date);
            this.admin_rights.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeString(this.rank);
            }
        }
    }

    public static class TL_channelParticipantCreator_layer118 extends TL_channelParticipantCreator {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.rank = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.rank);
            }
        }
    }

    public static class TL_channelParticipantCreator_layer131 extends TL_channelParticipantCreator {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.rank = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            this.admin_rights.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.rank);
            }
        }
    }

    public static class TL_channelParticipantModerator_layer67 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantEditor_layer67 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantAdmin_layer92 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.can_edit = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.promoted_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.admin_rights = Chat.mergeAdminRights(this.admin_rights_layer92);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_edit ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32((int) this.promoted_by);
            stream.writeInt32(this.date);
            this.admin_rights_layer92.serializeToStream(stream);
        }
    }

    public static class TL_channelParticipantAdmin_layer103 extends TL_channelParticipantAdmin {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.can_edit = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.self = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.inviter_id = (long) stream.readInt32(exception);
            }
            this.promoted_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.can_edit ? this.flags | 1 : this.flags & -2;
            this.flags = this.self ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.inviter_id);
            }
            stream.writeInt32((int) this.promoted_by);
            stream.writeInt32(this.date);
            this.admin_rights.serializeToStream(stream);
        }
    }

    public static abstract class InputStickeredMedia extends TLObject {
        public static InputStickeredMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputStickeredMedia result = null;
            switch (constructor) {
                case 70813275:
                    result = new TL_inputStickeredMediaDocument();
                    break;
                case 1251549527:
                    result = new TL_inputStickeredMediaPhoto();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputStickeredMedia", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputStickeredMediaDocument extends InputStickeredMedia {
        public static int constructor = 70813275;
        public InputDocument id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = InputDocument.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_inputStickeredMediaPhoto extends InputStickeredMedia {
        public static int constructor = NUM;
        public InputPhoto id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = InputPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static abstract class channels_ChannelParticipants extends TLObject {
        public int count;
        public ArrayList<ChannelParticipant> participants = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static channels_ChannelParticipants TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            channels_ChannelParticipants result = null;
            switch (constructor) {
                case -1699676497:
                    result = new TL_channels_channelParticipants();
                    break;
                case -266911767:
                    result = new TL_channels_channelParticipantsNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in channels_ChannelParticipants", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channels_channelParticipants extends channels_ChannelParticipants {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public ArrayList<ChannelParticipant> participants = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    ChannelParticipant object = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count4 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count4) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.participants.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.participants.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a3 = 0; a3 < count4; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_channels_channelParticipantsNotModified extends channels_ChannelParticipants {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class WallPaperSettings extends TLObject {
        public int background_color;
        public boolean blur;
        public int flags;
        public int fourth_background_color;
        public int intensity;
        public boolean motion;
        public int rotation;
        public int second_background_color;
        public int third_background_color;

        public static WallPaperSettings TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            WallPaperSettings result = null;
            switch (constructor) {
                case -1590738760:
                    result = new TL_wallPaperSettings_layer106();
                    break;
                case 84438264:
                    result = new TL_wallPaperSettings_layer128();
                    break;
                case 499236004:
                    result = new TL_wallPaperSettings();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in WallPaperSettings", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_wallPaperSettings_layer106 extends TL_wallPaperSettings {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.blur = (this.flags & 2) != 0;
            if ((this.flags & 4) != 0) {
                z = true;
            }
            this.motion = z;
            if ((this.flags & 1) != 0) {
                this.background_color = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.intensity = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blur ? this.flags | 2 : this.flags & -3;
            this.flags = this.motion ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.background_color);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.intensity);
            }
        }
    }

    public static class TL_wallPaperSettings_layer128 extends TL_wallPaperSettings {
        public static int constructor = 84438264;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.blur = (this.flags & 2) != 0;
            if ((this.flags & 4) != 0) {
                z = true;
            }
            this.motion = z;
            if ((this.flags & 1) != 0) {
                this.background_color = stream.readInt32(exception);
            }
            if ((this.flags & 16) != 0) {
                this.second_background_color = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.intensity = stream.readInt32(exception);
            }
            if ((this.flags & 16) != 0) {
                this.rotation = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blur ? this.flags | 2 : this.flags & -3;
            this.flags = this.motion ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.background_color);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.second_background_color);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.intensity);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.rotation);
            }
        }
    }

    public static class TL_wallPaperSettings extends WallPaperSettings {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.blur = (this.flags & 2) != 0;
            if ((this.flags & 4) != 0) {
                z = true;
            }
            this.motion = z;
            if ((this.flags & 1) != 0) {
                this.background_color = stream.readInt32(exception);
            }
            if ((this.flags & 16) != 0) {
                this.second_background_color = stream.readInt32(exception);
            }
            if ((this.flags & 32) != 0) {
                this.third_background_color = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.fourth_background_color = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.intensity = stream.readInt32(exception);
            }
            if ((this.flags & 16) != 0) {
                this.rotation = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blur ? this.flags | 2 : this.flags & -3;
            this.flags = this.motion ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.background_color);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.second_background_color);
            }
            if ((this.flags & 32) != 0) {
                stream.writeInt32(this.third_background_color);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.fourth_background_color);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.intensity);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.rotation);
            }
        }
    }

    public static class TL_contacts_found extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<Peer> my_results = new ArrayList<>();
        public ArrayList<Peer> results = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_contacts_found TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_contacts_found result = new TL_contacts_found();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_found", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Peer object = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.my_results.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Peer object2 = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.results.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.my_results.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.my_results.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.results.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.results.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.chats.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
        }
    }

    public static abstract class ChatParticipants extends TLObject {
        public long admin_id;
        public long chat_id;
        public int flags;
        public ArrayList<ChatParticipant> participants = new ArrayList<>();
        public ChatParticipant self_participant;
        public int version;

        public static ChatParticipants TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChatParticipants result = null;
            switch (constructor) {
                case -2023500831:
                    result = new TL_chatParticipantsForbidden();
                    break;
                case -57668565:
                    result = new TL_chatParticipantsForbidden_layer131();
                    break;
                case 265468810:
                    result = new TL_chatParticipantsForbidden_old();
                    break;
                case 1018991608:
                    result = new TL_chatParticipants();
                    break;
                case 1061556205:
                    result = new TL_chatParticipants_layer131();
                    break;
                case 2017571861:
                    result = new TL_chatParticipants_old();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChatParticipants", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_chatParticipantsForbidden_layer131 extends TL_chatParticipantsForbidden {
        public static int constructor = -57668565;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.chat_id = (long) stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.self_participant = ChatParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.chat_id);
            if ((this.flags & 1) != 0) {
                this.self_participant.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatParticipants_layer131 extends TL_chatParticipants {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = (long) stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    ChatParticipant object = ChatParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.version = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.chat_id);
            stream.writeInt32(NUM);
            int count = this.participants.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((ChatParticipant) this.participants.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.version);
        }
    }

    public static class TL_chatParticipantsForbidden extends ChatParticipants {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.chat_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.self_participant = ChatParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.chat_id);
            if ((this.flags & 1) != 0) {
                this.self_participant.serializeToStream(stream);
            }
        }
    }

    public static class TL_chatParticipants extends ChatParticipants {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    ChatParticipant object = ChatParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.version = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            stream.writeInt32(NUM);
            int count = this.participants.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((ChatParticipant) this.participants.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.version);
        }
    }

    public static class TL_chatParticipants_old extends TL_chatParticipants {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = (long) stream.readInt32(exception);
            this.admin_id = (long) stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    ChatParticipant object = ChatParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.version = stream.readInt32(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.chat_id);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32(NUM);
            int count = this.participants.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((ChatParticipant) this.participants.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(this.version);
        }
    }

    public static class TL_chatParticipantsForbidden_old extends TL_chatParticipantsForbidden {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.chat_id);
        }
    }

    public static class TL_game extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public String description;
        public Document document;
        public int flags;
        public long id;
        public Photo photo;
        public String short_name;
        public String title;

        public static TL_game TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_game result = new TL_game();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_game", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.short_name = stream.readString(exception);
            this.title = stream.readString(exception);
            this.description = stream.readString(exception);
            this.photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.short_name);
            stream.writeString(this.title);
            stream.writeString(this.description);
            this.photo.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(stream);
            }
        }
    }

    public static abstract class DecryptedMessageMedia extends TLObject {
        public double _long;
        public long access_hash;
        public String address;
        public ArrayList<DocumentAttribute> attributes = new ArrayList<>();
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public String file_name;
        public String first_name;
        public int h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String last_name;
        public double lat;
        public String mime_type;
        public String phone_number;
        public String provider;
        public int size;
        public int thumb_h;
        public int thumb_w;
        public String title;
        public String url;
        public long user_id;
        public String venue_id;
        public int w;

        public static DecryptedMessageMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            DecryptedMessageMedia result = null;
            switch (constructor) {
                case -1978796689:
                    result = new TL_decryptedMessageMediaVenue();
                    break;
                case -1760785394:
                    result = new TL_decryptedMessageMediaVideo();
                    break;
                case -1332395189:
                    result = new TL_decryptedMessageMediaDocument_layer8();
                    break;
                case -452652584:
                    result = new TL_decryptedMessageMediaWebPage();
                    break;
                case -235238024:
                    result = new TL_decryptedMessageMediaPhoto();
                    break;
                case -90853155:
                    result = new TL_decryptedMessageMediaExternalDocument();
                    break;
                case 144661578:
                    result = new TL_decryptedMessageMediaEmpty();
                    break;
                case 846826124:
                    result = new TL_decryptedMessageMediaPhoto_layer8();
                    break;
                case 893913689:
                    result = new TL_decryptedMessageMediaGeoPoint();
                    break;
                case 1290694387:
                    result = new TL_decryptedMessageMediaVideo_layer8();
                    break;
                case 1380598109:
                    result = new TL_decryptedMessageMediaVideo_layer17();
                    break;
                case 1474341323:
                    result = new TL_decryptedMessageMediaAudio();
                    break;
                case 1485441687:
                    result = new TL_decryptedMessageMediaContact();
                    break;
                case 1619031439:
                    result = new TL_decryptedMessageMediaAudio_layer8();
                    break;
                case 2063502050:
                    result = new TL_decryptedMessageMediaDocument();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageMedia", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_decryptedMessageMediaAudio extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaGeoPoint extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lat = stream.readDouble(exception);
            this._long = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.lat);
            stream.writeDouble(this._long);
        }
    }

    public static class TL_decryptedMessageMediaContact extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.phone_number = stream.readString(exception);
            this.first_name = stream.readString(exception);
            this.last_name = stream.readString(exception);
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_decryptedMessageMediaEmpty extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageMediaDocument extends DecryptedMessageMedia {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = stream.readString(exception);
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
            stream.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaWebPage extends DecryptedMessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_decryptedMessageMediaPhoto extends DecryptedMessageMedia {
        public static int constructor = -NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
            this.caption = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
            stream.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaVideo extends DecryptedMessageMedia {
        public static int constructor = -NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
            this.caption = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
            stream.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaDocument_layer8 extends TL_decryptedMessageMediaDocument {
        public static int constructor = -NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.file_name = stream.readString(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeString(this.file_name);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer8 extends TL_decryptedMessageMediaVideo {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVenue extends DecryptedMessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.lat = stream.readDouble(exception);
            this._long = stream.readDouble(exception);
            this.title = stream.readString(exception);
            this.address = stream.readString(exception);
            this.provider = stream.readString(exception);
            this.venue_id = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.lat);
            stream.writeDouble(this._long);
            stream.writeString(this.title);
            stream.writeString(this.address);
            stream.writeString(this.provider);
            stream.writeString(this.venue_id);
        }
    }

    public static class TL_decryptedMessageMediaExternalDocument extends DecryptedMessageMedia {
        public static int constructor = -90853155;
        public PhotoSize thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.size = stream.readInt32(exception);
            this.thumb = PhotoSize.TLdeserialize(0, this.id, 0, stream, stream.readInt32(exception), exception);
            this.dc_id = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    DocumentAttribute object = DocumentAttribute.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.attributes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.date);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.size);
            this.thumb.serializeToStream(stream);
            stream.writeInt32(this.dc_id);
            stream.writeInt32(NUM);
            int count = this.attributes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((DocumentAttribute) this.attributes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer17 extends TL_decryptedMessageMediaVideo {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.duration = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeInt32(this.duration);
            stream.writeString(this.mime_type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaAudio_layer8 extends TL_decryptedMessageMediaAudio {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.duration = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.duration);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaPhoto_layer8 extends TL_decryptedMessageMediaPhoto {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.thumb = stream.readByteArray(exception);
            this.thumb_w = stream.readInt32(exception);
            this.thumb_h = stream.readInt32(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.thumb);
            stream.writeInt32(this.thumb_w);
            stream.writeInt32(this.thumb_h);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static abstract class EmojiKeyword extends TLObject {
        public static EmojiKeyword TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            EmojiKeyword result = null;
            switch (constructor) {
                case -709641735:
                    result = new TL_emojiKeyword();
                    break;
                case 594408994:
                    result = new TL_emojiKeywordDeleted();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in EmojiKeyword", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_emojiKeywordDeleted extends EmojiKeyword {
        public static int constructor = NUM;
        public ArrayList<String> emoticons = new ArrayList<>();
        public String keyword;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.keyword = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.emoticons.add(stream.readString(exception));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.keyword);
            stream.writeInt32(NUM);
            int count = this.emoticons.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.emoticons.get(a));
            }
        }
    }

    public static class TL_emojiKeyword extends EmojiKeyword {
        public static int constructor = -NUM;
        public ArrayList<String> emoticons = new ArrayList<>();
        public String keyword;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.keyword = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.emoticons.add(stream.readString(exception));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.keyword);
            stream.writeInt32(NUM);
            int count = this.emoticons.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.emoticons.get(a));
            }
        }
    }

    public static class TL_account_autoDownloadSettings extends TLObject {
        public static int constructor = NUM;
        public TL_autoDownloadSettings high;
        public TL_autoDownloadSettings low;
        public TL_autoDownloadSettings medium;

        public static TL_account_autoDownloadSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_autoDownloadSettings result = new TL_account_autoDownloadSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_autoDownloadSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.low = TL_autoDownloadSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.medium = TL_autoDownloadSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.high = TL_autoDownloadSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.low.serializeToStream(stream);
            this.medium.serializeToStream(stream);
            this.high.serializeToStream(stream);
        }
    }

    public static abstract class ChatParticipant extends TLObject {
        public int date;
        public long inviter_id;
        public long user_id;

        public static ChatParticipant TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChatParticipant result = null;
            switch (constructor) {
                case -1600962725:
                    result = new TL_chatParticipantAdmin();
                    break;
                case -1070776313:
                    result = new TL_chatParticipant();
                    break;
                case -925415106:
                    result = new TL_chatParticipant_layer131();
                    break;
                case -636267638:
                    result = new TL_chatParticipantCreator_layer131();
                    break;
                case -489233354:
                    result = new TL_chatParticipantAdmin_layer131();
                    break;
                case -462696732:
                    result = new TL_chatParticipantCreator();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChatParticipant", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_chatParticipantAdmin_layer131 extends TL_chatParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantAdmin extends ChatParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.inviter_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipant_layer131 extends TL_chatParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
            this.inviter_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
            stream.writeInt32((int) this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantCreator_layer131 extends TL_chatParticipantCreator {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static class TL_chatParticipant extends ChatParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.inviter_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.inviter_id);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantCreator extends ChatParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_availableReaction extends TLObject {
        public static int constructor = -NUM;
        public Document activate_animation;
        public Document appear_animation;
        public Document around_animation;
        public Document center_icon;
        public Document effect_animation;
        public int flags;
        public boolean inactive;
        public int positionInList;
        public String reaction;
        public Document select_animation;
        public Document static_icon;
        public String title;

        public static TL_availableReaction TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_availableReaction result = new TL_availableReaction();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_availableReaction", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.inactive = z;
            this.reaction = stream.readString(exception);
            this.title = stream.readString(exception);
            this.static_icon = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.appear_animation = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.select_animation = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.activate_animation = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.effect_animation = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.around_animation = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.center_icon = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.inactive ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.reaction);
            stream.writeString(this.title);
            this.static_icon.serializeToStream(stream);
            this.appear_animation.serializeToStream(stream);
            this.select_animation.serializeToStream(stream);
            this.activate_animation.serializeToStream(stream);
            this.effect_animation.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                this.around_animation.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.center_icon.serializeToStream(stream);
            }
        }
    }

    public static class TL_webAuthorization extends TLObject {
        public static int constructor = -NUM;
        public long bot_id;
        public String browser;
        public int date_active;
        public int date_created;
        public String domain;
        public long hash;
        public String ip;
        public String platform;
        public String region;

        public static TL_webAuthorization TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_webAuthorization result = new TL_webAuthorization();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_webAuthorization", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            this.bot_id = stream.readInt64(exception);
            this.domain = stream.readString(exception);
            this.browser = stream.readString(exception);
            this.platform = stream.readString(exception);
            this.date_created = stream.readInt32(exception);
            this.date_active = stream.readInt32(exception);
            this.ip = stream.readString(exception);
            this.region = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt64(this.bot_id);
            stream.writeString(this.domain);
            stream.writeString(this.browser);
            stream.writeString(this.platform);
            stream.writeInt32(this.date_created);
            stream.writeInt32(this.date_active);
            stream.writeString(this.ip);
            stream.writeString(this.region);
        }
    }

    public static abstract class InputSecureFile extends TLObject {
        public static InputSecureFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputSecureFile result = null;
            switch (constructor) {
                case 859091184:
                    result = new TL_inputSecureFileUploaded();
                    break;
                case 1399317950:
                    result = new TL_inputSecureFile();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputSecureFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputSecureFileUploaded extends InputSecureFile {
        public static int constructor = NUM;
        public byte[] file_hash;
        public long id;
        public String md5_checksum;
        public int parts;
        public byte[] secret;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.parts = stream.readInt32(exception);
            this.md5_checksum = stream.readString(exception);
            this.file_hash = stream.readByteArray(exception);
            this.secret = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.parts);
            stream.writeString(this.md5_checksum);
            stream.writeByteArray(this.file_hash);
            stream.writeByteArray(this.secret);
        }
    }

    public static class TL_inputSecureFile extends InputSecureFile {
        public static int constructor = NUM;
        public long access_hash;
        public long id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_postAddress extends TLObject {
        public static int constructor = NUM;
        public String city;
        public String country_iso2;
        public String post_code;
        public String state;
        public String street_line1;
        public String street_line2;

        public static TL_postAddress TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_postAddress result = new TL_postAddress();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_postAddress", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.street_line1 = stream.readString(exception);
            this.street_line2 = stream.readString(exception);
            this.city = stream.readString(exception);
            this.state = stream.readString(exception);
            this.country_iso2 = stream.readString(exception);
            this.post_code = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.street_line1);
            stream.writeString(this.street_line2);
            stream.writeString(this.city);
            stream.writeString(this.state);
            stream.writeString(this.country_iso2);
            stream.writeString(this.post_code);
        }
    }

    public static abstract class ChannelAdminLogEventAction extends TLObject {
        public static ChannelAdminLogEventAction TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            ChannelAdminLogEventAction result = null;
            switch (constructor) {
                case -1895328189:
                    result = new TL_channelAdminLogEventActionStopPoll();
                    break;
                case -1661470870:
                    result = new TL_channelAdminLogEventActionChangeAvailableReactions();
                    break;
                case -1347021750:
                    result = new TL_channelAdminLogEventActionParticipantJoinByRequest();
                    break;
                case -1312568665:
                    result = new TL_channelAdminLogEventActionChangeStickerSet();
                    break;
                case -886388890:
                    result = new TL_channelAdminLogEventActionToggleNoForwards();
                    break;
                case -714643696:
                    result = new TL_channelAdminLogEventActionParticipantToggleAdmin();
                    break;
                case -610299584:
                    result = new TL_channelAdminLogEventActionDiscardGroupCall();
                    break;
                case -484690728:
                    result = new TL_channelAdminLogEventActionParticipantInvite();
                    break;
                case -431740480:
                    result = new TL_channelAdminLogEventActionParticipantUnmute();
                    break;
                case -422036098:
                    result = new TL_channelAdminLogEventActionParticipantToggleBan();
                    break;
                case -421545947:
                    result = new TL_channelAdminLogEventActionChangeTitle();
                    break;
                case -384910503:
                    result = new TL_channelAdminLogEventActionExportedInviteEdit();
                    break;
                case -370660328:
                    result = new TL_channelAdminLogEventActionUpdatePinned();
                    break;
                case -124291086:
                    result = new TL_channelAdminLogEventActionParticipantLeave();
                    break;
                case -115071790:
                    result = new TL_channelAdminLogEventActionParticipantMute();
                    break;
                case -26672755:
                    result = new TL_channelAdminLogEventActionChangeTheme();
                    break;
                case 84703944:
                    result = new TL_channelAdminLogEventActionChangeLinkedChat();
                    break;
                case 241923758:
                    result = new TL_channelAdminLogEventActionChangeLocation();
                    break;
                case 405815507:
                    result = new TL_channelAdminLogEventActionParticipantJoin();
                    break;
                case 460916654:
                    result = new TL_channelAdminLogEventActionToggleInvites();
                    break;
                case 589338437:
                    result = new TL_channelAdminLogEventActionStartGroupCall();
                    break;
                case 648939889:
                    result = new TL_channelAdminLogEventActionToggleSignatures();
                    break;
                case 771095562:
                    result = new TL_channelAdminLogEventActionDefaultBannedRights();
                    break;
                case 1048537159:
                    result = new TL_channelAdminLogEventActionParticipantVolume();
                    break;
                case 1091179342:
                    result = new TL_channelAdminLogEventActionExportedInviteRevoke();
                    break;
                case 1121994683:
                    result = new TL_channelAdminLogEventActionDeleteMessage();
                    break;
                case 1129042607:
                    result = new TL_channelAdminLogEventActionChangePhoto();
                    break;
                case 1401984889:
                    result = new TL_channelAdminLogEventActionToggleSlowMode();
                    break;
                case 1427671598:
                    result = new TL_channelAdminLogEventActionChangeAbout();
                    break;
                case 1456906823:
                    result = new TL_channelAdminLogEventActionToggleGroupCallSetting();
                    break;
                case 1515256996:
                    result = new TL_channelAdminLogEventActionExportedInviteDelete();
                    break;
                case 1557846647:
                    result = new TL_channelAdminLogEventActionParticipantJoinByInvite();
                    break;
                case 1599903217:
                    result = new TL_channelAdminLogEventActionTogglePreHistoryHidden();
                    break;
                case 1783299128:
                    result = new TL_channelAdminLogEventActionChangeUsername();
                    break;
                case 1855199800:
                    result = new TL_channelAdminLogEventActionChangeHistoryTTL();
                    break;
                case 1889215493:
                    result = new TL_channelAdminLogEventActionEditMessage();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ChannelAdminLogEventAction", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_channelAdminLogEventActionDiscardGroupCall extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeStickerSet extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public InputStickerSet new_stickerset;
        public InputStickerSet prev_stickerset;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_stickerset = InputStickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_stickerset = InputStickerSet.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_stickerset.serializeToStream(stream);
            this.new_stickerset.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantMute extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public TL_groupCallParticipant participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participant = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionDefaultBannedRights extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_chatBannedRights new_banned_rights;
        public TL_chatBannedRights prev_banned_rights;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_banned_rights.serializeToStream(stream);
            this.new_banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeTheme extends ChannelAdminLogEventAction {
        public static int constructor = -26672755;
        public String new_value;
        public String prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readString(exception);
            this.new_value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prev_value);
            stream.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantLeave extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelAdminLogEventActionEditMessage extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public Message new_message;
        public Message prev_message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_message.serializeToStream(stream);
            this.new_message.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionExportedInviteEdit extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public TL_chatInviteExported new_invite;
        public TL_chatInviteExported prev_invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_invite.serializeToStream(stream);
            this.new_invite.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeUsername extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public String new_value;
        public String prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readString(exception);
            this.new_value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prev_value);
            stream.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionChangeLocation extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public ChannelLocation new_value;
        public ChannelLocation prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_value = ChannelLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_value.serializeToStream(stream);
            this.new_value.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangePhoto extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public Photo new_photo;
        public Photo prev_photo;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_photo.serializeToStream(stream);
            this.new_photo.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantToggleAdmin extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public ChannelParticipant new_participant;
        public ChannelParticipant prev_participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_participant.serializeToStream(stream);
            this.new_participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionToggleSlowMode extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public int new_value;
        public int prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readInt32(exception);
            this.new_value = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.prev_value);
            stream.writeInt32(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantJoinByInvite extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_chatInviteExported invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionExportedInviteRevoke extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_chatInviteExported invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionStopPoll extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public Message message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionExportedInviteDelete extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_chatInviteExported invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionToggleSignatures extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public boolean new_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.new_value = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantVolume extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_groupCallParticipant participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participant = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantToggleBan extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public ChannelParticipant new_participant;
        public ChannelParticipant prev_participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.new_participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.prev_participant.serializeToStream(stream);
            this.new_participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantJoin extends ChannelAdminLogEventAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channelAdminLogEventActionTogglePreHistoryHidden extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public boolean new_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.new_value = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantJoinByRequest extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public long approved_by;
        public ExportedChatInvite invite;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.invite = ExportedChatInvite.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.approved_by = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.invite.serializeToStream(stream);
            stream.writeInt64(this.approved_by);
        }
    }

    public static class TL_channelAdminLogEventActionUpdatePinned extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public Message message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionToggleGroupCallSetting extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public boolean join_muted;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.join_muted = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.join_muted);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantInvite extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public ChannelParticipant participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participant = ChannelParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeAbout extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public String new_value;
        public String prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readString(exception);
            this.new_value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prev_value);
            stream.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionStartGroupCall extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.call = TL_inputGroupCall.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeLinkedChat extends ChannelAdminLogEventAction {
        public static int constructor = 84703944;
        public long new_value;
        public long prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readInt64(exception);
            this.new_value = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.prev_value);
            stream.writeInt64(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionSendMessage extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public Message message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeAvailableReactions extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public ArrayList<String> new_value = new ArrayList<>();
        public ArrayList<String> prev_value = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.prev_value.add(stream.readString(exception));
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    for (int a2 = 0; a2 < count2; a2++) {
                        this.new_value.add(stream.readString(exception));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.prev_value.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.prev_value.get(a));
            }
            stream.writeInt32(NUM);
            int count2 = this.new_value.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                stream.writeString(this.new_value.get(a2));
            }
        }
    }

    public static class TL_channelAdminLogEventActionToggleInvites extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public boolean new_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.new_value = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantUnmute extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public TL_groupCallParticipant participant;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.participant = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionDeleteMessage extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public Message message;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.message = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_channelAdminLogEventActionChangeTitle extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public String new_value;
        public String prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readString(exception);
            this.new_value = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prev_value);
            stream.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionChangeHistoryTTL extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public int new_value;
        public int prev_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.prev_value = stream.readInt32(exception);
            this.new_value = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.prev_value);
            stream.writeInt32(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionToggleNoForwards extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;
        public boolean new_value;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.new_value = stream.readBool(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.new_value);
        }
    }

    public static abstract class InputWebFileLocation extends TLObject {
        public static InputWebFileLocation TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputWebFileLocation result = null;
            switch (constructor) {
                case -1625153079:
                    result = new TL_inputWebFileGeoPointLocation();
                    break;
                case -1036396922:
                    result = new TL_inputWebFileLocation();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputWebFileLocation", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputWebFileGeoPointLocation extends InputWebFileLocation {
        public static int constructor = -NUM;
        public long access_hash;
        public InputGeoPoint geo_point;
        public int h;
        public int scale;
        public int w;
        public int zoom;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.geo_point = InputGeoPoint.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.access_hash = stream.readInt64(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.zoom = stream.readInt32(exception);
            this.scale = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.geo_point.serializeToStream(stream);
            stream.writeInt64(this.access_hash);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.zoom);
            stream.writeInt32(this.scale);
        }
    }

    public static class TL_inputWebFileLocation extends InputWebFileLocation {
        public static int constructor = -NUM;
        public long access_hash;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class PeerLocated extends TLObject {
        public static PeerLocated TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PeerLocated result = null;
            switch (constructor) {
                case -901375139:
                    result = new TL_peerLocated();
                    break;
                case -118740917:
                    result = new TL_peerSelfLocated();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PeerLocated", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_peerSelfLocated extends PeerLocated {
        public static int constructor = -NUM;
        public int expires;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.expires = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.expires);
        }
    }

    public static class TL_peerLocated extends PeerLocated {
        public static int constructor = -NUM;
        public int distance;
        public int expires;
        public Peer peer;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.expires = stream.readInt32(exception);
            this.distance = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.expires);
            stream.writeInt32(this.distance);
        }
    }

    public static class TL_statsPercentValue extends TLObject {
        public static int constructor = -NUM;
        public double part;
        public double total;

        public static TL_statsPercentValue TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_statsPercentValue result = new TL_statsPercentValue();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_statsPercentValue", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.part = stream.readDouble(exception);
            this.total = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeDouble(this.part);
            stream.writeDouble(this.total);
        }
    }

    public static class TL_autoDownloadSettings extends TLObject {
        public static int constructor = -NUM;
        public boolean audio_preload_next;
        public boolean disabled;
        public int file_size_max;
        public int flags;
        public boolean phonecalls_less_data;
        public int photo_size_max;
        public boolean video_preload_large;
        public int video_size_max;
        public int video_upload_maxbitrate;

        public static TL_autoDownloadSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_autoDownloadSettings result = new TL_autoDownloadSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_autoDownloadSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.disabled = (readInt32 & 1) != 0;
            this.video_preload_large = (readInt32 & 2) != 0;
            this.audio_preload_next = (readInt32 & 4) != 0;
            if ((readInt32 & 8) != 0) {
                z = true;
            }
            this.phonecalls_less_data = z;
            this.photo_size_max = stream.readInt32(exception);
            this.video_size_max = stream.readInt32(exception);
            this.file_size_max = stream.readInt32(exception);
            this.video_upload_maxbitrate = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.disabled ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.video_preload_large ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.audio_preload_next ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.phonecalls_less_data ? i3 | 8 : i3 & -9;
            this.flags = i4;
            stream.writeInt32(i4);
            stream.writeInt32(this.photo_size_max);
            stream.writeInt32(this.video_size_max);
            stream.writeInt32(this.file_size_max);
            stream.writeInt32(this.video_upload_maxbitrate);
        }
    }

    public static class TL_account_sentEmailCode extends TLObject {
        public static int constructor = -NUM;
        public String email_pattern;
        public int length;

        public static TL_account_sentEmailCode TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_sentEmailCode result = new TL_account_sentEmailCode();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_sentEmailCode", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.email_pattern = stream.readString(exception);
            this.length = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.email_pattern);
            stream.writeInt32(this.length);
        }
    }

    public static class TL_messages_inactiveChats extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<Integer> dates = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_inactiveChats TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_inactiveChats result = new TL_messages_inactiveChats();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_inactiveChats", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.dates.add(Integer.valueOf(stream.readInt32(exception)));
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.chats.add(object);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object2 != null) {
                                this.users.add(object2);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.dates.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.dates.get(a).intValue());
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static class TL_channelAdminRights_layer92 extends TLObject {
        public static int constructor = NUM;
        public boolean add_admins;
        public boolean ban_users;
        public boolean change_info;
        public boolean delete_messages;
        public boolean edit_messages;
        public int flags;
        public boolean invite_users;
        public boolean manage_call;
        public boolean pin_messages;
        public boolean post_messages;

        public static TL_channelAdminRights_layer92 TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channelAdminRights_layer92 result = new TL_channelAdminRights_layer92();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminRights_layer92", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.change_info = (readInt32 & 1) != 0;
            this.post_messages = (readInt32 & 2) != 0;
            this.edit_messages = (readInt32 & 4) != 0;
            this.delete_messages = (readInt32 & 8) != 0;
            this.ban_users = (readInt32 & 16) != 0;
            this.invite_users = (readInt32 & 32) != 0;
            this.pin_messages = (readInt32 & 128) != 0;
            this.add_admins = (readInt32 & 512) != 0;
            if ((readInt32 & 1024) != 0) {
                z = true;
            }
            this.manage_call = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.change_info ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.post_messages ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.edit_messages ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.delete_messages ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.ban_users ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.invite_users ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.pin_messages ? i6 | 128 : i6 & -129;
            this.flags = i7;
            int i8 = this.add_admins ? i7 | 512 : i7 & -513;
            this.flags = i8;
            int i9 = this.manage_call ? i8 | 1024 : i8 & -1025;
            this.flags = i9;
            stream.writeInt32(i9);
        }
    }

    public static abstract class Chat extends TLObject {
        public long access_hash;
        public TL_chatAdminRights admin_rights;
        public TL_channelAdminRights_layer92 admin_rights_layer92;
        public TL_chatBannedRights banned_rights;
        public TL_channelBannedRights_layer92 banned_rights_layer92;
        public boolean broadcast;
        public boolean call_active;
        public boolean call_not_empty;
        public boolean creator;
        public int date;
        public boolean deactivated;
        public TL_chatBannedRights default_banned_rights;
        public boolean explicit_content;
        public boolean fake;
        public int flags;
        public boolean gigagroup;
        public boolean has_geo;
        public boolean has_link;
        public long id;
        public boolean kicked;
        public boolean left;
        public boolean megagroup;
        public InputChannel migrated_to;
        public boolean min;
        public boolean moderator;
        public boolean noforwards;
        public int participants_count;
        public ChatPhoto photo;
        public boolean restricted;
        public ArrayList<TL_restrictionReason> restriction_reason = new ArrayList<>();
        public boolean scam;
        public boolean signatures;
        public boolean slowmode_enabled;
        public String title;
        public int until_date;
        public String username;
        public boolean verified;
        public int version;

        public static Chat TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Chat result = null;
            switch (constructor) {
                case -2107528095:
                    result = new TL_channel();
                    break;
                case -2059962289:
                    result = new TL_channelForbidden_layer67();
                    break;
                case -1683826688:
                    result = new TL_chatEmpty_layer131();
                    break;
                case -1588737454:
                    result = new TL_channel_layer67();
                    break;
                case -930515796:
                    result = new TL_channel_layer92();
                    break;
                case -753232354:
                    result = new TL_channel_layer131();
                    break;
                case -652419756:
                    result = new TL_chat_layer92();
                    break;
                case -83047359:
                    result = new TL_chatForbidden_old();
                    break;
                case 120753115:
                    result = new TL_chatForbidden_layer131();
                    break;
                case 213142300:
                    result = new TL_channel_layer72();
                    break;
                case 399807445:
                    result = new TL_channelForbidden();
                    break;
                case 681420594:
                    result = new TL_channelForbidden_layer131();
                    break;
                case 693512293:
                    result = new TL_chatEmpty();
                    break;
                case 763724588:
                    result = new TL_channelForbidden_layer52();
                    break;
                case 1004149726:
                    result = new TL_chat_layer131();
                    break;
                case 1103884886:
                    result = new TL_chat();
                    break;
                case 1158377749:
                    result = new TL_channel_layer77();
                    break;
                case 1260090630:
                    result = new TL_channel_layer48();
                    break;
                case 1307772980:
                    result = new TL_channel_layer104();
                    break;
                case 1704108455:
                    result = new TL_chatForbidden();
                    break;
                case 1737397639:
                    result = new TL_channel_old();
                    break;
                case 1855757255:
                    result = new TL_chat_old();
                    break;
                case 1930607688:
                    result = new TL_chat_old2();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Chat", new Object[]{Integer.valueOf(constructor)}));
        }

        protected static TL_chatBannedRights mergeBannedRights(TL_channelBannedRights_layer92 rights) {
            if (rights == null) {
                return null;
            }
            TL_chatBannedRights newRights = new TL_chatBannedRights();
            newRights.view_messages = rights.view_messages;
            newRights.send_messages = rights.send_messages;
            newRights.send_media = rights.send_media;
            newRights.send_stickers = rights.send_stickers;
            newRights.send_gifs = rights.send_gifs;
            newRights.send_games = rights.send_games;
            newRights.send_inline = rights.send_inline;
            newRights.embed_links = rights.embed_links;
            newRights.send_polls = rights.send_media;
            newRights.change_info = true;
            newRights.invite_users = true;
            newRights.pin_messages = true;
            newRights.until_date = rights.until_date;
            return newRights;
        }

        protected static TL_chatAdminRights mergeAdminRights(TL_channelAdminRights_layer92 rights) {
            if (rights == null) {
                return null;
            }
            TL_chatAdminRights newRights = new TL_chatAdminRights();
            newRights.change_info = rights.change_info;
            newRights.post_messages = rights.post_messages;
            newRights.edit_messages = rights.edit_messages;
            newRights.delete_messages = rights.delete_messages;
            newRights.ban_users = rights.ban_users;
            newRights.invite_users = rights.invite_users;
            newRights.pin_messages = rights.pin_messages;
            newRights.add_admins = rights.add_admins;
            return newRights;
        }
    }

    public static class TL_chatForbidden_old extends TL_chatForbidden {
        public static int constructor = -83047359;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
            stream.writeInt32(this.date);
        }
    }

    public static class TL_chat_old2 extends TL_chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.deactivated = z;
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_chat extends Chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.deactivated = (this.flags & 32) != 0;
            this.call_active = (this.flags & 8388608) != 0;
            this.call_not_empty = (this.flags & 16777216) != 0;
            if ((this.flags & 33554432) == 0) {
                z = false;
            }
            this.noforwards = z;
            this.id = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 64) != 0) {
                this.migrated_to = InputChannel.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            this.flags = this.call_active ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.call_not_empty ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.noforwards ? this.flags | 33554432 : this.flags & -33554433;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeString(this.title);
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 64) != 0) {
                this.migrated_to.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights.serializeToStream(stream);
            }
        }
    }

    public static class TL_chat_layer131 extends TL_chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.deactivated = (this.flags & 32) != 0;
            this.call_active = (this.flags & 8388608) != 0;
            if ((this.flags & 16777216) == 0) {
                z = false;
            }
            this.call_not_empty = z;
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 64) != 0) {
                this.migrated_to = InputChannel.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            this.flags = this.call_active ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.call_not_empty ? this.flags | 16777216 : this.flags & -16777217;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 64) != 0) {
                this.migrated_to.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights.serializeToStream(stream);
            }
        }
    }

    public static class TL_channelForbidden extends Chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.broadcast = (this.flags & 32) != 0;
            if ((this.flags & 256) == 0) {
                z = false;
            }
            this.megagroup = z;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 65536) != 0) {
                this.until_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            if ((this.flags & 65536) != 0) {
                stream.writeInt32(this.until_date);
            }
        }
    }

    public static class TL_channelForbidden_layer131 extends TL_channelForbidden {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.broadcast = (this.flags & 32) != 0;
            if ((this.flags & 256) == 0) {
                z = false;
            }
            this.megagroup = z;
            this.id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 65536) != 0) {
                this.until_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            if ((this.flags & 65536) != 0) {
                stream.writeInt32(this.until_date);
            }
        }
    }

    public static class TL_channelForbidden_layer67 extends TL_channelForbidden {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.broadcast = (this.flags & 32) != 0;
            if ((this.flags & 256) == 0) {
                z = false;
            }
            this.megagroup = z;
            this.id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
        }
    }

    public static class TL_channel_layer48 extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            if ((this.flags & 2048) == 0) {
                z = false;
            }
            this.signatures = z;
            this.id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
        }
    }

    public static class TL_channelForbidden_layer52 extends TL_channelForbidden {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
        }
    }

    public static class TL_channel extends Chat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            this.min = (this.flags & 4096) != 0;
            this.scam = (this.flags & 524288) != 0;
            this.has_link = (this.flags & 1048576) != 0;
            this.has_geo = (this.flags & 2097152) != 0;
            this.slowmode_enabled = (this.flags & 4194304) != 0;
            this.call_active = (this.flags & 8388608) != 0;
            this.call_not_empty = (this.flags & 16777216) != 0;
            this.fake = (this.flags & 33554432) != 0;
            this.gigagroup = (this.flags & 67108864) != 0;
            this.noforwards = (this.flags & NUM) != 0;
            this.id = stream.readInt64(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_restrictionReason object = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.restriction_reason.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.scam ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.has_link ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.has_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.slowmode_enabled ? this.flags | 4194304 : this.flags & -4194305;
            this.flags = this.call_active ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.call_not_empty ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.fake ? this.flags | 33554432 : this.flags & -33554433;
            this.flags = this.gigagroup ? this.flags | 67108864 : this.flags & -67108865;
            this.flags = this.noforwards ? this.flags | NUM : this.flags & -NUM;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            if ((this.flags & 512) != 0) {
                stream.writeInt32(NUM);
                int count = this.restriction_reason.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_chatForbidden extends Chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeString(this.title);
        }
    }

    public static class TL_chatForbidden_layer131 extends TL_chatForbidden {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
        }
    }

    public static class TL_channel_layer67 extends TL_channel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z = false;
            }
            this.min = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
        }
    }

    public static class TL_channel_old extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            if ((this.flags & 512) == 0) {
                z = false;
            }
            this.explicit_content = z;
            this.id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.explicit_content ? this.flags | 512 : this.flags & -513;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_chat_old extends TL_chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.left = stream.readBool(exception);
            this.version = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            stream.writeInt32(this.date);
            stream.writeBool(this.left);
            stream.writeInt32(this.version);
        }
    }

    public static class TL_channel_layer131 extends TL_channel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            this.min = (this.flags & 4096) != 0;
            this.scam = (this.flags & 524288) != 0;
            this.has_link = (this.flags & 1048576) != 0;
            this.has_geo = (this.flags & 2097152) != 0;
            this.slowmode_enabled = (this.flags & 4194304) != 0;
            this.call_active = (this.flags & 8388608) != 0;
            this.call_not_empty = (this.flags & 16777216) != 0;
            this.fake = (this.flags & 33554432) != 0;
            this.gigagroup = (this.flags & 67108864) != 0;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_restrictionReason object = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.restriction_reason.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.scam ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.has_link ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.has_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.slowmode_enabled ? this.flags | 4194304 : this.flags & -4194305;
            this.flags = this.call_active ? this.flags | 8388608 : this.flags & -8388609;
            this.flags = this.call_not_empty ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.fake ? this.flags | 33554432 : this.flags & -33554433;
            this.flags = this.gigagroup ? this.flags | 67108864 : this.flags & -67108865;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeInt32(NUM);
                int count = this.restriction_reason.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_channel_layer104 extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            this.min = (this.flags & 4096) != 0;
            this.scam = (this.flags & 524288) != 0;
            this.has_link = (this.flags & 1048576) != 0;
            this.has_geo = (this.flags & 2097152) != 0;
            if ((this.flags & 4194304) == 0) {
                z = false;
            }
            this.slowmode_enabled = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights = TL_chatBannedRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.scam ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.has_link ? this.flags | 1048576 : this.flags & -1048577;
            this.flags = this.has_geo ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.slowmode_enabled ? this.flags | 4194304 : this.flags & -4194305;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.default_banned_rights.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_channelParticipantBanned_layer92 extends TL_channelParticipantBanned {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.left = z;
            this.peer = new TL_peerUser();
            this.peer.user_id = (long) stream.readInt32(exception);
            this.kicked_by = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.banned_rights = Chat.mergeBannedRights(this.banned_rights_layer92);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.left ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.peer.user_id);
            stream.writeInt32((int) this.kicked_by);
            stream.writeInt32(this.date);
            this.banned_rights_layer92.serializeToStream(stream);
        }
    }

    public static class TL_channel_layer77 extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z = false;
            }
            this.min = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.admin_rights = mergeAdminRights(this.admin_rights_layer92);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.banned_rights = mergeBannedRights(this.banned_rights_layer92);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_channel_layer72 extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z = false;
            }
            this.min = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.admin_rights = mergeAdminRights(this.admin_rights_layer92);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.banned_rights = mergeBannedRights(this.banned_rights_layer92);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92.serializeToStream(stream);
            }
        }
    }

    public static class TL_channel_layer92 extends TL_channel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z = false;
            }
            this.min = z;
            this.id = (long) stream.readInt32(exception);
            if ((this.flags & 8192) != 0) {
                this.access_hash = stream.readInt64(exception);
            }
            this.title = stream.readString(exception);
            if ((this.flags & 64) != 0) {
                this.username = stream.readString(exception);
            }
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                stream.readString(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.admin_rights = mergeAdminRights(this.admin_rights_layer92);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.banned_rights = mergeBannedRights(this.banned_rights_layer92);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.access_hash);
            }
            stream.writeString(this.title);
            if ((this.flags & 64) != 0) {
                stream.writeString(this.username);
            }
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                stream.writeString("");
            }
            if ((this.flags & 16384) != 0) {
                this.admin_rights_layer92.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights_layer92.serializeToStream(stream);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_chat_layer92 extends TL_chat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.deactivated = z;
            this.id = (long) stream.readInt32(exception);
            this.title = stream.readString(exception);
            this.photo = ChatPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.participants_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.version = stream.readInt32(exception);
            if ((this.flags & 64) != 0) {
                this.migrated_to = InputChannel.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32((int) this.id);
            stream.writeString(this.title);
            this.photo.serializeToStream(stream);
            stream.writeInt32(this.participants_count);
            stream.writeInt32(this.date);
            stream.writeInt32(this.version);
            if ((this.flags & 64) != 0) {
                this.migrated_to.serializeToStream(stream);
            }
        }
    }

    public static class TL_restrictionReason extends TLObject {
        public static int constructor = -NUM;
        public String platform;
        public String reason;
        public String text;

        public static TL_restrictionReason TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_restrictionReason result = new TL_restrictionReason();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_restrictionReason", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.platform = stream.readString(exception);
            this.reason = stream.readString(exception);
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.platform);
            stream.writeString(this.reason);
            stream.writeString(this.text);
        }
    }

    public static abstract class StickerSet extends TLObject {
        public long access_hash;
        public boolean animated;
        public boolean archived;
        public int count;
        public int flags;
        public boolean gifs;
        public int hash;
        public long id;
        public boolean installed;
        public int installed_date;
        public boolean masks;
        public boolean official;
        public String short_name;
        public int thumb_dc_id;
        public int thumb_version;
        public ArrayList<PhotoSize> thumbs = new ArrayList<>();
        public String title;

        public static StickerSet TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            StickerSet result = null;
            switch (constructor) {
                case -1482409193:
                    result = new TL_stickerSet_old();
                    break;
                case -852477119:
                    result = new TL_stickerSet_layer75();
                    break;
                case -673242758:
                    result = new TL_stickerSet();
                    break;
                case -290164953:
                    result = new TL_stickerSet_layer121();
                    break;
                case 1088567208:
                    result = new TL_stickerSet_layer126();
                    break;
                case 1434820921:
                    result = new TL_stickerSet_layer96();
                    break;
                case 1787870391:
                    result = new TL_stickerSet_layer97();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in StickerSet", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_stickerSet_old extends TL_stickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
        }
    }

    public static class TL_stickerSet extends StickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            this.masks = (this.flags & 8) != 0;
            this.animated = (this.flags & 32) != 0;
            this.gifs = (this.flags & 64) != 0;
            if ((this.flags & 1) != 0) {
                this.installed_date = stream.readInt32(exception);
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            if ((this.flags & 16) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        PhotoSize object = PhotoSize.TLdeserialize(0, 0, this.id, stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.thumbs.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                this.thumb_dc_id = stream.readInt32(exception);
            }
            if ((this.flags & 16) != 0) {
                this.thumb_version = stream.readInt32(exception);
            }
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            this.flags = this.animated ? this.flags | 32 : this.flags & -33;
            this.flags = this.gifs ? this.flags | 64 : this.flags & -65;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.installed_date);
            }
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count = this.thumbs.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((PhotoSize) this.thumbs.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.thumb_dc_id);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.thumb_version);
            }
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_layer96 extends TL_stickerSet {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            if ((this.flags & 8) != 0) {
                z = true;
            }
            this.masks = z;
            if ((this.flags & 1) != 0) {
                this.installed_date = stream.readInt32(exception);
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.installed_date);
            }
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_layer97 extends TL_stickerSet {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            PhotoSize thumb;
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            if ((this.flags & 8) != 0) {
                z = true;
            }
            this.masks = z;
            if ((this.flags & 1) != 0) {
                this.installed_date = stream.readInt32(exception);
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            if (!((this.flags & 16) == 0 || (thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception)) == null)) {
                this.thumbs.add(thumb);
            }
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.installed_date);
            }
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            if ((this.flags & 16) != 0) {
                ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            }
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_layer126 extends TL_stickerSet {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            this.masks = (this.flags & 8) != 0;
            this.animated = (this.flags & 32) != 0;
            if ((this.flags & 1) != 0) {
                this.installed_date = stream.readInt32(exception);
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            if ((this.flags & 16) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        PhotoSize object = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.thumbs.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 16) != 0) {
                this.thumb_dc_id = stream.readInt32(exception);
            }
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            this.flags = this.animated ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.installed_date);
            }
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(NUM);
                int count = this.thumbs.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((PhotoSize) this.thumbs.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.thumb_dc_id);
            }
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_layer121 extends TL_stickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            PhotoSize thumb;
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            this.masks = (this.flags & 8) != 0;
            if ((this.flags & 32) != 0) {
                z = true;
            }
            this.animated = z;
            if ((this.flags & 1) != 0) {
                this.installed_date = stream.readInt32(exception);
            }
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            if (!((this.flags & 16) == 0 || (thumb = PhotoSize.TLdeserialize(0, 0, 0, stream, stream.readInt32(exception), exception)) == null)) {
                this.thumbs.add(thumb);
            }
            if ((this.flags & 16) != 0) {
                this.thumb_dc_id = stream.readInt32(exception);
            }
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            this.flags = this.animated ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.installed_date);
            }
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            if ((this.flags & 16) != 0) {
                ((PhotoSize) this.thumbs.get(0)).serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.thumb_dc_id);
            }
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_layer75 extends TL_stickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.installed = (this.flags & 1) != 0;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            if ((this.flags & 8) == 0) {
                z = false;
            }
            this.masks = z;
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.title = stream.readString(exception);
            this.short_name = stream.readString(exception);
            this.count = stream.readInt32(exception);
            this.hash = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.installed ? this.flags | 1 : this.flags & -2;
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            stream.writeInt32(this.count);
            stream.writeInt32(this.hash);
        }
    }

    public static abstract class storage_FileType extends TLObject {
        public static storage_FileType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            storage_FileType result = null;
            switch (constructor) {
                case -1432995067:
                    result = new TL_storage_fileUnknown();
                    break;
                case -1373745011:
                    result = new TL_storage_filePdf();
                    break;
                case -1278304028:
                    result = new TL_storage_fileMp4();
                    break;
                case -891180321:
                    result = new TL_storage_fileGif();
                    break;
                case 8322574:
                    result = new TL_storage_fileJpeg();
                    break;
                case 172975040:
                    result = new TL_storage_filePng();
                    break;
                case 276907596:
                    result = new TL_storage_fileWebp();
                    break;
                case 1086091090:
                    result = new TL_storage_filePartial();
                    break;
                case 1258941372:
                    result = new TL_storage_fileMov();
                    break;
                case 1384777335:
                    result = new TL_storage_fileMp3();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in storage_FileType", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_storage_fileUnknown extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp4 extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileWebp extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePng extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileGif extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePdf extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp3 extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileJpeg extends storage_FileType {
        public static int constructor = 8322574;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMov extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePartial extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class auth_CodeType extends TLObject {
        public static auth_CodeType TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            auth_CodeType result = null;
            switch (constructor) {
                case -702884114:
                    result = new TL_auth_codeTypeMissedCall();
                    break;
                case 577556219:
                    result = new TL_auth_codeTypeFlashCall();
                    break;
                case 1923290508:
                    result = new TL_auth_codeTypeSms();
                    break;
                case 1948046307:
                    result = new TL_auth_codeTypeCall();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_auth_codeTypeSms extends auth_CodeType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeCall extends auth_CodeType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeFlashCall extends auth_CodeType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeMissedCall extends auth_CodeType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class messages_TranslatedText extends TLObject {
        public static messages_TranslatedText TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_TranslatedText result = null;
            switch (constructor) {
                case -1575684144:
                    result = new TL_messages_translateResultText();
                    break;
                case 1741309751:
                    result = new TL_messages_translateNoResult();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_TranslatedText", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_translateNoResult extends messages_TranslatedText {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_translateResultText extends messages_TranslatedText {
        public static int constructor = -NUM;
        public String text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
        }
    }

    public static abstract class MessagesFilter extends TLObject {
        public int flags;
        public boolean missed;

        public static MessagesFilter TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessagesFilter result = null;
            switch (constructor) {
                case -2134272152:
                    result = new TL_inputMessagesFilterPhoneCalls();
                    break;
                case -1777752804:
                    result = new TL_inputMessagesFilterPhotos();
                    break;
                case -1629621880:
                    result = new TL_inputMessagesFilterDocument();
                    break;
                case -1614803355:
                    result = new TL_inputMessagesFilterVideo();
                    break;
                case -1253451181:
                    result = new TL_inputMessagesFilterRoundVideo();
                    break;
                case -1040652646:
                    result = new TL_inputMessagesFilterMyMentions();
                    break;
                case -648121413:
                    result = new TL_inputMessagesFilterPhotoVideoDocuments();
                    break;
                case -530392189:
                    result = new TL_inputMessagesFilterContacts();
                    break;
                case -419271411:
                    result = new TL_inputMessagesFilterGeo();
                    break;
                case -3644025:
                    result = new TL_inputMessagesFilterGif();
                    break;
                case 464520273:
                    result = new TL_inputMessagesFilterPinned();
                    break;
                case 928101534:
                    result = new TL_inputMessagesFilterMusic();
                    break;
                case 975236280:
                    result = new TL_inputMessagesFilterChatPhotos();
                    break;
                case 1358283666:
                    result = new TL_inputMessagesFilterVoice();
                    break;
                case 1458172132:
                    result = new TL_inputMessagesFilterPhotoVideo();
                    break;
                case 1474492012:
                    result = new TL_inputMessagesFilterEmpty();
                    break;
                case 2054952868:
                    result = new TL_inputMessagesFilterRoundVoice();
                    break;
                case 2129714567:
                    result = new TL_inputMessagesFilterUrl();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessagesFilter", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputMessagesFilterGif extends MessagesFilter {
        public static int constructor = -3644025;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterMusic extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterChatPhotos extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotos extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterUrl extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterDocument extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideo extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideoDocuments extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterGeo extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPinned extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterMyMentions extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterRoundVoice extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVoice extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterContacts extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVideo extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhoneCalls extends MessagesFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            if ((this.flags & 1) == 0) {
                z = false;
            }
            this.missed = z;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.missed ? this.flags | 1 : this.flags & -2;
            stream.writeInt32(this.flags);
        }
    }

    public static class TL_inputMessagesFilterEmpty extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterRoundVideo extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_phone_groupParticipants extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public String next_offset;
        public ArrayList<TL_groupCallParticipant> participants = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();
        public int version;

        public static TL_phone_groupParticipants TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_groupParticipants result = new TL_phone_groupParticipants();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupParticipants", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_groupCallParticipant object = TL_groupCallParticipant.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.participants.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.next_offset = stream.readString(exception);
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count4 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count4) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        this.version = stream.readInt32(exception);
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.participants.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.participants.get(a).serializeToStream(stream);
            }
            stream.writeString(this.next_offset);
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a3 = 0; a3 < count4; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(this.version);
        }
    }

    public static abstract class PageListOrderedItem extends TLObject {
        public static PageListOrderedItem TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PageListOrderedItem result = null;
            switch (constructor) {
                case -1730311882:
                    result = new TL_pageListOrderedItemBlocks();
                    break;
                case 1577484359:
                    result = new TL_pageListOrderedItemText();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PageListOrderedItem", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pageListOrderedItemText extends PageListOrderedItem {
        public static int constructor = NUM;
        public String num;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.num = stream.readString(exception);
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.num);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_pageListOrderedItemBlocks extends PageListOrderedItem {
        public static int constructor = -NUM;
        public ArrayList<PageBlock> blocks = new ArrayList<>();
        public String num;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.num = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.num);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.blocks.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_messageEmpty extends TLObject {
        public static int constructor = NUM;

        public static TL_messages_messageEmpty TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_messageEmpty result = new TL_messages_messageEmpty();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_secureCredentialsEncrypted extends TLObject {
        public static int constructor = NUM;
        public byte[] data;
        public byte[] hash;
        public byte[] secret;

        public static TL_secureCredentialsEncrypted TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_secureCredentialsEncrypted result = new TL_secureCredentialsEncrypted();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_secureCredentialsEncrypted", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.data = stream.readByteArray(exception);
            this.hash = stream.readByteArray(exception);
            this.secret = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.data);
            stream.writeByteArray(this.hash);
            stream.writeByteArray(this.secret);
        }
    }

    public static abstract class MessageFwdHeader extends TLObject {
        public int channel_post;
        public int date;
        public int flags;
        public Peer from_id;
        public String from_name;
        public boolean imported;
        public String post_author;
        public String psa_type;
        public int saved_from_msg_id;
        public Peer saved_from_peer;

        public static MessageFwdHeader TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageFwdHeader result = null;
            switch (constructor) {
                case -947462709:
                    result = new TL_messageFwdHeader_layer68();
                    break;
                case -332168592:
                    result = new TL_messageFwdHeader_layer112();
                    break;
                case -85986132:
                    result = new TL_messageFwdHeader_layer72();
                    break;
                case 893020267:
                    result = new TL_messageFwdHeader_layer118();
                    break;
                case 1436466797:
                    result = new TL_messageFwdHeader_layer96();
                    break;
                case 1601666510:
                    result = new TL_messageFwdHeader();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageFwdHeader", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messageFwdHeader_layer68 extends TL_messageFwdHeader {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.from_id.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
        }
    }

    public static class TL_messageFwdHeader extends MessageFwdHeader {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.imported = (this.flags & 128) != 0;
            if ((this.flags & 1) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32) != 0) {
                this.from_name = stream.readString(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.psa_type = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.imported ? this.flags | 128 : this.flags & -129;
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.from_id.serializeToStream(stream);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.from_name);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.saved_from_msg_id);
            }
            if ((this.flags & 64) != 0) {
                stream.writeString(this.psa_type);
            }
        }
    }

    public static class TL_messageFwdHeader_layer118 extends TL_messageFwdHeader {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 32) != 0) {
                this.from_name = stream.readString(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_msg_id = stream.readInt32(exception);
            }
            if ((this.flags & 64) != 0) {
                this.psa_type = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.from_name);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.from_id.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.saved_from_msg_id);
            }
            if ((this.flags & 64) != 0) {
                stream.writeString(this.psa_type);
            }
        }
    }

    public static class TL_messageFwdHeader_layer112 extends TL_messageFwdHeader {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 32) != 0) {
                this.from_name = stream.readString(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_msg_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            if ((this.flags & 32) != 0) {
                stream.writeString(this.from_name);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.from_id.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.saved_from_msg_id);
            }
        }
    }

    public static class TL_messageFwdHeader_layer72 extends TL_messageFwdHeader {
        public static int constructor = -85986132;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.from_id.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.post_author);
            }
        }
    }

    public static class TL_messageFwdHeader_layer96 extends TL_messageFwdHeader {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.from_id = new TL_peerChannel();
                this.from_id.channel_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_msg_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            stream.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                stream.writeInt32((int) this.from_id.channel_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.saved_from_msg_id);
            }
        }
    }

    public static abstract class FileLocation extends TLObject {
        public int dc_id;
        public byte[] file_reference;
        public byte[] iv;
        public byte[] key;
        public int local_id;
        public long secret;
        public long volume_id;

        public static FileLocation TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            FileLocation result = null;
            switch (constructor) {
                case -1132476723:
                    result = new TL_fileLocationToBeDeprecated();
                    break;
                case 152900075:
                    result = new TL_fileLocation_layer97();
                    break;
                case 1406570614:
                    result = new TL_fileLocation_layer82();
                    break;
                case 1431655764:
                    result = new TL_fileEncryptedLocation();
                    break;
                case 2086234950:
                    result = new TL_fileLocationUnavailable();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in FileLocation", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_fileLocationUnavailable extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
            this.secret = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
            stream.writeInt64(this.secret);
        }
    }

    public static class TL_fileLocation_layer82 extends TL_fileLocation_layer97 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
            this.secret = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
            stream.writeInt64(this.secret);
        }
    }

    public static class TL_fileLocation_layer97 extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
            this.secret = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
            stream.writeInt64(this.secret);
            stream.writeByteArray(this.file_reference);
        }
    }

    public static class TL_fileLocationToBeDeprecated extends FileLocation {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
        }
    }

    public static class TL_fileEncryptedLocation extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.volume_id = stream.readInt64(exception);
            this.local_id = stream.readInt32(exception);
            this.secret = stream.readInt64(exception);
            this.key = stream.readByteArray(exception);
            this.iv = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeInt64(this.volume_id);
            stream.writeInt32(this.local_id);
            stream.writeInt64(this.secret);
            stream.writeByteArray(this.key);
            stream.writeByteArray(this.iv);
        }
    }

    public static abstract class messages_SavedGifs extends TLObject {
        public ArrayList<Document> gifs = new ArrayList<>();
        public long hash;

        public static messages_SavedGifs TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_SavedGifs result = null;
            switch (constructor) {
                case -2069878259:
                    result = new TL_messages_savedGifs();
                    break;
                case -402498398:
                    result = new TL_messages_savedGifsNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_SavedGifs", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_savedGifsNotModified extends messages_SavedGifs {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_savedGifs extends messages_SavedGifs {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.gifs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.gifs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Document) this.gifs.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class PhotoSize extends TLObject {
        public byte[] bytes;
        public int h;
        public FileLocation location;
        public int size;
        public String type;
        public int w;

        public static PhotoSize TLdeserialize(long photo_id, long document_id, long sticker_set_id, AbstractSerializedData stream, int constructor, boolean exception) {
            PhotoSize result = null;
            switch (constructor) {
                case -668906175:
                    result = new TL_photoPathSize();
                    break;
                case -525288402:
                    result = new TL_photoStrippedSize();
                    break;
                case -374917894:
                    result = new TL_photoCachedSize_layer127();
                    break;
                case -96535659:
                    result = new TL_photoSizeProgressive();
                    break;
                case 35527382:
                    result = new TL_photoCachedSize();
                    break;
                case 236446268:
                    result = new TL_photoSizeEmpty();
                    break;
                case 1520986705:
                    result = new TL_photoSizeProgressive_layer127();
                    break;
                case 1976012384:
                    result = new TL_photoSize();
                    break;
                case 2009052699:
                    result = new TL_photoSize_layer127();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                    if (result.location == null) {
                        if (TextUtils.isEmpty(result.type) || (photo_id == 0 && document_id == 0 && sticker_set_id == 0)) {
                            result.location = new TL_fileLocationUnavailable();
                        } else {
                            TL_fileLocationToBeDeprecated tL_fileLocationToBeDeprecated = new TL_fileLocationToBeDeprecated();
                            result.location = tL_fileLocationToBeDeprecated;
                            if (photo_id != 0) {
                                tL_fileLocationToBeDeprecated.volume_id = -photo_id;
                                result.location.local_id = result.type.charAt(0);
                            } else if (document_id != 0) {
                                tL_fileLocationToBeDeprecated.volume_id = -document_id;
                                result.location.local_id = result.type.charAt(0) + 1000;
                            } else if (sticker_set_id != 0) {
                                tL_fileLocationToBeDeprecated.volume_id = -sticker_set_id;
                                result.location.local_id = result.type.charAt(0) + 2000;
                            }
                        }
                    }
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_photoStrippedSize extends PhotoSize {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.bytes = stream.readByteArray(exception);
            this.h = 50;
            this.w = 50;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_photoSizeProgressive_layer127 extends TL_photoSizeProgressive {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.location = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.sizes.add(Integer.valueOf(stream.readInt32(exception)));
                }
                if (!this.sizes.isEmpty()) {
                    this.size = ((Integer) this.sizes.get(this.sizes.size() - 1)).intValue();
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(((Integer) this.sizes.get(a)).intValue());
            }
        }
    }

    public static class TL_photoSize_layer127 extends TL_photoSize {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.location = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
        }
    }

    public static class TL_photoSizeEmpty extends PhotoSize {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
        }
    }

    public static class TL_photoCachedSize_layer127 extends TL_photoCachedSize {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.location = FileLocation.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.bytes = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_photoSize extends PhotoSize {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.size = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(this.size);
        }
    }

    public static class TL_photoCachedSize extends PhotoSize {
        public static int constructor = 35527382;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.bytes = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_photoSizeProgressive extends PhotoSize {
        public static int constructor = -96535659;
        public ArrayList<Integer> sizes = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.sizes.add(Integer.valueOf(stream.readInt32(exception)));
                }
                if (!this.sizes.isEmpty()) {
                    ArrayList<Integer> arrayList = this.sizes;
                    this.size = arrayList.get(arrayList.size() - 1).intValue();
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            stream.writeInt32(NUM);
            int count = this.sizes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.sizes.get(a).intValue());
            }
        }
    }

    public static abstract class ExportedChatInvite extends TLObject {
        public static TL_chatInviteExported TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            TL_chatInviteExported result = null;
            switch (constructor) {
                case -1316944408:
                    result = new TL_chatInviteExported_layer133();
                    break;
                case -64092740:
                    result = new TL_chatInviteExported_layer122();
                    break;
                case 179611673:
                    result = new TL_chatInviteExported();
                    break;
                case 1776236393:
                    result = new TL_chatInviteEmpty_layer122();
                    break;
                case 1847917725:
                    result = new TL_chatInviteExported_layer131();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in ExportedChatInvite", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_chatInviteExported extends ExportedChatInvite {
        public static int constructor = NUM;
        public long admin_id;
        public int date;
        public int expire_date;
        public boolean expired;
        public int flags;
        public ArrayList<User> importers;
        public String link;
        public boolean permanent;
        public boolean request_needed;
        public int requested;
        public boolean revoked;
        public int start_date;
        public String title;
        public int usage;
        public int usage_limit;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.revoked = (readInt32 & 1) != 0;
            this.permanent = (readInt32 & 32) != 0;
            if ((readInt32 & 64) != 0) {
                z = true;
            }
            this.request_needed = z;
            this.link = stream.readString(exception);
            this.admin_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 16) != 0) {
                this.start_date = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.expire_date = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.usage_limit = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.usage = stream.readInt32(exception);
            }
            if ((this.flags & 128) != 0) {
                this.requested = stream.readInt32(exception);
            }
            if ((this.flags & 256) != 0) {
                this.title = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoked ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.permanent ? i | 32 : i & -33;
            this.flags = i2;
            int i3 = this.request_needed ? i2 | 64 : i2 & -65;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeString(this.link);
            stream.writeInt64(this.admin_id);
            stream.writeInt32(this.date);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.start_date);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.expire_date);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.usage_limit);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.usage);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.requested);
            }
            if ((this.flags & 256) != 0) {
                stream.writeString(this.title);
            }
        }
    }

    public static class TL_chatInviteExported_layer133 extends TL_chatInviteExported {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.revoked = (this.flags & 1) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.permanent = z;
            this.link = stream.readString(exception);
            this.admin_id = stream.readInt64(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 16) != 0) {
                this.start_date = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.expire_date = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.usage_limit = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.usage = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.revoked ? this.flags | 1 : this.flags & -2;
            this.flags = this.permanent ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeString(this.link);
            stream.writeInt64(this.admin_id);
            stream.writeInt32(this.date);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.start_date);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.expire_date);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.usage_limit);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.usage);
            }
        }
    }

    public static class TL_chatInviteEmpty_layer122 extends TL_chatInviteExported {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_chatInviteExported_layer131 extends TL_chatInviteExported {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.revoked = (this.flags & 1) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.permanent = z;
            this.link = stream.readString(exception);
            this.admin_id = (long) stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 16) != 0) {
                this.start_date = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.expire_date = stream.readInt32(exception);
            }
            if ((this.flags & 4) != 0) {
                this.usage_limit = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.usage = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.revoked ? this.flags | 1 : this.flags & -2;
            this.flags = this.permanent ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeString(this.link);
            stream.writeInt32((int) this.admin_id);
            stream.writeInt32(this.date);
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.start_date);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.expire_date);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.usage_limit);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.usage);
            }
        }
    }

    public static class TL_chatInviteExported_layer122 extends TL_chatInviteExported {
        public static int constructor = -64092740;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.link = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.link);
        }
    }

    public static abstract class InputFile extends TLObject {
        public long id;
        public String md5_checksum;
        public String name;
        public int parts;

        public static InputFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputFile result = null;
            switch (constructor) {
                case -181407105:
                    result = new TL_inputFile();
                    break;
                case -95482955:
                    result = new TL_inputFileBig();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputFileBig extends InputFile {
        public static int constructor = -95482955;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.parts = stream.readInt32(exception);
            this.name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.parts);
            stream.writeString(this.name);
        }
    }

    public static class TL_inputFile extends InputFile {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.parts = stream.readInt32(exception);
            this.name = stream.readString(exception);
            this.md5_checksum = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt32(this.parts);
            stream.writeString(this.name);
            stream.writeString(this.md5_checksum);
        }
    }

    public static class TL_account_webAuthorizations extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_webAuthorization> authorizations = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_account_webAuthorizations TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_webAuthorizations result = new TL_account_webAuthorizations();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_webAuthorizations", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_webAuthorization object = TL_webAuthorization.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.authorizations.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.authorizations.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.authorizations.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_updates_state extends TLObject {
        public static int constructor = -NUM;
        public int date;
        public int pts;
        public int qts;
        public int seq;
        public int unread_count;

        public static TL_updates_state TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_updates_state result = new TL_updates_state();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_updates_state", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.pts = stream.readInt32(exception);
            this.qts = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            this.seq = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.qts);
            stream.writeInt32(this.date);
            stream.writeInt32(this.seq);
            stream.writeInt32(this.unread_count);
        }
    }

    public static class TL_reactionCount extends TLObject {
        public static int constructor = NUM;
        public boolean chosen;
        public int count;
        public int flags;
        public String reaction;

        public static TL_reactionCount TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_reactionCount result = new TL_reactionCount();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_reactionCount", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = true;
            if ((readInt32 & 1) == 0) {
                z = false;
            }
            this.chosen = z;
            this.reaction = stream.readString(exception);
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.chosen ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.reaction);
            stream.writeInt32(this.count);
        }
    }

    public static abstract class messages_AvailableReactions extends TLObject {
        public static messages_AvailableReactions TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_AvailableReactions result = null;
            switch (constructor) {
                case -1626924713:
                    result = new TL_messages_availableReactionsNotModified();
                    break;
                case 1989032621:
                    result = new TL_messages_availableReactions();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_AvailableReactions", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_availableReactionsNotModified extends messages_AvailableReactions {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_availableReactions extends messages_AvailableReactions {
        public static int constructor = NUM;
        public int hash;
        public ArrayList<TL_availableReaction> reactions = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_availableReaction object = TL_availableReaction.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.reactions.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.hash);
            stream.writeInt32(NUM);
            int count = this.reactions.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.reactions.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class UserFull extends TLObject {
        public String about;
        public boolean blocked;
        public TL_chatAdminRights bot_broadcast_admin_rights;
        public TL_chatAdminRights bot_group_admin_rights;
        public BotInfo bot_info;
        public boolean can_pin_message;
        public int common_chats_count;
        public int flags;
        public int folder_id;
        public boolean has_scheduled;
        public long id;
        public TL_contacts_link_layer101 link;
        public PeerNotifySettings notify_settings;
        public boolean phone_calls_available;
        public boolean phone_calls_private;
        public int pinned_msg_id;
        public String private_forward_name;
        public Photo profile_photo;
        public TL_peerSettings settings;
        public String theme_emoticon;
        public int ttl_period;
        public User user;
        public boolean video_calls_available;

        public static UserFull TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            UserFull result = null;
            switch (constructor) {
                case -1938625919:
                    result = new TL_userFull();
                    break;
                case -1901811583:
                    result = new TL_userFull_layer98();
                    break;
                case -818518751:
                    result = new TL_userFull_layer139();
                    break;
                case -694681851:
                    result = new TL_userFull_layer134();
                    break;
                case -302941166:
                    result = new TL_userFull_layer123();
                    break;
                case 328899191:
                    result = new TL_userFull_layer131();
                    break;
                case 1951750604:
                    result = new TL_userFull_layer101();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in UserFull", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_userFull extends UserFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            this.can_pin_message = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 4096) != 0;
            if ((this.flags & 8192) == 0) {
                z = false;
            }
            this.video_calls_available = z;
            this.id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.private_forward_name = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.bot_group_admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 262144) != 0) {
                this.bot_broadcast_admin_rights = TL_chatAdminRights.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.video_calls_available ? this.flags | 8192 : this.flags & -8193;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.settings.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.private_forward_name);
            }
            if ((this.flags & 131072) != 0) {
                this.bot_group_admin_rights.serializeToStream(stream);
            }
            if ((this.flags & 262144) != 0) {
                this.bot_broadcast_admin_rights.serializeToStream(stream);
            }
        }
    }

    public static class TL_userFull_layer139 extends UserFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            this.can_pin_message = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 4096) != 0;
            if ((this.flags & 8192) == 0) {
                z = false;
            }
            this.video_calls_available = z;
            this.id = stream.readInt64(exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.private_forward_name = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.video_calls_available ? this.flags | 8192 : this.flags & -8193;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.id);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.settings.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeString(this.theme_emoticon);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.private_forward_name);
            }
        }
    }

    public static class TL_userFull_layer134 extends TL_userFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            this.can_pin_message = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 4096) != 0;
            if ((this.flags & 8192) == 0) {
                z = false;
            }
            this.video_calls_available = z;
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.theme_emoticon = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.video_calls_available ? this.flags | 8192 : this.flags & -8193;
            stream.writeInt32(this.flags);
            this.user.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.settings.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeString(this.theme_emoticon);
            }
        }
    }

    public static class TL_userFull_layer101 extends TL_userFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            if ((this.flags & 128) == 0) {
                z = false;
            }
            this.can_pin_message = z;
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.link = TL_contacts_link_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            stream.writeInt32(this.flags);
            this.user.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.link.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
        }
    }

    public static class TL_userFull_layer98 extends TL_userFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            if ((this.flags & 128) == 0) {
                z = false;
            }
            this.can_pin_message = z;
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.link = TL_contacts_link_layer101.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            stream.writeInt32(this.flags);
            this.user.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.link.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
        }
    }

    public static class TL_userFull_layer131 extends TL_userFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            this.can_pin_message = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 4096) != 0;
            if ((this.flags & 8192) == 0) {
                z = false;
            }
            this.video_calls_available = z;
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
            if ((this.flags & 16384) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.video_calls_available ? this.flags | 8192 : this.flags & -8193;
            stream.writeInt32(this.flags);
            this.user.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.settings.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
            if ((this.flags & 16384) != 0) {
                stream.writeInt32(this.ttl_period);
            }
        }
    }

    public static class TL_userFull_layer123 extends TL_userFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            this.phone_calls_private = (this.flags & 32) != 0;
            this.can_pin_message = (this.flags & 128) != 0;
            this.has_scheduled = (this.flags & 4096) != 0;
            if ((this.flags & 8192) == 0) {
                z = false;
            }
            this.video_calls_available = z;
            this.user = User.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 2) != 0) {
                this.about = stream.readString(exception);
            }
            this.settings = TL_peerSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 64) != 0) {
                this.pinned_msg_id = stream.readInt32(exception);
            }
            this.common_chats_count = stream.readInt32(exception);
            if ((this.flags & 2048) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            this.flags = this.can_pin_message ? this.flags | 128 : this.flags & -129;
            this.flags = this.has_scheduled ? this.flags | 4096 : this.flags & -4097;
            stream.writeInt32(this.flags);
            this.user.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.about);
            }
            this.settings.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(stream);
            }
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                stream.writeInt32(this.pinned_msg_id);
            }
            stream.writeInt32(this.common_chats_count);
            if ((this.flags & 2048) != 0) {
                stream.writeInt32(this.folder_id);
            }
        }
    }

    public static abstract class Updates extends TLObject {
        public long chat_id;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int date;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public long from_id;
        public MessageFwdHeader fwd_from;
        public int id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public int pts;
        public int pts_count;
        public TL_messageReplyHeader reply_to;
        public int seq;
        public int seq_start;
        public boolean silent;
        public int ttl_period;
        public Update update;
        public ArrayList<Update> updates = new ArrayList<>();
        public long user_id;
        public ArrayList<User> users = new ArrayList<>();
        public long via_bot_id;

        public static Updates TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Updates result = null;
            switch (constructor) {
                case -1877614335:
                    result = new TL_updateShortSentMessage();
                    break;
                case -484987010:
                    result = new TL_updatesTooLong();
                    break;
                case 826001400:
                    result = new TL_updateShortMessage();
                    break;
                case 1299050149:
                    result = new TL_updateShortChatMessage();
                    break;
                case 1918567619:
                    result = new TL_updatesCombined();
                    break;
                case 1957577280:
                    result = new TL_updates();
                    break;
                case 2027216577:
                    result = new TL_updateShort();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Updates", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_updates extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Update object = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.updates.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        this.date = stream.readInt32(exception);
                        this.seq = stream.readInt32(exception);
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }
    }

    public static class TL_updateShortMessage extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.id = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
            this.message = stream.readString(exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }
    }

    public static class TL_updateShortSentMessage extends Updates {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.id = stream.readInt32(exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }
    }

    public static class TL_updateShort extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.update = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
        }
    }

    public static class TL_updateShortChatMessage extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.id = stream.readInt32(exception);
            this.from_id = stream.readInt64(exception);
            this.chat_id = stream.readInt64(exception);
            this.message = stream.readString(exception);
            this.pts = stream.readInt32(exception);
            this.pts_count = stream.readInt32(exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }
    }

    public static class TL_updatesCombined extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Update object = Update.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.updates.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        this.date = stream.readInt32(exception);
                        this.seq_start = stream.readInt32(exception);
                        this.seq = stream.readInt32(exception);
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }
    }

    public static abstract class WallPaper extends TLObject {
        public long access_hash;
        public boolean creator;
        public boolean dark;
        public Document document;
        public int flags;
        public long id;
        public boolean isDefault;
        public boolean pattern;
        public WallPaperSettings settings;
        public String slug;

        public static WallPaper TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            WallPaper result = null;
            switch (constructor) {
                case -1963717851:
                    result = new TL_wallPaperNoFile_layer128();
                    break;
                case -1539849235:
                    result = new TL_wallPaper();
                    break;
                case -528465642:
                    result = new TL_wallPaperNoFile();
                    break;
                case -263220756:
                    result = new TL_wallPaper_layer94();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in WallPaper", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_wallPaper extends WallPaper {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            this.isDefault = (this.flags & 2) != 0;
            this.pattern = (this.flags & 8) != 0;
            if ((this.flags & 16) == 0) {
                z = false;
            }
            this.dark = z;
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.settings = WallPaperSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            this.flags = this.pattern ? this.flags | 8 : this.flags & -9;
            this.flags = this.dark ? this.flags | 16 : this.flags & -17;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            this.document.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_wallPaper_layer94 extends TL_wallPaper {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.creator = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.isDefault = z;
            this.access_hash = stream.readInt64(exception);
            this.slug = stream.readString(exception);
            this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.access_hash);
            stream.writeString(this.slug);
            this.document.serializeToStream(stream);
        }
    }

    public static class TL_wallPaperNoFile_layer128 extends TL_wallPaperNoFile {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.isDefault = (this.flags & 2) != 0;
            if ((this.flags & 16) == 0) {
                z = false;
            }
            this.dark = z;
            if ((this.flags & 4) != 0) {
                this.settings = WallPaperSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            this.flags = this.dark ? this.flags | 16 : this.flags & -17;
            stream.writeInt32(this.flags);
            if ((this.flags & 4) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_wallPaperNoFile extends WallPaper {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.isDefault = (this.flags & 2) != 0;
            if ((this.flags & 16) == 0) {
                z = false;
            }
            this.dark = z;
            if ((this.flags & 4) != 0) {
                this.settings = WallPaperSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            this.flags = this.isDefault ? this.flags | 2 : this.flags & -3;
            this.flags = this.dark ? this.flags | 16 : this.flags & -17;
            stream.writeInt32(this.flags);
            if ((this.flags & 4) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_paymentSavedCredentialsCard extends TLObject {
        public static int constructor = -NUM;
        public String id;
        public String title;

        public static TL_paymentSavedCredentialsCard TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_paymentSavedCredentialsCard result = new TL_paymentSavedCredentialsCard();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_paymentSavedCredentialsCard", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readString(exception);
            this.title = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.id);
            stream.writeString(this.title);
        }
    }

    public static abstract class PageListItem extends TLObject {
        public static PageListItem TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PageListItem result = null;
            switch (constructor) {
                case -1188055347:
                    result = new TL_pageListItemText();
                    break;
                case 635466748:
                    result = new TL_pageListItemBlocks();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PageListItem", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pageListItemBlocks extends PageListItem {
        public static int constructor = NUM;
        public ArrayList<PageBlock> blocks = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.blocks.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_pageListItemText extends PageListItem {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.text.serializeToStream(stream);
        }
    }

    public static class TL_stickerPack extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Long> documents = new ArrayList<>();
        public String emoticon;

        public static TL_stickerPack TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_stickerPack result = new TL_stickerPack();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stickerPack", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.emoticon = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.documents.add(Long.valueOf(stream.readInt64(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
            stream.writeInt32(NUM);
            int count = this.documents.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.documents.get(a).longValue());
            }
        }
    }

    public static class TL_inputEncryptedChat extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public int chat_id;

        public static TL_inputEncryptedChat TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputEncryptedChat result = new TL_inputEncryptedChat();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputEncryptedChat", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.chat_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static abstract class InputChatPhoto extends TLObject {
        public static InputChatPhoto TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputChatPhoto result = null;
            switch (constructor) {
                case -1991004873:
                    result = new TL_inputChatPhoto();
                    break;
                case -968723890:
                    result = new TL_inputChatUploadedPhoto();
                    break;
                case 480546647:
                    result = new TL_inputChatPhotoEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputChatPhoto", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputChatPhoto extends InputChatPhoto {
        public static int constructor = -NUM;
        public InputPhoto id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = InputPhoto.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_inputChatPhotoEmpty extends InputChatPhoto {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputChatUploadedPhoto extends InputChatPhoto {
        public static int constructor = -NUM;
        public InputFile file;
        public int flags;
        public InputFile video;
        public double video_start_ts;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.file = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.video = InputFile.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4) != 0) {
                this.video_start_ts = stream.readDouble(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.file.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.video.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeDouble(this.video_start_ts);
            }
        }
    }

    public static class TL_nearestDc extends TLObject {
        public static int constructor = -NUM;
        public String country;
        public int nearest_dc;
        public int this_dc;

        public static TL_nearestDc TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_nearestDc result = new TL_nearestDc();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_nearestDc", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.country = stream.readString(exception);
            this.this_dc = stream.readInt32(exception);
            this.nearest_dc = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.country);
            stream.writeInt32(this.this_dc);
            stream.writeInt32(this.nearest_dc);
        }
    }

    public static class TL_payments_savedInfo extends TLObject {
        public static int constructor = -74456004;
        public int flags;
        public boolean has_saved_credentials;
        public TL_paymentRequestedInfo saved_info;

        public static TL_payments_savedInfo TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_payments_savedInfo result = new TL_payments_savedInfo();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_savedInfo", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.has_saved_credentials = (readInt32 & 2) != 0;
            if ((readInt32 & 1) != 0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.has_saved_credentials ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 1) != 0) {
                this.saved_info.serializeToStream(stream);
            }
        }
    }

    public static abstract class InputPhoto extends TLObject {
        public long access_hash;
        public byte[] file_reference;
        public long id;

        public static InputPhoto TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputPhoto result = null;
            switch (constructor) {
                case 483901197:
                    result = new TL_inputPhotoEmpty();
                    break;
                case 1001634122:
                    result = new TL_inputPhoto();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputPhoto", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPhotoEmpty extends InputPhoto {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPhoto extends InputPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
            this.file_reference = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeInt64(this.access_hash);
            stream.writeByteArray(this.file_reference);
        }
    }

    public static class TL_messages_messageReactionsList extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public int flags;
        public String next_offset;
        public ArrayList<TL_messagePeerReaction> reactions = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_messageReactionsList TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_messageReactionsList result = new TL_messages_messageReactionsList();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageReactionsList", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_messagePeerReaction object = MessagePeerReaction.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.reactions.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count4 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count4) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        if ((this.flags & 1) != 0) {
                            this.next_offset = stream.readString(exception);
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count2 = this.reactions.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.reactions.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a3 = 0; a3 < count4; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeString(this.next_offset);
            }
        }
    }

    public static class TL_importedContact extends TLObject {
        public static int constructor = -NUM;
        public long client_id;
        public long user_id;

        public static TL_importedContact TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_importedContact result = new TL_importedContact();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_importedContact", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.client_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.client_id);
        }
    }

    public static class TL_chatOnlines extends TLObject {
        public static int constructor = -NUM;
        public int onlines;

        public static TL_chatOnlines TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_chatOnlines result = new TL_chatOnlines();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatOnlines", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.onlines = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.onlines);
        }
    }

    public static abstract class messages_RecentStickers extends TLObject {
        public static messages_RecentStickers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_RecentStickers result = null;
            switch (constructor) {
                case -1999405994:
                    result = new TL_messages_recentStickers();
                    break;
                case 186120336:
                    result = new TL_messages_recentStickersNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_RecentStickers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_recentStickers extends messages_RecentStickers {
        public static int constructor = -NUM;
        public ArrayList<Integer> dates = new ArrayList<>();
        public long hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList<>();
        public ArrayList<Document> stickers = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_stickerPack object = TL_stickerPack.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.packs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Document object2 = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.stickers.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        for (int a3 = 0; a3 < count3; a3++) {
                            this.dates.add(Integer.valueOf(stream.readInt32(exception)));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.packs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.packs.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.stickers.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.stickers.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.dates.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                stream.writeInt32(this.dates.get(a3).intValue());
            }
        }
    }

    public static class TL_messages_recentStickersNotModified extends messages_RecentStickers {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_pageRelatedArticle extends TLObject {
        public static int constructor = -NUM;
        public String author;
        public String description;
        public int flags;
        public long photo_id;
        public int published_date;
        public String title;
        public String url;
        public long webpage_id;

        public static TL_pageRelatedArticle TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pageRelatedArticle result = new TL_pageRelatedArticle();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pageRelatedArticle", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.url = stream.readString(exception);
            this.webpage_id = stream.readInt64(exception);
            if ((this.flags & 1) != 0) {
                this.title = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.description = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.photo_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.author = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.published_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.url);
            stream.writeInt64(this.webpage_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.description);
            }
            if ((this.flags & 4) != 0) {
                stream.writeInt64(this.photo_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.author);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.published_date);
            }
        }
    }

    public static class TL_accountDaysTTL extends TLObject {
        public static int constructor = -NUM;
        public int days;

        public static TL_accountDaysTTL TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_accountDaysTTL result = new TL_accountDaysTTL();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_accountDaysTTL", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.days = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.days);
        }
    }

    public static abstract class messages_Stickers extends TLObject {
        public static messages_Stickers TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_Stickers result = null;
            switch (constructor) {
                case -244016606:
                    result = new TL_messages_stickersNotModified();
                    break;
                case 816245886:
                    result = new TL_messages_stickers();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_Stickers", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_stickersNotModified extends messages_Stickers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_stickers extends messages_Stickers {
        public static int constructor = NUM;
        public long hash;
        public ArrayList<Document> stickers = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.stickers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.stickers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.stickers.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class InputPeer extends TLObject {
        public long access_hash;
        public long channel_id;
        public long chat_id;
        public int msg_id;
        public InputPeer peer;
        public long user_id;

        public static InputPeer TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            InputPeer result = null;
            switch (constructor) {
                case -1667893317:
                    result = new TL_inputPeerChannelFromMessage_layer131();
                    break;
                case -1468331492:
                    result = new TL_inputPeerUserFromMessage();
                    break;
                case -1121318848:
                    result = new TL_inputPeerChannelFromMessage();
                    break;
                case -571955892:
                    result = new TL_inputPeerUser();
                    break;
                case 396093539:
                    result = new TL_inputPeerChat_layer131();
                    break;
                case 398123750:
                    result = new TL_inputPeerUserFromMessage_layer131();
                    break;
                case 548253432:
                    result = new TL_inputPeerChannel_layer131();
                    break;
                case 666680316:
                    result = new TL_inputPeerChannel();
                    break;
                case 900291769:
                    result = new TL_inputPeerChat();
                    break;
                case 2072935910:
                    result = new TL_inputPeerUser_layer131();
                    break;
                case 2107670217:
                    result = new TL_inputPeerSelf();
                    break;
                case 2134579434:
                    result = new TL_inputPeerEmpty();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in InputPeer", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_inputPeerSelf extends InputPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerUserFromMessage extends InputPeer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.user_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt64(this.user_id);
        }
    }

    public static class TL_inputPeerUser extends InputPeer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.user_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerChat_layer131 extends TL_inputPeerChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.chat_id);
        }
    }

    public static class TL_inputPeerChannel extends InputPeer {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = stream.readInt64(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.channel_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerUser_layer131 extends TL_inputPeerUser {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.user_id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.user_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerEmpty extends InputPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerChannelFromMessage extends InputPeer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.channel_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt64(this.channel_id);
        }
    }

    public static class TL_inputPeerChat extends InputPeer {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.chat_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_inputPeerChannel_layer131 extends TL_inputPeerChannel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel_id = (long) stream.readInt32(exception);
            this.access_hash = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.channel_id);
            stream.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerChannelFromMessage_layer131 extends TL_inputPeerChannelFromMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.channel_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32((int) this.channel_id);
        }
    }

    public static class TL_inputPeerUserFromMessage_layer131 extends TL_inputPeerUserFromMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.msg_id = stream.readInt32(exception);
            this.user_id = (long) stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32((int) this.user_id);
        }
    }

    public static abstract class help_PassportConfig extends TLObject {
        public static help_PassportConfig TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            help_PassportConfig result = null;
            switch (constructor) {
                case -1600596305:
                    result = new TL_help_passportConfig();
                    break;
                case -1078332329:
                    result = new TL_help_passportConfigNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in help_PassportConfig", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_help_passportConfigNotModified extends help_PassportConfig {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_passportConfig extends help_PassportConfig {
        public static int constructor = -NUM;
        public TL_dataJSON countries_langs;
        public int hash;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt32(exception);
            this.countries_langs = TL_dataJSON.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.hash);
            this.countries_langs.serializeToStream(stream);
        }
    }

    public static class TL_phone_exportedGroupCallInvite extends TLObject {
        public static int constructor = NUM;
        public String link;

        public static TL_phone_exportedGroupCallInvite TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_exportedGroupCallInvite result = new TL_phone_exportedGroupCallInvite();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_exportedGroupCallInvite", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.link = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.link);
        }
    }

    public static class TL_account_passwordInputSettings extends TLObject {
        public static int constructor = -NUM;
        public String email;
        public int flags;
        public String hint;
        public PasswordKdfAlgo new_algo;
        public byte[] new_password_hash;
        public TL_secureSecretSettings new_secure_settings;

        public static TL_account_passwordInputSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_passwordInputSettings result = new TL_account_passwordInputSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordInputSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.new_algo = PasswordKdfAlgo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 1) != 0) {
                this.new_password_hash = stream.readByteArray(exception);
            }
            if ((this.flags & 1) != 0) {
                this.hint = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.email = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.new_secure_settings = TL_secureSecretSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.new_algo.serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeByteArray(this.new_password_hash);
            }
            if ((this.flags & 1) != 0) {
                stream.writeString(this.hint);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.email);
            }
            if ((this.flags & 4) != 0) {
                this.new_secure_settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_dcOption extends TLObject {
        public static int constructor = NUM;
        public boolean cdn;
        public int flags;
        public int id;
        public String ip_address;
        public boolean ipv6;
        public boolean isStatic;
        public boolean media_only;
        public int port;
        public byte[] secret;
        public boolean tcpo_only;

        public static TL_dcOption TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_dcOption result = new TL_dcOption();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dcOption", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.ipv6 = (readInt32 & 1) != 0;
            this.media_only = (readInt32 & 2) != 0;
            this.tcpo_only = (readInt32 & 4) != 0;
            this.cdn = (readInt32 & 8) != 0;
            if ((readInt32 & 16) != 0) {
                z = true;
            }
            this.isStatic = z;
            this.id = stream.readInt32(exception);
            this.ip_address = stream.readString(exception);
            this.port = stream.readInt32(exception);
            if ((this.flags & 1024) != 0) {
                this.secret = stream.readByteArray(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.ipv6 ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.media_only ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.tcpo_only ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.cdn ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.isStatic ? i4 | 16 : i4 & -17;
            this.flags = i5;
            stream.writeInt32(i5);
            stream.writeInt32(this.id);
            stream.writeString(this.ip_address);
            stream.writeInt32(this.port);
            if ((this.flags & 1024) != 0) {
                stream.writeByteArray(this.secret);
            }
        }
    }

    public static class TL_pageTableRow extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_pageTableCell> cells = new ArrayList<>();

        public static TL_pageTableRow TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_pageTableRow result = new TL_pageTableRow();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableRow", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_pageTableCell object = TL_pageTableCell.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.cells.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.cells.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.cells.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_emojiURL extends TLObject {
        public static int constructor = -NUM;
        public String url;

        public static TL_emojiURL TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_emojiURL result = new TL_emojiURL();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_emojiURL", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_decryptedMessageLayer extends TLObject {
        public static int constructor = NUM;
        public int in_seq_no;
        public int layer;
        public DecryptedMessage message;
        public int out_seq_no;
        public byte[] random_bytes;

        public static TL_decryptedMessageLayer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_decryptedMessageLayer result = new TL_decryptedMessageLayer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_decryptedMessageLayer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.random_bytes = stream.readByteArray(exception);
            this.layer = stream.readInt32(exception);
            this.in_seq_no = stream.readInt32(exception);
            this.out_seq_no = stream.readInt32(exception);
            this.message = DecryptedMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.random_bytes);
            stream.writeInt32(this.layer);
            stream.writeInt32(this.in_seq_no);
            stream.writeInt32(this.out_seq_no);
            this.message.serializeToStream(stream);
        }
    }

    public static class TL_groupCallParticipant extends TLObject {
        public static int constructor = -NUM;
        public String about;
        public int active_date;
        public float amplitude;
        public boolean can_self_unmute;
        public int date;
        public int flags;
        public int hasCameraFrame;
        public int hasPresentationFrame;
        public boolean hasVoice;
        public boolean hasVoiceDelayed;
        public boolean just_joined;
        public long lastActiveDate;
        public long lastRaiseHandDate;
        public long lastSpeakTime;
        public int lastTypingDate;
        public long lastVisibleDate;
        public long lastVoiceUpdateTime;
        public boolean left;
        public boolean min;
        public boolean muted;
        public boolean muted_by_you;
        public Peer peer;
        public TL_groupCallParticipantVideo presentation;
        public String presentationEndpoint;
        public long raise_hand_rating;
        public boolean self;
        public int source;
        public boolean versioned;
        public TL_groupCallParticipantVideo video;
        public String videoEndpoint;
        public int videoIndex;
        public boolean video_joined;
        public int volume;
        public boolean volume_by_admin;

        public static TL_groupCallParticipant TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_groupCallParticipant result = new TL_groupCallParticipant();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallParticipant", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            boolean z = false;
            this.muted = (readInt32 & 1) != 0;
            this.left = (readInt32 & 2) != 0;
            this.can_self_unmute = (readInt32 & 4) != 0;
            this.just_joined = (readInt32 & 16) != 0;
            this.versioned = (readInt32 & 32) != 0;
            this.min = (readInt32 & 256) != 0;
            this.muted_by_you = (readInt32 & 512) != 0;
            this.volume_by_admin = (readInt32 & 1024) != 0;
            this.self = (readInt32 & 4096) != 0;
            if ((readInt32 & 32768) != 0) {
                z = true;
            }
            this.video_joined = z;
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            if ((this.flags & 8) != 0) {
                this.active_date = stream.readInt32(exception);
            }
            this.source = stream.readInt32(exception);
            if ((this.flags & 128) != 0) {
                this.volume = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.about = stream.readString(exception);
            }
            if ((this.flags & 8192) != 0) {
                this.raise_hand_rating = stream.readInt64(exception);
            }
            if ((this.flags & 64) != 0) {
                this.video = TL_groupCallParticipantVideo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16384) != 0) {
                this.presentation = TL_groupCallParticipantVideo.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.muted ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.left ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.can_self_unmute ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.just_joined ? i3 | 16 : i3 & -17;
            this.flags = i4;
            int i5 = this.versioned ? i4 | 32 : i4 & -33;
            this.flags = i5;
            int i6 = this.min ? i5 | 256 : i5 & -257;
            this.flags = i6;
            int i7 = this.muted_by_you ? i6 | 512 : i6 & -513;
            this.flags = i7;
            int i8 = this.volume_by_admin ? i7 | 1024 : i7 & -1025;
            this.flags = i8;
            int i9 = this.self ? i8 | 4096 : i8 & -4097;
            this.flags = i9;
            int i10 = this.video_joined ? i9 | 32768 : i9 & -32769;
            this.flags = i10;
            stream.writeInt32(i10);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.date);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.active_date);
            }
            stream.writeInt32(this.source);
            if ((this.flags & 128) != 0) {
                stream.writeInt32(this.volume);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.about);
            }
            if ((this.flags & 8192) != 0) {
                stream.writeInt64(this.raise_hand_rating);
            }
            if ((this.flags & 64) != 0) {
                this.video.serializeToStream(stream);
            }
            if ((this.flags & 16384) != 0) {
                this.presentation.serializeToStream(stream);
            }
        }
    }

    public static class TL_fileHash extends TLObject {
        public static int constructor = NUM;
        public byte[] hash;
        public int limit;
        public int offset;

        public static TL_fileHash TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_fileHash result = new TL_fileHash();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_fileHash", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.offset = stream.readInt32(exception);
            this.limit = stream.readInt32(exception);
            this.hash = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
            stream.writeByteArray(this.hash);
        }
    }

    public static class TL_messages_peerDialogs extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<Dialog> dialogs = new ArrayList<>();
        public ArrayList<Message> messages = new ArrayList<>();
        public TL_updates_state state;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_peerDialogs TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_peerDialogs result = new TL_messages_peerDialogs();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerDialogs", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Dialog object = Dialog.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.dialogs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Message object2 = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                            this.state = TL_updates_state.TLdeserialize(stream, stream.readInt32(exception), exception);
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.dialogs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.dialogs.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.messages.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.messages.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.chats.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
            this.state.serializeToStream(stream);
        }
    }

    public static class TL_topPeer extends TLObject {
        public static int constructor = -NUM;
        public Peer peer;
        public double rating;

        public static TL_topPeer TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_topPeer result = new TL_topPeer();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeer", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.rating = stream.readDouble(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeDouble(this.rating);
        }
    }

    public static abstract class account_ResetPasswordResult extends TLObject {
        public static account_ResetPasswordResult TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            account_ResetPasswordResult result = null;
            switch (constructor) {
                case -478701471:
                    result = new TL_account_resetPasswordFailedWait();
                    break;
                case -383330754:
                    result = new TL_account_resetPasswordOk();
                    break;
                case -370148227:
                    result = new TL_account_resetPasswordRequestedWait();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in account_ResetPasswordResult", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_account_resetPasswordFailedWait extends account_ResetPasswordResult {
        public static int constructor = -NUM;
        public int retry_date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.retry_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.retry_date);
        }
    }

    public static class TL_account_resetPasswordRequestedWait extends account_ResetPasswordResult {
        public static int constructor = -NUM;
        public int until_date;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.until_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.until_date);
        }
    }

    public static class TL_account_resetPasswordOk extends account_ResetPasswordResult {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static abstract class messages_Dialogs extends TLObject {
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public ArrayList<Dialog> dialogs = new ArrayList<>();
        public ArrayList<Message> messages = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static messages_Dialogs TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            messages_Dialogs result = null;
            switch (constructor) {
                case -253500010:
                    result = new TL_messages_dialogsNotModified();
                    break;
                case 364538944:
                    result = new TL_messages_dialogs();
                    break;
                case 1910543603:
                    result = new TL_messages_dialogsSlice();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in messages_Dialogs", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_messages_dialogs extends messages_Dialogs {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Dialog object = Dialog.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.dialogs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Message object2 = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.dialogs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Dialog) this.dialogs.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.messages.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Message) this.messages.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Chat) this.chats.get(a3)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                ((User) this.users.get(a4)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_dialogsSlice extends messages_Dialogs {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Dialog object = Dialog.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.dialogs.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Message object2 = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count4 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count4) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
            stream.writeInt32(NUM);
            int count = this.dialogs.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((Dialog) this.dialogs.get(a)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.messages.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                ((Message) this.messages.get(a2)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.chats.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                ((Chat) this.chats.get(a3)).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.users.size();
            stream.writeInt32(count4);
            for (int a4 = 0; a4 < count4; a4++) {
                ((User) this.users.get(a4)).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_dialogsNotModified extends messages_Dialogs {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.count);
        }
    }

    public static class TL_account_authorizations extends TLObject {
        public static int constructor = NUM;
        public int authorization_ttl_days;
        public ArrayList<TL_authorization> authorizations = new ArrayList<>();

        public static TL_account_authorizations TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_account_authorizations result = new TL_account_authorizations();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizations", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.authorization_ttl_days = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_authorization object = TL_authorization.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.authorizations.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.authorization_ttl_days);
            stream.writeInt32(NUM);
            int count = this.authorizations.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.authorizations.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_paymentRequestedInfo extends TLObject {
        public static int constructor = -NUM;
        public String email;
        public int flags;
        public String name;
        public String phone;
        public TL_postAddress shipping_address;

        public static TL_paymentRequestedInfo TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_paymentRequestedInfo result = new TL_paymentRequestedInfo();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_paymentRequestedInfo", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.name = stream.readString(exception);
            }
            if ((this.flags & 2) != 0) {
                this.phone = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.email = stream.readString(exception);
            }
            if ((this.flags & 8) != 0) {
                this.shipping_address = TL_postAddress.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.name);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.phone);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.email);
            }
            if ((this.flags & 8) != 0) {
                this.shipping_address.serializeToStream(stream);
            }
        }
    }

    public static class TL_auth_sendCode extends TLObject {
        public static int constructor = -NUM;
        public String api_hash;
        public int api_id;
        public String phone_number;
        public TL_codeSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_sentCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeInt32(this.api_id);
            stream.writeString(this.api_hash);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_auth_signUp extends TLObject {
        public static int constructor = -NUM;
        public String first_name;
        public String last_name;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_Authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
        }
    }

    public static class TL_auth_signIn extends TLObject {
        public static int constructor = -NUM;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_Authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
            stream.writeString(this.phone_code);
        }
    }

    public static class TL_auth_logOut extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_loggedOut.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_resetAuthorizations extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_exportAuthorization extends TLObject {
        public static int constructor = -NUM;
        public int dc_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_exportedAuthorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
        }
    }

    public static class TL_auth_importAuthorization extends TLObject {
        public static int constructor = -NUM;
        public byte[] bytes;
        public long id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_Authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
            stream.writeByteArray(this.bytes);
        }
    }

    public static class TL_auth_exportLoginToken extends TLObject {
        public static int constructor = -NUM;
        public String api_hash;
        public int api_id;
        public ArrayList<Long> except_ids = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_LoginToken.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.api_id);
            stream.writeString(this.api_hash);
            stream.writeInt32(NUM);
            int count = this.except_ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.except_ids.get(a).longValue());
            }
        }
    }

    public static class TL_auth_importLoginToken extends TLObject {
        public static int constructor = -NUM;
        public byte[] token;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_LoginToken.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.token);
        }
    }

    public static class TL_auth_acceptLoginToken extends TLObject {
        public static int constructor = -NUM;
        public byte[] token;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.token);
        }
    }

    public static class TL_auth_checkRecoveryPassword extends TLObject {
        public static int constructor = NUM;
        public String code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.code);
        }
    }

    public static class TL_account_registerDevice extends TLObject {
        public static int constructor = -NUM;
        public boolean app_sandbox;
        public int flags;
        public boolean no_muted;
        public ArrayList<Long> other_uids = new ArrayList<>();
        public byte[] secret;
        public String token;
        public int token_type;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.no_muted ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.token_type);
            stream.writeString(this.token);
            stream.writeBool(this.app_sandbox);
            stream.writeByteArray(this.secret);
            stream.writeInt32(NUM);
            int count = this.other_uids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.other_uids.get(a).longValue());
            }
        }
    }

    public static class TL_account_unregisterDevice extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Long> other_uids = new ArrayList<>();
        public String token;
        public int token_type;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.token_type);
            stream.writeString(this.token);
            stream.writeInt32(NUM);
            int count = this.other_uids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.other_uids.get(a).longValue());
            }
        }
    }

    public static class TL_account_updateNotifySettings extends TLObject {
        public static int constructor = -NUM;
        public InputNotifyPeer peer;
        public TL_inputPeerNotifySettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_getNotifySettings extends TLObject {
        public static int constructor = NUM;
        public InputNotifyPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return PeerNotifySettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_account_resetNotifySettings extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_updateProfile extends TLObject {
        public static int constructor = NUM;
        public String about;
        public String first_name;
        public int flags;
        public String last_name;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return User.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.first_name);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.last_name);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.about);
            }
        }
    }

    public static class TL_account_updateStatus extends TLObject {
        public static int constructor = NUM;
        public boolean offline;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.offline);
        }
    }

    public static class TL_account_getWallPapers extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_WallPapers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_users_getUsers extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputUser> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.id.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_reportPeer extends TLObject {
        public static int constructor = -NUM;
        public String message;
        public InputPeer peer;
        public ReportReason reason;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.reason.serializeToStream(stream);
            stream.writeString(this.message);
        }
    }

    public static class TL_account_resetPassword extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_ResetPasswordResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_declinePasswordReset extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getChatThemes extends TLObject {
        public static int constructor = -NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_Themes.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_account_setAuthorizationTTL extends TLObject {
        public static int constructor = -NUM;
        public int authorization_ttl_days;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.authorization_ttl_days);
        }
    }

    public static class TL_account_changeAuthorizationSettings extends TLObject {
        public static int constructor = NUM;
        public boolean call_requests_disabled;
        public boolean encrypted_requests_disabled;
        public int flags;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.hash);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.encrypted_requests_disabled);
            }
            if ((this.flags & 2) != 0) {
                stream.writeBool(this.call_requests_disabled);
            }
        }
    }

    public static class TL_users_getFullUser extends TLObject {
        public static int constructor = -NUM;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_users_userFull.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_contacts_getStatuses extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_contactStatus object = TL_contactStatus.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_getContacts extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return contacts_Contacts.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_contacts_importContacts extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_inputPhoneContact> contacts = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_contacts_importedContacts.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.contacts.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.contacts.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_contacts_deleteContacts extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputUser> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.id.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_contacts_deleteByPhones extends TLObject {
        public static int constructor = NUM;
        public ArrayList<String> phones = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.phones.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.phones.get(a));
            }
        }
    }

    public static class TL_contacts_block extends TLObject {
        public static int constructor = NUM;
        public InputPeer id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_contacts_unblock extends TLObject {
        public static int constructor = -NUM;
        public InputPeer id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_contacts_getBlocked extends TLObject {
        public static int constructor = -NUM;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return contacts_Blocked.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_contacts_exportCard extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                vector.objects.add(Integer.valueOf(stream.readInt32(exception)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_importCard extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> export_card = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return User.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.export_card.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.export_card.get(a).intValue());
            }
        }
    }

    public static class TL_contacts_resetSaved extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_contacts_toggleTopPeers extends TLObject {
        public static int constructor = -NUM;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.enabled);
        }
    }

    public static class TL_contacts_addContact extends TLObject {
        public static int constructor = -NUM;
        public boolean add_phone_privacy_exception;
        public String first_name;
        public int flags;
        public InputUser id;
        public String last_name;
        public String phone;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.add_phone_privacy_exception ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.id.serializeToStream(stream);
            stream.writeString(this.first_name);
            stream.writeString(this.last_name);
            stream.writeString(this.phone);
        }
    }

    public static class TL_contacts_acceptContact extends TLObject {
        public static int constructor = -NUM;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_contacts_getLocated extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public int flags;
        public InputGeoPoint geo_point;
        public int self_expires;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.background ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.geo_point.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.self_expires);
            }
        }
    }

    public static class TL_contacts_blockFromReplies extends TLObject {
        public static int constructor = NUM;
        public boolean delete_history;
        public boolean delete_message;
        public int flags;
        public int msg_id;
        public boolean report_spam;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.delete_message ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.delete_history ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.report_spam ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_contacts_resolvePhone extends TLObject {
        public static int constructor = -NUM;
        public String phone;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_contacts_resolvedPeer.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone);
        }
    }

    public static class TL_messages_getMessages extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_getDialogs extends TLObject {
        public static int constructor = -NUM;
        public boolean exclude_pinned;
        public int flags;
        public int folder_id;
        public long hash;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Dialogs.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.exclude_pinned ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeInt32(this.offset_date);
            stream.writeInt32(this.offset_id);
            this.offset_peer.serializeToStream(stream);
            stream.writeInt32(this.limit);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getHistory extends TLObject {
        public static int constructor = NUM;
        public int add_offset;
        public long hash;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.offset_date);
            stream.writeInt32(this.add_offset);
            stream.writeInt32(this.limit);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.min_id);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_search extends TLObject {
        public static int constructor = -NUM;
        public int add_offset;
        public MessagesFilter filter;
        public int flags;
        public InputPeer from_id;
        public long hash;
        public int limit;
        public int max_date;
        public int max_id;
        public int min_date;
        public int min_id;
        public int offset_id;
        public InputPeer peer;
        public String q;
        public int top_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeString(this.q);
            if ((this.flags & 1) != 0) {
                this.from_id.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.top_msg_id);
            }
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.min_date);
            stream.writeInt32(this.max_date);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.add_offset);
            stream.writeInt32(this.limit);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.min_id);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_help_getTermsOfServiceUpdate extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_TermsOfServiceUpdate.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_acceptTermsOfService extends TLObject {
        public static int constructor = -NUM;
        public TL_dataJSON id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_help_getPassportConfig extends TLObject {
        public static int constructor = -NUM;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_PassportConfig.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_help_getSupportName extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_help_supportName.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_getUserInfo extends TLObject {
        public static int constructor = 59377875;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_UserInfo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_help_editUserInfo extends TLObject {
        public static int constructor = NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public String message;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_UserInfo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
            stream.writeString(this.message);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.entities.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_help_getPromoData extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_PromoData.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_hidePromoData extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_help_dismissSuggestion extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public String suggestion;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeString(this.suggestion);
        }
    }

    public static class TL_help_getCountriesList extends TLObject {
        public static int constructor = NUM;
        public int hash;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_CountriesList.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_messages_readHistory extends TLObject {
        public static int constructor = NUM;
        public int max_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_deleteHistory extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public boolean just_clear;
        public int max_date;
        public int max_id;
        public int min_date;
        public InputPeer peer;
        public boolean revoke;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedHistory.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.just_clear ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.revoke ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.max_id);
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.min_date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.max_date);
            }
        }
    }

    public static class TL_channels_togglePreHistoryHidden extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeBool(this.enabled);
        }
    }

    public static class TL_channels_getGroupsForDiscussion extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channels_setDiscussionGroup extends TLObject {
        public static int constructor = NUM;
        public InputChannel broadcast;
        public InputChannel group;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.broadcast.serializeToStream(stream);
            this.group.serializeToStream(stream);
        }
    }

    public static class TL_channels_editCreator extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public InputCheckPasswordSRP password;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.user_id.serializeToStream(stream);
            this.password.serializeToStream(stream);
        }
    }

    public static class TL_channels_editLocation extends TLObject {
        public static int constructor = NUM;
        public String address;
        public InputChannel channel;
        public InputGeoPoint geo_point;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.geo_point.serializeToStream(stream);
            stream.writeString(this.address);
        }
    }

    public static class TL_messages_editChatAdmin extends TLObject {
        public static int constructor = -NUM;
        public long chat_id;
        public boolean is_admin;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            this.user_id.serializeToStream(stream);
            stream.writeBool(this.is_admin);
        }
    }

    public static class TL_messages_migrateChat extends TLObject {
        public static int constructor = -NUM;
        public long chat_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_messages_searchGlobal extends TLObject {
        public static int constructor = NUM;
        public MessagesFilter filter;
        public int flags;
        public int folder_id;
        public int limit;
        public int max_date;
        public int min_date;
        public int offset_id;
        public InputPeer offset_peer;
        public int offset_rate;
        public String q;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.folder_id);
            }
            stream.writeString(this.q);
            MessagesFilter messagesFilter = this.filter;
            if (messagesFilter != null) {
                messagesFilter.serializeToStream(stream);
            }
            stream.writeInt32(this.min_date);
            stream.writeInt32(this.max_date);
            stream.writeInt32(this.offset_rate);
            this.offset_peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_deleteMessages extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public ArrayList<Integer> id = new ArrayList<>();
        public boolean revoke;

        public static TL_messages_deleteMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_deleteMessages result = new TL_messages_deleteMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_deleteMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.revoke = (readInt32 & 1) != 0;
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.id.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoke ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_receivedMessages extends TLObject {
        public static int constructor = 94983360;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_receivedNotifyMessage object = TL_receivedNotifyMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_setTyping extends TLObject {
        public static int constructor = NUM;
        public SendMessageAction action;
        public int flags;
        public InputPeer peer;
        public int top_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.top_msg_id);
            }
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_messages_sendMessage extends TLObject {
        public static int constructor = NUM;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public int schedule_date;
        public InputPeer send_as;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.no_webpage ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            int i2 = this.silent ? i | 32 : i & -33;
            this.flags = i2;
            int i3 = this.background ? i2 | 64 : i2 & -65;
            this.flags = i3;
            int i4 = this.clear_draft ? i3 | 128 : i3 & -129;
            this.flags = i4;
            stream.writeInt32(i4);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            stream.writeString(this.message);
            stream.writeInt64(this.random_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 8192) != 0) {
                this.send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_sendMedia extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public InputMedia media;
        public String message;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public int schedule_date;
        public InputPeer send_as;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            int i2 = this.background ? i | 64 : i & -65;
            this.flags = i2;
            int i3 = this.clear_draft ? i2 | 128 : i2 & -129;
            this.flags = i3;
            stream.writeInt32(i3);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            this.media.serializeToStream(stream);
            stream.writeString(this.message);
            stream.writeInt64(this.random_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 8192) != 0) {
                this.send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_forwardMessages extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public boolean drop_author;
        public boolean drop_media_captions;
        public int flags;
        public InputPeer from_peer;
        public ArrayList<Integer> id = new ArrayList<>();
        public ArrayList<Long> random_id = new ArrayList<>();
        public int schedule_date;
        public InputPeer send_as;
        public boolean silent;
        public InputPeer to_peer;
        public boolean with_my_score;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            int i2 = this.background ? i | 64 : i & -65;
            this.flags = i2;
            int i3 = this.with_my_score ? i2 | 256 : i2 & -257;
            this.flags = i3;
            int i4 = this.drop_author ? i3 | 2048 : i3 & -2049;
            this.flags = i4;
            int i5 = this.drop_media_captions ? i4 | 4096 : i4 & -4097;
            this.flags = i5;
            stream.writeInt32(i5);
            this.from_peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
            stream.writeInt32(NUM);
            int count2 = this.random_id.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                stream.writeInt64(this.random_id.get(a2).longValue());
            }
            this.to_peer.serializeToStream(stream);
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 8192) != 0) {
                this.send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_reportSpam extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getPeerSettings extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_peerSettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_report extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public String message;
        public InputPeer peer;
        public ReportReason reason;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
            this.reason.serializeToStream(stream);
            stream.writeString(this.message);
        }
    }

    public static class TL_messages_getChats extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Long> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.id.get(a).longValue());
            }
        }
    }

    public static class TL_messages_getFullChat extends TLObject {
        public static int constructor = -NUM;
        public long chat_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_chatFull.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_messages_editChatTitle extends TLObject {
        public static int constructor = NUM;
        public long chat_id;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            stream.writeString(this.title);
        }
    }

    public static class TL_messages_editChatPhoto extends TLObject {
        public static int constructor = NUM;
        public long chat_id;
        public InputChatPhoto photo;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            this.photo.serializeToStream(stream);
        }
    }

    public static class TL_messages_addChatUser extends TLObject {
        public static int constructor = -NUM;
        public long chat_id;
        public int fwd_limit;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.fwd_limit);
        }
    }

    public static class TL_messages_deleteChatUser extends TLObject {
        public static int constructor = -NUM;
        public long chat_id;
        public int flags;
        public boolean revoke_history;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoke_history ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.chat_id);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_messages_createChat extends TLObject {
        public static int constructor = NUM;
        public String title;
        public ArrayList<InputUser> users = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
            stream.writeString(this.title);
        }
    }

    public static class TL_messages_getSearchResultsCalendar extends TLObject {
        public static int constructor = NUM;
        public MessagesFilter filter;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_searchResultsCalendar.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.offset_date);
        }
    }

    public static class TL_updates_getState extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_updates_state.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updates_getDifference extends TLObject {
        public static int constructor = NUM;
        public int date;
        public int flags;
        public int pts;
        public int pts_total_limit;
        public int qts;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return updates_Difference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.pts);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.pts_total_limit);
            }
            stream.writeInt32(this.date);
            stream.writeInt32(this.qts);
        }
    }

    public static class TL_updates_getChannelDifference extends TLObject {
        public static int constructor = 51854712;
        public InputChannel channel;
        public ChannelMessagesFilter filter;
        public int flags;
        public boolean force;
        public int limit;
        public int pts;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return updates_ChannelDifference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.force ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.channel.serializeToStream(stream);
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.pts);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_photos_updateProfilePhoto extends TLObject {
        public static int constructor = NUM;
        public InputPhoto id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_photos_photo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
        }
    }

    public static class TL_photos_uploadProfilePhoto extends TLObject {
        public static int constructor = -NUM;
        public InputFile file;
        public int flags;
        public InputFile video;
        public double video_start_ts;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_photos_photo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.file.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.video.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeDouble(this.video_start_ts);
            }
        }
    }

    public static class TL_photos_deletePhotos extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<InputPhoto> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                vector.objects.add(Long.valueOf(stream.readInt64(exception)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.id.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_upload_getFile extends TLObject {
        public static int constructor = -NUM;
        public boolean cdn_supported;
        public int flags;
        public int limit;
        public InputFileLocation location;
        public int offset;
        public boolean precise;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return upload_File.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.precise ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.cdn_supported ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_help_getConfig extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_config.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_getNearestDc extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_nearestDc.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_getAppUpdate extends TLObject {
        public static int constructor = NUM;
        public String source;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_AppUpdate.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.source);
        }
    }

    public static class TL_help_getAppConfig extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return JSONValue.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_saveAppLog extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_inputAppEvent> events = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.events.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.events.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_help_getInviteText extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_help_inviteText.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_photos_getUserPhotos extends TLObject {
        public static int constructor = -NUM;
        public int limit;
        public long max_id;
        public int offset;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return photos_Photos.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.offset);
            stream.writeInt64(this.max_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_forwardMessage extends TLObject {
        public static int constructor = NUM;
        public int id;
        public InputPeer peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            stream.writeInt64(this.random_id);
        }
    }

    public static class TL_messages_getDhConfig extends TLObject {
        public static int constructor = NUM;
        public int random_length;
        public int version;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_DhConfig.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.version);
            stream.writeInt32(this.random_length);
        }
    }

    public static class TL_messages_requestEncryption extends TLObject {
        public static int constructor = -NUM;
        public byte[] g_a;
        public int random_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return EncryptedChat.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.random_id);
            stream.writeByteArray(this.g_a);
        }
    }

    public static class TL_messages_acceptEncryption extends TLObject {
        public static int constructor = NUM;
        public byte[] g_b;
        public long key_fingerprint;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return EncryptedChat.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeByteArray(this.g_b);
            stream.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_messages_discardEncryption extends TLObject {
        public static int constructor = -NUM;
        public int chat_id;
        public boolean delete_history;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.delete_history ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_setEncryptedTyping extends TLObject {
        public static int constructor = NUM;
        public TL_inputEncryptedChat peer;
        public boolean typing;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeBool(this.typing);
        }
    }

    public static class TL_messages_readEncryptedHistory extends TLObject {
        public static int constructor = NUM;
        public int max_date;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.max_date);
        }
    }

    public static class TL_messages_receivedQueue extends TLObject {
        public static int constructor = NUM;
        public int max_qts;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                vector.objects.add(Long.valueOf(stream.readInt64(exception)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.max_qts);
        }
    }

    public static class TL_messages_reportEncryptedSpam extends TLObject {
        public static int constructor = NUM;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_help_getSupport extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_help_support.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_readMessageContents extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_account_checkUsername extends TLObject {
        public static int constructor = NUM;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.username);
        }
    }

    public static class TL_account_updateUsername extends TLObject {
        public static int constructor = NUM;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return User.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.username);
        }
    }

    public static class TL_contacts_search extends TLObject {
        public static int constructor = NUM;
        public int limit;
        public String q;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_contacts_found.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_account_getPrivacy extends TLObject {
        public static int constructor = -NUM;
        public InputPrivacyKey key;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_privacyRules.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.key.serializeToStream(stream);
        }
    }

    public static class TL_account_setPrivacy extends TLObject {
        public static int constructor = -NUM;
        public InputPrivacyKey key;
        public ArrayList<InputPrivacyRule> rules = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_privacyRules.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.key.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.rules.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.rules.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_deleteAccount extends TLObject {
        public static int constructor = NUM;
        public String reason;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.reason);
        }
    }

    public static class TL_account_getAccountTTL extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_accountDaysTTL.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_setAccountTTL extends TLObject {
        public static int constructor = NUM;
        public TL_accountDaysTTL ttl;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.ttl.serializeToStream(stream);
        }
    }

    public static class TL_contacts_resolveUsername extends TLObject {
        public static int constructor = -NUM;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_contacts_resolvedPeer.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.username);
        }
    }

    public static class TL_contacts_getTopPeers extends TLObject {
        public static int constructor = -NUM;
        public boolean bots_inline;
        public boolean bots_pm;
        public boolean channels;
        public boolean correspondents;
        public int flags;
        public boolean forward_chats;
        public boolean forward_users;
        public boolean groups;
        public long hash;
        public int limit;
        public int offset;
        public boolean phone_calls;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return contacts_TopPeers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.correspondents ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.bots_pm ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.bots_inline ? i2 | 4 : i2 & -5;
            this.flags = i3;
            int i4 = this.phone_calls ? i3 | 8 : i3 & -9;
            this.flags = i4;
            int i5 = this.forward_users ? i4 | 16 : i4 & -17;
            this.flags = i5;
            int i6 = this.forward_chats ? i5 | 32 : i5 & -33;
            this.flags = i6;
            int i7 = this.groups ? i6 | 1024 : i6 & -1025;
            this.flags = i7;
            int i8 = this.channels ? i7 | 32768 : i7 & -32769;
            this.flags = i8;
            stream.writeInt32(i8);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_contacts_resetTopPeerRating extends TLObject {
        public static int constructor = NUM;
        public TopPeerCategory category;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.category.serializeToStream(stream);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_account_sendChangePhoneCode extends TLObject {
        public static int constructor = -NUM;
        public String phone_number;
        public TL_codeSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_sentCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_changePhone extends TLObject {
        public static int constructor = NUM;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return User.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
            stream.writeString(this.phone_code);
        }
    }

    public static class TL_account_getWebAuthorizations extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_webAuthorizations.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_resetWebAuthorization extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_account_resetWebAuthorizations extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getMultiWallPapers extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputWallPaper> wallpapers = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                WallPaper object = WallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.wallpapers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.wallpapers.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_getGlobalPrivacySettings extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_globalPrivacySettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_setGlobalPrivacySettings extends TLObject {
        public static int constructor = NUM;
        public TL_globalPrivacySettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_globalPrivacySettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_reportProfilePhoto extends TLObject {
        public static int constructor = -91437323;
        public String message;
        public InputPeer peer;
        public InputPhoto photo_id;
        public ReportReason reason;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.photo_id.serializeToStream(stream);
            this.reason.serializeToStream(stream);
            stream.writeString(this.message);
        }
    }

    public static class TL_account_getAllSecureValues extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_secureValue object = TL_secureValue.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getSecureValue extends TLObject {
        public static int constructor = NUM;
        public ArrayList<SecureValueType> types = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_secureValue object = TL_secureValue.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.types.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.types.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_saveSecureValue extends TLObject {
        public static int constructor = -NUM;
        public long secure_secret_id;
        public TL_inputSecureValue value;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_secureValue.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.value.serializeToStream(stream);
            stream.writeInt64(this.secure_secret_id);
        }
    }

    public static class TL_account_deleteSecureValue extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<SecureValueType> types = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.types.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.types.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_getAuthorizationForm extends TLObject {
        public static int constructor = -NUM;
        public long bot_id;
        public String public_key;
        public String scope;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_authorizationForm.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.bot_id);
            stream.writeString(this.scope);
            stream.writeString(this.public_key);
        }
    }

    public static class TL_account_acceptAuthorization extends TLObject {
        public static int constructor = -NUM;
        public long bot_id;
        public TL_secureCredentialsEncrypted credentials;
        public String public_key;
        public String scope;
        public ArrayList<TL_secureValueHash> value_hashes = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.bot_id);
            stream.writeString(this.scope);
            stream.writeString(this.public_key);
            stream.writeInt32(NUM);
            int count = this.value_hashes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.value_hashes.get(a).serializeToStream(stream);
            }
            this.credentials.serializeToStream(stream);
        }
    }

    public static class TL_account_sendVerifyPhoneCode extends TLObject {
        public static int constructor = -NUM;
        public String phone_number;
        public TL_codeSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_sentCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_verifyPhone extends TLObject {
        public static int constructor = NUM;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
            stream.writeString(this.phone_code);
        }
    }

    public static class TL_account_sendVerifyEmailCode extends TLObject {
        public static int constructor = NUM;
        public String email;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_sentEmailCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.email);
        }
    }

    public static class TL_account_verifyEmail extends TLObject {
        public static int constructor = -NUM;
        public String code;
        public String email;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.email);
            stream.writeString(this.code);
        }
    }

    public static class TL_account_confirmPasswordEmail extends TLObject {
        public static int constructor = -NUM;
        public String code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.code);
        }
    }

    public static class TL_account_resendPasswordEmail extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_cancelPasswordEmail extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getContactSignUpNotification extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_setContactSignUpNotification extends TLObject {
        public static int constructor = -NUM;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.silent);
        }
    }

    public static class TL_account_getNotifyExceptions extends TLObject {
        public static int constructor = NUM;
        public boolean compare_sound;
        public int flags;
        public InputNotifyPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.compare_sound ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 1) != 0) {
                this.peer.serializeToStream(stream);
            }
        }
    }

    public static class TL_account_getWallPaper extends TLObject {
        public static int constructor = -57811990;
        public InputWallPaper wallpaper;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return WallPaper.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.wallpaper.serializeToStream(stream);
        }
    }

    public static class TL_account_uploadWallPaper extends TLObject {
        public static int constructor = -NUM;
        public InputFile file;
        public String mime_type;
        public TL_wallPaperSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return WallPaper.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.file.serializeToStream(stream);
            stream.writeString(this.mime_type);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_saveWallPaper extends TLObject {
        public static int constructor = NUM;
        public TL_wallPaperSettings settings;
        public boolean unsave;
        public InputWallPaper wallpaper;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.wallpaper.serializeToStream(stream);
            stream.writeBool(this.unsave);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_installWallPaper extends TLObject {
        public static int constructor = -18000023;
        public TL_wallPaperSettings settings;
        public InputWallPaper wallpaper;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.wallpaper.serializeToStream(stream);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_resetWallPapers extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getAutoDownloadSettings extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_autoDownloadSettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_saveAutoDownloadSettings extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public boolean high;
        public boolean low;
        public TL_autoDownloadSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.low ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.high ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_uploadTheme extends TLObject {
        public static int constructor = NUM;
        public InputFile file;
        public String file_name;
        public int flags;
        public String mime_type;
        public InputFile thumb;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Document.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.file.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.thumb.serializeToStream(stream);
            }
            stream.writeString(this.file_name);
            stream.writeString(this.mime_type);
        }
    }

    public static class TL_account_createTheme extends TLObject {
        public static int constructor = -NUM;
        public InputDocument document;
        public int flags;
        public TL_inputThemeSettings settings;
        public String slug;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Theme.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.slug);
            stream.writeString(this.title);
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_account_updateTheme extends TLObject {
        public static int constructor = NUM;
        public InputDocument document;
        public int flags;
        public String format;
        public TL_inputThemeSettings settings;
        public String slug;
        public InputTheme theme;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Theme.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.format);
            this.theme.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.slug);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 4) != 0) {
                this.document.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                this.settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_account_saveTheme extends TLObject {
        public static int constructor = -NUM;
        public InputTheme theme;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.theme.serializeToStream(stream);
            stream.writeBool(this.unsave);
        }
    }

    public static class TL_account_installTheme extends TLObject {
        public static int constructor = NUM;
        public boolean dark;
        public int flags;
        public String format;
        public InputTheme theme;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.dark ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.format);
            }
            if ((this.flags & 2) != 0) {
                this.theme.serializeToStream(stream);
            }
        }
    }

    public static class TL_account_getTheme extends TLObject {
        public static int constructor = -NUM;
        public long document_id;
        public String format;
        public InputTheme theme;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Theme.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.format);
            this.theme.serializeToStream(stream);
            stream.writeInt64(this.document_id);
        }
    }

    public static class TL_account_getThemes extends TLObject {
        public static int constructor = NUM;
        public String format;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_Themes.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.format);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_account_updateDeviceLocked extends TLObject {
        public static int constructor = NUM;
        public int period;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.period);
        }
    }

    public static class TL_messages_getWebPagePreview extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public String message;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return MessageMedia.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.message);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_account_getAuthorizations extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_authorizations.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_resetAuthorization extends TLObject {
        public static int constructor = -NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_account_getPassword extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_password.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_getPasswordSettings extends TLObject {
        public static int constructor = -NUM;
        public InputCheckPasswordSRP password;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_passwordSettings.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.password.serializeToStream(stream);
        }
    }

    public static class TL_account_updatePasswordSettings extends TLObject {
        public static int constructor = -NUM;
        public TL_account_passwordInputSettings new_settings;
        public InputCheckPasswordSRP password;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.password.serializeToStream(stream);
            this.new_settings.serializeToStream(stream);
        }
    }

    public static class TL_account_sendConfirmPhoneCode extends TLObject {
        public static int constructor = NUM;
        public String hash;
        public TL_codeSettings settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_sentCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.hash);
            this.settings.serializeToStream(stream);
        }
    }

    public static class TL_account_confirmPhone extends TLObject {
        public static int constructor = NUM;
        public String phone_code;
        public String phone_code_hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_code_hash);
            stream.writeString(this.phone_code);
        }
    }

    public static class TL_account_getTmpPassword extends TLObject {
        public static int constructor = NUM;
        public InputCheckPasswordSRP password;
        public int period;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_account_tmpPassword.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.password.serializeToStream(stream);
            stream.writeInt32(this.period);
        }
    }

    public static class TL_auth_checkPassword extends TLObject {
        public static int constructor = -NUM;
        public InputCheckPasswordSRP password;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_Authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.password.serializeToStream(stream);
        }
    }

    public static class TL_auth_requestPasswordRecovery extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_passwordRecovery.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_auth_recoverPassword extends TLObject {
        public static int constructor = NUM;
        public String code;
        public int flags;
        public TL_account_passwordInputSettings new_settings;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return auth_Authorization.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.code);
            if ((this.flags & 1) != 0) {
                this.new_settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_auth_resendCode extends TLObject {
        public static int constructor = NUM;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_auth_sentCode.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
        }
    }

    public static class TL_auth_cancelCode extends TLObject {
        public static int constructor = NUM;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.phone_number);
            stream.writeString(this.phone_code_hash);
        }
    }

    public static class TL_messages_exportChatInvite extends TLObject {
        public static int constructor = -NUM;
        public int expire_date;
        public int flags;
        public boolean legacy_revoke_permanent;
        public InputPeer peer;
        public boolean request_needed;
        public String title;
        public int usage_limit;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return ExportedChatInvite.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.legacy_revoke_permanent ? this.flags | 4 : this.flags & -5;
            this.flags = i;
            int i2 = this.request_needed ? i | 8 : i & -9;
            this.flags = i2;
            stream.writeInt32(i2);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.expire_date);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.usage_limit);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.title);
            }
        }
    }

    public static class TL_messages_checkChatInvite extends TLObject {
        public static int constructor = NUM;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return ChatInvite.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.hash);
        }
    }

    public static class TL_messages_importChatInvite extends TLObject {
        public static int constructor = NUM;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.hash);
        }
    }

    public static class TL_messages_getStickerSet extends TLObject {
        public static int constructor = NUM;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_stickerSet.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.stickerset.serializeToStream(stream);
        }
    }

    public static class TL_messages_installStickerSet extends TLObject {
        public static int constructor = -NUM;
        public boolean archived;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_StickerSetInstallResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.stickerset.serializeToStream(stream);
            stream.writeBool(this.archived);
        }
    }

    public static class TL_messages_uninstallStickerSet extends TLObject {
        public static int constructor = -NUM;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.stickerset.serializeToStream(stream);
        }
    }

    public static class TL_messages_startBot extends TLObject {
        public static int constructor = -NUM;
        public InputUser bot;
        public InputPeer peer;
        public long random_id;
        public String start_param;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot.serializeToStream(stream);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeString(this.start_param);
        }
    }

    public static class TL_messages_getMessagesViews extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public boolean increment;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_messageViews.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
            stream.writeBool(this.increment);
        }
    }

    public static class TL_messages_getSavedGifs extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_SavedGifs.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_saveGif extends TLObject {
        public static int constructor = NUM;
        public InputDocument id;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
            stream.writeBool(this.unsave);
        }
    }

    public static class TL_messages_getInlineBotResults extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;
        public int flags;
        public InputGeoPoint geo_point;
        public String offset;
        public InputPeer peer;
        public String query;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_BotResults.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.bot.serializeToStream(stream);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                this.geo_point.serializeToStream(stream);
            }
            stream.writeString(this.query);
            stream.writeString(this.offset);
        }
    }

    public static class TL_messages_sendInlineBotResult extends TLObject {
        public static int constructor = NUM;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public boolean hide_via;
        public String id;
        public InputPeer peer;
        public long query_id;
        public long random_id;
        public int reply_to_msg_id;
        public int schedule_date;
        public InputPeer send_as;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            int i2 = this.background ? i | 64 : i & -65;
            this.flags = i2;
            int i3 = this.clear_draft ? i2 | 128 : i2 & -129;
            this.flags = i3;
            int i4 = this.hide_via ? i3 | 2048 : i3 & -2049;
            this.flags = i4;
            stream.writeInt32(i4);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            stream.writeInt64(this.random_id);
            stream.writeInt64(this.query_id);
            stream.writeString(this.id);
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 8192) != 0) {
                this.send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_getMessageEditData extends TLObject {
        public static int constructor = -39416522;
        public int id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_messageEditData.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_messages_editMessage extends TLObject {
        public static int constructor = NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public int id;
        public InputMedia media;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public ReplyMarkup reply_markup;
        public int schedule_date;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.no_webpage ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.message);
            }
            if ((this.flags & 16384) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.schedule_date);
            }
        }
    }

    public static class TL_messages_getBotCallbackAnswer extends TLObject {
        public static int constructor = -NUM;
        public byte[] data;
        public int flags;
        public boolean game;
        public int msg_id;
        public InputCheckPasswordSRP password;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_botCallbackAnswer.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.game ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                stream.writeByteArray(this.data);
            }
            if ((this.flags & 4) != 0) {
                this.password.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_setBotCallbackAnswer extends TLObject {
        public static int constructor = -NUM;
        public boolean alert;
        public int cache_time;
        public int flags;
        public String message;
        public long query_id;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.alert ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.query_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.message);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.url);
            }
            stream.writeInt32(this.cache_time);
        }
    }

    public static class TL_messages_getPeerDialogs extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<InputDialogPeer> peers = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_peerDialogs.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.peers.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_saveDraft extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public int reply_to_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.no_webpage ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            this.peer.serializeToStream(stream);
            stream.writeString(this.message);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.entities.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static class TL_messages_getAllDrafts extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_getFeaturedStickers extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_FeaturedStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_readFeaturedStickers extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Long> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.id.get(a).longValue());
            }
        }
    }

    public static class TL_messages_getRecentStickers extends TLObject {
        public static int constructor = -NUM;
        public boolean attached;
        public int flags;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_RecentStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.attached ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_saveRecentSticker extends TLObject {
        public static int constructor = NUM;
        public boolean attached;
        public int flags;
        public InputDocument id;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.attached ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.id.serializeToStream(stream);
            stream.writeBool(this.unsave);
        }
    }

    public static class TL_messages_clearRecentStickers extends TLObject {
        public static int constructor = -NUM;
        public boolean attached;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.attached ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
        }
    }

    public static class TL_messages_getArchivedStickers extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public int limit;
        public boolean masks;
        public long offset_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_archivedStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.masks ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.offset_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_setGameScore extends TLObject {
        public static int constructor = -NUM;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public int id;
        public InputPeer peer;
        public int score;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.edit_message ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.force ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.score);
        }
    }

    public static class TL_messages_setInlineGameScore extends TLObject {
        public static int constructor = NUM;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public TL_inputBotInlineMessageID id;
        public int score;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.edit_message ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.force ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.id.serializeToStream(stream);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.score);
        }
    }

    public static class TL_messages_getMaskStickers extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_AllStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getGameHighScores extends TLObject {
        public static int constructor = -NUM;
        public int id;
        public InputPeer peer;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_highScores.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_messages_getInlineGameHighScores extends TLObject {
        public static int constructor = NUM;
        public TL_inputBotInlineMessageID id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_highScores.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_messages_getAttachedStickers extends TLObject {
        public static int constructor = -NUM;
        public InputStickeredMedia media;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                StickerSetCovered object = StickerSetCovered.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_messages_getCommonChats extends TLObject {
        public static int constructor = -NUM;
        public int limit;
        public long max_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
            stream.writeInt64(this.max_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getAllChats extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Long> except_ids = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.except_ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.except_ids.get(a).longValue());
            }
        }
    }

    public static class TL_messages_getWebPage extends TLObject {
        public static int constructor = NUM;
        public int hash;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return WebPage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_messages_toggleDialogPin extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public InputDialogPeer peer;
        public boolean pinned;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.pinned ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_reorderPinnedDialogs extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public int folder_id;
        public boolean force;
        public ArrayList<InputDialogPeer> order = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.force ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.folder_id);
            stream.writeInt32(NUM);
            int count = this.order.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.order.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_getPinnedDialogs extends TLObject {
        public static int constructor = -NUM;
        public int folder_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_peerDialogs.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.folder_id);
        }
    }

    public static class TL_messages_uploadMedia extends TLObject {
        public static int constructor = NUM;
        public InputMedia media;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return MessageMedia.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_messages_sendScreenshotNotification extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public long random_id;
        public int reply_to_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.reply_to_msg_id);
            stream.writeInt64(this.random_id);
        }
    }

    public static class TL_messages_getFavedStickers extends TLObject {
        public static int constructor = 82946729;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_FavedStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_faveSticker extends TLObject {
        public static int constructor = -NUM;
        public InputDocument id;
        public boolean unfave;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
            stream.writeBool(this.unfave);
        }
    }

    public static class TL_messages_getUnreadMentions extends TLObject {
        public static int constructor = NUM;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.add_offset);
            stream.writeInt32(this.limit);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.min_id);
        }
    }

    public static class TL_messages_readMentions extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedHistory.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getRecentLocations extends TLObject {
        public static int constructor = NUM;
        public long hash;
        public int limit;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.limit);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_sendMultiMedia extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public ArrayList<TL_inputSingleMedia> multi_media = new ArrayList<>();
        public InputPeer peer;
        public int reply_to_msg_id;
        public int schedule_date;
        public InputPeer send_as;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            int i2 = this.background ? i | 64 : i & -65;
            this.flags = i2;
            int i3 = this.clear_draft ? i2 | 128 : i2 & -129;
            this.flags = i3;
            stream.writeInt32(i3);
            this.peer.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
            stream.writeInt32(NUM);
            int count = this.multi_media.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.multi_media.get(a).serializeToStream(stream);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.schedule_date);
            }
            if ((this.flags & 8192) != 0) {
                this.send_as.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_clearAllDrafts extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_updatePinnedMessage extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int id;
        public InputPeer peer;
        public boolean pm_oneside;
        public boolean silent;
        public boolean unpin;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.unpin ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.pm_oneside ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_messages_sendVote extends TLObject {
        public static int constructor = NUM;
        public int msg_id;
        public ArrayList<byte[]> options = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(NUM);
            int count = this.options.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeByteArray(this.options.get(a));
            }
        }
    }

    public static class TL_messages_getPollResults extends TLObject {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_messages_getOnlines extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_chatOnlines.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getStatsURL extends TLObject {
        public static int constructor = -NUM;
        public boolean dark;
        public int flags;
        public String params;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_statsURL.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.dark ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeString(this.params);
        }
    }

    public static class TL_messages_editChatAbout extends TLObject {
        public static int constructor = -NUM;
        public String about;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeString(this.about);
        }
    }

    public static class TL_messages_editChatDefaultBannedRights extends TLObject {
        public static int constructor = -NUM;
        public TL_chatBannedRights banned_rights;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_messages_getEmojiKeywords extends TLObject {
        public static int constructor = NUM;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_emojiKeywordsDifference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
        }
    }

    public static class TL_messages_getEmojiKeywordsDifference extends TLObject {
        public static int constructor = NUM;
        public int from_version;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_emojiKeywordsDifference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
            stream.writeInt32(this.from_version);
        }
    }

    public static class TL_messages_getEmojiKeywordsLanguages extends TLObject {
        public static int constructor = NUM;
        public ArrayList<String> lang_codes = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_emojiLanguage object = TL_emojiLanguage.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.lang_codes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.lang_codes.get(a));
            }
        }
    }

    public static class TL_messages_getEmojiURL extends TLObject {
        public static int constructor = -NUM;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_emojiURL.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
        }
    }

    public static class TL_messages_getSearchCounters extends TLObject {
        public static int constructor = NUM;
        public ArrayList<MessagesFilter> filters = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_messages_searchCounter object = TL_messages_searchCounter.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.filters.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.filters.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_requestUrlAuth extends TLObject {
        public static int constructor = NUM;
        public int button_id;
        public int flags;
        public int msg_id;
        public InputPeer peer;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return UrlAuthResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                this.peer.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.msg_id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.button_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.url);
            }
        }
    }

    public static class TL_messages_acceptUrlAuth extends TLObject {
        public static int constructor = -NUM;
        public int button_id;
        public int flags;
        public int msg_id;
        public InputPeer peer;
        public String url;
        public boolean write_allowed;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return UrlAuthResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.write_allowed ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            if ((this.flags & 2) != 0) {
                this.peer.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.msg_id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.button_id);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.url);
            }
        }
    }

    public static class TL_messages_hidePeerSettingsBar extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getScheduledHistory extends TLObject {
        public static int constructor = -NUM;
        public long hash;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getScheduledMessages extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_sendScheduledMessages extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_deleteScheduledMessages extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public InputPeer peer;

        public static TL_messages_deleteScheduledMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_deleteScheduledMessages result = new TL_messages_deleteScheduledMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_deleteScheduledMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.peer = InputPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.id.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_sendReaction extends TLObject {
        public static int constructor = NUM;
        public boolean big;
        public int flags;
        public int msg_id;
        public InputPeer peer;
        public String reaction;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.big ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.reaction);
            }
        }
    }

    public static class TL_messages_translateText extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public String from_lang;
        public int msg_id;
        public InputPeer peer;
        public String text;
        public String to_lang;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_TranslatedText.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.peer.serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.msg_id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.text);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.from_lang);
            }
            stream.writeString(this.to_lang);
        }
    }

    public static class TL_messages_getUnreadReactions extends TLObject {
        public static int constructor = -NUM;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.add_offset);
            stream.writeInt32(this.limit);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.min_id);
        }
    }

    public static class TL_messages_readReactions extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedHistory.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_sendWebViewData extends TLObject {
        public static int constructor = -NUM;
        public InputUser bot;
        public String button_text;
        public String data;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeString(this.button_text);
            stream.writeString(this.data);
        }
    }

    public static class TL_messages_getMessagesReactions extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> id = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_messages_getMessageReactionsList extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int id;
        public int limit;
        public String offset;
        public InputPeer peer;
        public String reaction;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_messageReactionsList.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.reaction);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.offset);
            }
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_setChatAvailableReactions extends TLObject {
        public static int constructor = NUM;
        public ArrayList<String> available_reactions = new ArrayList<>();
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.available_reactions.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.available_reactions.get(a));
            }
        }
    }

    public static class TL_messages_getAvailableReactions extends TLObject {
        public static int constructor = NUM;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_AvailableReactions.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.hash);
        }
    }

    public static class TL_messages_searchResultsCalendar extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public int count;
        public int flags;
        public boolean inexact;
        public ArrayList<Message> messages = new ArrayList<>();
        public int min_date;
        public int min_msg_id;
        public int offset_id_offset;
        public ArrayList<TL_searchResultsCalendarPeriod> periods = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_searchResultsCalendar TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_searchResultsCalendar result = new TL_messages_searchResultsCalendar();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_searchResultsCalendar", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.inexact = (readInt32 & 1) != 0;
            this.count = stream.readInt32(exception);
            this.min_date = stream.readInt32(exception);
            this.min_msg_id = stream.readInt32(exception);
            if ((this.flags & 2) != 0) {
                this.offset_id_offset = stream.readInt32(exception);
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count2 = stream.readInt32(exception);
                int a = 0;
                while (a < count2) {
                    TL_searchResultsCalendarPeriod object = TL_searchResultsCalendarPeriod.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.periods.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count3 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count3) {
                        Message object2 = Message.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.messages.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count4 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count4) {
                            Chat object3 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.chats.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                        int magic4 = stream.readInt32(exception);
                        if (magic4 == NUM) {
                            int count5 = stream.readInt32(exception);
                            int a4 = 0;
                            while (a4 < count5) {
                                User object4 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                                if (object4 != null) {
                                    this.users.add(object4);
                                    a4++;
                                } else {
                                    return;
                                }
                            }
                        } else if (exception) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic4)}));
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.inexact ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(this.count);
            stream.writeInt32(this.min_date);
            stream.writeInt32(this.min_msg_id);
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.offset_id_offset);
            }
            stream.writeInt32(NUM);
            int count2 = this.periods.size();
            stream.writeInt32(count2);
            for (int a = 0; a < count2; a++) {
                this.periods.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.messages.size();
            stream.writeInt32(count3);
            for (int a2 = 0; a2 < count3; a2++) {
                this.messages.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count4 = this.chats.size();
            stream.writeInt32(count4);
            for (int a3 = 0; a3 < count4; a3++) {
                this.chats.get(a3).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count5 = this.users.size();
            stream.writeInt32(count5);
            for (int a4 = 0; a4 < count5; a4++) {
                this.users.get(a4).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_getPollVotes extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int id;
        public int limit;
        public String offset;
        public byte[] option;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_votesList.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                stream.writeByteArray(this.option);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.offset);
            }
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getDialogFilters extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_dialogFilter object = TL_dialogFilter.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_getSuggestedDialogFilters extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_dialogFilterSuggested object = TL_dialogFilterSuggested.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_updateDialogFilter extends TLObject {
        public static int constructor = NUM;
        public TL_dialogFilter filter;
        public int flags;
        public int id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                this.filter.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_updateDialogFiltersOrder extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> order = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.order.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.order.get(a).intValue());
            }
        }
    }

    public static class TL_messages_getOldFeaturedStickers extends TLObject {
        public static int constructor = NUM;
        public long hash;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_FeaturedStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getReplies extends TLObject {
        public static int constructor = NUM;
        public int add_offset;
        public long hash;
        public int limit;
        public int max_id;
        public int min_id;
        public int msg_id;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.offset_date);
            stream.writeInt32(this.add_offset);
            stream.writeInt32(this.limit);
            stream.writeInt32(this.max_id);
            stream.writeInt32(this.min_id);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getDiscussionMessage extends TLObject {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_discussionMessage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_messages_readDiscussion extends TLObject {
        public static int constructor = -NUM;
        public int msg_id;
        public InputPeer peer;
        public int read_max_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(this.read_max_id);
        }
    }

    public static class TL_messages_unpinAllMessages extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedHistory.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getExportedChatInvites extends TLObject {
        public static int constructor = -NUM;
        public InputUser admin_id;
        public int flags;
        public int limit;
        public int offset_date;
        public String offset_link;
        public InputPeer peer;
        public boolean revoked;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_exportedChatInvites.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoked ? this.flags | 8 : this.flags & -9;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            this.admin_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32(this.offset_date);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.offset_link);
            }
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getExportedChatInvite extends TLObject {
        public static int constructor = NUM;
        public String link;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_ExportedChatInvite.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeString(this.link);
        }
    }

    public static class TL_messages_editExportedChatInvite extends TLObject {
        public static int constructor = -NUM;
        public int expire_date;
        public int flags;
        public String link;
        public InputPeer peer;
        public boolean request_needed;
        public boolean revoked;
        public String title;
        public int usage_limit;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_ExportedChatInvite.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoked ? this.flags | 4 : this.flags & -5;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeString(this.link);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.expire_date);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.usage_limit);
            }
            if ((this.flags & 8) != 0) {
                stream.writeBool(this.request_needed);
            }
            if ((this.flags & 16) != 0) {
                stream.writeString(this.title);
            }
        }
    }

    public static class TL_messages_deleteRevokedExportedChatInvites extends TLObject {
        public static int constructor = NUM;
        public InputUser admin_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.admin_id.serializeToStream(stream);
        }
    }

    public static class TL_messages_deleteExportedChatInvite extends TLObject {
        public static int constructor = -NUM;
        public String link;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeString(this.link);
        }
    }

    public static class TL_messages_getAdminsWithInvites extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_chatAdminsWithInvites.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getChatInviteImporters extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int limit;
        public String link;
        public int offset_date;
        public InputUser offset_user;
        public InputPeer peer;
        public String q;
        public boolean requested;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_chatInviteImporters.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.requested ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.link);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.q);
            }
            stream.writeInt32(this.offset_date);
            this.offset_user.serializeToStream(stream);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_messages_hideChatJoinRequest extends TLObject {
        public static int constructor = NUM;
        public boolean approved;
        public int flags;
        public InputPeer peer;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.approved ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            this.user_id.serializeToStream(stream);
        }
    }

    public static class TL_messages_hideAllChatJoinRequests extends TLObject {
        public static int constructor = -NUM;
        public boolean approved;
        public int flags;
        public String link;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.approved ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.link);
            }
        }
    }

    public static class TL_messages_toggleNoForwards extends TLObject {
        public static int constructor = -NUM;
        public boolean enabled;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeBool(this.enabled);
        }
    }

    public static class TL_messages_saveDefaultSendAs extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public InputPeer send_as;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.send_as.serializeToStream(stream);
        }
    }

    public static class TL_messages_setHistoryTTL extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public int period;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.period);
        }
    }

    public static class TL_messages_deleteChat extends TLObject {
        public static int constructor = NUM;
        public long chat_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.chat_id);
        }
    }

    public static class TL_messages_deletePhoneCallHistory extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public boolean revoke;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedFoundMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.revoke ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
        }
    }

    public static class TL_messages_checkHistoryImport extends TLObject {
        public static int constructor = NUM;
        public String import_head;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_historyImportParsed.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.import_head);
        }
    }

    public static class TL_messages_initHistoryImport extends TLObject {
        public static int constructor = NUM;
        public InputFile file;
        public int media_count;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_historyImport.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.file.serializeToStream(stream);
            stream.writeInt32(this.media_count);
        }
    }

    public static class TL_messages_uploadImportedMedia extends TLObject {
        public static int constructor = NUM;
        public String file_name;
        public long import_id;
        public InputMedia media;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return MessageMedia.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.import_id);
            stream.writeString(this.file_name);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_messages_startHistoryImport extends TLObject {
        public static int constructor = -NUM;
        public long import_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.import_id);
        }
    }

    public static class TL_messages_checkHistoryImportPeer extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_checkedHistoryImportPeer.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_setChatTheme extends TLObject {
        public static int constructor = -NUM;
        public String emoticon;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeString(this.emoticon);
        }
    }

    public static class TL_help_getAppChangelog extends TLObject {
        public static int constructor = -NUM;
        public String prev_app_version;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.prev_app_version);
        }
    }

    public static class TL_messages_toggleStickerSets extends TLObject {
        public static int constructor = -NUM;
        public boolean archive;
        public int flags;
        public ArrayList<InputStickerSet> stickersets = new ArrayList<>();
        public boolean unarchive;
        public boolean uninstall;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.uninstall ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.archive ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.unarchive ? i2 | 4 : i2 & -5;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeInt32(NUM);
            int count = this.stickersets.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.stickersets.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_uploadEncryptedFile extends TLObject {
        public static int constructor = NUM;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return EncryptedFile.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.file.serializeToStream(stream);
        }
    }

    public static class TL_messages_searchStickerSets extends TLObject {
        public static int constructor = NUM;
        public boolean exclude_featured;
        public int flags;
        public long hash;
        public String q;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_FoundStickerSets.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.exclude_featured ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeString(this.q);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_markDialogUnread extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public InputDialogPeer peer;
        public boolean unread;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_messages_getDialogUnreadMarks extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                DialogPeer object = DialogPeer.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_help_setBotUpdatesStatus extends TLObject {
        public static int constructor = -NUM;
        public String message;
        public int pending_updates_count;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.pending_updates_count);
            stream.writeString(this.message);
        }
    }

    public static class TL_messages_reorderStickerSets extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.masks ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt32(NUM);
            int count = this.order.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt64(this.order.get(a).longValue());
            }
        }
    }

    public static class TL_messages_getDocumentByHash extends TLObject {
        public static int constructor = NUM;
        public String mime_type;
        public byte[] sha256;
        public int size;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Document.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.sha256);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
        }
    }

    public static class TL_help_getRecentMeUrls extends TLObject {
        public static int constructor = NUM;
        public String referer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_help_recentMeUrls.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.referer);
        }
    }

    public static class TL_help_getDeepLinkInfo extends TLObject {
        public static int constructor = NUM;
        public String path;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return help_DeepLinkInfo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.path);
        }
    }

    public static class TL_channels_readHistory extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.max_id);
        }
    }

    public static class TL_channels_deleteMessages extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList<>();

        public static TL_channels_deleteMessages TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channels_deleteMessages result = new TL_channels_deleteMessages();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_deleteMessages", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel = InputChannel.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.id.add(Integer.valueOf(stream.readInt32(exception)));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_channels_deleteParticipantHistory extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public InputPeer participant;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_affectedHistory.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channels_reportSpam extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList<>();
        public InputPeer participant;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.participant.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_channels_getMessages extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_channels_getParticipants extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public ChannelParticipantsFilter filter;
        public long hash;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return channels_ChannelParticipants.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_channels_getParticipant extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public InputPeer participant;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_channels_channelParticipant.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.participant.serializeToStream(stream);
        }
    }

    public static class TL_channels_getChannels extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputChannel> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.id.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_channels_getFullChannel extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_chatFull.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_createChannel extends TLObject {
        public static int constructor = NUM;
        public String about;
        public String address;
        public boolean broadcast;
        public int flags;
        public boolean for_import;
        public InputGeoPoint geo_point;
        public boolean megagroup;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.broadcast ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.megagroup ? i | 2 : i & -3;
            this.flags = i2;
            int i3 = this.for_import ? i2 | 8 : i2 & -9;
            this.flags = i3;
            stream.writeInt32(i3);
            stream.writeString(this.title);
            stream.writeString(this.about);
            if ((this.flags & 4) != 0) {
                this.geo_point.serializeToStream(stream);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.address);
            }
        }
    }

    public static class TL_channels_editAdmin extends TLObject {
        public static int constructor = -NUM;
        public TL_chatAdminRights admin_rights;
        public InputChannel channel;
        public String rank;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.user_id.serializeToStream(stream);
            this.admin_rights.serializeToStream(stream);
            stream.writeString(this.rank);
        }
    }

    public static class TL_channels_editTitle extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeString(this.title);
        }
    }

    public static class TL_channels_editPhoto extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public InputChatPhoto photo;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.photo.serializeToStream(stream);
        }
    }

    public static class TL_channels_checkUsername extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeString(this.username);
        }
    }

    public static class TL_channels_updateUsername extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeString(this.username);
        }
    }

    public static class TL_channels_joinChannel extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_leaveChannel extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_inviteToChannel extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public ArrayList<InputUser> users = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_channels_deleteChannel extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_exportMessageLink extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int flags;
        public boolean grouped;
        public int id;
        public boolean thread;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_exportedMessageLink.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.grouped ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.thread ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_channels_toggleSignatures extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeBool(this.enabled);
        }
    }

    public static class TL_channels_getAdminedPublicChannels extends TLObject {
        public static int constructor = -NUM;
        public boolean by_location;
        public boolean check_limit;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Chats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.by_location ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.check_limit ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
        }
    }

    public static class TL_channels_editBanned extends TLObject {
        public static int constructor = -NUM;
        public TL_chatBannedRights banned_rights;
        public InputChannel channel;
        public InputPeer participant;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.participant.serializeToStream(stream);
            this.banned_rights.serializeToStream(stream);
        }
    }

    public static class TL_channels_getAdminLog extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputUser> admins = new ArrayList<>();
        public InputChannel channel;
        public TL_channelAdminLogEventsFilter events_filter;
        public int flags;
        public int limit;
        public long max_id;
        public long min_id;
        public String q;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_channels_adminLogResults.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.channel.serializeToStream(stream);
            stream.writeString(this.q);
            if ((this.flags & 1) != 0) {
                this.events_filter.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(NUM);
                int count = this.admins.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.admins.get(a).serializeToStream(stream);
                }
            }
            stream.writeInt64(this.max_id);
            stream.writeInt64(this.min_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_channels_setStickers extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            this.stickerset.serializeToStream(stream);
        }
    }

    public static class TL_channels_readMessageContents extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.id.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.id.get(a).intValue());
            }
        }
    }

    public static class TL_channels_deleteHistory extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int flags;
        public boolean for_everyone;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.for_everyone ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.max_id);
        }
    }

    public static class TL_channels_searchPosts extends TLObject {
        public static int constructor = NUM;
        public int limit;
        public int offset_id;
        public InputPeer offset_peer;
        public int offset_rate;
        public String q;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.q);
            stream.writeInt32(this.offset_rate);
            this.offset_peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_channels_toggleSlowMode extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int seconds;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.seconds);
        }
    }

    public static class TL_channels_getInactiveChannels extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_inactiveChats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_channels_convertToGigagroup extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_viewSponsoredMessage extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public byte[] random_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeByteArray(this.random_id);
        }
    }

    public static class TL_channels_getSponsoredMessages extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_sponsoredMessages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_channels_getSendAs extends TLObject {
        public static int constructor = NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_channels_sendAsPeers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_stickers_createStickerSet extends TLObject {
        public static int constructor = -NUM;
        public boolean animated;
        public int flags;
        public boolean masks;
        public String short_name;
        public String software;
        public ArrayList<TL_inputStickerSetItem> stickers = new ArrayList<>();
        public InputDocument thumb;
        public String title;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_stickerSet.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.masks ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.animated ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
            this.user_id.serializeToStream(stream);
            stream.writeString(this.title);
            stream.writeString(this.short_name);
            if ((this.flags & 4) != 0) {
                this.thumb.serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count = this.stickers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.stickers.get(a).serializeToStream(stream);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.software);
            }
        }
    }

    public static class TL_stickers_checkShortName extends TLObject {
        public static int constructor = NUM;
        public String short_name;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.short_name);
        }
    }

    public static class TL_stickers_suggestShortName extends TLObject {
        public static int constructor = NUM;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_stickers_suggestedShortName.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.title);
        }
    }

    public static class TL_phone_getCallConfig extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_dataJSON.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_phone_requestCall extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public byte[] g_a_hash;
        public TL_phoneCallProtocol protocol;
        public int random_id;
        public InputUser user_id;
        public boolean video;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_phoneCall.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.video ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.user_id.serializeToStream(stream);
            stream.writeInt32(this.random_id);
            stream.writeByteArray(this.g_a_hash);
            this.protocol.serializeToStream(stream);
        }
    }

    public static class TL_phone_acceptCall extends TLObject {
        public static int constructor = NUM;
        public byte[] g_b;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_phoneCall.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeByteArray(this.g_b);
            this.protocol.serializeToStream(stream);
        }
    }

    public static class TL_phone_confirmCall extends TLObject {
        public static int constructor = NUM;
        public byte[] g_a;
        public long key_fingerprint;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_phoneCall.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeByteArray(this.g_a);
            stream.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(stream);
        }
    }

    public static class TL_phone_receivedCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_phone_discardCall extends TLObject {
        public static int constructor = -NUM;
        public long connection_id;
        public int duration;
        public int flags;
        public TL_inputPhoneCall peer;
        public PhoneCallDiscardReason reason;
        public boolean video;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.video ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.duration);
            this.reason.serializeToStream(stream);
            stream.writeInt64(this.connection_id);
        }
    }

    public static class TL_phone_setCallRating extends TLObject {
        public static int constructor = NUM;
        public String comment;
        public int flags;
        public TL_inputPhoneCall peer;
        public int rating;
        public boolean user_initiative;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.user_initiative ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.rating);
            stream.writeString(this.comment);
        }
    }

    public static class TL_phone_saveCallDebug extends TLObject {
        public static int constructor = NUM;
        public TL_dataJSON debug;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.debug.serializeToStream(stream);
        }
    }

    public static class TL_phone_sendSignalingData extends TLObject {
        public static int constructor = -8744061;
        public byte[] data;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeByteArray(this.data);
        }
    }

    public static class TL_phone_createGroupCall extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public InputPeer peer;
        public int random_id;
        public int schedule_date;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.random_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.schedule_date);
            }
        }
    }

    public static class TL_phone_joinGroupCall extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public int flags;
        public String invite_hash;
        public InputPeer join_as;
        public boolean muted;
        public TL_dataJSON params;
        public boolean video_stopped;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.muted ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.video_stopped ? i | 4 : i & -5;
            this.flags = i2;
            stream.writeInt32(i2);
            this.call.serializeToStream(stream);
            this.join_as.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.invite_hash);
            }
            this.params.serializeToStream(stream);
        }
    }

    public static class TL_phone_leaveGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public int source;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(this.source);
        }
    }

    public static class TL_phone_inviteToGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public ArrayList<InputUser> users = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_phone_discardGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_phone_toggleGroupCallSettings extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public int flags;
        public boolean join_muted;
        public boolean reset_invite_hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.reset_invite_hash ? this.flags | 2 : this.flags & -3;
            this.flags = i;
            stream.writeInt32(i);
            this.call.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.join_muted);
            }
        }
    }

    public static class TL_phone_getGroupCall extends TLObject {
        public static int constructor = 68699611;
        public TL_inputGroupCall call;
        public int limit;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_groupCall.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_phone_getGroupParticipants extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public ArrayList<InputPeer> ids = new ArrayList<>();
        public int limit;
        public String offset;
        public ArrayList<Integer> sources = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_groupParticipants.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.ids.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.ids.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.sources.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                stream.writeInt32(this.sources.get(a2).intValue());
            }
            stream.writeString(this.offset);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_phone_checkGroupCall extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public ArrayList<Integer> sources = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                vector.objects.add(Integer.valueOf(stream.readInt32(exception)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.sources.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeInt32(this.sources.get(a).intValue());
            }
        }
    }

    public static class TL_phone_toggleGroupCallRecord extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public int flags;
        public boolean start;
        public String title;
        public boolean video;
        public boolean video_portrait;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.start ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.video ? i | 4 : i & -5;
            this.flags = i2;
            stream.writeInt32(i2);
            this.call.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.title);
            }
            if ((this.flags & 4) != 0) {
                stream.writeBool(this.video_portrait);
            }
        }
    }

    public static class TL_phone_editGroupCallParticipant extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public int flags;
        public boolean muted;
        public InputPeer participant;
        public boolean presentation_paused;
        public boolean raise_hand;
        public boolean video_paused;
        public boolean video_stopped;
        public int volume;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.call.serializeToStream(stream);
            this.participant.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeBool(this.muted);
            }
            if ((this.flags & 2) != 0) {
                stream.writeInt32(this.volume);
            }
            if ((this.flags & 4) != 0) {
                stream.writeBool(this.raise_hand);
            }
            if ((this.flags & 8) != 0) {
                stream.writeBool(this.video_stopped);
            }
            if ((this.flags & 16) != 0) {
                stream.writeBool(this.video_paused);
            }
            if ((this.flags & 32) != 0) {
                stream.writeBool(this.presentation_paused);
            }
        }
    }

    public static class TL_phone_editGroupCallTitle extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeString(this.title);
        }
    }

    public static class TL_phone_getGroupCallJoinAs extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_joinAsPeers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
        }
    }

    public static class TL_phone_exportGroupCallInvite extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public boolean can_self_unmute;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_exportedGroupCallInvite.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.can_self_unmute ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_phone_toggleGroupCallStartSubscription extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public boolean subscribed;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            stream.writeBool(this.subscribed);
        }
    }

    public static class TL_phone_startScheduledGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_phone_saveDefaultGroupCallJoinAs extends TLObject {
        public static int constructor = NUM;
        public InputPeer join_as;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.join_as.serializeToStream(stream);
        }
    }

    public static class TL_phone_joinGroupCallPresentation extends TLObject {
        public static int constructor = -NUM;
        public TL_inputGroupCall call;
        public TL_dataJSON params;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
            this.params.serializeToStream(stream);
        }
    }

    public static class TL_groupCallStreamChannel extends TLObject {
        public static int constructor = -NUM;
        public int channel;
        public long last_timestamp_ms;
        public int scale;

        public static TL_groupCallStreamChannel TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_groupCallStreamChannel result = new TL_groupCallStreamChannel();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallStreamChannel", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.channel = stream.readInt32(exception);
            this.scale = stream.readInt32(exception);
            this.last_timestamp_ms = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.channel);
            stream.writeInt32(this.scale);
            stream.writeInt64(this.last_timestamp_ms);
        }
    }

    public static class TL_phone_groupCallStreamChannels extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_groupCallStreamChannel> channels = new ArrayList<>();

        public static TL_phone_groupCallStreamChannels TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_phone_groupCallStreamChannels result = new TL_phone_groupCallStreamChannels();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCallStreamChannels", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_groupCallStreamChannel object = TL_groupCallStreamChannel.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.channels.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.channels.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.channels.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_phone_leaveGroupCallPresentation extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_phone_getGroupCallStreamChannels extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_groupCallStreamChannels.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.call.serializeToStream(stream);
        }
    }

    public static class TL_phone_getGroupCallStreamRtmpUrl extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public boolean revoke;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_phone_groupCallStreamRtmpUrl.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeBool(this.revoke);
        }
    }

    public static class TL_payments_getPaymentForm extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int msg_id;
        public InputPeer peer;
        public TL_dataJSON theme_params;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_payments_paymentForm.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                this.theme_params.serializeToStream(stream);
            }
        }
    }

    public static class TL_payments_getPaymentReceipt extends TLObject {
        public static int constructor = NUM;
        public int msg_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_payments_paymentReceipt.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_payments_validateRequestedInfo extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public TL_paymentRequestedInfo info;
        public int msg_id;
        public InputPeer peer;
        public boolean save;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_payments_validatedRequestedInfo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.save ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            this.info.serializeToStream(stream);
        }
    }

    public static class TL_payments_sendPaymentForm extends TLObject {
        public static int constructor = NUM;
        public InputPaymentCredentials credentials;
        public int flags;
        public long form_id;
        public int msg_id;
        public InputPeer peer;
        public String requested_info_id;
        public String shipping_option_id;
        public long tip_amount;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return payments_PaymentResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt64(this.form_id);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                stream.writeString(this.requested_info_id);
            }
            if ((this.flags & 2) != 0) {
                stream.writeString(this.shipping_option_id);
            }
            this.credentials.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt64(this.tip_amount);
            }
        }
    }

    public static class TL_help_supportName extends TLObject {
        public static int constructor = -NUM;
        public String name;

        public static TL_help_supportName TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_help_supportName result = new TL_help_supportName();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_supportName", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.name = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.name);
        }
    }

    public static class TL_inputThemeSettings extends TLObject {
        public static int constructor = -NUM;
        public int accent_color;
        public BaseTheme base_theme;
        public int flags;
        public ArrayList<Integer> message_colors = new ArrayList<>();
        public boolean message_colors_animated;
        public int outbox_accent_color;
        public InputWallPaper wallpaper;
        public WallPaperSettings wallpaper_settings;

        public static TL_inputThemeSettings TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_inputThemeSettings result = new TL_inputThemeSettings();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputThemeSettings", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.message_colors_animated = (readInt32 & 4) != 0;
            this.base_theme = BaseTheme.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.accent_color = stream.readInt32(exception);
            if ((this.flags & 8) != 0) {
                this.outbox_accent_color = stream.readInt32(exception);
            }
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    for (int a = 0; a < count; a++) {
                        this.message_colors.add(Integer.valueOf(stream.readInt32(exception)));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper = InputWallPaper.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper_settings = WallPaperSettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.message_colors_animated ? this.flags | 4 : this.flags & -5;
            this.flags = i;
            stream.writeInt32(i);
            this.base_theme.serializeToStream(stream);
            stream.writeInt32(this.accent_color);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.outbox_accent_color);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.message_colors.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    stream.writeInt32(this.message_colors.get(a).intValue());
                }
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper.serializeToStream(stream);
            }
            if ((this.flags & 2) != 0) {
                this.wallpaper_settings.serializeToStream(stream);
            }
        }
    }

    public static class TL_payments_getSavedInfo extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_payments_savedInfo.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_payments_clearSavedInfo extends TLObject {
        public static int constructor = -NUM;
        public boolean credentials;
        public int flags;
        public boolean info;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.credentials ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            int i2 = this.info ? i | 2 : i & -3;
            this.flags = i2;
            stream.writeInt32(i2);
        }
    }

    public static class TL_payments_getBankCardData extends TLObject {
        public static int constructor = NUM;
        public String number;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_payments_bankCardData.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.number);
        }
    }

    public static class TL_langpack_getLangPack extends TLObject {
        public static int constructor = -NUM;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_langPackDifference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
        }
    }

    public static class TL_langpack_getStrings extends TLObject {
        public static int constructor = NUM;
        public ArrayList<String> keys = new ArrayList<>();
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                LangPackString object = LangPackString.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_code);
            stream.writeInt32(NUM);
            int count = this.keys.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString(this.keys.get(a));
            }
        }
    }

    public static class TL_langpack_getDifference extends TLObject {
        public static int constructor = -NUM;
        public int from_version;
        public String lang_code;
        public String lang_pack;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_langPackDifference.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_pack);
            stream.writeString(this.lang_code);
            stream.writeInt32(this.from_version);
        }
    }

    public static class TL_langpack_getLanguages extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_langPackLanguage object = TL_langPackLanguage.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_langpack_getLanguage extends TLObject {
        public static int constructor = NUM;
        public String lang_code;
        public String lang_pack;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_langPackLanguage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.lang_pack);
            stream.writeString(this.lang_code);
        }
    }

    public static class TL_folders_editPeerFolders extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_inputFolderPeer> folder_peers = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.folder_peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.folder_peers.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_folders_deleteFolder extends TLObject {
        public static int constructor = NUM;
        public int folder_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Updates.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.folder_id);
        }
    }

    public static class TL_stats_getBroadcastStats extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public boolean dark;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_stats_broadcastStats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.dark ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_stats_loadAsyncGraph extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public String token;
        public long x;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return StatsGraph.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.token);
            if ((this.flags & 1) != 0) {
                stream.writeInt64(this.x);
            }
        }
    }

    public static class TL_stats_getMegagroupStats extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public boolean dark;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_stats_megagroupStats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.dark ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.channel.serializeToStream(stream);
        }
    }

    public static class TL_stats_getMessagePublicForwards extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public int limit;
        public int msg_id;
        public int offset_id;
        public InputPeer offset_peer;
        public int offset_rate;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Messages.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
            stream.writeInt32(this.offset_rate);
            this.offset_peer.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_stats_getMessageStats extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public boolean dark;
        public int flags;
        public int msg_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_stats_messageStats.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.dark ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.channel.serializeToStream(stream);
            stream.writeInt32(this.msg_id);
        }
    }

    public static class TL_photoPathSize extends PhotoSize {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = stream.readString(exception);
            this.bytes = stream.readByteArray(exception);
            this.h = 50;
            this.w = 50;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.type);
            stream.writeByteArray(this.bytes);
        }
    }

    public static abstract class RichText extends TLObject {
        public String email;
        public RichText parentRichText;
        public ArrayList<RichText> texts = new ArrayList<>();
        public String url;
        public long webpage_id;

        public static RichText TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            RichText result = null;
            switch (constructor) {
                case -1678197867:
                    result = new TL_textStrike();
                    break;
                case -1054465340:
                    result = new TL_textUnderline();
                    break;
                case -939827711:
                    result = new TL_textSuperscript();
                    break;
                case -653089380:
                    result = new TL_textItalic();
                    break;
                case -599948721:
                    result = new TL_textEmpty();
                    break;
                case -564523562:
                    result = new TL_textEmail();
                    break;
                case -311786236:
                    result = new TL_textSubscript();
                    break;
                case 55281185:
                    result = new TL_textMarked();
                    break;
                case 136105807:
                    result = new TL_textImage();
                    break;
                case 483104362:
                    result = new TL_textPhone();
                    break;
                case 894777186:
                    result = new TL_textAnchor();
                    break;
                case 1009288385:
                    result = new TL_textUrl();
                    break;
                case 1730456516:
                    result = new TL_textBold();
                    break;
                case 1816074681:
                    result = new TL_textFixed();
                    break;
                case 1950782688:
                    result = new TL_textPlain();
                    break;
                case 2120376535:
                    result = new TL_textConcat();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in RichText", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pageBlockList_layer82 extends TL_pageBlockList {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.ordered = stream.readBool(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    RichText object = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        TL_pageListItemText item = new TL_pageListItemText();
                        item.text = object;
                        this.items.add(item);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeBool(this.ordered);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_pageListItemText) this.items.get(a)).text.serializeToStream(stream);
            }
        }
    }

    public static class TL_channels_sendAsPeers extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList<>();
        public ArrayList<Peer> peers = new ArrayList<>();
        public ArrayList<User> users = new ArrayList<>();

        public static TL_channels_sendAsPeers TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_channels_sendAsPeers result = new TL_channels_sendAsPeers();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_sendAsPeers", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Peer object = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.peers.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        Chat object2 = Chat.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.chats.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                    int magic3 = stream.readInt32(exception);
                    if (magic3 == NUM) {
                        int count3 = stream.readInt32(exception);
                        int a3 = 0;
                        while (a3 < count3) {
                            User object3 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                            if (object3 != null) {
                                this.users.add(object3);
                                a3++;
                            } else {
                                return;
                            }
                        }
                    } else if (exception) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic3)}));
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.peers.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.peers.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.chats.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.chats.get(a2).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count3 = this.users.size();
            stream.writeInt32(count3);
            for (int a3 = 0; a3 < count3; a3++) {
                this.users.get(a3).serializeToStream(stream);
            }
        }
    }

    public static abstract class MessageMedia extends TLObject {
        public String address;
        public Audio audio_unused;
        public byte[] bytes;
        public String captionLegacy;
        public String currency;
        public String description;
        public Document document;
        public String first_name;
        public int flags;
        public TL_game game;
        public GeoPoint geo;
        public int heading;
        public String last_name;
        public int period;
        public String phone_number;
        public Photo photo;
        public String provider;
        public int proximity_notification_radius;
        public int receipt_msg_id;
        public boolean shipping_address_requested;
        public String start_param;
        public boolean test;
        public String title;
        public long total_amount;
        public int ttl_seconds;
        public long user_id;
        public String vcard;
        public String venue_id;
        public String venue_type;
        public Video video_unused;
        public WebPage webpage;

        public static MessageMedia TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            MessageMedia result = null;
            switch (constructor) {
                case -2074799289:
                    result = new TL_messageMediaInvoice();
                    break;
                case -1666158377:
                    result = new TL_messageMediaDocument();
                    break;
                case -1618676578:
                    result = new TL_messageMediaUnsupported();
                    break;
                case -1563278704:
                    result = new TL_messageMediaVideo_old();
                    break;
                case -1557277184:
                    result = new TL_messageMediaWebPage();
                    break;
                case -1256047857:
                    result = new TL_messageMediaPhoto_layer74();
                    break;
                case -1186937242:
                    result = new TL_messageMediaGeoLive();
                    break;
                case -961117440:
                    result = new TL_messageMediaAudio_layer45();
                    break;
                case -926655958:
                    result = new TL_messageMediaPhoto_old();
                    break;
                case -873313984:
                    result = new TL_messageMediaContact_layer131();
                    break;
                case -203411800:
                    result = new TL_messageMediaDocument_layer68();
                    break;
                case -38694904:
                    result = new TL_messageMediaGame();
                    break;
                case 694364726:
                    result = new TL_messageMediaUnsupported_old();
                    break;
                case 784356159:
                    result = new TL_messageMediaVenue();
                    break;
                case 802824708:
                    result = new TL_messageMediaDocument_old();
                    break;
                case 1032643901:
                    result = new TL_messageMediaPhoto_layer68();
                    break;
                case 1038967584:
                    result = new TL_messageMediaEmpty();
                    break;
                case 1065280907:
                    result = new TL_messageMediaDice();
                    break;
                case 1272375192:
                    result = new TL_messageMediaPoll();
                    break;
                case 1457575028:
                    result = new TL_messageMediaGeo();
                    break;
                case 1540298357:
                    result = new TL_messageMediaVideo_layer45();
                    break;
                case 1585262393:
                    result = new TL_messageMediaContact_layer81();
                    break;
                case 1670374507:
                    result = new TL_messageMediaDice_layer111();
                    break;
                case 1766936791:
                    result = new TL_messageMediaPhoto();
                    break;
                case 1882335561:
                    result = new TL_messageMediaContact();
                    break;
                case 2031269663:
                    result = new TL_messageMediaVenue_layer71();
                    break;
                case 2084316681:
                    result = new TL_messageMediaGeoLive_layer119();
                    break;
                case 2084836563:
                    result = new TL_messageMediaDocument_layer74();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                    if (result.video_unused != null) {
                        TL_messageMediaDocument mediaDocument = new TL_messageMediaDocument();
                        if (result.video_unused instanceof TL_videoEncrypted) {
                            mediaDocument.document = new TL_documentEncrypted();
                            mediaDocument.document.key = result.video_unused.key;
                            mediaDocument.document.iv = result.video_unused.iv;
                        } else {
                            mediaDocument.document = new TL_document();
                        }
                        mediaDocument.flags = 3;
                        mediaDocument.document.file_reference = new byte[0];
                        mediaDocument.document.id = result.video_unused.id;
                        mediaDocument.document.access_hash = result.video_unused.access_hash;
                        mediaDocument.document.date = result.video_unused.date;
                        if (result.video_unused.mime_type != null) {
                            mediaDocument.document.mime_type = result.video_unused.mime_type;
                        } else {
                            mediaDocument.document.mime_type = "video/mp4";
                        }
                        mediaDocument.document.size = result.video_unused.size;
                        mediaDocument.document.thumbs.add(result.video_unused.thumb);
                        mediaDocument.document.dc_id = result.video_unused.dc_id;
                        mediaDocument.captionLegacy = result.captionLegacy;
                        TL_documentAttributeVideo attributeVideo = new TL_documentAttributeVideo();
                        attributeVideo.w = result.video_unused.w;
                        attributeVideo.h = result.video_unused.h;
                        attributeVideo.duration = result.video_unused.duration;
                        mediaDocument.document.attributes.add(attributeVideo);
                        result = mediaDocument;
                        if (mediaDocument.captionLegacy == null) {
                            mediaDocument.captionLegacy = "";
                        }
                    } else if (result.audio_unused != null) {
                        TL_messageMediaDocument mediaDocument2 = new TL_messageMediaDocument();
                        if (result.audio_unused instanceof TL_audioEncrypted) {
                            mediaDocument2.document = new TL_documentEncrypted();
                            mediaDocument2.document.key = result.audio_unused.key;
                            mediaDocument2.document.iv = result.audio_unused.iv;
                        } else {
                            mediaDocument2.document = new TL_document();
                        }
                        mediaDocument2.flags = 3;
                        mediaDocument2.document.file_reference = new byte[0];
                        mediaDocument2.document.id = result.audio_unused.id;
                        mediaDocument2.document.access_hash = result.audio_unused.access_hash;
                        mediaDocument2.document.date = result.audio_unused.date;
                        if (result.audio_unused.mime_type != null) {
                            mediaDocument2.document.mime_type = result.audio_unused.mime_type;
                        } else {
                            mediaDocument2.document.mime_type = "audio/ogg";
                        }
                        mediaDocument2.document.size = result.audio_unused.size;
                        TL_photoSizeEmpty thumb = new TL_photoSizeEmpty();
                        thumb.type = "s";
                        mediaDocument2.document.thumbs.add(thumb);
                        mediaDocument2.document.dc_id = result.audio_unused.dc_id;
                        mediaDocument2.captionLegacy = result.captionLegacy;
                        TL_documentAttributeAudio attributeAudio = new TL_documentAttributeAudio();
                        attributeAudio.duration = result.audio_unused.duration;
                        attributeAudio.voice = true;
                        mediaDocument2.document.attributes.add(attributeAudio);
                        result = mediaDocument2;
                        if (mediaDocument2.captionLegacy == null) {
                            mediaDocument2.captionLegacy = "";
                        }
                    }
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_pageBlockAuthorDate_layer60 extends TL_pageBlockAuthorDate {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            String authorString = stream.readString(exception);
            this.author = new TL_textPlain();
            ((TL_textPlain) this.author).text = authorString;
            this.published_date = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(((TL_textPlain) this.author).text);
            stream.writeInt32(this.published_date);
        }
    }

    public static class TL_pageBlockEmbedPost_layer82 extends TL_pageBlockEmbedPost {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
            this.webpage_id = stream.readInt64(exception);
            this.author_photo_id = stream.readInt64(exception);
            this.author = stream.readString(exception);
            this.date = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.blocks.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = new TL_pageCaption();
                this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.caption.credit = new TL_textEmpty();
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
            stream.writeInt64(this.webpage_id);
            stream.writeInt64(this.author_photo_id);
            stream.writeString(this.author);
            stream.writeInt32(this.date);
            stream.writeInt32(NUM);
            int count = this.blocks.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.blocks.get(a)).serializeToStream(stream);
            }
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockEmbed_layer82 extends TL_pageBlockEmbed {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.full_width = (this.flags & 1) != 0;
            if ((this.flags & 8) == 0) {
                z = false;
            }
            this.allow_scrolling = z;
            if ((this.flags & 2) != 0) {
                this.url = stream.readString(exception);
            }
            if ((this.flags & 4) != 0) {
                this.html = stream.readString(exception);
            }
            if ((this.flags & 16) != 0) {
                this.poster_photo_id = stream.readInt64(exception);
            }
            this.w = stream.readInt32(exception);
            this.h = stream.readInt32(exception);
            this.caption = new TL_pageCaption();
            this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption.credit = new TL_textEmpty();
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.full_width ? this.flags | 1 : this.flags & -2;
            this.flags = this.allow_scrolling ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 4) != 0) {
                stream.writeString(this.html);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt64(this.poster_photo_id);
            }
            stream.writeInt32(this.w);
            stream.writeInt32(this.h);
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockVideo_layer82 extends TL_pageBlockVideo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.autoplay = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.loop = z;
            this.video_id = stream.readInt64(exception);
            this.caption = new TL_pageCaption();
            this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption.credit = new TL_textEmpty();
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.autoplay ? this.flags | 1 : this.flags & -2;
            this.flags = this.loop ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt64(this.video_id);
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockSlideshow_layer82 extends TL_pageBlockSlideshow {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = new TL_pageCaption();
                this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.caption.credit = new TL_textEmpty();
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.items.get(a)).serializeToStream(stream);
            }
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockPhoto_layer82 extends TL_pageBlockPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.photo_id = stream.readInt64(exception);
            this.caption = new TL_pageCaption();
            this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption.credit = new TL_textEmpty();
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.photo_id);
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockCollage_layer82 extends TL_pageBlockCollage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    PageBlock object = PageBlock.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.items.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                this.caption = new TL_pageCaption();
                this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
                this.caption.credit = new TL_textEmpty();
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(NUM);
            int count = this.items.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((PageBlock) this.items.get(a)).serializeToStream(stream);
            }
            this.caption.text.serializeToStream(stream);
        }
    }

    public static class TL_pageBlockAudio_layer82 extends TL_pageBlockAudio {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.audio_id = stream.readInt64(exception);
            this.caption = new TL_pageCaption();
            this.caption.text = RichText.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.caption.credit = new TL_textEmpty();
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.audio_id);
            this.caption.text.serializeToStream(stream);
        }
    }

    public static abstract class EncryptedChat extends TLObject {
        public byte[] a_or_b;
        public long access_hash;
        public long admin_id;
        public byte[] auth_key;
        public int date;
        public long exchange_id;
        public int flags;
        public int folder_id;
        public byte[] future_auth_key;
        public long future_key_fingerprint;
        public byte[] g_a;
        public byte[] g_a_or_b;
        public boolean history_deleted;
        public int id;
        public int in_seq_no;
        public int key_create_date;
        public long key_fingerprint;
        public byte[] key_hash;
        public short key_use_count_in;
        public short key_use_count_out;
        public int layer;
        public int mtproto_seq;
        public byte[] nonce;
        public long participant_id;
        public int seq_in;
        public int seq_out;
        public int ttl;
        public long user_id;

        public static EncryptedChat TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            EncryptedChat result = null;
            switch (constructor) {
                case -1417756512:
                    result = new TL_encryptedChatEmpty();
                    break;
                case -931638658:
                    result = new TL_encryptedChatRequested_layer115();
                    break;
                case -94974410:
                    result = new TL_encryptedChat_layer131();
                    break;
                case -39213129:
                    result = new TL_encryptedChatRequested_old();
                    break;
                case 332848423:
                    result = new TL_encryptedChatDiscarded_layer122();
                    break;
                case 505183301:
                    result = new TL_encryptedChatDiscarded();
                    break;
                case 1006044124:
                    result = new TL_encryptedChatWaiting_layer131();
                    break;
                case 1223809356:
                    result = new TL_encryptedChatRequested();
                    break;
                case 1643173063:
                    result = new TL_encryptedChat();
                    break;
                case 1651608194:
                    result = new TL_encryptedChatRequested_layer131();
                    break;
                case 1711395151:
                    result = new TL_encryptedChat_old();
                    break;
                case 1722964307:
                    result = new TL_encryptedChatWaiting();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedChat", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static abstract class Message extends TLObject {
        public MessageAction action;
        public String attachPath = "";
        public int date;
        public int destroyTime;
        public long dialog_id;
        public int edit_date;
        public boolean edit_hide;
        public ArrayList<MessageEntity> entities = new ArrayList<>();
        public int expire_date;
        public int flags;
        public int forwards;
        public Peer from_id;
        public boolean from_scheduled;
        public MessageFwdHeader fwd_from;
        public int fwd_msg_id = 0;
        public long grouped_id;
        public int id;
        public boolean isThreadMessage;
        public int layer;
        public boolean legacy;
        public int local_id = 0;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean noforwards;
        public boolean out;
        public HashMap<String, String> params;
        public Peer peer_id;
        public boolean pinned;
        public boolean post;
        public String post_author;
        public long random_id;
        public TL_messageReactions reactions;
        public int realId;
        public MessageReplies replies;
        public Message replyMessage;
        public ReplyMarkup reply_markup;
        public TL_messageReplyHeader reply_to;
        public int reqId;
        public ArrayList<TL_restrictionReason> restriction_reason = new ArrayList<>();
        public int send_state = 0;
        public int seq_in;
        public int seq_out;
        public boolean silent;
        public int stickerVerified = 1;
        public int ttl;
        public int ttl_period;
        public boolean unread;
        public long via_bot_id;
        public String via_bot_name;
        public int views;
        public boolean with_my_score;

        public static Message TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Message result = null;
            switch (constructor) {
                case -2082087340:
                    result = new TL_messageEmpty_layer122();
                    break;
                case -2049520670:
                    result = new TL_message_layer135();
                    break;
                case -1868117372:
                    result = new TL_messageEmpty();
                    break;
                case -1864508399:
                    result = new TL_message_layer72();
                    break;
                case -1752573244:
                    result = new TL_message_layer104_3();
                    break;
                case -1642487306:
                    result = new TL_messageService_layer118();
                    break;
                case -1618124613:
                    result = new TL_messageService_old();
                    break;
                case -1553471722:
                    result = new TL_messageForwarded_old2();
                    break;
                case -1481959023:
                    result = new TL_message_old3();
                    break;
                case -1125940270:
                    result = new TL_message_layer131();
                    break;
                case -1066691065:
                    result = new TL_messageService_layer48();
                    break;
                case -1063525281:
                    result = new TL_message_layer68();
                    break;
                case -1023016155:
                    result = new TL_message_old4();
                    break;
                case -913120932:
                    result = new TL_message_layer47();
                    break;
                case -260565816:
                    result = new TL_message_old5();
                    break;
                case -181507201:
                    result = new TL_message_layer118();
                    break;
                case 99903492:
                    result = new TL_messageForwarded_old();
                    break;
                case 479924263:
                    result = new TL_message_layer104_2();
                    break;
                case 495384334:
                    result = new TL_messageService_old2();
                    break;
                case 585853626:
                    result = new TL_message_old();
                    break;
                case 678405636:
                    result = new TL_messageService_layer123();
                    break;
                case 721967202:
                    result = new TL_messageService();
                    break;
                case 736885382:
                    result = new TL_message_old6();
                    break;
                case 940666592:
                    result = new TL_message();
                    break;
                case 1157215293:
                    result = new TL_message_layer104();
                    break;
                case 1160515173:
                    result = new TL_message_layer117();
                    break;
                case 1431655928:
                    result = new TL_message_secret_old();
                    break;
                case 1431655929:
                    result = new TL_message_secret_layer72();
                    break;
                case 1431655930:
                    result = new TL_message_secret();
                    break;
                case 1450613171:
                    result = new TL_message_old2();
                    break;
                case 1487813065:
                    result = new TL_message_layer123();
                    break;
                case 1537633299:
                    result = new TL_message_old7();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                    if (result.from_id == null) {
                        result.from_id = result.peer_id;
                    }
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Message", new Object[]{Integer.valueOf(constructor)}));
        }

        /* JADX WARNING: Removed duplicated region for block: B:60:0x00b3  */
        /* JADX WARNING: Removed duplicated region for block: B:90:0x0136  */
        /* JADX WARNING: Removed duplicated region for block: B:96:? A[RETURN, SYNTHETIC] */
        /* Code decompiled incorrectly, please refer to instructions dump. */
        public void readAttachPath(org.telegram.tgnet.AbstractSerializedData r12, long r13) {
            /*
                r11 = this;
                org.telegram.tgnet.TLRPC$MessageMedia r0 = r11.media
                r1 = 0
                r2 = 1
                if (r0 == 0) goto L_0x0010
                boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaEmpty
                if (r3 != 0) goto L_0x0010
                boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaWebPage
                if (r0 != 0) goto L_0x0010
                r0 = 1
                goto L_0x0011
            L_0x0010:
                r0 = 0
            L_0x0011:
                java.lang.String r3 = r11.message
                boolean r3 = android.text.TextUtils.isEmpty(r3)
                if (r3 != 0) goto L_0x003f
                org.telegram.tgnet.TLRPC$MessageMedia r3 = r11.media
                boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaPhoto_old
                if (r4 != 0) goto L_0x0033
                boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaPhoto_layer68
                if (r4 != 0) goto L_0x0033
                boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaPhoto_layer74
                if (r4 != 0) goto L_0x0033
                boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaDocument_old
                if (r4 != 0) goto L_0x0033
                boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaDocument_layer68
                if (r4 != 0) goto L_0x0033
                boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaDocument_layer74
                if (r3 == 0) goto L_0x003f
            L_0x0033:
                java.lang.String r3 = r11.message
                java.lang.String r4 = "-1"
                boolean r3 = r3.startsWith(r4)
                if (r3 == 0) goto L_0x003f
                r3 = 1
                goto L_0x0040
            L_0x003f:
                r3 = 0
            L_0x0040:
                boolean r4 = r11.out
                r5 = 3
                if (r4 != 0) goto L_0x0069
                org.telegram.tgnet.TLRPC$Peer r4 = r11.peer_id
                if (r4 == 0) goto L_0x0073
                org.telegram.tgnet.TLRPC$Peer r6 = r11.from_id
                if (r6 == 0) goto L_0x0073
                long r6 = r4.user_id
                r8 = 0
                int r4 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
                if (r4 == 0) goto L_0x0073
                org.telegram.tgnet.TLRPC$Peer r4 = r11.peer_id
                long r6 = r4.user_id
                org.telegram.tgnet.TLRPC$Peer r4 = r11.from_id
                long r8 = r4.user_id
                int r4 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
                if (r4 != 0) goto L_0x0073
                org.telegram.tgnet.TLRPC$Peer r4 = r11.from_id
                long r6 = r4.user_id
                int r4 = (r6 > r13 ? 1 : (r6 == r13 ? 0 : -1))
                if (r4 != 0) goto L_0x0073
            L_0x0069:
                int r4 = r11.id
                if (r4 < 0) goto L_0x0077
                if (r0 != 0) goto L_0x0077
                int r4 = r11.send_state
                if (r4 == r5) goto L_0x0077
            L_0x0073:
                boolean r4 = r11.legacy
                if (r4 == 0) goto L_0x012c
            L_0x0077:
                r4 = 2
                if (r0 == 0) goto L_0x00ad
                if (r3 == 0) goto L_0x00ad
                java.lang.String r6 = r11.message
                int r6 = r6.length()
                r7 = 6
                if (r6 <= r7) goto L_0x009d
                java.lang.String r6 = r11.message
                char r6 = r6.charAt(r4)
                r7 = 95
                if (r6 != r7) goto L_0x009d
                java.util.HashMap r6 = new java.util.HashMap
                r6.<init>()
                r11.params = r6
                java.lang.String r7 = r11.message
                java.lang.String r8 = "ve"
                r6.put(r8, r7)
            L_0x009d:
                java.util.HashMap<java.lang.String, java.lang.String> r6 = r11.params
                if (r6 != 0) goto L_0x00a9
                java.lang.String r6 = r11.message
                int r6 = r6.length()
                if (r6 != r4) goto L_0x00ad
            L_0x00a9:
                java.lang.String r6 = ""
                r11.message = r6
            L_0x00ad:
                int r6 = r12.remaining()
                if (r6 <= 0) goto L_0x012c
                java.lang.String r6 = r12.readString(r1)
                r11.attachPath = r6
                if (r6 == 0) goto L_0x012c
                int r7 = r11.id
                if (r7 < 0) goto L_0x00c7
                int r7 = r11.send_state
                if (r7 == r5) goto L_0x00c7
                boolean r5 = r11.legacy
                if (r5 == 0) goto L_0x0124
            L_0x00c7:
                java.lang.String r5 = "||"
                boolean r5 = r6.startsWith(r5)
                if (r5 == 0) goto L_0x0124
                java.lang.String r5 = r11.attachPath
                java.lang.String r6 = "\\|\\|"
                java.lang.String[] r5 = r5.split(r6)
                int r6 = r5.length
                if (r6 <= 0) goto L_0x0123
                java.util.HashMap<java.lang.String, java.lang.String> r6 = r11.params
                if (r6 != 0) goto L_0x00e5
                java.util.HashMap r6 = new java.util.HashMap
                r6.<init>()
                r11.params = r6
            L_0x00e5:
                r6 = 1
            L_0x00e6:
                int r7 = r5.length
                int r7 = r7 - r2
                if (r6 >= r7) goto L_0x0101
                r7 = r5[r6]
                java.lang.String r8 = "\\|=\\|"
                java.lang.String[] r7 = r7.split(r8)
                int r8 = r7.length
                if (r8 != r4) goto L_0x00fe
                java.util.HashMap<java.lang.String, java.lang.String> r8 = r11.params
                r9 = r7[r1]
                r10 = r7[r2]
                r8.put(r9, r10)
            L_0x00fe:
                int r6 = r6 + 1
                goto L_0x00e6
            L_0x0101:
                int r4 = r5.length
                int r4 = r4 - r2
                r2 = r5[r4]
                java.lang.String r2 = r2.trim()
                r11.attachPath = r2
                boolean r2 = r11.legacy
                if (r2 == 0) goto L_0x0123
                java.util.HashMap<java.lang.String, java.lang.String> r2 = r11.params
                java.lang.String r4 = "legacy_layer"
                java.lang.Object r2 = r2.get(r4)
                java.lang.CharSequence r2 = (java.lang.CharSequence) r2
                java.lang.Integer r2 = org.telegram.messenger.Utilities.parseInt(r2)
                int r2 = r2.intValue()
                r11.layer = r2
            L_0x0123:
                goto L_0x012c
            L_0x0124:
                java.lang.String r2 = r11.attachPath
                java.lang.String r2 = r2.trim()
                r11.attachPath = r2
            L_0x012c:
                int r2 = r11.flags
                r2 = r2 & 4
                if (r2 == 0) goto L_0x013c
                int r2 = r11.id
                if (r2 >= 0) goto L_0x013c
                int r1 = r12.readInt32(r1)
                r11.fwd_msg_id = r1
            L_0x013c:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.tgnet.TLRPC.Message.readAttachPath(org.telegram.tgnet.AbstractSerializedData, long):void");
        }

        /* access modifiers changed from: protected */
        public void writeAttachPath(AbstractSerializedData stream) {
            HashMap<String, String> hashMap;
            HashMap<String, String> hashMap2;
            if ((this instanceof TL_message_secret) || (this instanceof TL_message_secret_layer72)) {
                String path = this.attachPath;
                if (path == null) {
                    path = "";
                }
                if (this.send_state == 1 && (hashMap = this.params) != null && hashMap.size() > 0) {
                    for (Map.Entry<String, String> entry : this.params.entrySet()) {
                        path = entry.getKey() + "|=|" + entry.getValue() + "||" + path;
                    }
                    path = "||" + path;
                }
                stream.writeString(path);
                return;
            }
            String path2 = !TextUtils.isEmpty(this.attachPath) ? this.attachPath : " ";
            if (this.legacy) {
                if (this.params == null) {
                    this.params = new HashMap<>();
                }
                this.layer = 140;
                this.params.put("legacy_layer", "140");
            }
            if ((this.id < 0 || this.send_state == 3 || this.legacy) && (hashMap2 = this.params) != null && hashMap2.size() > 0) {
                for (Map.Entry<String, String> entry2 : this.params.entrySet()) {
                    path2 = entry2.getKey() + "|=|" + entry2.getValue() + "||" + path2;
                }
                path2 = "||" + path2;
            }
            stream.writeString(path2);
            if ((this.flags & 4) != 0 && this.id < 0) {
                stream.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_messageEmpty_layer122 extends TL_messageEmpty {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.peer_id = new TL_peerUser();
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
        }
    }

    public static class TL_messageEmpty extends Message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.id = stream.readInt32(exception);
            if ((this.flags & 1) != 0) {
                this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            } else {
                this.peer_id = new TL_peerUser();
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                this.peer_id.serializeToStream(stream);
            }
        }
    }

    public static class TL_messageService_old2 extends TL_messageService {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.flags |= 256;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_message_layer72 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer68 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.with_my_score = (this.flags & NUM) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.from_id == null) {
                this.from_id = this.peer_id;
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.with_my_score ? this.flags | NUM : this.flags & -NUM;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer47 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.from_id == null) {
                this.from_id = this.peer_id;
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (peer != null) {
                    this.fwd_from.from_id = peer;
                    this.fwd_from.flags |= 1;
                }
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                if (this.fwd_from.from_id != null) {
                    this.fwd_from.from_id.serializeToStream(stream);
                }
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old7 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.from_id == null) {
                this.from_id = this.peer_id;
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (peer != null) {
                    this.fwd_from.from_id = peer;
                    this.fwd_from.flags |= 1;
                }
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                if (this.fwd_from.from_id != null) {
                    this.fwd_from.from_id.serializeToStream(stream);
                }
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_messageForwarded_old2 extends Message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z = true;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = new TL_peerUser();
            this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
            MessageFwdHeader messageFwdHeader = this.fwd_from;
            messageFwdHeader.flags = 1 | messageFwdHeader.flags;
            this.fwd_from.date = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.flags |= 772;
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.fwd_from.from_id.user_id);
            stream.writeInt32(this.fwd_from.date);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
        }
    }

    public static class TL_message extends Message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.pinned = (this.flags & 16777216) != 0;
            this.noforwards = (this.flags & 67108864) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies = MessageReplies.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions = MessageReactions.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.pinned ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.noforwards ? this.flags | 67108864 : this.flags & -67108865;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt64(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions.serializeToStream(stream);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer135 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.pinned = (this.flags & 16777216) != 0;
            this.noforwards = (this.flags & 67108864) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = stream.readInt64(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies = MessageReplies.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.pinned ? this.flags | 16777216 : this.flags & -16777217;
            this.flags = this.noforwards ? this.flags | 67108864 : this.flags & -67108865;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt64(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer131 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.pinned = (this.flags & 16777216) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies = MessageReplies.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.pinned ? this.flags | 16777216 : this.flags & -16777217;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(this.ttl_period);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer123 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.pinned = (this.flags & 16777216) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies = MessageReplies.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            this.flags = this.pinned ? this.flags | 16777216 : this.flags & -16777217;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 8388608) != 0) {
                this.replies.serializeToStream(stream);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer118 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 1024) != 0) {
                this.forwards = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.forwards);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer117 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer104_3 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions = MessageReactions.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4194304) != 0) {
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        TL_restrictionReason object2 = TL_restrictionReason.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.restriction_reason.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions.serializeToStream(stream);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeInt32(NUM);
                int count2 = this.restriction_reason.size();
                stream.writeInt32(count2);
                for (int a2 = 0; a2 < count2; a2++) {
                    ((TL_restrictionReason) this.restriction_reason.get(a2)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer104_2 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.edit_hide = (this.flags & 2097152) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions = MessageReactions.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 4194304) != 0) {
                stream.readString(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            this.flags = this.edit_hide ? this.flags | 2097152 : this.flags & -2097153;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            if ((this.flags & 1048576) != 0) {
                this.reactions.serializeToStream(stream);
            }
            if ((this.flags & 4194304) != 0) {
                stream.writeString("");
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_layer104 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            this.from_scheduled = (this.flags & 262144) != 0;
            this.legacy = (this.flags & 524288) != 0;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = (long) stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = stream.readInt32(exception);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = stream.readInt32(exception);
            }
            if ((this.flags & 65536) != 0) {
                this.post_author = stream.readString(exception);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = stream.readInt64(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.from_scheduled ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeInt32((int) this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            if ((this.flags & 1024) != 0) {
                stream.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                stream.writeInt32(this.edit_date);
            }
            if ((this.flags & 65536) != 0) {
                stream.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old6 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = new TL_peerUser();
                this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
                this.fwd_from.flags |= 1;
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32((int) this.fwd_from.from_id.user_id);
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(stream);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old5 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256 | 512;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = new TL_peerUser();
                this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
                this.fwd_from.flags |= 1;
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 128) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.entities.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32((int) this.fwd_from.from_id.user_id);
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            if ((this.flags & 128) != 0) {
                stream.writeInt32(NUM);
                int count = this.entities.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
                }
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_messageService_layer48 extends TL_messageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            if ((this.flags & 16384) == 0) {
                z = false;
            }
            this.post = z;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.from_id == null) {
                this.from_id = this.peer_id;
            }
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_message_old4 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256 | 512;
            boolean z = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z = true;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = new TL_peerUser();
                this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags = 1 | messageFwdHeader.flags;
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32((int) this.fwd_from.from_id.user_id);
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(stream);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old3 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256 | 512;
            boolean z = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z = true;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = new TL_peerUser();
                this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags = 1 | messageFwdHeader.flags;
                this.fwd_from.date = stream.readInt32(exception);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 4) != 0) {
                stream.writeInt32((int) this.fwd_from.from_id.user_id);
                stream.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old2 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256 | 512;
            boolean z = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_messageService_old extends TL_messageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.out = stream.readBool(exception);
            this.unread = stream.readBool(exception);
            this.flags |= 256;
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeBool(this.out);
            stream.writeBool(this.unread);
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
        }
    }

    public static class TL_messageForwarded_old extends TL_messageForwarded_old2 {
        public static int constructor = 99903492;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = new TL_peerUser();
            this.fwd_from.from_id.user_id = (long) stream.readInt32(exception);
            this.fwd_from.flags |= 1;
            this.fwd_from.date = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.out = stream.readBool(exception);
            this.unread = stream.readBool(exception);
            this.flags |= 772;
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.fwd_from.from_id.user_id);
            stream.writeInt32(this.fwd_from.date);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeBool(this.out);
            stream.writeBool(this.unread);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_message_old extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.out = stream.readBool(exception);
            this.unread = stream.readBool(exception);
            this.flags |= 768;
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.id);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeBool(this.out);
            stream.writeBool(this.unread);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_message_secret extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            this.ttl = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2048) != 0) {
                    this.via_bot_name = stream.readString(exception);
                }
                if ((this.flags & 8) != 0) {
                    this.reply_to = new TL_messageReplyHeader();
                    this.reply_to.reply_to_random_id = stream.readInt64(exception);
                }
                if ((this.flags & 131072) != 0) {
                    this.grouped_id = stream.readInt64(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32(this.ttl);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt64(this.reply_to.reply_to_random_id);
            }
            if ((this.flags & 131072) != 0) {
                stream.writeInt64(this.grouped_id);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_secret_layer72 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = stream.readInt32(exception);
            this.ttl = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    MessageEntity object = MessageEntity.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.entities.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2048) != 0) {
                    this.via_bot_name = stream.readString(exception);
                }
                if ((this.flags & 8) != 0) {
                    this.reply_to = new TL_messageReplyHeader();
                    this.reply_to.reply_to_random_id = stream.readInt64(exception);
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32(this.ttl);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.entities.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((MessageEntity) this.entities.get(a)).serializeToStream(stream);
            }
            if ((this.flags & 2048) != 0) {
                stream.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                stream.writeInt64(this.reply_to.reply_to_random_id);
            }
            writeAttachPath(stream);
        }
    }

    public static class TL_message_secret_old extends TL_message_secret {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception) | 256 | 512;
            boolean z = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z = false;
            }
            this.media_unread = z;
            this.id = stream.readInt32(exception);
            this.ttl = stream.readInt32(exception);
            this.from_id = new TL_peerUser();
            this.from_id.user_id = (long) stream.readInt32(exception);
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.date = stream.readInt32(exception);
            this.message = stream.readString(exception);
            this.media = MessageMedia.TLdeserialize(stream, stream.readInt32(exception), exception);
            if (this.media != null && !TextUtils.isEmpty(this.media.captionLegacy)) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            stream.writeInt32(this.ttl);
            stream.writeInt32((int) this.from_id.user_id);
            this.peer_id.serializeToStream(stream);
            stream.writeInt32(this.date);
            stream.writeString(this.message);
            this.media.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_messageService_layer123 extends TL_messageService {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            if ((this.flags & 524288) == 0) {
                z = false;
            }
            this.legacy = z;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static class TL_messageService extends Message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            if ((this.flags & 524288) == 0) {
                z = false;
            }
            this.legacy = z;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.reply_to = TL_messageReplyHeader.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 33554432) != 0) {
                this.ttl_period = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                this.from_id.serializeToStream(stream);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                this.reply_to.serializeToStream(stream);
            }
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
            if ((this.flags & 33554432) != 0) {
                stream.writeInt32(this.ttl_period);
            }
        }
    }

    public static class TL_messageService_layer118 extends TL_messageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & 8192) != 0;
            this.post = (this.flags & 16384) != 0;
            if ((this.flags & 524288) == 0) {
                z = false;
            }
            this.legacy = z;
            this.id = stream.readInt32(exception);
            if ((this.flags & 256) != 0) {
                this.from_id = new TL_peerUser();
                this.from_id.user_id = (long) stream.readInt32(exception);
            }
            this.peer_id = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 8) != 0) {
                this.reply_to = new TL_messageReplyHeader();
                this.reply_to.reply_to_msg_id = stream.readInt32(exception);
            }
            this.date = stream.readInt32(exception);
            this.action = MessageAction.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | 8192 : this.flags & -8193;
            this.flags = this.post ? this.flags | 16384 : this.flags & -16385;
            this.flags = this.legacy ? this.flags | 524288 : this.flags & -524289;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                stream.writeInt32((int) this.from_id.user_id);
            }
            this.peer_id.serializeToStream(stream);
            if ((this.flags & 8) != 0) {
                stream.writeInt32(this.reply_to.reply_to_msg_id);
            }
            stream.writeInt32(this.date);
            this.action.serializeToStream(stream);
            writeAttachPath(stream);
        }
    }

    public static abstract class Dialog extends TLObject {
        public DraftMessage draft;
        public int flags;
        public int folder_id;
        public long id;
        public int last_message_date;
        public PeerNotifySettings notify_settings;
        public Peer peer;
        public boolean pinned;
        public int pinnedNum;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int top_message;
        public int unread_count;
        public boolean unread_mark;
        public int unread_mentions_count;
        public int unread_reactions_count;

        public static Dialog TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            Dialog result = null;
            switch (constructor) {
                case -1460809483:
                    result = new TL_dialog();
                    break;
                case 1908216652:
                    result = new TL_dialogFolder();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in Dialog", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_dialog extends Dialog {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = false;
            this.pinned = (this.flags & 4) != 0;
            if ((this.flags & 8) != 0) {
                z = true;
            }
            this.unread_mark = z;
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.top_message = stream.readInt32(exception);
            this.read_inbox_max_id = stream.readInt32(exception);
            this.read_outbox_max_id = stream.readInt32(exception);
            this.unread_count = stream.readInt32(exception);
            this.unread_mentions_count = stream.readInt32(exception);
            this.unread_reactions_count = stream.readInt32(exception);
            this.notify_settings = PeerNotifySettings.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                this.pts = stream.readInt32(exception);
            }
            if ((this.flags & 2) != 0) {
                this.draft = DraftMessage.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
            if ((this.flags & 16) != 0) {
                this.folder_id = stream.readInt32(exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.pinned ? this.flags | 4 : this.flags & -5;
            this.flags = this.unread_mark ? this.flags | 8 : this.flags & -9;
            stream.writeInt32(this.flags);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.top_message);
            stream.writeInt32(this.read_inbox_max_id);
            stream.writeInt32(this.read_outbox_max_id);
            stream.writeInt32(this.unread_count);
            stream.writeInt32(this.unread_mentions_count);
            stream.writeInt32(this.unread_reactions_count);
            this.notify_settings.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.pts);
            }
            if ((this.flags & 2) != 0) {
                this.draft.serializeToStream(stream);
            }
            if ((this.flags & 16) != 0) {
                stream.writeInt32(this.folder_id);
            }
        }
    }

    public static class TL_dialogFolder extends Dialog {
        public static int constructor = NUM;
        public TL_folder folder;
        public int unread_muted_messages_count;
        public int unread_muted_peers_count;
        public int unread_unmuted_messages_count;
        public int unread_unmuted_peers_count;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.pinned = (this.flags & 4) != 0;
            this.folder = TL_folder.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.peer = Peer.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.top_message = stream.readInt32(exception);
            this.unread_muted_peers_count = stream.readInt32(exception);
            this.unread_unmuted_peers_count = stream.readInt32(exception);
            this.unread_muted_messages_count = stream.readInt32(exception);
            this.unread_unmuted_messages_count = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.pinned ? this.flags | 4 : this.flags & -5;
            stream.writeInt32(this.flags);
            this.folder.serializeToStream(stream);
            this.peer.serializeToStream(stream);
            stream.writeInt32(this.top_message);
            stream.writeInt32(this.unread_muted_peers_count);
            stream.writeInt32(this.unread_unmuted_peers_count);
            stream.writeInt32(this.unread_muted_messages_count);
            stream.writeInt32(this.unread_unmuted_messages_count);
        }
    }

    public static class TL_chatEmpty extends Chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = stream.readInt64(exception);
            this.title = "DELETED";
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.id);
        }
    }

    public static class TL_chatEmpty_layer131 extends TL_chatEmpty {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.id = (long) stream.readInt32(exception);
            this.title = "DELETED";
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32((int) this.id);
        }
    }

    public static class TL_upload_saveFilePart extends TLObject {
        public static int constructor = -NUM;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.file_id);
            stream.writeInt32(this.file_part);
            stream.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer;
            if (!this.disableFree && (nativeByteBuffer = this.bytes) != null) {
                nativeByteBuffer.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_messages_getStickers extends TLObject {
        public static int constructor = -NUM;
        public String emoticon;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_Stickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.emoticon);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_getAllStickers extends TLObject {
        public static int constructor = -NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_AllStickers.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_upload_saveBigFilePart extends TLObject {
        public static int constructor = -NUM;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;
        public int file_total_parts;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.file_id);
            stream.writeInt32(this.file_part);
            stream.writeInt32(this.file_total_parts);
            stream.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer;
            if (!this.disableFree && (nativeByteBuffer = this.bytes) != null) {
                nativeByteBuffer.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_getWebFile extends TLObject {
        public static int constructor = NUM;
        public int limit;
        public InputWebFileLocation location;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_upload_webFile.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_upload_getCdnFile extends TLObject {
        public static int constructor = NUM;
        public byte[] file_token;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return upload_CdnFile.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.file_token);
            stream.writeInt32(this.offset);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_upload_reuploadCdnFile extends TLObject {
        public static int constructor = -NUM;
        public byte[] file_token;
        public byte[] request_token;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_fileHash object = TL_fileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.file_token);
            stream.writeByteArray(this.request_token);
        }
    }

    public static class TL_upload_getCdnFileHashes extends TLObject {
        public static int constructor = NUM;
        public byte[] file_token;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_fileHash object = TL_fileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.file_token);
            stream.writeInt32(this.offset);
        }
    }

    public static class TL_upload_getFileHashes extends TLObject {
        public static int constructor = -NUM;
        public InputFileLocation location;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            Vector vector = new Vector();
            int size = stream.readInt32(exception);
            for (int a = 0; a < size; a++) {
                TL_fileHash object = TL_fileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
                if (object == null) {
                    return vector;
                }
                vector.objects.add(object);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.location.serializeToStream(stream);
            stream.writeInt32(this.offset);
        }
    }

    public static class TL_upload_webFile extends TLObject {
        public static int constructor = NUM;
        public NativeByteBuffer bytes;
        public storage_FileType file_type;
        public String mime_type;
        public int mtime;
        public int size;

        public static TL_upload_webFile TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_upload_webFile result = new TL_upload_webFile();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_upload_webFile", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.size = stream.readInt32(exception);
            this.mime_type = stream.readString(exception);
            this.file_type = storage_FileType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.mtime = stream.readInt32(exception);
            this.bytes = stream.readByteBuffer(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.size);
            stream.writeString(this.mime_type);
            this.file_type.serializeToStream(stream);
            stream.writeInt32(this.mtime);
            stream.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer;
            if (!this.disableFree && (nativeByteBuffer = this.bytes) != null) {
                nativeByteBuffer.reuse();
                this.bytes = null;
            }
        }
    }

    public static abstract class upload_File extends TLObject {
        public NativeByteBuffer bytes;
        public int dc_id;
        public byte[] encryption_iv;
        public byte[] encryption_key;
        public ArrayList<TL_fileHash> file_hashes = new ArrayList<>();
        public byte[] file_token;
        public int mtime;
        public storage_FileType type;

        public static upload_File TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            upload_File result = null;
            switch (constructor) {
                case -242427324:
                    result = new TL_upload_fileCdnRedirect();
                    break;
                case 157948117:
                    result = new TL_upload_file();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in upload_File", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static abstract class upload_CdnFile extends TLObject {
        public NativeByteBuffer bytes;
        public byte[] request_token;

        public static upload_CdnFile TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            upload_CdnFile result = null;
            switch (constructor) {
                case -1449145777:
                    result = new TL_upload_cdnFile();
                    break;
                case -290921362:
                    result = new TL_upload_cdnFileReuploadNeeded();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in upload_CdnFile", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_upload_cdnFile extends upload_CdnFile {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.bytes = stream.readByteBuffer(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!this.disableFree && this.bytes != null) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_cdnFileReuploadNeeded extends upload_CdnFile {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.request_token = stream.readByteArray(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeByteArray(this.request_token);
        }
    }

    public static class TL_upload_file extends upload_File {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.type = storage_FileType.TLdeserialize(stream, stream.readInt32(exception), exception);
            this.mtime = stream.readInt32(exception);
            this.bytes = stream.readByteBuffer(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.type.serializeToStream(stream);
            stream.writeInt32(this.mtime);
            stream.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!this.disableFree && this.bytes != null) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_fileCdnRedirect extends upload_File {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.dc_id = stream.readInt32(exception);
            this.file_token = stream.readByteArray(exception);
            this.encryption_key = stream.readByteArray(exception);
            this.encryption_iv = stream.readByteArray(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_fileHash object = TL_fileHash.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.file_hashes.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.dc_id);
            stream.writeByteArray(this.file_token);
            stream.writeByteArray(this.encryption_key);
            stream.writeByteArray(this.encryption_iv);
            stream.writeInt32(NUM);
            int count = this.file_hashes.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                ((TL_fileHash) this.file_hashes.get(a)).serializeToStream(stream);
            }
        }
    }

    public static abstract class PhoneCallProtocol extends TLObject {
        public int flags;
        public ArrayList<String> library_versions = new ArrayList<>();
        public int max_layer;
        public int min_layer;
        public boolean udp_p2p;
        public boolean udp_reflector;

        public static PhoneCallProtocol TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            PhoneCallProtocol result = null;
            switch (constructor) {
                case -1564789301:
                    result = new TL_phoneCallProtocol_layer110();
                    break;
                case -58224696:
                    result = new TL_phoneCallProtocol();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in PhoneCallProtocol", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_phoneCallProtocol extends PhoneCallProtocol {
        public static int constructor = -58224696;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.udp_p2p = (this.flags & 1) != 0;
            this.udp_reflector = (this.flags & 2) != 0;
            this.min_layer = stream.readInt32(exception);
            this.max_layer = stream.readInt32(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                for (int a = 0; a < count; a++) {
                    this.library_versions.add(stream.readString(exception));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.udp_p2p ? this.flags | 1 : this.flags & -2;
            this.flags = this.udp_reflector ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.min_layer);
            stream.writeInt32(this.max_layer);
            stream.writeInt32(NUM);
            int count = this.library_versions.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                stream.writeString((String) this.library_versions.get(a));
            }
        }
    }

    public static class TL_phoneCallProtocol_layer110 extends TL_phoneCallProtocol {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            boolean z = true;
            this.udp_p2p = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z = false;
            }
            this.udp_reflector = z;
            this.min_layer = stream.readInt32(exception);
            this.max_layer = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.flags = this.udp_p2p ? this.flags | 1 : this.flags & -2;
            this.flags = this.udp_reflector ? this.flags | 2 : this.flags & -3;
            stream.writeInt32(this.flags);
            stream.writeInt32(this.min_layer);
            stream.writeInt32(this.max_layer);
        }
    }

    public static class TL_messages_sendEncryptedFile extends TLObject {
        public static int constructor = NUM;
        public NativeByteBuffer data;
        public InputEncryptedFile file;
        public int flags;
        public TL_inputEncryptedChat peer;
        public long random_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_SentEncryptedMessage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeByteBuffer(this.data);
            this.file.serializeToStream(stream);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer = this.data;
            if (nativeByteBuffer != null) {
                nativeByteBuffer.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_sendEncryptedMultiMedia extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<InputEncryptedFile> files = new ArrayList<>();
        public ArrayList<TL_decryptedMessage> messages = new ArrayList<>();

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_SentEncryptedMessage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
        }

        public void freeResources() {
        }
    }

    public static class TL_messages_sendEncrypted extends TLObject {
        public static int constructor = NUM;
        public NativeByteBuffer data;
        public int flags;
        public TL_inputEncryptedChat peer;
        public long random_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_SentEncryptedMessage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeByteBuffer(this.data);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer = this.data;
            if (nativeByteBuffer != null) {
                nativeByteBuffer.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_sendEncryptedService extends TLObject {
        public static int constructor = NUM;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return messages_SentEncryptedMessage.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            stream.writeInt64(this.random_id);
            stream.writeByteBuffer(this.data);
        }

        public void freeResources() {
            NativeByteBuffer nativeByteBuffer = this.data;
            if (nativeByteBuffer != null) {
                nativeByteBuffer.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_getSearchResultsPositions extends TLObject {
        public static int constructor = NUM;
        public MessagesFilter filter;
        public int limit;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_searchResultsPositions.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.filter.serializeToStream(stream);
            stream.writeInt32(this.offset_id);
            stream.writeInt32(this.limit);
        }
    }

    public static class TL_attachMenuBot extends TLObject {
        public static int constructor = -NUM;
        public long bot_id;
        public int flags;
        public ArrayList<TL_attachMenuBotIcon> icons = new ArrayList<>();
        public boolean inactive;
        public String short_name;

        public static TL_attachMenuBot TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_attachMenuBot result = new TL_attachMenuBot();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_attachMenuBot", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            this.inactive = (readInt32 & 1) != 0;
            this.bot_id = stream.readInt64(exception);
            this.short_name = stream.readString(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_attachMenuBotIcon object = TL_attachMenuBotIcon.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.icons.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.inactive ? this.flags | 1 : this.flags & -2;
            this.flags = i;
            stream.writeInt32(i);
            stream.writeInt64(this.bot_id);
            stream.writeString(this.short_name);
            stream.writeInt32(NUM);
            int count = this.icons.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.icons.get(a).serializeToStream(stream);
            }
        }
    }

    public static abstract class AttachMenuBots extends TLObject {
        public static AttachMenuBots TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            AttachMenuBots result = null;
            switch (constructor) {
                case -237467044:
                    result = new TL_attachMenuBotsNotModified();
                    break;
                case 1011024320:
                    result = new TL_attachMenuBots();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in AttachMenuBots", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_attachMenuBotsNotModified extends AttachMenuBots {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_attachMenuBots extends AttachMenuBots {
        public static int constructor = NUM;
        public ArrayList<TL_attachMenuBot> bots = new ArrayList<>();
        public long hash;
        public ArrayList<User> users = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    TL_attachMenuBot object = TL_attachMenuBot.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.bots.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
                int magic2 = stream.readInt32(exception);
                if (magic2 == NUM) {
                    int count2 = stream.readInt32(exception);
                    int a2 = 0;
                    while (a2 < count2) {
                        User object2 = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object2 != null) {
                            this.users.add(object2);
                            a2++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic2)}));
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.bots.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.bots.get(a).serializeToStream(stream);
            }
            stream.writeInt32(NUM);
            int count2 = this.users.size();
            stream.writeInt32(count2);
            for (int a2 = 0; a2 < count2; a2++) {
                this.users.get(a2).serializeToStream(stream);
            }
        }
    }

    public static class TL_updateAttachMenuBots extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_messages_webViewResult extends TLObject {
        public static int constructor = -NUM;
        public BotInlineResult result;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_messages_webViewResult TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_messages_webViewResult result2 = new TL_messages_webViewResult();
                result2.readParams(stream, exception);
                return result2;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_webViewResult", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.result = BotInlineResult.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.result.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_keyboardButtonWebView extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.url);
        }
    }

    public static class TL_messages_getAttachMenuBots extends TLObject {
        public static int constructor = NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return AttachMenuBots.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_messages_toggleBotInAttachMenu extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot.serializeToStream(stream);
            stream.writeBool(this.enabled);
        }
    }

    public static class TL_webViewResultUrl extends TLObject {
        public static int constructor = NUM;
        public long query_id;
        public String url;

        public static TL_webViewResultUrl TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_webViewResultUrl result = new TL_webViewResultUrl();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_webViewResultUrl", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.query_id = stream.readInt64(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.query_id);
            stream.writeString(this.url);
        }
    }

    public static class TL_messages_requestWebView extends TLObject {
        public static int constructor = NUM;
        public boolean background;
        public InputUser bot;
        public int flags;
        public boolean from_bot_menu;
        public InputPeer peer;
        public int reply_to_msg_id;
        public boolean silent;
        public String start_param;
        public TL_dataJSON theme_params;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_webViewResultUrl.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            int i2 = this.background ? i | 64 : i & -65;
            this.flags = i2;
            int i3 = this.from_bot_menu ? i2 | 16 : i2 & -17;
            this.flags = i3;
            stream.writeInt32(i3);
            this.peer.serializeToStream(stream);
            this.bot.serializeToStream(stream);
            if ((this.flags & 2) != 0) {
                stream.writeString(this.url);
            }
            if ((this.flags & 8) != 0) {
                stream.writeString(this.start_param);
            }
            if ((this.flags & 4) != 0) {
                this.theme_params.serializeToStream(stream);
            }
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
        }
    }

    public static class TL_messages_prolongWebView extends TLObject {
        public static int constructor = -NUM;
        public InputUser bot;
        public int flags;
        public InputPeer peer;
        public long query_id;
        public int reply_to_msg_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            int i = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = i;
            stream.writeInt32(i);
            this.peer.serializeToStream(stream);
            this.bot.serializeToStream(stream);
            stream.writeInt64(this.query_id);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(this.reply_to_msg_id);
            }
        }
    }

    public static class TL_messages_requestSimpleWebView extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;
        public int flags;
        public TL_dataJSON theme_params;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_simpleWebViewResultUrl.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            this.bot.serializeToStream(stream);
            stream.writeString(this.url);
            if ((this.flags & 1) != 0) {
                this.theme_params.serializeToStream(stream);
            }
        }
    }

    public static class TL_messages_sendWebViewResultMessage extends TLObject {
        public static int constructor = -NUM;
        public long query_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_webViewMessageSent.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.query_id);
        }
    }

    public static class TL_messages_setWebViewResult extends TLObject {
        public static int constructor = -NUM;
        public long query_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.query_id);
        }
    }

    public static class TL_messages_getWebViewResult extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;
        public InputPeer peer;
        public long query_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_messages_webViewResult.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.peer.serializeToStream(stream);
            this.bot.serializeToStream(stream);
            stream.writeInt64(this.query_id);
        }
    }

    public static class TL_attachMenuBotsBot extends TLObject {
        public static int constructor = -NUM;
        public TL_attachMenuBot bot;
        public ArrayList<User> users = new ArrayList<>();

        public static TL_attachMenuBotsBot TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_attachMenuBotsBot result = new TL_attachMenuBotsBot();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_attachMenuBotsBot", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.bot = TL_attachMenuBot.TLdeserialize(stream, stream.readInt32(exception), exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    User object = User.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.users.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot.serializeToStream(stream);
            stream.writeInt32(NUM);
            int count = this.users.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.users.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_simpleWebViewResultUrl extends TLObject {
        public static int constructor = -NUM;
        public String url;

        public static TL_simpleWebViewResultUrl TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_simpleWebViewResultUrl result = new TL_simpleWebViewResultUrl();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_simpleWebViewResultUrl", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.url);
        }
    }

    public static class TL_webViewMessageSent extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public TL_inputBotInlineMessageID msg_id;

        public static TL_webViewMessageSent TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_webViewMessageSent result = new TL_webViewMessageSent();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_webViewMessageSent", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            int readInt32 = stream.readInt32(exception);
            this.flags = readInt32;
            if ((readInt32 & 1) != 0) {
                this.msg_id = TL_inputBotInlineMessageID.TLdeserialize(stream, stream.readInt32(exception), exception);
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.msg_id.serializeToStream(stream);
            }
        }
    }

    public static class TL_updateWebViewResultSent extends Update {
        public static int constructor = NUM;
        public long query_id;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.query_id = stream.readInt64(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.query_id);
        }
    }

    public static class TL_keyboardButtonSimpleWebView extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.url);
        }
    }

    public static class TL_messages_getAttachMenuBot extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return TL_attachMenuBotsBot.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.bot.serializeToStream(stream);
        }
    }

    public static abstract class account_SavedRingtones extends TLObject {
        public static account_SavedRingtones TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            account_SavedRingtones result = null;
            switch (constructor) {
                case -1041683259:
                    result = new TL_account_savedRingtones();
                    break;
                case -67704655:
                    result = new TL_account_savedRingtonesNotModified();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in account_SavedRingtones", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_account_savedRingtonesNotModified extends account_SavedRingtones {
        public static int constructor = -67704655;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_account_savedRingtones extends account_SavedRingtones {
        public static int constructor = -NUM;
        public long hash;
        public ArrayList<Document> ringtones = new ArrayList<>();

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.hash = stream.readInt64(exception);
            int magic = stream.readInt32(exception);
            if (magic == NUM) {
                int count = stream.readInt32(exception);
                int a = 0;
                while (a < count) {
                    Document object = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
                    if (object != null) {
                        this.ringtones.add(object);
                        a++;
                    } else {
                        return;
                    }
                }
            } else if (exception) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
            stream.writeInt32(NUM);
            int count = this.ringtones.size();
            stream.writeInt32(count);
            for (int a = 0; a < count; a++) {
                this.ringtones.get(a).serializeToStream(stream);
            }
        }
    }

    public static class TL_account_uploadRingtone extends TLObject {
        public static int constructor = -NUM;
        public InputFile file;
        public String file_name;
        public String mime_type;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Document.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.file.serializeToStream(stream);
            stream.writeString(this.file_name);
            stream.writeString(this.mime_type);
        }
    }

    public static class TL_account_getSavedRingtones extends TLObject {
        public static int constructor = -NUM;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_SavedRingtones.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.hash);
        }
    }

    public static class TL_account_saveRingtone extends TLObject {
        public static int constructor = NUM;
        public InputDocument id;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return account_SavedRingtone.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.id.serializeToStream(stream);
            stream.writeBool(this.unsave);
        }
    }

    public static class TL_attachMenuBotIconColor extends TLObject {
        public static int constructor = NUM;
        public int color;
        public String name;

        public static TL_attachMenuBotIconColor TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_attachMenuBotIconColor result = new TL_attachMenuBotIconColor();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_attachMenuBotIconColor", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.name = stream.readString(exception);
            this.color = stream.readInt32(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.name);
            stream.writeInt32(this.color);
        }
    }

    public static class TL_attachMenuBotIcon extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_attachMenuBotIconColor> colors = new ArrayList<>();
        public int flags;
        public Document icon;
        public String name;

        public static TL_attachMenuBotIcon TLdeserialize(AbstractSerializedData stream, int constructor2, boolean exception) {
            if (constructor == constructor2) {
                TL_attachMenuBotIcon result = new TL_attachMenuBotIcon();
                result.readParams(stream, exception);
                return result;
            } else if (!exception) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_attachMenuBotIcon", new Object[]{Integer.valueOf(constructor2)}));
            }
        }

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.flags = stream.readInt32(exception);
            this.name = stream.readString(exception);
            this.icon = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
            if ((this.flags & 1) != 0) {
                int magic = stream.readInt32(exception);
                if (magic == NUM) {
                    int count = stream.readInt32(exception);
                    int a = 0;
                    while (a < count) {
                        TL_attachMenuBotIconColor object = TL_attachMenuBotIconColor.TLdeserialize(stream, stream.readInt32(exception), exception);
                        if (object != null) {
                            this.colors.add(object);
                            a++;
                        } else {
                            return;
                        }
                    }
                } else if (exception) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(magic)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt32(this.flags);
            stream.writeString(this.name);
            this.icon.serializeToStream(stream);
            if ((this.flags & 1) != 0) {
                stream.writeInt32(NUM);
                int count = this.colors.size();
                stream.writeInt32(count);
                for (int a = 0; a < count; a++) {
                    this.colors.get(a).serializeToStream(stream);
                }
            }
        }
    }

    public static abstract class BotMenuButton extends TLObject {
        public static BotMenuButton TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            BotMenuButton result = null;
            switch (constructor) {
                case -944407322:
                    result = new TL_botMenuButton();
                    break;
                case 1113113093:
                    result = new TL_botMenuButtonCommands();
                    break;
                case 1966318984:
                    result = new TL_botMenuButtonDefault();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in BotMenuButton", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_botMenuButton extends BotMenuButton {
        public static int constructor = -NUM;
        public String text;
        public String url;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.text = stream.readString(exception);
            this.url = stream.readString(exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeString(this.text);
            stream.writeString(this.url);
        }
    }

    public static class TL_botMenuButtonDefault extends BotMenuButton {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_botMenuButtonCommands extends BotMenuButton {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }

    public static class TL_updateBotMenuButton extends Update {
        public static int constructor = NUM;
        public long bot_id;
        public BotMenuButton button;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.bot_id = stream.readInt64(exception);
            this.button = BotMenuButton.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            stream.writeInt64(this.bot_id);
            this.button.serializeToStream(stream);
        }
    }

    public static class TL_bots_setBotMenuButton extends TLObject {
        public static int constructor = NUM;
        public BotMenuButton button;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return Bool.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
            this.button.serializeToStream(stream);
        }
    }

    public static class TL_bots_getBotMenuButton extends TLObject {
        public static int constructor = -NUM;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData stream, int constructor2, boolean exception) {
            return BotMenuButton.TLdeserialize(stream, constructor2, exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.user_id.serializeToStream(stream);
        }
    }

    public static abstract class account_SavedRingtone extends TLObject {
        public static account_SavedRingtone TLdeserialize(AbstractSerializedData stream, int constructor, boolean exception) {
            account_SavedRingtone result = null;
            switch (constructor) {
                case -1222230163:
                    result = new TL_account_savedRingtone();
                    break;
                case 523271863:
                    result = new TL_account_savedRingtoneConverted();
                    break;
            }
            if (result != null || !exception) {
                if (result != null) {
                    result.readParams(stream, exception);
                }
                return result;
            }
            throw new RuntimeException(String.format("can't parse magic %x in account_SavedRingtone", new Object[]{Integer.valueOf(constructor)}));
        }
    }

    public static class TL_account_savedRingtoneConverted extends account_SavedRingtone {
        public static int constructor = NUM;
        public Document document;

        public void readParams(AbstractSerializedData stream, boolean exception) {
            this.document = Document.TLdeserialize(stream, stream.readInt32(exception), exception);
        }

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
            this.document.serializeToStream(stream);
        }
    }

    public static class TL_account_savedRingtone extends account_SavedRingtone {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData stream) {
            stream.writeInt32(constructor);
        }
    }
}
