package org.telegram.tgnet;

import android.text.TextUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.exoplayer2.C0542C;
import org.telegram.messenger.exoplayer2.source.ExtractorMediaSource;
import org.telegram.messenger.exoplayer2.util.MimeTypes;

public class TLRPC {
    public static final int CHAT_FLAG_IS_PUBLIC = 64;
    public static final int LAYER = 76;
    public static final int MESSAGE_FLAG_EDITED = 32768;
    public static final int MESSAGE_FLAG_FWD = 4;
    public static final int MESSAGE_FLAG_HAS_BOT_ID = 2048;
    public static final int MESSAGE_FLAG_HAS_ENTITIES = 128;
    public static final int MESSAGE_FLAG_HAS_FROM_ID = 256;
    public static final int MESSAGE_FLAG_HAS_MARKUP = 64;
    public static final int MESSAGE_FLAG_HAS_MEDIA = 512;
    public static final int MESSAGE_FLAG_HAS_VIEWS = 1024;
    public static final int MESSAGE_FLAG_MEGAGROUP = Integer.MIN_VALUE;
    public static final int MESSAGE_FLAG_REPLY = 8;
    public static final int USER_FLAG_ACCESS_HASH = 1;
    public static final int USER_FLAG_FIRST_NAME = 2;
    public static final int USER_FLAG_LAST_NAME = 4;
    public static final int USER_FLAG_PHONE = 16;
    public static final int USER_FLAG_PHOTO = 32;
    public static final int USER_FLAG_STATUS = 64;
    public static final int USER_FLAG_UNUSED = 128;
    public static final int USER_FLAG_UNUSED2 = 256;
    public static final int USER_FLAG_UNUSED3 = 512;
    public static final int USER_FLAG_USERNAME = 8;

    public static abstract class Audio extends TLObject {
        public long access_hash;
        public int date;
        public int dc_id;
        public int duration;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public int user_id;

        public static Audio TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Audio tL_audio_old2;
            switch (i) {
                case -945003370:
                    tL_audio_old2 = new TL_audio_old2();
                    break;
                case -102543275:
                    tL_audio_old2 = new TL_audio_layer45();
                    break;
                case 1114908135:
                    tL_audio_old2 = new TL_audio_old();
                    break;
                case 1431655926:
                    tL_audio_old2 = new TL_audioEncrypted();
                    break;
                case 1483311320:
                    tL_audio_old2 = new TL_audioEmpty_layer45();
                    break;
                default:
                    tL_audio_old2 = null;
                    break;
            }
            if (tL_audio_old2 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Audio", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_audio_old2 != null) {
                tL_audio_old2.readParams(abstractSerializedData, z);
            }
            return tL_audio_old2;
        }
    }

    public static abstract class Bool extends TLObject {
        public static Bool TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Bool tL_boolFalse = i != -NUM ? i != -NUM ? null : new TL_boolFalse() : new TL_boolTrue();
            if (tL_boolFalse == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Bool", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_boolFalse != null) {
                tL_boolFalse.readParams(abstractSerializedData, z);
            }
            return tL_boolFalse;
        }
    }

    public static abstract class BotInfo extends TLObject {
        public ArrayList<TL_botCommand> commands = new ArrayList();
        public String description;
        public int user_id;
        public int version;

        public static BotInfo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInfo tL_botInfo_layer48 = i != -NUM ? i != -NUM ? i != 164583517 ? null : new TL_botInfo_layer48() : new TL_botInfoEmpty_layer48() : new TL_botInfo();
            if (tL_botInfo_layer48 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInfo", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_botInfo_layer48 != null) {
                tL_botInfo_layer48.readParams(abstractSerializedData, z);
            }
            return tL_botInfo_layer48;
        }
    }

    public static abstract class BotInlineMessage extends TLObject {
        public String address;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public String first_name;
        public int flags;
        public GeoPoint geo;
        public String last_name;
        public String message;
        public boolean no_webpage;
        public int period;
        public String phone_number;
        public String provider;
        public ReplyMarkup reply_markup;
        public String title;
        public String venue_id;

        public static BotInlineMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInlineMessage tL_botInlineMessageText;
            switch (i) {
                case -1937807902:
                    tL_botInlineMessageText = new TL_botInlineMessageText();
                    break;
                case -1222451611:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaGeo();
                    break;
                case 175419739:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaAuto_layer74();
                    break;
                case 904770772:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaContact();
                    break;
                case 982505656:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaGeo_layer71();
                    break;
                case 1130767150:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaVenue();
                    break;
                case 1984755728:
                    tL_botInlineMessageText = new TL_botInlineMessageMediaAuto();
                    break;
                default:
                    tL_botInlineMessageText = null;
                    break;
            }
            if (tL_botInlineMessageText == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_botInlineMessageText != null) {
                tL_botInlineMessageText.readParams(abstractSerializedData, z);
            }
            return tL_botInlineMessageText;
        }
    }

    public static abstract class BotInlineResult extends TLObject {
        public WebDocument content;
        public String description;
        public Document document;
        public int flags;
        public String id;
        public Photo photo;
        public long query_id;
        public BotInlineMessage send_message;
        public WebDocument thumb;
        public String title;
        public String type;
        public String url;

        public static BotInlineResult TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInlineResult tL_botInlineMediaResult = i != 295067450 ? i != 400266251 ? null : new TL_botInlineMediaResult() : new TL_botInlineResult();
            if (tL_botInlineMediaResult == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_botInlineMediaResult != null) {
                tL_botInlineMediaResult.readParams(abstractSerializedData, z);
            }
            return tL_botInlineMediaResult;
        }
    }

    public static abstract class ChannelAdminLogEventAction extends TLObject {
        public Message message;
        public Message new_message;
        public ChannelParticipant new_participant;
        public ChatPhoto new_photo;
        public InputStickerSet new_stickerset;
        public ChannelParticipant participant;
        public Message prev_message;
        public ChannelParticipant prev_participant;
        public ChatPhoto prev_photo;
        public InputStickerSet prev_stickerset;
        public String prev_value;

        public static ChannelAdminLogEventAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelAdminLogEventAction tL_channelAdminLogEventActionChangeStickerSet;
            switch (i) {
                case -1312568665:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionChangeStickerSet();
                    break;
                case -1204857405:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionChangePhoto();
                    break;
                case -714643696:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionParticipantToggleAdmin();
                    break;
                case -484690728:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionParticipantInvite();
                    break;
                case -422036098:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionParticipantToggleBan();
                    break;
                case -421545947:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionChangeTitle();
                    break;
                case -370660328:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionUpdatePinned();
                    break;
                case -124291086:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionParticipantLeave();
                    break;
                case 405815507:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionParticipantJoin();
                    break;
                case 460916654:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionToggleInvites();
                    break;
                case 648939889:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionToggleSignatures();
                    break;
                case 1121994683:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionDeleteMessage();
                    break;
                case 1427671598:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionChangeAbout();
                    break;
                case 1599903217:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionTogglePreHistoryHidden();
                    break;
                case 1783299128:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionChangeUsername();
                    break;
                case 1889215493:
                    tL_channelAdminLogEventActionChangeStickerSet = new TL_channelAdminLogEventActionEditMessage();
                    break;
                default:
                    tL_channelAdminLogEventActionChangeStickerSet = null;
                    break;
            }
            if (tL_channelAdminLogEventActionChangeStickerSet == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelAdminLogEventAction", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelAdminLogEventActionChangeStickerSet != null) {
                tL_channelAdminLogEventActionChangeStickerSet.readParams(abstractSerializedData, z);
            }
            return tL_channelAdminLogEventActionChangeStickerSet;
        }
    }

    public static abstract class ChannelMessagesFilter extends TLObject {
        public boolean exclude_new_messages;
        public int flags;
        public ArrayList<TL_messageRange> ranges = new ArrayList();

        public static ChannelMessagesFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelMessagesFilter tL_channelMessagesFilter = i != -NUM ? i != -847783593 ? null : new TL_channelMessagesFilter() : new TL_channelMessagesFilterEmpty();
            if (tL_channelMessagesFilter == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelMessagesFilter", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelMessagesFilter != null) {
                tL_channelMessagesFilter.readParams(abstractSerializedData, z);
            }
            return tL_channelMessagesFilter;
        }
    }

    public static abstract class ChannelParticipant extends TLObject {
        public TL_channelAdminRights admin_rights;
        public TL_channelBannedRights banned_rights;
        public boolean can_edit;
        public int date;
        public int flags;
        public int inviter_id;
        public int kicked_by;
        public boolean left;
        public int promoted_by;
        public int user_id;

        public static ChannelParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelParticipant tL_channelParticipantKicked_layer67;
            switch (i) {
                case -1933187430:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantKicked_layer67();
                    break;
                case -1861910545:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantModerator_layer67();
                    break;
                case -1743180447:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantEditor_layer67();
                    break;
                case -1557620115:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantSelf();
                    break;
                case -1473271656:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantAdmin();
                    break;
                case -471670279:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantCreator();
                    break;
                case 367766557:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipant();
                    break;
                case 573315206:
                    tL_channelParticipantKicked_layer67 = new TL_channelParticipantBanned();
                    break;
                default:
                    tL_channelParticipantKicked_layer67 = null;
                    break;
            }
            if (tL_channelParticipantKicked_layer67 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipant", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelParticipantKicked_layer67 != null) {
                tL_channelParticipantKicked_layer67.readParams(abstractSerializedData, z);
            }
            return tL_channelParticipantKicked_layer67;
        }
    }

    public static abstract class ChannelParticipantsFilter extends TLObject {
        /* renamed from: q */
        public String f32q;

        public static ChannelParticipantsFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelParticipantsFilter tL_channelParticipantsKicked;
            switch (i) {
                case -1548400251:
                    tL_channelParticipantsKicked = new TL_channelParticipantsKicked();
                    break;
                case -1328445861:
                    tL_channelParticipantsKicked = new TL_channelParticipantsBots();
                    break;
                case -1268741783:
                    tL_channelParticipantsKicked = new TL_channelParticipantsAdmins();
                    break;
                case -566281095:
                    tL_channelParticipantsKicked = new TL_channelParticipantsRecent();
                    break;
                case 106343499:
                    tL_channelParticipantsKicked = new TL_channelParticipantsSearch();
                    break;
                case 338142689:
                    tL_channelParticipantsKicked = new TL_channelParticipantsBanned();
                    break;
                default:
                    tL_channelParticipantsKicked = null;
                    break;
            }
            if (tL_channelParticipantsKicked == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantsFilter", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelParticipantsKicked != null) {
                tL_channelParticipantsKicked.readParams(abstractSerializedData, z);
            }
            return tL_channelParticipantsKicked;
        }
    }

    public static abstract class Chat extends TLObject {
        public long access_hash;
        public boolean admin;
        public TL_channelAdminRights admin_rights;
        public boolean admins_enabled;
        public TL_channelBannedRights banned_rights;
        public boolean broadcast;
        public boolean creator;
        public int date;
        public boolean deactivated;
        public boolean democracy;
        public boolean explicit_content;
        public int flags;
        public int id;
        public boolean kicked;
        public boolean left;
        public boolean megagroup;
        public InputChannel migrated_to;
        public boolean min;
        public boolean moderator;
        public int participants_count;
        public ChatPhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean signatures;
        public String title;
        public int until_date;
        public String username;
        public boolean verified;
        public int version;

        public static Chat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Chat tL_channelForbidden_layer67;
            switch (i) {
                case -2059962289:
                    tL_channelForbidden_layer67 = new TL_channelForbidden_layer67();
                    break;
                case -1683826688:
                    tL_channelForbidden_layer67 = new TL_chatEmpty();
                    break;
                case -1588737454:
                    tL_channelForbidden_layer67 = new TL_channel_layer67();
                    break;
                case -652419756:
                    tL_channelForbidden_layer67 = new TL_chat();
                    break;
                case -83047359:
                    tL_channelForbidden_layer67 = new TL_chatForbidden_old();
                    break;
                case 120753115:
                    tL_channelForbidden_layer67 = new TL_chatForbidden();
                    break;
                case 213142300:
                    tL_channelForbidden_layer67 = new TL_channel_layer72();
                    break;
                case 681420594:
                    tL_channelForbidden_layer67 = new TL_channelForbidden();
                    break;
                case 763724588:
                    tL_channelForbidden_layer67 = new TL_channelForbidden_layer52();
                    break;
                case 1158377749:
                    tL_channelForbidden_layer67 = new TL_channel();
                    break;
                case 1260090630:
                    tL_channelForbidden_layer67 = new TL_channel_layer48();
                    break;
                case 1737397639:
                    tL_channelForbidden_layer67 = new TL_channel_old();
                    break;
                case 1855757255:
                    tL_channelForbidden_layer67 = new TL_chat_old();
                    break;
                case 1930607688:
                    tL_channelForbidden_layer67 = new TL_chat_old2();
                    break;
                default:
                    tL_channelForbidden_layer67 = null;
                    break;
            }
            if (tL_channelForbidden_layer67 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Chat", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelForbidden_layer67 != null) {
                tL_channelForbidden_layer67.readParams(abstractSerializedData, z);
            }
            return tL_channelForbidden_layer67;
        }
    }

    public static abstract class ChatFull extends TLObject {
        public String about;
        public int admins_count;
        public int available_min_id;
        public int banned_count;
        public ArrayList<BotInfo> bot_info = new ArrayList();
        public int call_msg_id;
        public boolean can_set_stickers;
        public boolean can_set_username;
        public boolean can_view_participants;
        public Photo chat_photo;
        public ExportedChatInvite exported_invite;
        public int flags;
        public boolean hidden_prehistory;
        public int id;
        public int kicked_count;
        public int migrated_from_chat_id;
        public int migrated_from_max_id;
        public PeerNotifySettings notify_settings;
        public ChatParticipants participants;
        public int participants_count;
        public int pinned_msg_id;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public StickerSet stickerset;
        public int unread_count;
        public int unread_important_count;

        public static ChatFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatFull tL_channelFull_layer70;
            switch (i) {
                case -1781833897:
                    tL_channelFull_layer70 = new TL_channelFull_layer70();
                    break;
                case -1749097118:
                    tL_channelFull_layer70 = new TL_channelFull_layer52();
                    break;
                case -1640751649:
                    tL_channelFull_layer70 = new TL_channelFull_layer48();
                    break;
                case -1009430225:
                    tL_channelFull_layer70 = new TL_channelFull_layer67();
                    break;
                case -877254512:
                    tL_channelFull_layer70 = new TL_channelFull();
                    break;
                case -88925533:
                    tL_channelFull_layer70 = new TL_channelFull_old();
                    break;
                case 401891279:
                    tL_channelFull_layer70 = new TL_channelFull_layer71();
                    break;
                case 771925524:
                    tL_channelFull_layer70 = new TL_chatFull();
                    break;
                case 1991201921:
                    tL_channelFull_layer70 = new TL_channelFull_layer72();
                    break;
                default:
                    tL_channelFull_layer70 = null;
                    break;
            }
            if (tL_channelFull_layer70 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatFull", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channelFull_layer70 != null) {
                tL_channelFull_layer70.readParams(abstractSerializedData, z);
            }
            return tL_channelFull_layer70;
        }
    }

    public static abstract class ChatInvite extends TLObject {
        public boolean broadcast;
        public boolean channel;
        public Chat chat;
        public int flags;
        public boolean isPublic;
        public boolean megagroup;
        public ArrayList<User> participants = new ArrayList();
        public int participants_count;
        public ChatPhoto photo;
        public String title;

        public static ChatInvite TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatInvite tL_chatInviteAlready = i != -613092008 ? i != NUM ? null : new TL_chatInviteAlready() : new TL_chatInvite();
            if (tL_chatInviteAlready == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatInvite", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_chatInviteAlready != null) {
                tL_chatInviteAlready.readParams(abstractSerializedData, z);
            }
            return tL_chatInviteAlready;
        }
    }

    public static abstract class ChatParticipant extends TLObject {
        public int date;
        public int inviter_id;
        public int user_id;

        public static ChatParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatParticipant tL_chatParticipantAdmin = i != -925415106 ? i != -636267638 ? i != -489233354 ? null : new TL_chatParticipantAdmin() : new TL_chatParticipantCreator() : new TL_chatParticipant();
            if (tL_chatParticipantAdmin == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipant", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_chatParticipantAdmin != null) {
                tL_chatParticipantAdmin.readParams(abstractSerializedData, z);
            }
            return tL_chatParticipantAdmin;
        }
    }

    public static abstract class ChatParticipants extends TLObject {
        public int admin_id;
        public int chat_id;
        public int flags;
        public ArrayList<ChatParticipant> participants = new ArrayList();
        public ChatParticipant self_participant;
        public int version;

        public static ChatParticipants TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatParticipants tL_chatParticipants_old = i != -57668565 ? i != 265468810 ? i != NUM ? i != NUM ? null : new TL_chatParticipants_old() : new TL_chatParticipants() : new TL_chatParticipantsForbidden_old() : new TL_chatParticipantsForbidden();
            if (tL_chatParticipants_old == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipants", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_chatParticipants_old != null) {
                tL_chatParticipants_old.readParams(abstractSerializedData, z);
            }
            return tL_chatParticipants_old;
        }
    }

    public static abstract class ChatPhoto extends TLObject {
        public FileLocation photo_big;
        public FileLocation photo_small;

        public static ChatPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatPhoto tL_chatPhoto = i != 935395612 ? i != NUM ? null : new TL_chatPhoto() : new TL_chatPhotoEmpty();
            if (tL_chatPhoto == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatPhoto", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_chatPhoto != null) {
                tL_chatPhoto.readParams(abstractSerializedData, z);
            }
            return tL_chatPhoto;
        }
    }

    public static abstract class ContactLink extends TLObject {
        public static ContactLink TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ContactLink tL_contactLinkUnknown = i != -721239344 ? i != -17968211 ? i != 646922073 ? i != NUM ? null : new TL_contactLinkUnknown() : new TL_contactLinkHasPhone() : new TL_contactLinkNone() : new TL_contactLinkContact();
            if (tL_contactLinkUnknown == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ContactLink", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_contactLinkUnknown != null) {
                tL_contactLinkUnknown.readParams(abstractSerializedData, z);
            }
            return tL_contactLinkUnknown;
        }
    }

    public static abstract class DecryptedMessage extends TLObject {
        public DecryptedMessageAction action;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public long grouped_id;
        public DecryptedMessageMedia media;
        public String message;
        public byte[] random_bytes;
        public long random_id;
        public long reply_to_random_id;
        public int ttl;
        public String via_bot_name;

        public static DecryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessage tL_decryptedMessage;
            switch (i) {
                case -1848883596:
                    tL_decryptedMessage = new TL_decryptedMessage();
                    break;
                case -1438109059:
                    tL_decryptedMessage = new TL_decryptedMessageService_layer8();
                    break;
                case 528568095:
                    tL_decryptedMessage = new TL_decryptedMessage_layer8();
                    break;
                case 541931640:
                    tL_decryptedMessage = new TL_decryptedMessage_layer17();
                    break;
                case 917541342:
                    tL_decryptedMessage = new TL_decryptedMessage_layer45();
                    break;
                case 1930838368:
                    tL_decryptedMessage = new TL_decryptedMessageService();
                    break;
                default:
                    tL_decryptedMessage = null;
                    break;
            }
            if (tL_decryptedMessage == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_decryptedMessage != null) {
                tL_decryptedMessage.readParams(abstractSerializedData, z);
            }
            return tL_decryptedMessage;
        }
    }

    public static abstract class DecryptedMessageAction extends TLObject {
        public SendMessageAction action;
        public int end_seq_no;
        public long exchange_id;
        public byte[] g_a;
        public byte[] g_b;
        public long key_fingerprint;
        public int layer;
        public ArrayList<Long> random_ids = new ArrayList();
        public int start_seq_no;
        public int ttl_seconds;

        public static DecryptedMessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessageAction tL_decryptedMessageActionScreenshotMessages;
            switch (i) {
                case -1967000459:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionScreenshotMessages();
                    break;
                case -1586283796:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionSetMessageTTL();
                    break;
                case -1473258141:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionNoop();
                    break;
                case -860719551:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionTyping();
                    break;
                case -586814357:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionAbortKey();
                    break;
                case -332526693:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionCommitKey();
                    break;
                case -217806717:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionNotifyLayer();
                    break;
                case -204906213:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionRequestKey();
                    break;
                case 206520510:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionReadMessages();
                    break;
                case 1360072880:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionResend();
                    break;
                case 1700872964:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionDeleteMessages();
                    break;
                case 1729750108:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionFlushHistory();
                    break;
                case 1877046107:
                    tL_decryptedMessageActionScreenshotMessages = new TL_decryptedMessageActionAcceptKey();
                    break;
                default:
                    tL_decryptedMessageActionScreenshotMessages = null;
                    break;
            }
            if (tL_decryptedMessageActionScreenshotMessages == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageAction", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_decryptedMessageActionScreenshotMessages != null) {
                tL_decryptedMessageActionScreenshotMessages.readParams(abstractSerializedData, z);
            }
            return tL_decryptedMessageActionScreenshotMessages;
        }
    }

    public static abstract class DecryptedMessageMedia extends TLObject {
        public double _long;
        public long access_hash;
        public String address;
        public ArrayList<DocumentAttribute> attributes = new ArrayList();
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public String file_name;
        public String first_name;
        /* renamed from: h */
        public int f33h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String last_name;
        public double lat;
        public String mime_type;
        public String phone_number;
        public String provider;
        public int size;
        public int thumb_h;
        public int thumb_w;
        public String title;
        public String url;
        public int user_id;
        public String venue_id;
        /* renamed from: w */
        public int f34w;

        public static DecryptedMessageMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessageMedia tL_decryptedMessageMediaVenue;
            switch (i) {
                case -1978796689:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaVenue();
                    break;
                case -1760785394:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaVideo();
                    break;
                case -1332395189:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaDocument_layer8();
                    break;
                case -452652584:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaWebPage();
                    break;
                case -235238024:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaPhoto();
                    break;
                case -90853155:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaExternalDocument();
                    break;
                case 144661578:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaEmpty();
                    break;
                case 846826124:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaPhoto_layer8();
                    break;
                case 893913689:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaGeoPoint();
                    break;
                case 1290694387:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaVideo_layer8();
                    break;
                case 1380598109:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaVideo_layer17();
                    break;
                case 1474341323:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaAudio();
                    break;
                case 1485441687:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaContact();
                    break;
                case 1619031439:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaAudio_layer8();
                    break;
                case 2063502050:
                    tL_decryptedMessageMediaVenue = new TL_decryptedMessageMediaDocument();
                    break;
                default:
                    tL_decryptedMessageMediaVenue = null;
                    break;
            }
            if (tL_decryptedMessageMediaVenue == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageMedia", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_decryptedMessageMediaVenue != null) {
                tL_decryptedMessageMediaVenue.readParams(abstractSerializedData, z);
            }
            return tL_decryptedMessageMediaVenue;
        }
    }

    public static abstract class DialogPeer extends TLObject {
        public static DialogPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DialogPeer tL_dialogPeer = i != -633170927 ? i != -445792507 ? null : new TL_dialogPeer() : new TL_dialogPeerFeed();
            if (tL_dialogPeer == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DialogPeer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_dialogPeer != null) {
                tL_dialogPeer.readParams(abstractSerializedData, z);
            }
            return tL_dialogPeer;
        }
    }

    public static abstract class Document extends TLObject {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes = new ArrayList();
        public int date;
        public int dc_id;
        public String file_name;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public int user_id;
        public int version;

        public static Document TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Document tL_document;
            switch (i) {
                case -2027738169:
                    tL_document = new TL_document();
                    break;
                case -1627626714:
                    tL_document = new TL_document_old();
                    break;
                case -106717361:
                    tL_document = new TL_document_layer53();
                    break;
                case 922273905:
                    tL_document = new TL_documentEmpty();
                    break;
                case 1431655766:
                    tL_document = new TL_documentEncrypted_old();
                    break;
                case 1431655768:
                    tL_document = new TL_documentEncrypted();
                    break;
                default:
                    tL_document = null;
                    break;
            }
            if (tL_document == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Document", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_document != null) {
                tL_document.readParams(abstractSerializedData, z);
            }
            return tL_document;
        }
    }

    public static abstract class DocumentAttribute extends TLObject {
        public String alt;
        public int duration;
        public String file_name;
        public int flags;
        /* renamed from: h */
        public int f35h;
        public boolean mask;
        public TL_maskCoords mask_coords;
        public String performer;
        public boolean round_message;
        public InputStickerSet stickerset;
        public boolean supports_streaming;
        public String title;
        public boolean voice;
        /* renamed from: w */
        public int f36w;
        public byte[] waveform;

        public static DocumentAttribute TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DocumentAttribute tL_documentAttributeHasStickers;
            switch (i) {
                case -1744710921:
                    tL_documentAttributeHasStickers = new TL_documentAttributeHasStickers();
                    break;
                case -1739392570:
                    tL_documentAttributeHasStickers = new TL_documentAttributeAudio();
                    break;
                case -1723033470:
                    tL_documentAttributeHasStickers = new TL_documentAttributeSticker_old2();
                    break;
                case -556656416:
                    tL_documentAttributeHasStickers = new TL_documentAttributeAudio_layer45();
                    break;
                case -83208409:
                    tL_documentAttributeHasStickers = new TL_documentAttributeSticker_old();
                    break;
                case 85215461:
                    tL_documentAttributeHasStickers = new TL_documentAttributeAudio_old();
                    break;
                case 250621158:
                    tL_documentAttributeHasStickers = new TL_documentAttributeVideo();
                    break;
                case 297109817:
                    tL_documentAttributeHasStickers = new TL_documentAttributeAnimated();
                    break;
                case 358154344:
                    tL_documentAttributeHasStickers = new TL_documentAttributeFilename();
                    break;
                case 978674434:
                    tL_documentAttributeHasStickers = new TL_documentAttributeSticker_layer55();
                    break;
                case 1494273227:
                    tL_documentAttributeHasStickers = new TL_documentAttributeVideo_layer65();
                    break;
                case 1662637586:
                    tL_documentAttributeHasStickers = new TL_documentAttributeSticker();
                    break;
                case 1815593308:
                    tL_documentAttributeHasStickers = new TL_documentAttributeImageSize();
                    break;
                default:
                    tL_documentAttributeHasStickers = null;
                    break;
            }
            if (tL_documentAttributeHasStickers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_documentAttributeHasStickers != null) {
                tL_documentAttributeHasStickers.readParams(abstractSerializedData, z);
            }
            return tL_documentAttributeHasStickers;
        }
    }

    public static abstract class DraftMessage extends TLObject {
        public int date;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public String message;
        public boolean no_webpage;
        public int reply_to_msg_id;

        public static DraftMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DraftMessage tL_draftMessage = i != -NUM ? i != -40996577 ? null : new TL_draftMessage() : new TL_draftMessageEmpty();
            if (tL_draftMessage == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in DraftMessage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_draftMessage != null) {
                tL_draftMessage.readParams(abstractSerializedData, z);
            }
            return tL_draftMessage;
        }
    }

    public static abstract class EncryptedChat extends TLObject {
        public byte[] a_or_b;
        public long access_hash;
        public int admin_id;
        public byte[] auth_key;
        public int date;
        public long exchange_id;
        public byte[] future_auth_key;
        public long future_key_fingerprint;
        public byte[] g_a;
        public byte[] g_a_or_b;
        public int id;
        public int in_seq_no;
        public int key_create_date;
        public long key_fingerprint;
        public byte[] key_hash;
        public short key_use_count_in;
        public short key_use_count_out;
        public int layer;
        public int mtproto_seq;
        public byte[] nonce;
        public int participant_id;
        public int seq_in;
        public int seq_out;
        public int ttl;
        public int user_id;

        public static EncryptedChat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedChat tL_encryptedChatEmpty;
            switch (i) {
                case -1417756512:
                    tL_encryptedChatEmpty = new TL_encryptedChatEmpty();
                    break;
                case -931638658:
                    tL_encryptedChatEmpty = new TL_encryptedChatRequested();
                    break;
                case -94974410:
                    tL_encryptedChatEmpty = new TL_encryptedChat();
                    break;
                case -39213129:
                    tL_encryptedChatEmpty = new TL_encryptedChatRequested_old();
                    break;
                case 332848423:
                    tL_encryptedChatEmpty = new TL_encryptedChatDiscarded();
                    break;
                case 1006044124:
                    tL_encryptedChatEmpty = new TL_encryptedChatWaiting();
                    break;
                case 1711395151:
                    tL_encryptedChatEmpty = new TL_encryptedChat_old();
                    break;
                default:
                    tL_encryptedChatEmpty = null;
                    break;
            }
            if (tL_encryptedChatEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedChat", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_encryptedChatEmpty != null) {
                tL_encryptedChatEmpty.readParams(abstractSerializedData, z);
            }
            return tL_encryptedChatEmpty;
        }
    }

    public static abstract class EncryptedFile extends TLObject {
        public long access_hash;
        public int dc_id;
        public long id;
        public int key_fingerprint;
        public int size;

        public static EncryptedFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedFile tL_encryptedFile = i != -NUM ? i != NUM ? null : new TL_encryptedFile() : new TL_encryptedFileEmpty();
            if (tL_encryptedFile == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedFile", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_encryptedFile != null) {
                tL_encryptedFile.readParams(abstractSerializedData, z);
            }
            return tL_encryptedFile;
        }
    }

    public static abstract class EncryptedMessage extends TLObject {
        public byte[] bytes;
        public int chat_id;
        public int date;
        public EncryptedFile file;
        public long random_id;

        public static EncryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedMessage tL_encryptedMessageService = i != -317144808 ? i != 594758406 ? null : new TL_encryptedMessageService() : new TL_encryptedMessage();
            if (tL_encryptedMessageService == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedMessage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_encryptedMessageService != null) {
                tL_encryptedMessageService.readParams(abstractSerializedData, z);
            }
            return tL_encryptedMessageService;
        }
    }

    public static abstract class ExportedChatInvite extends TLObject {
        public String link;

        public static ExportedChatInvite TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ExportedChatInvite tL_chatInviteEmpty = i != -64092740 ? i != NUM ? null : new TL_chatInviteEmpty() : new TL_chatInviteExported();
            if (tL_chatInviteEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ExportedChatInvite", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_chatInviteEmpty != null) {
                tL_chatInviteEmpty.readParams(abstractSerializedData, z);
            }
            return tL_chatInviteEmpty;
        }
    }

    public static abstract class FileLocation extends TLObject {
        public int dc_id;
        public byte[] iv;
        public byte[] key;
        public int local_id;
        public long secret;
        public long volume_id;

        public static FileLocation TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            FileLocation tL_fileLocationUnavailable = i != NUM ? i != NUM ? i != NUM ? null : new TL_fileLocationUnavailable() : new TL_fileEncryptedLocation() : new TL_fileLocation();
            if (tL_fileLocationUnavailable == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in FileLocation", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_fileLocationUnavailable != null) {
                tL_fileLocationUnavailable.readParams(abstractSerializedData, z);
            }
            return tL_fileLocationUnavailable;
        }
    }

    public static abstract class FoundGif extends TLObject {
        public String content_type;
        public String content_url;
        public Document document;
        /* renamed from: h */
        public int f37h;
        public Photo photo;
        public String thumb_url;
        public String url;
        /* renamed from: w */
        public int f38w;

        public static FoundGif TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            FoundGif tL_foundGif = i != -NUM ? i != 372165663 ? null : new TL_foundGif() : new TL_foundGifCached();
            if (tL_foundGif == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in FoundGif", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_foundGif != null) {
                tL_foundGif.readParams(abstractSerializedData, z);
            }
            return tL_foundGif;
        }
    }

    public static abstract class GeoPoint extends TLObject {
        public double _long;
        public double lat;

        public static GeoPoint TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            GeoPoint tL_geoPoint = i != 286776671 ? i != 541710092 ? null : new TL_geoPoint() : new TL_geoPointEmpty();
            if (tL_geoPoint == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in GeoPoint", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_geoPoint != null) {
                tL_geoPoint.readParams(abstractSerializedData, z);
            }
            return tL_geoPoint;
        }
    }

    public static abstract class GroupCall extends TLObject {
        public long access_hash;
        public int admin_id;
        public int channel_id;
        public TL_groupCallConnection connection;
        public int duration;
        public byte[] encryption_key;
        public int flags;
        public long id;
        public long key_fingerprint;
        public int participants_count;
        public TL_phoneCallProtocol protocol;
        public byte[] reflector_group_tag;
        public byte[] reflector_self_secret;
        public byte[] reflector_self_tag;

        public static GroupCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            GroupCall tL_groupCallDiscarded = i != 177149476 ? i != NUM ? i != NUM ? null : new TL_groupCallDiscarded() : new TL_groupCallPrivate() : new TL_groupCall();
            if (tL_groupCallDiscarded == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in GroupCall", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_groupCallDiscarded != null) {
                tL_groupCallDiscarded.readParams(abstractSerializedData, z);
            }
            return tL_groupCallDiscarded;
        }
    }

    public static abstract class GroupCallParticipant extends TLObject {
        public int date;
        public int flags;
        public int inviter_id;
        public byte[] member_tag_hash;
        public TL_inputPhoneCall phone_call;
        public boolean readonly;
        public byte[] streams;
        public int user_id;

        public static GroupCallParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            GroupCallParticipant tL_groupCallParticipant = i != 930387696 ? i != NUM ? i != NUM ? i != NUM ? null : new TL_groupCallParticipant() : new TL_groupCallParticipantAdmin() : new TL_groupCallParticipantLeft() : new TL_groupCallParticipantInvited();
            if (tL_groupCallParticipant == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in GroupCallParticipant", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_groupCallParticipant != null) {
                tL_groupCallParticipant.readParams(abstractSerializedData, z);
            }
            return tL_groupCallParticipant;
        }
    }

    public static abstract class InputChannel extends TLObject {
        public long access_hash;
        public int channel_id;

        public static InputChannel TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputChannel tL_inputChannelEmpty = i != -NUM ? i != -292807034 ? null : new TL_inputChannelEmpty() : new TL_inputChannel();
            if (tL_inputChannelEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputChannel", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputChannelEmpty != null) {
                tL_inputChannelEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputChannelEmpty;
        }
    }

    public static abstract class InputChatPhoto extends TLObject {
        public InputFile file;
        public InputPhoto id;

        public static InputChatPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputChatPhoto tL_inputChatPhotoEmpty = i != -NUM ? i != -NUM ? i != 480546647 ? null : new TL_inputChatPhotoEmpty() : new TL_inputChatUploadedPhoto() : new TL_inputChatPhoto();
            if (tL_inputChatPhotoEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputChatPhoto", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputChatPhotoEmpty != null) {
                tL_inputChatPhotoEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputChatPhotoEmpty;
        }
    }

    public static abstract class InputDialogPeer extends TLObject {
        public static InputDialogPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputDialogPeer tL_inputDialogPeerFeed = i != -55902537 ? i != 741914831 ? null : new TL_inputDialogPeerFeed() : new TL_inputDialogPeer();
            if (tL_inputDialogPeerFeed == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputDialogPeer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputDialogPeerFeed != null) {
                tL_inputDialogPeerFeed.readParams(abstractSerializedData, z);
            }
            return tL_inputDialogPeerFeed;
        }
    }

    public static abstract class InputDocument extends TLObject {
        public long access_hash;
        public long id;

        public static InputDocument TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputDocument tL_inputDocumentEmpty = i != 410618194 ? i != NUM ? null : new TL_inputDocumentEmpty() : new TL_inputDocument();
            if (tL_inputDocumentEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputDocument", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputDocumentEmpty != null) {
                tL_inputDocumentEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputDocumentEmpty;
        }
    }

    public static abstract class InputEncryptedFile extends TLObject {
        public long access_hash;
        public long id;
        public int key_fingerprint;
        public String md5_checksum;
        public int parts;

        public static InputEncryptedFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputEncryptedFile tL_inputEncryptedFileUploaded = i != 406307684 ? i != 767652808 ? i != NUM ? i != NUM ? null : new TL_inputEncryptedFileUploaded() : new TL_inputEncryptedFile() : new TL_inputEncryptedFileBigUploaded() : new TL_inputEncryptedFileEmpty();
            if (tL_inputEncryptedFileUploaded == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputEncryptedFile", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputEncryptedFileUploaded != null) {
                tL_inputEncryptedFileUploaded.readParams(abstractSerializedData, z);
            }
            return tL_inputEncryptedFileUploaded;
        }
    }

    public static abstract class InputFile extends TLObject {
        public long id;
        public String md5_checksum;
        public String name;
        public int parts;

        public static InputFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputFile tL_inputFileBig = i != -181407105 ? i != -95482955 ? null : new TL_inputFileBig() : new TL_inputFile();
            if (tL_inputFileBig == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputFile", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputFileBig != null) {
                tL_inputFileBig.readParams(abstractSerializedData, z);
            }
            return tL_inputFileBig;
        }
    }

    public static abstract class InputFileLocation extends TLObject {
        public long access_hash;
        public long id;
        public int local_id;
        public long secret;
        public long volume_id;

        public static InputFileLocation TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputFileLocation tL_inputDocumentFileLocation = i != -182231723 ? i != 342061462 ? i != NUM ? null : new TL_inputDocumentFileLocation() : new TL_inputFileLocation() : new TL_inputEncryptedFileLocation();
            if (tL_inputDocumentFileLocation == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputFileLocation", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputDocumentFileLocation != null) {
                tL_inputDocumentFileLocation.readParams(abstractSerializedData, z);
            }
            return tL_inputDocumentFileLocation;
        }
    }

    public static abstract class InputGame extends TLObject {
        public long access_hash;
        public InputUser bot_id;
        public long id;
        public String short_name;

        public static InputGame TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputGame tL_inputGameID = i != -NUM ? i != 53231223 ? null : new TL_inputGameID() : new TL_inputGameShortName();
            if (tL_inputGameID == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputGame", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputGameID != null) {
                tL_inputGameID.readParams(abstractSerializedData, z);
            }
            return tL_inputGameID;
        }
    }

    public static abstract class InputGeoPoint extends TLObject {
        public double _long;
        public double lat;

        public static InputGeoPoint TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputGeoPoint tL_inputGeoPoint = i != -457104426 ? i != -206066487 ? null : new TL_inputGeoPoint() : new TL_inputGeoPointEmpty();
            if (tL_inputGeoPoint == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputGeoPoint", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputGeoPoint != null) {
                tL_inputGeoPoint.readParams(abstractSerializedData, z);
            }
            return tL_inputGeoPoint;
        }
    }

    public static abstract class InputMedia extends TLObject {
        public String address;
        public ArrayList<DocumentAttribute> attributes = new ArrayList();
        public InputFile file;
        public String first_name;
        public int flags;
        public InputGeoPoint geo_point;
        public String last_name;
        public String mime_type;
        public boolean nosound_video;
        public int period;
        public String phone_number;
        public String provider;
        /* renamed from: q */
        public String f39q;
        public ArrayList<InputDocument> stickers = new ArrayList();
        public InputFile thumb;
        public String title;
        public int ttl_seconds;
        public String url;
        public String venue_id;
        public String venue_type;

        public static InputMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputMedia tL_inputMediaEmpty;
            switch (i) {
                case -1771768449:
                    tL_inputMediaEmpty = new TL_inputMediaEmpty();
                    break;
                case -1494984313:
                    tL_inputMediaEmpty = new TL_inputMediaContact();
                    break;
                case -1279654347:
                    tL_inputMediaEmpty = new TL_inputMediaPhoto();
                    break;
                case -1052959727:
                    tL_inputMediaEmpty = new TL_inputMediaVenue();
                    break;
                case -750828557:
                    tL_inputMediaEmpty = new TL_inputMediaGame();
                    break;
                case -440664550:
                    tL_inputMediaEmpty = new TL_inputMediaPhotoExternal();
                    break;
                case -104578748:
                    tL_inputMediaEmpty = new TL_inputMediaGeoPoint();
                    break;
                case -78455655:
                    tL_inputMediaEmpty = new TL_inputMediaDocumentExternal();
                    break;
                case 505969924:
                    tL_inputMediaEmpty = new TL_inputMediaUploadedPhoto();
                    break;
                case 598418386:
                    tL_inputMediaEmpty = new TL_inputMediaDocument();
                    break;
                case 1212395773:
                    tL_inputMediaEmpty = new TL_inputMediaGifExternal();
                    break;
                case 1530447553:
                    tL_inputMediaEmpty = new TL_inputMediaUploadedDocument();
                    break;
                case 2065305999:
                    tL_inputMediaEmpty = new TL_inputMediaGeoLive();
                    break;
                default:
                    tL_inputMediaEmpty = null;
                    break;
            }
            if (tL_inputMediaEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputMedia", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputMediaEmpty != null) {
                tL_inputMediaEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputMediaEmpty;
        }
    }

    public static abstract class InputNotifyPeer extends TLObject {
        public static InputNotifyPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputNotifyPeer tL_inputNotifyChats = i != -NUM ? i != -NUM ? i != 423314455 ? i != NUM ? null : new TL_inputNotifyChats() : new TL_inputNotifyUsers() : new TL_inputNotifyPeer() : new TL_inputNotifyAll();
            if (tL_inputNotifyChats == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputNotifyPeer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputNotifyChats != null) {
                tL_inputNotifyChats.readParams(abstractSerializedData, z);
            }
            return tL_inputNotifyChats;
        }
    }

    public static abstract class InputPaymentCredentials extends TLObject {
        public TL_dataJSON data;
        public int flags;
        public String google_transaction_id;
        public String id;
        public TL_dataJSON payment_token;
        public boolean save;
        public byte[] tmp_password;

        public static InputPaymentCredentials TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPaymentCredentials tL_inputPaymentCredentials = i != -NUM ? i != -905587442 ? i != 873977640 ? null : new TL_inputPaymentCredentials() : new TL_inputPaymentCredentialsAndroidPay() : new TL_inputPaymentCredentialsSaved();
            if (tL_inputPaymentCredentials == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPaymentCredentials", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPaymentCredentials != null) {
                tL_inputPaymentCredentials.readParams(abstractSerializedData, z);
            }
            return tL_inputPaymentCredentials;
        }
    }

    public static abstract class InputPeer extends TLObject {
        public long access_hash;
        public int channel_id;
        public int chat_id;
        public int user_id;

        public static InputPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPeer tL_inputPeerChat;
            switch (i) {
                case 396093539:
                    tL_inputPeerChat = new TL_inputPeerChat();
                    break;
                case 548253432:
                    tL_inputPeerChat = new TL_inputPeerChannel();
                    break;
                case 2072935910:
                    tL_inputPeerChat = new TL_inputPeerUser();
                    break;
                case 2107670217:
                    tL_inputPeerChat = new TL_inputPeerSelf();
                    break;
                case 2134579434:
                    tL_inputPeerChat = new TL_inputPeerEmpty();
                    break;
                default:
                    tL_inputPeerChat = null;
                    break;
            }
            if (tL_inputPeerChat == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPeer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPeerChat != null) {
                tL_inputPeerChat.readParams(abstractSerializedData, z);
            }
            return tL_inputPeerChat;
        }
    }

    public static abstract class InputPeerNotifyEvents extends TLObject {
        public static InputPeerNotifyEvents TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPeerNotifyEvents tL_inputPeerNotifyEventsEmpty = i != -395694988 ? i != -265263912 ? null : new TL_inputPeerNotifyEventsEmpty() : new TL_inputPeerNotifyEventsAll();
            if (tL_inputPeerNotifyEventsEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPeerNotifyEvents", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPeerNotifyEventsEmpty != null) {
                tL_inputPeerNotifyEventsEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputPeerNotifyEventsEmpty;
        }
    }

    public static abstract class InputPhoto extends TLObject {
        public long access_hash;
        public long id;

        public static InputPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPhoto tL_inputPhotoEmpty = i != -74070332 ? i != 483901197 ? null : new TL_inputPhotoEmpty() : new TL_inputPhoto();
            if (tL_inputPhotoEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPhoto", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPhotoEmpty != null) {
                tL_inputPhotoEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputPhotoEmpty;
        }
    }

    public static abstract class InputPrivacyKey extends TLObject {
        public static InputPrivacyKey TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPrivacyKey tL_inputPrivacyKeyStatusTimestamp = i != -NUM ? i != -88417185 ? i != NUM ? null : new TL_inputPrivacyKeyStatusTimestamp() : new TL_inputPrivacyKeyPhoneCall() : new TL_inputPrivacyKeyChatInvite();
            if (tL_inputPrivacyKeyStatusTimestamp == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyKey", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPrivacyKeyStatusTimestamp != null) {
                tL_inputPrivacyKeyStatusTimestamp.readParams(abstractSerializedData, z);
            }
            return tL_inputPrivacyKeyStatusTimestamp;
        }
    }

    public static abstract class InputPrivacyRule extends TLObject {
        public ArrayList<InputUser> users = new ArrayList();

        public static InputPrivacyRule TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPrivacyRule tL_inputPrivacyValueDisallowUsers;
            switch (i) {
                case -1877932953:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueDisallowUsers();
                    break;
                case -697604407:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueDisallowAll();
                    break;
                case 195371015:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueDisallowContacts();
                    break;
                case 218751099:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueAllowContacts();
                    break;
                case 320652927:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueAllowUsers();
                    break;
                case 407582158:
                    tL_inputPrivacyValueDisallowUsers = new TL_inputPrivacyValueAllowAll();
                    break;
                default:
                    tL_inputPrivacyValueDisallowUsers = null;
                    break;
            }
            if (tL_inputPrivacyValueDisallowUsers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyRule", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputPrivacyValueDisallowUsers != null) {
                tL_inputPrivacyValueDisallowUsers.readParams(abstractSerializedData, z);
            }
            return tL_inputPrivacyValueDisallowUsers;
        }
    }

    public static abstract class InputStickerSet extends TLObject {
        public long access_hash;
        public long id;
        public String short_name;

        public static InputStickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputStickerSet tL_inputStickerSetEmpty = i != -NUM ? i != -NUM ? i != -4838507 ? null : new TL_inputStickerSetEmpty() : new TL_inputStickerSetID() : new TL_inputStickerSetShortName();
            if (tL_inputStickerSetEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputStickerSet", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputStickerSetEmpty != null) {
                tL_inputStickerSetEmpty.readParams(abstractSerializedData, z);
            }
            return tL_inputStickerSetEmpty;
        }
    }

    public static abstract class InputStickeredMedia extends TLObject {
        public static InputStickeredMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputStickeredMedia tL_inputStickeredMediaPhoto = i != 70813275 ? i != NUM ? null : new TL_inputStickeredMediaPhoto() : new TL_inputStickeredMediaDocument();
            if (tL_inputStickeredMediaPhoto == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputStickeredMedia", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputStickeredMediaPhoto != null) {
                tL_inputStickeredMediaPhoto.readParams(abstractSerializedData, z);
            }
            return tL_inputStickeredMediaPhoto;
        }
    }

    public static abstract class InputUser extends TLObject {
        public long access_hash;
        public int user_id;

        public static InputUser TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputUser tL_inputUserSelf = i != -NUM ? i != -668391402 ? i != -138301121 ? null : new TL_inputUserSelf() : new TL_inputUser() : new TL_inputUserEmpty();
            if (tL_inputUserSelf == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in InputUser", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputUserSelf != null) {
                tL_inputUserSelf.readParams(abstractSerializedData, z);
            }
            return tL_inputUserSelf;
        }
    }

    public static abstract class KeyboardButton extends TLObject {
        public byte[] data;
        public int flags;
        public String query;
        public boolean same_peer;
        public String text;
        public String url;

        public static KeyboardButton TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            KeyboardButton tL_keyboardButton;
            switch (i) {
                case -1560655744:
                    tL_keyboardButton = new TL_keyboardButton();
                    break;
                case -1344716869:
                    tL_keyboardButton = new TL_keyboardButtonBuy();
                    break;
                case -1318425559:
                    tL_keyboardButton = new TL_keyboardButtonRequestPhone();
                    break;
                case -59151553:
                    tL_keyboardButton = new TL_keyboardButtonRequestGeoLocation();
                    break;
                case 90744648:
                    tL_keyboardButton = new TL_keyboardButtonSwitchInline();
                    break;
                case 629866245:
                    tL_keyboardButton = new TL_keyboardButtonUrl();
                    break;
                case 1358175439:
                    tL_keyboardButton = new TL_keyboardButtonGame();
                    break;
                case 1748655686:
                    tL_keyboardButton = new TL_keyboardButtonCallback();
                    break;
                default:
                    tL_keyboardButton = null;
                    break;
            }
            if (tL_keyboardButton == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_keyboardButton != null) {
                tL_keyboardButton.readParams(abstractSerializedData, z);
            }
            return tL_keyboardButton;
        }
    }

    public static abstract class LangPackString extends TLObject {
        public String few_value;
        public int flags;
        public String key;
        public String many_value;
        public String one_value;
        public String other_value;
        public String two_value;
        public String value;
        public String zero_value;

        public static LangPackString TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            LangPackString tL_langPackStringPluralized = i != -892239370 ? i != 695856818 ? i != NUM ? null : new TL_langPackStringPluralized() : new TL_langPackStringDeleted() : new TL_langPackString();
            if (tL_langPackStringPluralized == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in LangPackString", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_langPackStringPluralized != null) {
                tL_langPackStringPluralized.readParams(abstractSerializedData, z);
            }
            return tL_langPackStringPluralized;
        }
    }

    public static abstract class Message extends TLObject {
        public MessageAction action;
        public String attachPath = TtmlNode.ANONYMOUS_REGION_ID;
        public int date;
        public int destroyTime;
        public long dialog_id;
        public int edit_date;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public int from_id;
        public MessageFwdHeader fwd_from;
        public int fwd_msg_id = 0;
        public long grouped_id;
        public int id;
        public int layer;
        public int local_id = 0;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public HashMap<String, String> params;
        public boolean post;
        public String post_author;
        public long random_id;
        public Message replyMessage;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public long reply_to_random_id;
        public int send_state = 0;
        public int seq_in;
        public int seq_out;
        public boolean silent;
        public Peer to_id;
        public int ttl;
        public boolean unread;
        public int via_bot_id;
        public String via_bot_name;
        public int views;
        public boolean with_my_score;

        public static Message TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Message tL_messageEmpty;
            switch (i) {
                case -2082087340:
                    tL_messageEmpty = new TL_messageEmpty();
                    break;
                case -1864508399:
                    tL_messageEmpty = new TL_message_layer72();
                    break;
                case -1642487306:
                    tL_messageEmpty = new TL_messageService();
                    break;
                case -1618124613:
                    tL_messageEmpty = new TL_messageService_old();
                    break;
                case -1553471722:
                    tL_messageEmpty = new TL_messageForwarded_old2();
                    break;
                case -1481959023:
                    tL_messageEmpty = new TL_message_old3();
                    break;
                case -1066691065:
                    tL_messageEmpty = new TL_messageService_layer48();
                    break;
                case -1063525281:
                    tL_messageEmpty = new TL_message_layer68();
                    break;
                case -1023016155:
                    tL_messageEmpty = new TL_message_old4();
                    break;
                case -913120932:
                    tL_messageEmpty = new TL_message_layer47();
                    break;
                case -260565816:
                    tL_messageEmpty = new TL_message_old5();
                    break;
                case 99903492:
                    tL_messageEmpty = new TL_messageForwarded_old();
                    break;
                case 495384334:
                    tL_messageEmpty = new TL_messageService_old2();
                    break;
                case 585853626:
                    tL_messageEmpty = new TL_message_old();
                    break;
                case 736885382:
                    tL_messageEmpty = new TL_message_old6();
                    break;
                case 1157215293:
                    tL_messageEmpty = new TL_message();
                    break;
                case 1431655928:
                    tL_messageEmpty = new TL_message_secret_old();
                    break;
                case 1431655929:
                    tL_messageEmpty = new TL_message_secret_layer72();
                    break;
                case 1431655930:
                    tL_messageEmpty = new TL_message_secret();
                    break;
                case 1450613171:
                    tL_messageEmpty = new TL_message_old2();
                    break;
                case 1537633299:
                    tL_messageEmpty = new TL_message_old7();
                    break;
                default:
                    tL_messageEmpty = null;
                    break;
            }
            if (tL_messageEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Message", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messageEmpty != null) {
                tL_messageEmpty.readParams(abstractSerializedData, z);
            }
            return tL_messageEmpty;
        }

        public void readAttachPath(AbstractSerializedData abstractSerializedData, int i) {
            int i2 = (this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage)) ? false : 1;
            int i3 = (TextUtils.isEmpty(this.message) || !(((this.media instanceof TL_messageMediaPhoto_old) || (this.media instanceof TL_messageMediaPhoto_layer68) || (this.media instanceof TL_messageMediaPhoto_layer74) || (this.media instanceof TL_messageMediaDocument_old) || (this.media instanceof TL_messageMediaDocument_layer68) || (this.media instanceof TL_messageMediaDocument_layer74)) && this.message.startsWith("-1"))) ? false : 1;
            if ((this.out || (this.to_id != null && this.to_id.user_id != 0 && this.to_id.user_id == this.from_id && this.from_id == i)) && (this.id < 0 || i2 != 0)) {
                if (!(i2 == 0 || i3 == 0)) {
                    if (this.message.length() > 6 && this.message.charAt(2) == '_') {
                        this.params = new HashMap();
                        this.params.put("ve", this.message);
                    }
                    if (this.params != null || this.message.length() == 2) {
                        this.message = TtmlNode.ANONYMOUS_REGION_ID;
                    }
                }
                if (abstractSerializedData.remaining() > 0) {
                    this.attachPath = abstractSerializedData.readString(false);
                    if (this.id < 0 && this.attachPath.startsWith("||")) {
                        String[] split = this.attachPath.split("\\|\\|");
                        if (split.length > 0) {
                            if (this.params == null) {
                                this.params = new HashMap();
                            }
                            for (i3 = 1; i3 < split.length - 1; i3++) {
                                String[] split2 = split[i3].split("\\|=\\|");
                                if (split2.length == 2) {
                                    this.params.put(split2[0], split2[1]);
                                }
                            }
                            this.attachPath = split[split.length - 1];
                        }
                    }
                }
            }
            if ((this.flags & 4) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(false);
            }
        }

        protected void writeAttachPath(AbstractSerializedData abstractSerializedData) {
            if (!(this instanceof TL_message_secret)) {
                if (!(this instanceof TL_message_secret_layer72)) {
                    String str = this.attachPath != null ? this.attachPath : TtmlNode.ANONYMOUS_REGION_ID;
                    if (this.id < 0 && this.params != null && this.params.size() > 0) {
                        for (Entry entry : this.params.entrySet()) {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append((String) entry.getKey());
                            stringBuilder.append("|=|");
                            stringBuilder.append((String) entry.getValue());
                            stringBuilder.append("||");
                            stringBuilder.append(str);
                            str = stringBuilder.toString();
                        }
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("||");
                        stringBuilder2.append(str);
                        str = stringBuilder2.toString();
                    }
                    abstractSerializedData.writeString(str);
                    if ((this.flags & 4) != 0 && this.id < 0) {
                        abstractSerializedData.writeInt32(this.fwd_msg_id);
                        return;
                    }
                    return;
                }
            }
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static abstract class MessageAction extends TLObject {
        public String address;
        public TL_inputGroupCall call;
        public long call_id;
        public int channel_id;
        public int chat_id;
        public String currency;
        public int duration;
        public DecryptedMessageAction encryptedAction;
        public int flags;
        public long game_id;
        public int inviter_id;
        public String message;
        public UserProfilePhoto newUserPhoto;
        public Photo photo;
        public PhoneCallDiscardReason reason;
        public int score;
        public String title;
        public long total_amount;
        public int ttl;
        public int user_id;
        public ArrayList<Integer> users = new ArrayList();

        public static MessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageAction tL_messageActionPhoneCall;
            switch (i) {
                case -2132731265:
                    tL_messageActionPhoneCall = new TL_messageActionPhoneCall();
                    break;
                case -1834538890:
                    tL_messageActionPhoneCall = new TL_messageActionGameScore();
                    break;
                case -1799538451:
                    tL_messageActionPhoneCall = new TL_messageActionPinMessage();
                    break;
                case -1781355374:
                    tL_messageActionPhoneCall = new TL_messageActionChannelCreate();
                    break;
                case -1780220945:
                    tL_messageActionPhoneCall = new TL_messageActionChatDeletePhoto();
                    break;
                case -1615153660:
                    tL_messageActionPhoneCall = new TL_messageActionHistoryClear();
                    break;
                case -1503425638:
                    tL_messageActionPhoneCall = new TL_messageActionChatCreate();
                    break;
                case -1410748418:
                    tL_messageActionPhoneCall = new TL_messageActionBotAllowed();
                    break;
                case -1336546578:
                    tL_messageActionPhoneCall = new TL_messageActionChannelMigrateFrom();
                    break;
                case -1297179892:
                    tL_messageActionPhoneCall = new TL_messageActionChatDeleteUser();
                    break;
                case -1247687078:
                    tL_messageActionPhoneCall = new TL_messageActionChatEditTitle();
                    break;
                case -1230047312:
                    tL_messageActionPhoneCall = new TL_messageActionEmpty();
                    break;
                case -123931160:
                    tL_messageActionPhoneCall = new TL_messageActionChatJoinedByLink();
                    break;
                case -85549226:
                    tL_messageActionPhoneCall = new TL_messageActionCustomAction();
                    break;
                case 1080663248:
                    tL_messageActionPhoneCall = new TL_messageActionPaymentSent();
                    break;
                case 1200788123:
                    tL_messageActionPhoneCall = new TL_messageActionScreenshotTaken();
                    break;
                case 1217033015:
                    tL_messageActionPhoneCall = new TL_messageActionChatAddUser();
                    break;
                case 1371385889:
                    tL_messageActionPhoneCall = new TL_messageActionChatMigrateTo();
                    break;
                case 1431655760:
                    tL_messageActionPhoneCall = new TL_messageActionUserJoined();
                    break;
                case 1431655761:
                    tL_messageActionPhoneCall = new TL_messageActionUserUpdatedPhoto();
                    break;
                case 1431655762:
                    tL_messageActionPhoneCall = new TL_messageActionTTLChange();
                    break;
                case 1431655767:
                    tL_messageActionPhoneCall = new TL_messageActionCreatedBroadcastList();
                    break;
                case 1431655925:
                    tL_messageActionPhoneCall = new TL_messageActionLoginUnknownLocation();
                    break;
                case 1431655927:
                    tL_messageActionPhoneCall = new TL_messageEncryptedAction();
                    break;
                case 1581055051:
                    tL_messageActionPhoneCall = new TL_messageActionChatAddUser_old();
                    break;
                case 2047704898:
                    tL_messageActionPhoneCall = new TL_messageActionGroupCall();
                    break;
                case 2144015272:
                    tL_messageActionPhoneCall = new TL_messageActionChatEditPhoto();
                    break;
                default:
                    tL_messageActionPhoneCall = null;
                    break;
            }
            if (tL_messageActionPhoneCall == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageAction", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messageActionPhoneCall != null) {
                tL_messageActionPhoneCall.readParams(abstractSerializedData, z);
            }
            return tL_messageActionPhoneCall;
        }
    }

    public static abstract class MessageEntity extends TLObject {
        public String language;
        public int length;
        public int offset;
        public String url;

        public static MessageEntity TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageEntity tL_messageEntityItalic;
            switch (i) {
                case -2106619040:
                    tL_messageEntityItalic = new TL_messageEntityItalic();
                    break;
                case -1687559349:
                    tL_messageEntityItalic = new TL_messageEntityPhone();
                    break;
                case -1148011883:
                    tL_messageEntityItalic = new TL_messageEntityUnknown();
                    break;
                case -1117713463:
                    tL_messageEntityItalic = new TL_messageEntityBold();
                    break;
                case -100378723:
                    tL_messageEntityItalic = new TL_messageEntityMention();
                    break;
                case 546203849:
                    tL_messageEntityItalic = new TL_inputMessageEntityMentionName();
                    break;
                case 681706865:
                    tL_messageEntityItalic = new TL_messageEntityCode();
                    break;
                case 892193368:
                    tL_messageEntityItalic = new TL_messageEntityMentionName();
                    break;
                case 1280209983:
                    tL_messageEntityItalic = new TL_messageEntityCashtag();
                    break;
                case 1692693954:
                    tL_messageEntityItalic = new TL_messageEntityEmail();
                    break;
                case 1827637959:
                    tL_messageEntityItalic = new TL_messageEntityBotCommand();
                    break;
                case 1859134776:
                    tL_messageEntityItalic = new TL_messageEntityUrl();
                    break;
                case 1868782349:
                    tL_messageEntityItalic = new TL_messageEntityHashtag();
                    break;
                case 1938967520:
                    tL_messageEntityItalic = new TL_messageEntityPre();
                    break;
                case 1990644519:
                    tL_messageEntityItalic = new TL_messageEntityTextUrl();
                    break;
                default:
                    tL_messageEntityItalic = null;
                    break;
            }
            if (tL_messageEntityItalic == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageEntity", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messageEntityItalic != null) {
                tL_messageEntityItalic.readParams(abstractSerializedData, z);
            }
            return tL_messageEntityItalic;
        }
    }

    public static abstract class MessageFwdHeader extends TLObject {
        public int channel_id;
        public int channel_post;
        public int date;
        public int flags;
        public int from_id;
        public String post_author;
        public int saved_from_msg_id;
        public Peer saved_from_peer;

        public static MessageFwdHeader TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageFwdHeader tL_messageFwdHeader = i != -947462709 ? i != -85986132 ? i != NUM ? null : new TL_messageFwdHeader() : new TL_messageFwdHeader_layer72() : new TL_messageFwdHeader_layer68();
            if (tL_messageFwdHeader == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageFwdHeader", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messageFwdHeader != null) {
                tL_messageFwdHeader.readParams(abstractSerializedData, z);
            }
            return tL_messageFwdHeader;
        }
    }

    public static abstract class MessageMedia extends TLObject {
        public String address;
        public Audio audio_unused;
        public byte[] bytes;
        public String captionLegacy;
        public String currency;
        public String description;
        public Document document;
        public String first_name;
        public int flags;
        public TL_game game;
        public GeoPoint geo;
        public String last_name;
        public int period;
        public String phone_number;
        public Photo photo;
        public String provider;
        public int receipt_msg_id;
        public boolean shipping_address_requested;
        public String start_param;
        public boolean test;
        public String title;
        public long total_amount;
        public int ttl_seconds;
        public int user_id;
        public String venue_id;
        public String venue_type;
        public Video video_unused;
        public WebPage webpage;

        public static MessageMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageMedia tL_messageMediaInvoice;
            switch (i) {
                case -2074799289:
                    tL_messageMediaInvoice = new TL_messageMediaInvoice();
                    break;
                case -1666158377:
                    tL_messageMediaInvoice = new TL_messageMediaDocument();
                    break;
                case -1618676578:
                    tL_messageMediaInvoice = new TL_messageMediaUnsupported();
                    break;
                case -1563278704:
                    tL_messageMediaInvoice = new TL_messageMediaVideo_old();
                    break;
                case -1557277184:
                    tL_messageMediaInvoice = new TL_messageMediaWebPage();
                    break;
                case -1256047857:
                    tL_messageMediaInvoice = new TL_messageMediaPhoto_layer74();
                    break;
                case -961117440:
                    tL_messageMediaInvoice = new TL_messageMediaAudio_layer45();
                    break;
                case -926655958:
                    tL_messageMediaInvoice = new TL_messageMediaPhoto_old();
                    break;
                case -203411800:
                    tL_messageMediaInvoice = new TL_messageMediaDocument_layer68();
                    break;
                case -38694904:
                    tL_messageMediaInvoice = new TL_messageMediaGame();
                    break;
                case 694364726:
                    tL_messageMediaInvoice = new TL_messageMediaUnsupported_old();
                    break;
                case 784356159:
                    tL_messageMediaInvoice = new TL_messageMediaVenue();
                    break;
                case 802824708:
                    tL_messageMediaInvoice = new TL_messageMediaDocument_old();
                    break;
                case 1032643901:
                    tL_messageMediaInvoice = new TL_messageMediaPhoto_layer68();
                    break;
                case 1038967584:
                    tL_messageMediaInvoice = new TL_messageMediaEmpty();
                    break;
                case 1457575028:
                    tL_messageMediaInvoice = new TL_messageMediaGeo();
                    break;
                case 1540298357:
                    tL_messageMediaInvoice = new TL_messageMediaVideo_layer45();
                    break;
                case 1585262393:
                    tL_messageMediaInvoice = new TL_messageMediaContact();
                    break;
                case 1766936791:
                    tL_messageMediaInvoice = new TL_messageMediaPhoto();
                    break;
                case 2031269663:
                    tL_messageMediaInvoice = new TL_messageMediaVenue_layer71();
                    break;
                case 2084316681:
                    tL_messageMediaInvoice = new TL_messageMediaGeoLive();
                    break;
                case 2084836563:
                    tL_messageMediaInvoice = new TL_messageMediaDocument_layer74();
                    break;
                default:
                    tL_messageMediaInvoice = null;
                    break;
            }
            if (tL_messageMediaInvoice == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messageMediaInvoice != null) {
                tL_messageMediaInvoice.readParams(abstractSerializedData, z);
                if (tL_messageMediaInvoice.video_unused != null) {
                    abstractSerializedData = new TL_messageMediaDocument();
                    if (tL_messageMediaInvoice.video_unused instanceof TL_videoEncrypted) {
                        abstractSerializedData.document = new TL_documentEncrypted();
                        abstractSerializedData.document.key = tL_messageMediaInvoice.video_unused.key;
                        abstractSerializedData.document.iv = tL_messageMediaInvoice.video_unused.iv;
                    } else {
                        abstractSerializedData.document = new TL_document();
                    }
                    abstractSerializedData.flags = 3;
                    abstractSerializedData.document.id = tL_messageMediaInvoice.video_unused.id;
                    abstractSerializedData.document.access_hash = tL_messageMediaInvoice.video_unused.access_hash;
                    abstractSerializedData.document.date = tL_messageMediaInvoice.video_unused.date;
                    if (tL_messageMediaInvoice.video_unused.mime_type != 0) {
                        abstractSerializedData.document.mime_type = tL_messageMediaInvoice.video_unused.mime_type;
                    } else {
                        abstractSerializedData.document.mime_type = MimeTypes.VIDEO_MP4;
                    }
                    abstractSerializedData.document.size = tL_messageMediaInvoice.video_unused.size;
                    abstractSerializedData.document.thumb = tL_messageMediaInvoice.video_unused.thumb;
                    abstractSerializedData.document.dc_id = tL_messageMediaInvoice.video_unused.dc_id;
                    abstractSerializedData.captionLegacy = tL_messageMediaInvoice.captionLegacy;
                    i = new TL_documentAttributeVideo();
                    i.w = tL_messageMediaInvoice.video_unused.f54w;
                    i.h = tL_messageMediaInvoice.video_unused.f53h;
                    i.duration = tL_messageMediaInvoice.video_unused.duration;
                    abstractSerializedData.document.attributes.add(i);
                    if (abstractSerializedData.captionLegacy != 0) {
                        return abstractSerializedData;
                    }
                    abstractSerializedData.captionLegacy = TtmlNode.ANONYMOUS_REGION_ID;
                    return abstractSerializedData;
                } else if (tL_messageMediaInvoice.audio_unused != null) {
                    abstractSerializedData = new TL_messageMediaDocument();
                    if (tL_messageMediaInvoice.audio_unused instanceof TL_audioEncrypted) {
                        abstractSerializedData.document = new TL_documentEncrypted();
                        abstractSerializedData.document.key = tL_messageMediaInvoice.audio_unused.key;
                        abstractSerializedData.document.iv = tL_messageMediaInvoice.audio_unused.iv;
                    } else {
                        abstractSerializedData.document = new TL_document();
                    }
                    abstractSerializedData.flags = 3;
                    abstractSerializedData.document.id = tL_messageMediaInvoice.audio_unused.id;
                    abstractSerializedData.document.access_hash = tL_messageMediaInvoice.audio_unused.access_hash;
                    abstractSerializedData.document.date = tL_messageMediaInvoice.audio_unused.date;
                    if (tL_messageMediaInvoice.audio_unused.mime_type != 0) {
                        abstractSerializedData.document.mime_type = tL_messageMediaInvoice.audio_unused.mime_type;
                    } else {
                        abstractSerializedData.document.mime_type = "audio/ogg";
                    }
                    abstractSerializedData.document.size = tL_messageMediaInvoice.audio_unused.size;
                    abstractSerializedData.document.thumb = new TL_photoSizeEmpty();
                    abstractSerializedData.document.thumb.type = "s";
                    abstractSerializedData.document.dc_id = tL_messageMediaInvoice.audio_unused.dc_id;
                    abstractSerializedData.captionLegacy = tL_messageMediaInvoice.captionLegacy;
                    i = new TL_documentAttributeAudio();
                    i.duration = tL_messageMediaInvoice.audio_unused.duration;
                    i.voice = true;
                    abstractSerializedData.document.attributes.add(i);
                    if (abstractSerializedData.captionLegacy != 0) {
                        return abstractSerializedData;
                    }
                    abstractSerializedData.captionLegacy = TtmlNode.ANONYMOUS_REGION_ID;
                    return abstractSerializedData;
                }
            }
            return tL_messageMediaInvoice;
        }
    }

    public static abstract class MessagesFilter extends TLObject {
        public int flags;
        public boolean missed;

        public static MessagesFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessagesFilter tL_inputMessagesFilterPhoneCalls;
            switch (i) {
                case -2134272152:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterPhoneCalls();
                    break;
                case -1777752804:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterPhotos();
                    break;
                case -1629621880:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterDocument();
                    break;
                case -1614803355:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterVideo();
                    break;
                case -1253451181:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterRoundVideo();
                    break;
                case -1040652646:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterMyMentions();
                    break;
                case -648121413:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterPhotoVideoDocuments();
                    break;
                case -530392189:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterContacts();
                    break;
                case -419271411:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterGeo();
                    break;
                case -3644025:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterGif();
                    break;
                case 928101534:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterMusic();
                    break;
                case 975236280:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterChatPhotos();
                    break;
                case 1358283666:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterVoice();
                    break;
                case 1458172132:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterPhotoVideo();
                    break;
                case 1474492012:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterEmpty();
                    break;
                case 2054952868:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterRoundVoice();
                    break;
                case 2129714567:
                    tL_inputMessagesFilterPhoneCalls = new TL_inputMessagesFilterUrl();
                    break;
                default:
                    tL_inputMessagesFilterPhoneCalls = null;
                    break;
            }
            if (tL_inputMessagesFilterPhoneCalls == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in MessagesFilter", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputMessagesFilterPhoneCalls != null) {
                tL_inputMessagesFilterPhoneCalls.readParams(abstractSerializedData, z);
            }
            return tL_inputMessagesFilterPhoneCalls;
        }
    }

    public static abstract class NotifyPeer extends TLObject {
        public Peer peer;

        public static NotifyPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            NotifyPeer tL_notifyAll = i != -NUM ? i != -NUM ? i != -NUM ? i != NUM ? null : new TL_notifyAll() : new TL_notifyChats() : new TL_notifyUsers() : new TL_notifyPeer();
            if (tL_notifyAll == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in NotifyPeer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_notifyAll != null) {
                tL_notifyAll.readParams(abstractSerializedData, z);
            }
            return tL_notifyAll;
        }
    }

    public static abstract class Page extends TLObject {
        public ArrayList<PageBlock> blocks = new ArrayList();
        public ArrayList<Document> documents = new ArrayList();
        public ArrayList<Photo> photos = new ArrayList();

        public static Page TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Page tL_pageFull = i != -NUM ? i != -NUM ? i != -677274263 ? i != NUM ? null : new TL_pageFull() : new TL_pageFull_layer67() : new TL_pagePart() : new TL_pagePart_layer67();
            if (tL_pageFull == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Page", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_pageFull != null) {
                tL_pageFull.readParams(abstractSerializedData, z);
            }
            return tL_pageFull;
        }
    }

    public static abstract class PageBlock extends TLObject {
        public boolean allow_scrolling;
        public long audio_id;
        public String author;
        public long author_photo_id;
        public boolean autoplay;
        public ArrayList<PageBlock> blocks = new ArrayList();
        public boolean bottom;
        public RichText caption;
        public Chat channel;
        public PageBlock cover;
        public int date;
        public boolean first;
        public int flags;
        public boolean full_width;
        /* renamed from: h */
        public int f40h;
        public String html;
        public String language;
        public int level;
        public boolean loop;
        public int mid;
        public String name;
        public boolean ordered;
        public long photo_id;
        public long poster_photo_id;
        public int published_date;
        public RichText text;
        public String url;
        public long video_id;
        /* renamed from: w */
        public int f41w;
        public long webpage_id;

        public static PageBlock TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PageBlock tL_pageBlockSubtitle;
            switch (i) {
                case -1879401953:
                    tL_pageBlockSubtitle = new TL_pageBlockSubtitle();
                    break;
                case -1162877472:
                    tL_pageBlockSubtitle = new TL_pageBlockAuthorDate();
                    break;
                case -1076861716:
                    tL_pageBlockSubtitle = new TL_pageBlockHeader();
                    break;
                case -1066346178:
                    tL_pageBlockSubtitle = new TL_pageBlockPreformatted();
                    break;
                case -840826671:
                    tL_pageBlockSubtitle = new TL_pageBlockEmbed();
                    break;
                case -837994576:
                    tL_pageBlockSubtitle = new TL_pageBlockAnchor();
                    break;
                case -650782469:
                    tL_pageBlockSubtitle = new TL_pageBlockEmbed_layer60();
                    break;
                case -640214938:
                    tL_pageBlockSubtitle = new TL_pageBlockVideo();
                    break;
                case -618614392:
                    tL_pageBlockSubtitle = new TL_pageBlockDivider();
                    break;
                case -372860542:
                    tL_pageBlockSubtitle = new TL_pageBlockPhoto();
                    break;
                case -283684427:
                    tL_pageBlockSubtitle = new TL_pageBlockChannel();
                    break;
                case -248793375:
                    tL_pageBlockSubtitle = new TL_pageBlockSubheader();
                    break;
                case 145955919:
                    tL_pageBlockSubtitle = new TL_pageBlockCollage();
                    break;
                case 319588707:
                    tL_pageBlockSubtitle = new TL_pageBlockSlideshow();
                    break;
                case 324435594:
                    tL_pageBlockSubtitle = new TL_pageBlockUnsupported();
                    break;
                case 641563686:
                    tL_pageBlockSubtitle = new TL_pageBlockBlockquote();
                    break;
                case 690781161:
                    tL_pageBlockSubtitle = new TL_pageBlockEmbedPost();
                    break;
                case 834148991:
                    tL_pageBlockSubtitle = new TL_pageBlockAudio();
                    break;
                case 972174080:
                    tL_pageBlockSubtitle = new TL_pageBlockCover();
                    break;
                case 978896884:
                    tL_pageBlockSubtitle = new TL_pageBlockList();
                    break;
                case 1029399794:
                    tL_pageBlockSubtitle = new TL_pageBlockAuthorDate_layer60();
                    break;
                case 1182402406:
                    tL_pageBlockSubtitle = new TL_pageBlockParagraph();
                    break;
                case 1216809369:
                    tL_pageBlockSubtitle = new TL_pageBlockFooter();
                    break;
                case 1329878739:
                    tL_pageBlockSubtitle = new TL_pageBlockPullquote();
                    break;
                case 1890305021:
                    tL_pageBlockSubtitle = new TL_pageBlockTitle();
                    break;
                default:
                    tL_pageBlockSubtitle = null;
                    break;
            }
            if (tL_pageBlockSubtitle == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PageBlock", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_pageBlockSubtitle != null) {
                tL_pageBlockSubtitle.readParams(abstractSerializedData, z);
            }
            return tL_pageBlockSubtitle;
        }
    }

    public static abstract class Peer extends TLObject {
        public int channel_id;
        public int chat_id;
        public int user_id;

        public static Peer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Peer tL_peerChannel = i != -NUM ? i != -NUM ? i != -NUM ? null : new TL_peerChannel() : new TL_peerChat() : new TL_peerUser();
            if (tL_peerChannel == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Peer", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_peerChannel != null) {
                tL_peerChannel.readParams(abstractSerializedData, z);
            }
            return tL_peerChannel;
        }
    }

    public static abstract class PeerNotifyEvents extends TLObject {
        public static PeerNotifyEvents TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PeerNotifyEvents tL_peerNotifyEventsAll = i != -NUM ? i != NUM ? null : new TL_peerNotifyEventsAll() : new TL_peerNotifyEventsEmpty();
            if (tL_peerNotifyEventsAll == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PeerNotifyEvents", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_peerNotifyEventsAll != null) {
                tL_peerNotifyEventsAll.readParams(abstractSerializedData, z);
            }
            return tL_peerNotifyEventsAll;
        }
    }

    public static abstract class PeerNotifySettings extends TLObject {
        public int events_mask;
        public int flags;
        public int mute_until;
        public boolean silent;
        public String sound;

        public static PeerNotifySettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PeerNotifySettings tL_peerNotifySettingsEmpty = i != -NUM ? i != -NUM ? i != NUM ? null : new TL_peerNotifySettingsEmpty() : new TL_peerNotifySettings() : new TL_peerNotifySettings_layer47();
            if (tL_peerNotifySettingsEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PeerNotifySettings", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_peerNotifySettingsEmpty != null) {
                tL_peerNotifySettingsEmpty.readParams(abstractSerializedData, z);
            }
            return tL_peerNotifySettingsEmpty;
        }
    }

    public static abstract class PhoneCall extends TLObject {
        public long access_hash;
        public int admin_id;
        public ArrayList<TL_phoneConnection> alternative_connections = new ArrayList();
        public TL_phoneConnection connection;
        public int date;
        public int duration;
        public int flags;
        public byte[] g_a_hash;
        public byte[] g_a_or_b;
        public byte[] g_b;
        public long id;
        public long key_fingerprint;
        public boolean need_debug;
        public boolean need_rating;
        public int participant_id;
        public TL_phoneCallProtocol protocol;
        public PhoneCallDiscardReason reason;
        public int receive_date;
        public int start_date;

        public static PhoneCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PhoneCall tL_phoneCallRequested;
            switch (i) {
                case -2089411356:
                    tL_phoneCallRequested = new TL_phoneCallRequested();
                    break;
                case -1660057:
                    tL_phoneCallRequested = new TL_phoneCall();
                    break;
                case 462375633:
                    tL_phoneCallRequested = new TL_phoneCallWaiting();
                    break;
                case 1355435489:
                    tL_phoneCallRequested = new TL_phoneCallDiscarded();
                    break;
                case 1399245077:
                    tL_phoneCallRequested = new TL_phoneCallEmpty();
                    break;
                case 1828732223:
                    tL_phoneCallRequested = new TL_phoneCallAccepted();
                    break;
                default:
                    tL_phoneCallRequested = null;
                    break;
            }
            if (tL_phoneCallRequested == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PhoneCall", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_phoneCallRequested != null) {
                tL_phoneCallRequested.readParams(abstractSerializedData, z);
            }
            return tL_phoneCallRequested;
        }
    }

    public static abstract class PhoneCallDiscardReason extends TLObject {
        public byte[] encrypted_key;

        public static PhoneCallDiscardReason TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PhoneCallDiscardReason tL_phoneCallDiscardReasonMissed;
            switch (i) {
                case -2048646399:
                    tL_phoneCallDiscardReasonMissed = new TL_phoneCallDiscardReasonMissed();
                    break;
                case -1344096199:
                    tL_phoneCallDiscardReasonMissed = new TL_phoneCallDiscardReasonAllowGroupCall();
                    break;
                case -527056480:
                    tL_phoneCallDiscardReasonMissed = new TL_phoneCallDiscardReasonDisconnect();
                    break;
                case -84416311:
                    tL_phoneCallDiscardReasonMissed = new TL_phoneCallDiscardReasonBusy();
                    break;
                case 1471006352:
                    tL_phoneCallDiscardReasonMissed = new TL_phoneCallDiscardReasonHangup();
                    break;
                default:
                    tL_phoneCallDiscardReasonMissed = null;
                    break;
            }
            if (tL_phoneCallDiscardReasonMissed == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PhoneCallDiscardReason", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_phoneCallDiscardReasonMissed != null) {
                tL_phoneCallDiscardReasonMissed.readParams(abstractSerializedData, z);
            }
            return tL_phoneCallDiscardReasonMissed;
        }
    }

    public static abstract class Photo extends TLObject {
        public long access_hash;
        public int date;
        public int flags;
        public GeoPoint geo;
        public boolean has_stickers;
        public long id;
        public ArrayList<PhotoSize> sizes = new ArrayList();
        public int user_id;

        public static Photo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Photo tL_photo;
            switch (i) {
                case -1836524247:
                    tL_photo = new TL_photo();
                    break;
                case -1014792074:
                    tL_photo = new TL_photo_old2();
                    break;
                case -840088834:
                    tL_photo = new TL_photo_layer55();
                    break;
                case 582313809:
                    tL_photo = new TL_photo_old();
                    break;
                case 590459437:
                    tL_photo = new TL_photoEmpty();
                    break;
                default:
                    tL_photo = null;
                    break;
            }
            if (tL_photo == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Photo", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_photo != null) {
                tL_photo.readParams(abstractSerializedData, z);
            }
            return tL_photo;
        }
    }

    public static abstract class PhotoSize extends TLObject {
        public byte[] bytes;
        /* renamed from: h */
        public int f42h;
        public FileLocation location;
        public int size;
        public String type;
        /* renamed from: w */
        public int f43w;

        public static PhotoSize TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PhotoSize tL_photoSize = i != -374917894 ? i != 236446268 ? i != NUM ? null : new TL_photoSize() : new TL_photoSizeEmpty() : new TL_photoCachedSize();
            if (tL_photoSize == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_photoSize != null) {
                tL_photoSize.readParams(abstractSerializedData, z);
            }
            return tL_photoSize;
        }
    }

    public static abstract class PrivacyKey extends TLObject {
        public static PrivacyKey TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PrivacyKey tL_privacyKeyChatInvite = i != -NUM ? i != NUM ? i != NUM ? null : new TL_privacyKeyChatInvite() : new TL_privacyKeyPhoneCall() : new TL_privacyKeyStatusTimestamp();
            if (tL_privacyKeyChatInvite == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyKey", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_privacyKeyChatInvite != null) {
                tL_privacyKeyChatInvite.readParams(abstractSerializedData, z);
            }
            return tL_privacyKeyChatInvite;
        }
    }

    public static abstract class PrivacyRule extends TLObject {
        public ArrayList<Integer> users = new ArrayList();

        public static PrivacyRule TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PrivacyRule tL_privacyValueDisallowAll;
            switch (i) {
                case -1955338397:
                    tL_privacyValueDisallowAll = new TL_privacyValueDisallowAll();
                    break;
                case -125240806:
                    tL_privacyValueDisallowAll = new TL_privacyValueDisallowContacts();
                    break;
                case -123988:
                    tL_privacyValueDisallowAll = new TL_privacyValueAllowContacts();
                    break;
                case 209668535:
                    tL_privacyValueDisallowAll = new TL_privacyValueDisallowUsers();
                    break;
                case 1297858060:
                    tL_privacyValueDisallowAll = new TL_privacyValueAllowUsers();
                    break;
                case 1698855810:
                    tL_privacyValueDisallowAll = new TL_privacyValueAllowAll();
                    break;
                default:
                    tL_privacyValueDisallowAll = null;
                    break;
            }
            if (tL_privacyValueDisallowAll == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyRule", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_privacyValueDisallowAll != null) {
                tL_privacyValueDisallowAll.readParams(abstractSerializedData, z);
            }
            return tL_privacyValueDisallowAll;
        }
    }

    public static abstract class RecentMeUrl extends TLObject {
        public int chat_id;
        public ChatInvite chat_invite;
        public StickerSetCovered set;
        public String url;
        public int user_id;

        public static RecentMeUrl TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            RecentMeUrl tL_recentMeUrlUser;
            switch (i) {
                case -1917045962:
                    tL_recentMeUrlUser = new TL_recentMeUrlUser();
                    break;
                case -1608834311:
                    tL_recentMeUrlUser = new TL_recentMeUrlChat();
                    break;
                case -1140172836:
                    tL_recentMeUrlUser = new TL_recentMeUrlStickerSet();
                    break;
                case -347535331:
                    tL_recentMeUrlUser = new TL_recentMeUrlChatInvite();
                    break;
                case 1189204285:
                    tL_recentMeUrlUser = new TL_recentMeUrlUnknown();
                    break;
                default:
                    tL_recentMeUrlUser = null;
                    break;
            }
            if (tL_recentMeUrlUser == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in RecentMeUrl", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_recentMeUrlUser != null) {
                tL_recentMeUrlUser.readParams(abstractSerializedData, z);
            }
            return tL_recentMeUrlUser;
        }
    }

    public static abstract class ReplyMarkup extends TLObject {
        public int flags;
        public boolean resize;
        public ArrayList<TL_keyboardButtonRow> rows = new ArrayList();
        public boolean selective;
        public boolean single_use;

        public static ReplyMarkup TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ReplyMarkup tL_replyInlineMarkup = i != -NUM ? i != -200242528 ? i != 889353612 ? i != NUM ? null : new TL_replyInlineMarkup() : new TL_replyKeyboardMarkup() : new TL_replyKeyboardForceReply() : new TL_replyKeyboardHide();
            if (tL_replyInlineMarkup == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_replyInlineMarkup != null) {
                tL_replyInlineMarkup.readParams(abstractSerializedData, z);
            }
            return tL_replyInlineMarkup;
        }
    }

    public static abstract class ReportReason extends TLObject {
        public String text;

        public static ReportReason TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ReportReason tL_inputReportReasonSpam = i != -512463606 ? i != 505595789 ? i != 777640226 ? i != NUM ? null : new TL_inputReportReasonSpam() : new TL_inputReportReasonPornography() : new TL_inputReportReasonViolence() : new TL_inputReportReasonOther();
            if (tL_inputReportReasonSpam == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in ReportReason", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_inputReportReasonSpam != null) {
                tL_inputReportReasonSpam.readParams(abstractSerializedData, z);
            }
            return tL_inputReportReasonSpam;
        }
    }

    public static abstract class RichText extends TLObject {
        public String email;
        public RichText parentRichText;
        public ArrayList<RichText> texts = new ArrayList();
        public String url;
        public long webpage_id;

        public static RichText TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            RichText tL_textStrike;
            switch (i) {
                case -1678197867:
                    tL_textStrike = new TL_textStrike();
                    break;
                case -1054465340:
                    tL_textStrike = new TL_textUnderline();
                    break;
                case -653089380:
                    tL_textStrike = new TL_textItalic();
                    break;
                case -599948721:
                    tL_textStrike = new TL_textEmpty();
                    break;
                case -564523562:
                    tL_textStrike = new TL_textEmail();
                    break;
                case 1009288385:
                    tL_textStrike = new TL_textUrl();
                    break;
                case 1730456516:
                    tL_textStrike = new TL_textBold();
                    break;
                case 1816074681:
                    tL_textStrike = new TL_textFixed();
                    break;
                case 1950782688:
                    tL_textStrike = new TL_textPlain();
                    break;
                case 2120376535:
                    tL_textStrike = new TL_textConcat();
                    break;
                default:
                    tL_textStrike = null;
                    break;
            }
            if (tL_textStrike == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in RichText", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_textStrike != null) {
                tL_textStrike.readParams(abstractSerializedData, z);
            }
            return tL_textStrike;
        }
    }

    public static abstract class SendMessageAction extends TLObject {
        public int progress;

        public static SendMessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            SendMessageAction tL_sendMessageRecordRoundAction;
            switch (i) {
                case -1997373508:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageRecordRoundAction();
                    break;
                case -1884362354:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadDocumentAction_old();
                    break;
                case -1845219337:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadVideoAction_old();
                    break;
                case -1727382502:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadPhotoAction_old();
                    break;
                case -1584933265:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageRecordVideoAction();
                    break;
                case -1441998364:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadDocumentAction();
                    break;
                case -774682074:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadPhotoAction();
                    break;
                case -718310409:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageRecordAudioAction();
                    break;
                case -580219064:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageGamePlayAction();
                    break;
                case -424899985:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadAudioAction_old();
                    break;
                case -378127636:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadVideoAction();
                    break;
                case -212740181:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadAudioAction();
                    break;
                case -44119819:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageCancelAction();
                    break;
                case 381645902:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageTypingAction();
                    break;
                case 393186209:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageGeoLocationAction();
                    break;
                case 608050278:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageUploadRoundAction();
                    break;
                case 1653390447:
                    tL_sendMessageRecordRoundAction = new TL_sendMessageChooseContactAction();
                    break;
                default:
                    tL_sendMessageRecordRoundAction = null;
                    break;
            }
            if (tL_sendMessageRecordRoundAction == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in SendMessageAction", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_sendMessageRecordRoundAction != null) {
                tL_sendMessageRecordRoundAction.readParams(abstractSerializedData, z);
            }
            return tL_sendMessageRecordRoundAction;
        }
    }

    public static abstract class StickerSet extends TLObject {
        public long access_hash;
        public boolean archived;
        public int count;
        public int flags;
        public int hash;
        public long id;
        public boolean installed;
        public int installed_date;
        public boolean masks;
        public boolean official;
        public String short_name;
        public String title;

        public static StickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            StickerSet tL_stickerSet = i != -NUM ? i != -852477119 ? i != NUM ? null : new TL_stickerSet() : new TL_stickerSet_layer75() : new TL_stickerSet_old();
            if (tL_stickerSet == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in StickerSet", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_stickerSet != null) {
                tL_stickerSet.readParams(abstractSerializedData, z);
            }
            return tL_stickerSet;
        }
    }

    public static abstract class StickerSetCovered extends TLObject {
        public Document cover;
        public ArrayList<Document> covers = new ArrayList();
        public StickerSet set;

        public static StickerSetCovered TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            StickerSetCovered tL_stickerSetCovered = i != 872932635 ? i != NUM ? null : new TL_stickerSetCovered() : new TL_stickerSetMultiCovered();
            if (tL_stickerSetCovered == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in StickerSetCovered", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_stickerSetCovered != null) {
                tL_stickerSetCovered.readParams(abstractSerializedData, z);
            }
            return tL_stickerSetCovered;
        }
    }

    public static class TL_accountDaysTTL extends TLObject {
        public static int constructor = -NUM;
        public int days;

        public static TL_accountDaysTTL TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_accountDaysTTL();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_accountDaysTTL", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.days = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.days);
        }
    }

    public static class TL_account_authorizations extends TLObject {
        public static int constructor = 307276766;
        public ArrayList<TL_authorization> authorizations = new ArrayList();

        public static TL_account_authorizations TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_authorizations();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizations", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_authorization TLdeserialize = TL_authorization.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.authorizations.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.authorizations.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_authorization) this.authorizations.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_account_changePhone extends TLObject {
        public static int constructor = NUM;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_account_checkUsername extends TLObject {
        public static int constructor = 655677548;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_account_confirmPhone extends TLObject {
        public static int constructor = NUM;
        public String phone_code;
        public String phone_code_hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_account_deleteAccount extends TLObject {
        public static int constructor = NUM;
        public String reason;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.reason);
        }
    }

    public static class TL_account_getAccountTTL extends TLObject {
        public static int constructor = 150761757;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_accountDaysTTL.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getAuthorizations extends TLObject {
        public static int constructor = -484392616;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_authorizations.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getNotifySettings extends TLObject {
        public static int constructor = 313765169;
        public InputNotifyPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return PeerNotifySettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_getPassword extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return account_Password.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getPasswordSettings extends TLObject {
        public static int constructor = -NUM;
        public byte[] current_password_hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_passwordSettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_password_hash);
        }
    }

    public static class TL_account_getPrivacy extends TLObject {
        public static int constructor = -623130288;
        public InputPrivacyKey key;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_getTmpPassword extends TLObject {
        public static int constructor = NUM;
        public byte[] password_hash;
        public int period;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_tmpPassword.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.password_hash);
            abstractSerializedData.writeInt32(this.period);
        }
    }

    public static class TL_account_getWallPapers extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                WallPaper TLdeserialize = WallPaper.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getWebAuthorizations extends TLObject {
        public static int constructor = 405695855;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_webAuthorizations.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_passwordInputSettings extends TLObject {
        public static int constructor = -NUM;
        public String email;
        public int flags;
        public String hint;
        public byte[] new_password_hash;
        public byte[] new_salt;

        public static TL_account_passwordInputSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_passwordInputSettings();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordInputSettings", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.new_salt = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & 1) != 0) {
                this.new_password_hash = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & 1) != 0) {
                this.hint = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.email = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeByteArray(this.new_salt);
            }
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeByteArray(this.new_password_hash);
            }
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.hint);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.email);
            }
        }
    }

    public static class TL_account_passwordSettings extends TLObject {
        public static int constructor = -NUM;
        public String email;

        public static TL_account_passwordSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_passwordSettings();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordSettings", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.email = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.email);
        }
    }

    public static class TL_account_privacyRules extends TLObject {
        public static int constructor = NUM;
        public ArrayList<PrivacyRule> rules = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_account_privacyRules TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_privacyRules();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_privacyRules", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    PrivacyRule TLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rules.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((PrivacyRule) this.rules.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_account_registerDevice extends TLObject {
        public static int constructor = NUM;
        public boolean app_sandbox;
        public ArrayList<Integer> other_uids = new ArrayList();
        public byte[] secret;
        public String token;
        public int token_type;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
            abstractSerializedData.writeBool(this.app_sandbox);
            abstractSerializedData.writeByteArray(this.secret);
            abstractSerializedData.writeInt32(481674261);
            int size = this.other_uids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.other_uids.get(i)).intValue());
            }
        }
    }

    public static class TL_account_reportPeer extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;
        public ReportReason reason;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.reason.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_resetAuthorization extends TLObject {
        public static int constructor = -545786948;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
        }
    }

    public static class TL_account_resetNotifySettings extends TLObject {
        public static int constructor = -612493497;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_resetWebAuthorization extends TLObject {
        public static int constructor = 755087855;
        public long hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
        }
    }

    public static class TL_account_resetWebAuthorizations extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_sendChangePhoneCode extends TLObject {
        public static int constructor = 149257707;
        public boolean allow_flashcall;
        public boolean current_number;
        public int flags;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
        }
    }

    public static class TL_account_sendConfirmPhoneCode extends TLObject {
        public static int constructor = 353818557;
        public boolean allow_flashcall;
        public boolean current_number;
        public int flags;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.hash);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
        }
    }

    public static class TL_account_setAccountTTL extends TLObject {
        public static int constructor = 608323678;
        public TL_accountDaysTTL ttl;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.ttl.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_setPrivacy extends TLObject {
        public static int constructor = -906486552;
        public InputPrivacyKey key;
        public ArrayList<InputPrivacyRule> rules = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputPrivacyRule) this.rules.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_account_tmpPassword extends TLObject {
        public static int constructor = -614138572;
        public byte[] tmp_password;
        public int valid_until;

        public static TL_account_tmpPassword TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_tmpPassword();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_tmpPassword", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.tmp_password = abstractSerializedData.readByteArray(z);
            this.valid_until = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.tmp_password);
            abstractSerializedData.writeInt32(this.valid_until);
        }
    }

    public static class TL_account_unregisterDevice extends TLObject {
        public static int constructor = 813089983;
        public ArrayList<Integer> other_uids = new ArrayList();
        public String token;
        public int token_type;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
            abstractSerializedData.writeInt32(481674261);
            int size = this.other_uids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.other_uids.get(i)).intValue());
            }
        }
    }

    public static class TL_account_updateDeviceLocked extends TLObject {
        public static int constructor = 954152242;
        public int period;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.period);
        }
    }

    public static class TL_account_updateNotifySettings extends TLObject {
        public static int constructor = -NUM;
        public InputNotifyPeer peer;
        public TL_inputPeerNotifySettings settings;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_updatePasswordSettings extends TLObject {
        public static int constructor = -92517498;
        public byte[] current_password_hash;
        public TL_account_passwordInputSettings new_settings;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_password_hash);
            this.new_settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_updateProfile extends TLObject {
        public static int constructor = NUM;
        public String about;
        public String first_name;
        public int flags;
        public String last_name;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.about);
            }
        }
    }

    public static class TL_account_updateStatus extends TLObject {
        public static int constructor = NUM;
        public boolean offline;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.offline);
        }
    }

    public static class TL_account_updateUsername extends TLObject {
        public static int constructor = NUM;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_account_webAuthorizations extends TLObject {
        public static int constructor = -313079300;
        public ArrayList<TL_webAuthorization> authorizations = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_account_webAuthorizations TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_account_webAuthorizations();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_webAuthorizations", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_webAuthorization TLdeserialize = TL_webAuthorization.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.authorizations.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.authorizations.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_webAuthorization) this.authorizations.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_auth_authorization extends TLObject {
        public static int constructor = -855308010;
        public int flags;
        public int tmp_sessions;
        public User user;

        public static TL_auth_authorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_auth_authorization();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_authorization", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.tmp_sessions = abstractSerializedData.readInt32(z);
            }
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_auth_cancelCode extends TLObject {
        public static int constructor = 520357240;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }

    public static class TL_auth_checkPassword extends TLObject {
        public static int constructor = 174260510;
        public byte[] password_hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.password_hash);
        }
    }

    public static class TL_auth_checkPhone extends TLObject {
        public static int constructor = NUM;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_checkedPhone.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
        }
    }

    public static class TL_auth_checkedPhone extends TLObject {
        public static int constructor = -NUM;
        public boolean phone_registered;

        public static TL_auth_checkedPhone TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_auth_checkedPhone();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_checkedPhone", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_registered = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.phone_registered);
        }
    }

    public static class TL_auth_exportAuthorization extends TLObject {
        public static int constructor = -440401971;
        public int dc_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_exportedAuthorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_auth_exportedAuthorization extends TLObject {
        public static int constructor = -543777747;
        public byte[] bytes;
        public int id;

        public static TL_auth_exportedAuthorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_auth_exportedAuthorization();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_exportedAuthorization", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_auth_importAuthorization extends TLObject {
        public static int constructor = -470837741;
        public byte[] bytes;
        public int id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_auth_logOut extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_passwordRecovery extends TLObject {
        public static int constructor = 326715557;
        public String email_pattern;

        public static TL_auth_passwordRecovery TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_auth_passwordRecovery();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_passwordRecovery", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.email_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.email_pattern);
        }
    }

    public static class TL_auth_recoverPassword extends TLObject {
        public static int constructor = NUM;
        public String code;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.code);
        }
    }

    public static class TL_auth_requestPasswordRecovery extends TLObject {
        public static int constructor = -661144474;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_passwordRecovery.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_resendCode extends TLObject {
        public static int constructor = NUM;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }

    public static class TL_auth_resetAuthorizations extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_sendCode extends TLObject {
        public static int constructor = -NUM;
        public boolean allow_flashcall;
        public String api_hash;
        public int api_id;
        public boolean current_number;
        public int flags;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.api_hash);
        }
    }

    public static class TL_auth_sendInvites extends TLObject {
        public static int constructor = NUM;
        public String message;
        public ArrayList<String> phone_numbers = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.phone_numbers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeString((String) this.phone_numbers.get(i));
            }
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_auth_sentCode extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public auth_CodeType next_type;
        public String phone_code_hash;
        public boolean phone_registered;
        public int timeout;
        public auth_SentCodeType type;

        public static TL_auth_sentCode TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_auth_sentCode();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.phone_registered = z2;
            this.type = auth_SentCodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.phone_code_hash = abstractSerializedData.readString(z);
            if ((this.flags & 2) != 0) {
                this.next_type = auth_CodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 4) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.phone_registered ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.phone_code_hash);
            if ((this.flags & 2) != 0) {
                this.next_type.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
        }
    }

    public static class TL_auth_signIn extends TLObject {
        public static int constructor = -NUM;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_auth_signUp extends TLObject {
        public static int constructor = 453408308;
        public String first_name;
        public String last_name;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_authorization extends TLObject {
        public static int constructor = NUM;
        public int api_id;
        public String app_name;
        public String app_version;
        public String country;
        public int date_active;
        public int date_created;
        public String device_model;
        public int flags;
        public long hash;
        public String ip;
        public String platform;
        public String region;
        public String system_version;

        public static TL_authorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_authorization();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_authorization", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt64(z);
            this.flags = abstractSerializedData.readInt32(z);
            this.device_model = abstractSerializedData.readString(z);
            this.platform = abstractSerializedData.readString(z);
            this.system_version = abstractSerializedData.readString(z);
            this.api_id = abstractSerializedData.readInt32(z);
            this.app_name = abstractSerializedData.readString(z);
            this.app_version = abstractSerializedData.readString(z);
            this.date_created = abstractSerializedData.readInt32(z);
            this.date_active = abstractSerializedData.readInt32(z);
            this.ip = abstractSerializedData.readString(z);
            this.country = abstractSerializedData.readString(z);
            this.region = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.device_model);
            abstractSerializedData.writeString(this.platform);
            abstractSerializedData.writeString(this.system_version);
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.app_name);
            abstractSerializedData.writeString(this.app_version);
            abstractSerializedData.writeInt32(this.date_created);
            abstractSerializedData.writeInt32(this.date_active);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeString(this.region);
        }
    }

    public static class TL_botCommand extends TLObject {
        public static int constructor = -NUM;
        public String command;
        public String description;

        public static TL_botCommand TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_botCommand();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.command = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.command);
            abstractSerializedData.writeString(this.description);
        }
    }

    public static class TL_channelAdminLogEvent extends TLObject {
        public static int constructor = 995769920;
        public ChannelAdminLogEventAction action;
        public int date;
        public long id;
        public int user_id;

        public static TL_channelAdminLogEvent TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channelAdminLogEvent();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEvent", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.action = ChannelAdminLogEventAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventsFilter extends TLObject {
        public static int constructor = -368018716;
        public boolean ban;
        public boolean delete;
        public boolean demote;
        public boolean edit;
        public int flags;
        public boolean info;
        public boolean invite;
        public boolean join;
        public boolean kick;
        public boolean leave;
        public boolean pinned;
        public boolean promote;
        public boolean settings;
        public boolean unban;
        public boolean unkick;

        public static TL_channelAdminLogEventsFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channelAdminLogEventsFilter();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEventsFilter", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = true;
            this.join = (this.flags & 1) != null ? 1 : null;
            this.leave = (this.flags & 2) != null ? 1 : null;
            this.invite = (this.flags & 4) != null ? 1 : null;
            this.ban = (this.flags & 8) != null ? 1 : null;
            this.unban = (this.flags & 16) != null ? 1 : null;
            this.kick = (this.flags & 32) != null ? 1 : null;
            this.unkick = (this.flags & 64) != null ? 1 : null;
            this.promote = (this.flags & 128) != null ? 1 : null;
            this.demote = (this.flags & 256) != null ? 1 : null;
            this.info = (this.flags & 512) != null ? 1 : null;
            this.settings = (this.flags & 1024) != null ? 1 : null;
            this.pinned = (this.flags & 2048) != null ? 1 : null;
            this.edit = (this.flags & 4096) != null ? 1 : null;
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) == null) {
                z = false;
            }
            this.delete = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.join ? this.flags | 1 : this.flags & -2;
            this.flags = this.leave ? this.flags | 2 : this.flags & -3;
            this.flags = this.invite ? this.flags | 4 : this.flags & -5;
            this.flags = this.ban ? this.flags | 8 : this.flags & -9;
            this.flags = this.unban ? this.flags | 16 : this.flags & -17;
            this.flags = this.kick ? this.flags | 32 : this.flags & -33;
            this.flags = this.unkick ? this.flags | 64 : this.flags & -65;
            this.flags = this.promote ? this.flags | 128 : this.flags & -129;
            this.flags = this.demote ? this.flags | 256 : this.flags & -257;
            this.flags = this.info ? this.flags | 512 : this.flags & -513;
            this.flags = this.settings ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.pinned ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.edit ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.delete ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_channelAdminRights extends TLObject {
        public static int constructor = NUM;
        public boolean add_admins;
        public boolean ban_users;
        public boolean change_info;
        public boolean delete_messages;
        public boolean edit_messages;
        public int flags;
        public boolean invite_link;
        public boolean invite_users;
        public boolean manage_call;
        public boolean pin_messages;
        public boolean post_messages;

        public static TL_channelAdminRights TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channelAdminRights();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminRights", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = true;
            this.change_info = (this.flags & 1) != null ? 1 : null;
            this.post_messages = (this.flags & 2) != null ? 1 : null;
            this.edit_messages = (this.flags & 4) != null ? 1 : null;
            this.delete_messages = (this.flags & 8) != null ? 1 : null;
            this.ban_users = (this.flags & 16) != null ? 1 : null;
            this.invite_users = (this.flags & 32) != null ? 1 : null;
            this.invite_link = (this.flags & 64) != null ? 1 : null;
            this.pin_messages = (this.flags & 128) != null ? 1 : null;
            this.add_admins = (this.flags & 512) != null ? 1 : null;
            if ((this.flags & 1024) == null) {
                z = false;
            }
            this.manage_call = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.change_info ? this.flags | 1 : this.flags & -2;
            this.flags = this.post_messages ? this.flags | 2 : this.flags & -3;
            this.flags = this.edit_messages ? this.flags | 4 : this.flags & -5;
            this.flags = this.delete_messages ? this.flags | 8 : this.flags & -9;
            this.flags = this.ban_users ? this.flags | 16 : this.flags & -17;
            this.flags = this.invite_users ? this.flags | 32 : this.flags & -33;
            this.flags = this.invite_link ? this.flags | 64 : this.flags & -65;
            this.flags = this.pin_messages ? this.flags | 128 : this.flags & -129;
            this.flags = this.add_admins ? this.flags | 512 : this.flags & -513;
            this.flags = this.manage_call ? this.flags | 1024 : this.flags & -1025;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_channelBannedRights extends TLObject {
        public static int constructor = NUM;
        public boolean embed_links;
        public int flags;
        public boolean send_games;
        public boolean send_gifs;
        public boolean send_inline;
        public boolean send_media;
        public boolean send_messages;
        public boolean send_stickers;
        public int until_date;
        public boolean view_messages;

        public static TL_channelBannedRights TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channelBannedRights();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channelBannedRights", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.view_messages = (this.flags & 1) != 0;
            this.send_messages = (this.flags & 2) != 0;
            this.send_media = (this.flags & 4) != 0;
            this.send_stickers = (this.flags & 8) != 0;
            this.send_gifs = (this.flags & 16) != 0;
            this.send_games = (this.flags & 32) != 0;
            this.send_inline = (this.flags & 64) != 0;
            if ((this.flags & 128) == 0) {
                z2 = false;
            }
            this.embed_links = z2;
            this.until_date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.view_messages ? this.flags | 1 : this.flags & -2;
            this.flags = this.send_messages ? this.flags | 2 : this.flags & -3;
            this.flags = this.send_media ? this.flags | 4 : this.flags & -5;
            this.flags = this.send_stickers ? this.flags | 8 : this.flags & -9;
            this.flags = this.send_gifs ? this.flags | 16 : this.flags & -17;
            this.flags = this.send_games ? this.flags | 32 : this.flags & -33;
            this.flags = this.send_inline ? this.flags | 64 : this.flags & -65;
            this.flags = this.embed_links ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.until_date);
        }
    }

    public static class TL_channels_adminLogResults extends TLObject {
        public static int constructor = -309659827;
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<TL_channelAdminLogEvent> events = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_channels_adminLogResults TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channels_adminLogResults();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_adminLogResults", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_channelAdminLogEvent TLdeserialize = TL_channelAdminLogEvent.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.events.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.events.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_channelAdminLogEvent) this.events.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_channels_channelParticipant extends TLObject {
        public static int constructor = -791039645;
        public ChannelParticipant participant;
        public ArrayList<User> users = new ArrayList();

        public static TL_channels_channelParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channels_channelParticipant();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipant", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.participant.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_checkUsername extends TLObject {
        public static int constructor = 283557164;
        public InputChannel channel;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_channels_createChannel extends TLObject {
        public static int constructor = -192332417;
        public String about;
        public boolean broadcast;
        public int flags;
        public boolean megagroup;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 1 : this.flags & -2;
            this.flags = this.megagroup ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.about);
        }
    }

    public static class TL_channels_deleteChannel extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_deleteHistory extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_channels_deleteMessages extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList();

        public static TL_channels_deleteMessages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_channels_deleteMessages();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_deleteMessages", new Object[]{Integer.valueOf(i)}));
            }
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.id.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_deleteUserHistory extends TLObject {
        public static int constructor = -787622117;
        public InputChannel channel;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editAbout extends TLObject {
        public static int constructor = 333610782;
        public String about;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.about);
        }
    }

    public static class TL_channels_editAdmin extends TLObject {
        public static int constructor = 548962836;
        public TL_channelAdminRights admin_rights;
        public InputChannel channel;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            this.admin_rights.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editBanned extends TLObject {
        public static int constructor = -NUM;
        public TL_channelBannedRights banned_rights;
        public InputChannel channel;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            this.banned_rights.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editPhoto extends TLObject {
        public static int constructor = -248621111;
        public InputChannel channel;
        public InputChatPhoto photo;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editTitle extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channels_exportInvite extends TLObject {
        public static int constructor = -950663035;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ExportedChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_exportMessageLink extends TLObject {
        public static int constructor = -934882771;
        public InputChannel channel;
        public int id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_exportedMessageLink.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_channels_getAdminLog extends TLObject {
        public static int constructor = 870184064;
        public ArrayList<InputUser> admins = new ArrayList();
        public InputChannel channel;
        public TL_channelAdminLogEventsFilter events_filter;
        public int flags;
        public int limit;
        public long max_id;
        public long min_id;
        /* renamed from: q */
        public String f44q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_channels_adminLogResults.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.f44q);
            if ((this.flags & 1) != 0) {
                this.events_filter.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.admins.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((InputUser) this.admins.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt64(this.max_id);
            abstractSerializedData.writeInt64(this.min_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_channels_getAdminedPublicChannels extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channels_getChannels extends TLObject {
        public static int constructor = 176122811;
        public ArrayList<InputChannel> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputChannel) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_getFullChannel extends TLObject {
        public static int constructor = 141781513;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_getMessages extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_getParticipant extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_channels_channelParticipant.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_getParticipants extends TLObject {
        public static int constructor = 306054633;
        public InputChannel channel;
        public ChannelParticipantsFilter filter;
        public int hash;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return channels_ChannelParticipants.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_channels_inviteToChannel extends TLObject {
        public static int constructor = 429865580;
        public InputChannel channel;
        public ArrayList<InputUser> users = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_joinChannel extends TLObject {
        public static int constructor = 615851205;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_leaveChannel extends TLObject {
        public static int constructor = -130635115;
        public InputChannel channel;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_readHistory extends TLObject {
        public static int constructor = -871347913;
        public InputChannel channel;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_channels_readMessageContents extends TLObject {
        public static int constructor = -357180360;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_reportSpam extends TLObject {
        public static int constructor = -32999408;
        public InputChannel channel;
        public ArrayList<Integer> id = new ArrayList();
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_setStickers extends TLObject {
        public static int constructor = -359881479;
        public InputChannel channel;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_toggleInvites extends TLObject {
        public static int constructor = NUM;
        public InputChannel channel;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_channels_togglePreHistoryHidden extends TLObject {
        public static int constructor = -356796084;
        public InputChannel channel;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_channels_toggleSignatures extends TLObject {
        public static int constructor = 527021574;
        public InputChannel channel;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_channels_updatePinnedMessage extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public int flags;
        public int id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_channels_updateUsername extends TLObject {
        public static int constructor = 890549214;
        public InputChannel channel;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_chatLocated extends TLObject {
        public static int constructor = 909233996;
        public int chat_id;
        public int distance;

        public static TL_chatLocated TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_chatLocated();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatLocated", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.distance = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.distance);
        }
    }

    public static class TL_config extends TLObject {
        public static int constructor = -NUM;
        public int call_connect_timeout_ms;
        public int call_packet_timeout_ms;
        public int call_receive_timeout_ms;
        public int call_ring_timeout_ms;
        public int channels_read_media_period;
        public int chat_size_max;
        public int date;
        public ArrayList<TL_dcOption> dc_options = new ArrayList();
        public boolean default_p2p_contacts;
        public int edit_time_limit;
        public int expires;
        public int flags;
        public int forwarded_count_max;
        public boolean ignore_phone_entities;
        public int lang_pack_version;
        public String me_url_prefix;
        public int megagroup_size_max;
        public int notify_cloud_delay_ms;
        public int notify_default_delay_ms;
        public int offline_blur_timeout_ms;
        public int offline_idle_timeout_ms;
        public int online_cloud_timeout_ms;
        public int online_update_period_ms;
        public boolean phonecalls_enabled;
        public int pinned_dialogs_count_max;
        public boolean preload_featured_stickers;
        public int push_chat_limit;
        public int push_chat_period_ms;
        public int rating_e_decay;
        public boolean revoke_pm_inbox;
        public int revoke_pm_time_limit;
        public int revoke_time_limit;
        public int saved_gifs_limit;
        public int stickers_faved_limit;
        public int stickers_recent_limit;
        public String suggested_lang_code;
        public boolean test_mode;
        public int this_dc;
        public int tmp_sessions;

        public static TL_config TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_config();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_config", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.phonecalls_enabled = (this.flags & 2) != 0;
            this.default_p2p_contacts = (this.flags & 8) != 0;
            this.preload_featured_stickers = (this.flags & 16) != 0;
            this.ignore_phone_entities = (this.flags & 32) != 0;
            this.revoke_pm_inbox = (this.flags & 64) != 0;
            this.date = abstractSerializedData.readInt32(z);
            this.expires = abstractSerializedData.readInt32(z);
            this.test_mode = abstractSerializedData.readBool(z);
            this.this_dc = abstractSerializedData.readInt32(z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_dcOption TLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dc_options.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.chat_size_max = abstractSerializedData.readInt32(z);
                this.megagroup_size_max = abstractSerializedData.readInt32(z);
                this.forwarded_count_max = abstractSerializedData.readInt32(z);
                this.online_update_period_ms = abstractSerializedData.readInt32(z);
                this.offline_blur_timeout_ms = abstractSerializedData.readInt32(z);
                this.offline_idle_timeout_ms = abstractSerializedData.readInt32(z);
                this.online_cloud_timeout_ms = abstractSerializedData.readInt32(z);
                this.notify_cloud_delay_ms = abstractSerializedData.readInt32(z);
                this.notify_default_delay_ms = abstractSerializedData.readInt32(z);
                this.push_chat_period_ms = abstractSerializedData.readInt32(z);
                this.push_chat_limit = abstractSerializedData.readInt32(z);
                this.saved_gifs_limit = abstractSerializedData.readInt32(z);
                this.edit_time_limit = abstractSerializedData.readInt32(z);
                this.revoke_time_limit = abstractSerializedData.readInt32(z);
                this.revoke_pm_time_limit = abstractSerializedData.readInt32(z);
                this.rating_e_decay = abstractSerializedData.readInt32(z);
                this.stickers_recent_limit = abstractSerializedData.readInt32(z);
                this.stickers_faved_limit = abstractSerializedData.readInt32(z);
                this.channels_read_media_period = abstractSerializedData.readInt32(z);
                if ((this.flags & 1) != 0) {
                    this.tmp_sessions = abstractSerializedData.readInt32(z);
                }
                this.pinned_dialogs_count_max = abstractSerializedData.readInt32(z);
                this.call_receive_timeout_ms = abstractSerializedData.readInt32(z);
                this.call_ring_timeout_ms = abstractSerializedData.readInt32(z);
                this.call_connect_timeout_ms = abstractSerializedData.readInt32(z);
                this.call_packet_timeout_ms = abstractSerializedData.readInt32(z);
                this.me_url_prefix = abstractSerializedData.readString(z);
                if ((this.flags & 4) != 0) {
                    this.suggested_lang_code = abstractSerializedData.readString(z);
                }
                if ((this.flags & 4) != 0) {
                    this.lang_pack_version = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.phonecalls_enabled ? this.flags | 2 : this.flags & -3;
            this.flags = this.default_p2p_contacts ? this.flags | 8 : this.flags & -9;
            this.flags = this.preload_featured_stickers ? this.flags | 16 : this.flags & -17;
            this.flags = this.ignore_phone_entities ? this.flags | 32 : this.flags & -33;
            this.flags = this.revoke_pm_inbox ? this.flags | 64 : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.expires);
            abstractSerializedData.writeBool(this.test_mode);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_dcOption) this.dc_options.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.chat_size_max);
            abstractSerializedData.writeInt32(this.megagroup_size_max);
            abstractSerializedData.writeInt32(this.forwarded_count_max);
            abstractSerializedData.writeInt32(this.online_update_period_ms);
            abstractSerializedData.writeInt32(this.offline_blur_timeout_ms);
            abstractSerializedData.writeInt32(this.offline_idle_timeout_ms);
            abstractSerializedData.writeInt32(this.online_cloud_timeout_ms);
            abstractSerializedData.writeInt32(this.notify_cloud_delay_ms);
            abstractSerializedData.writeInt32(this.notify_default_delay_ms);
            abstractSerializedData.writeInt32(this.push_chat_period_ms);
            abstractSerializedData.writeInt32(this.push_chat_limit);
            abstractSerializedData.writeInt32(this.saved_gifs_limit);
            abstractSerializedData.writeInt32(this.edit_time_limit);
            abstractSerializedData.writeInt32(this.revoke_time_limit);
            abstractSerializedData.writeInt32(this.revoke_pm_time_limit);
            abstractSerializedData.writeInt32(this.rating_e_decay);
            abstractSerializedData.writeInt32(this.stickers_recent_limit);
            abstractSerializedData.writeInt32(this.stickers_faved_limit);
            abstractSerializedData.writeInt32(this.channels_read_media_period);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            abstractSerializedData.writeInt32(this.pinned_dialogs_count_max);
            abstractSerializedData.writeInt32(this.call_receive_timeout_ms);
            abstractSerializedData.writeInt32(this.call_ring_timeout_ms);
            abstractSerializedData.writeInt32(this.call_connect_timeout_ms);
            abstractSerializedData.writeInt32(this.call_packet_timeout_ms);
            abstractSerializedData.writeString(this.me_url_prefix);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.suggested_lang_code);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.lang_pack_version);
            }
        }
    }

    public static class TL_contact extends TLObject {
        public static int constructor = -116274796;
        public boolean mutual;
        public int user_id;

        public static TL_contact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contact();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contact", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.mutual = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.mutual);
        }
    }

    public static class TL_contactBlocked extends TLObject {
        public static int constructor = NUM;
        public int date;
        public int user_id;

        public static TL_contactBlocked TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contactBlocked();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactBlocked", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_contactFound extends TLObject {
        public static int constructor = -360210539;
        public int user_id;

        public static TL_contactFound TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contactFound();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactFound", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_contactStatus extends TLObject {
        public static int constructor = -748155807;
        public UserStatus status;
        public int user_id;

        public static TL_contactStatus TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contactStatus();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactStatus", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_block extends TLObject {
        public static int constructor = 858475004;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_deleteContact extends TLObject {
        public static int constructor = -NUM;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_link.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_deleteContacts extends TLObject {
        public static int constructor = NUM;
        public ArrayList<InputUser> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_contacts_exportCard extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                i.objects.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_found extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<Peer> my_results = new ArrayList();
        public ArrayList<Peer> results = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_contacts_found TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contacts_found();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_found", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                Peer TLdeserialize;
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.my_results.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.results.add(TLdeserialize);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize2 != null) {
                                this.chats.add(TLdeserialize2);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize3 != null) {
                                    this.users.add(TLdeserialize3);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.my_results.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Peer) this.my_results.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Peer) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_contacts_getBlocked extends TLObject {
        public static int constructor = -176409329;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_Blocked.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_contacts_getContacts extends TLObject {
        public static int constructor = -NUM;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_Contacts.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_contacts_getStatuses extends TLObject {
        public static int constructor = -995929106;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_contactStatus TLdeserialize = TL_contactStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_getTopPeers extends TLObject {
        public static int constructor = -728224331;
        public boolean bots_inline;
        public boolean bots_pm;
        public boolean channels;
        public boolean correspondents;
        public int flags;
        public boolean groups;
        public int hash;
        public int limit;
        public int offset;
        public boolean phone_calls;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_TopPeers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.correspondents ? this.flags | 1 : this.flags & -2;
            this.flags = this.bots_pm ? this.flags | 2 : this.flags & -3;
            this.flags = this.bots_inline ? this.flags | 4 : this.flags & -5;
            this.flags = this.phone_calls ? this.flags | 8 : this.flags & -9;
            this.flags = this.groups ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.channels ? this.flags | 32768 : this.flags & -32769;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_contacts_importCard extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> export_card = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.export_card.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.export_card.get(i)).intValue());
            }
        }
    }

    public static class TL_contacts_importContacts extends TLObject {
        public static int constructor = 746589157;
        public ArrayList<TL_inputPhoneContact> contacts = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_importedContacts.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_inputPhoneContact) this.contacts.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_contacts_importedContacts extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_importedContact> imported = new ArrayList();
        public ArrayList<TL_popularContact> popular_invites = new ArrayList();
        public ArrayList<Long> retry_contacts = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_contacts_importedContacts TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contacts_importedContacts();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_importedContact TLdeserialize = TL_importedContact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.imported.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        TL_popularContact TLdeserialize2 = TL_popularContact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.popular_invites.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        for (i2 = 0; i2 < readInt32; i2++) {
                            this.retry_contacts.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize3 != null) {
                                    this.users.add(TLdeserialize3);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.imported.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_importedContact) this.imported.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.popular_invites.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((TL_popularContact) this.popular_invites.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.retry_contacts.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.retry_contacts.get(i)).longValue());
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_contacts_link extends TLObject {
        public static int constructor = 986597452;
        public ContactLink foreign_link;
        public ContactLink my_link;
        public User user;

        public static TL_contacts_link TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contacts_link();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_resetSaved extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_resetTopPeerRating extends TLObject {
        public static int constructor = 451113900;
        public TopPeerCategory category;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.category.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_resolveUsername extends TLObject {
        public static int constructor = -113456221;
        public String username;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_resolvedPeer.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_contacts_resolvedPeer extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Chat> chats = new ArrayList();
        public Peer peer;
        public ArrayList<User> users = new ArrayList();

        public static TL_contacts_resolvedPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_contacts_resolvedPeer();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_resolvedPeer", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((Chat) this.chats.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_contacts_search extends TLObject {
        public static int constructor = 301470424;
        public int limit;
        /* renamed from: q */
        public String f45q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_found.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f45q);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_contacts_unblock extends TLObject {
        public static int constructor = -448724803;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dataJSON extends TLObject {
        public static int constructor = NUM;
        public String data;

        public static TL_dataJSON TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_dataJSON();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dataJSON", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.data = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.data);
        }
    }

    public static class TL_dcOption extends TLObject {
        public static int constructor = 98092748;
        public boolean cdn;
        public int flags;
        public int id;
        public String ip_address;
        public boolean ipv6;
        public boolean isStatic;
        public boolean media_only;
        public int port;
        public boolean tcpo_only;

        public static TL_dcOption TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_dcOption();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dcOption", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.ipv6 = (this.flags & 1) != 0;
            this.media_only = (this.flags & 2) != 0;
            this.tcpo_only = (this.flags & 4) != 0;
            this.cdn = (this.flags & 8) != 0;
            if ((this.flags & 16) == 0) {
                z2 = false;
            }
            this.isStatic = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.ip_address = abstractSerializedData.readString(z);
            this.port = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.ipv6 ? this.flags | 1 : this.flags & -2;
            this.flags = this.media_only ? this.flags | 2 : this.flags & -3;
            this.flags = this.tcpo_only ? this.flags | 4 : this.flags & -5;
            this.flags = this.cdn ? this.flags | 8 : this.flags & -9;
            this.flags = this.isStatic ? this.flags | 16 : this.flags & -17;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.ip_address);
            abstractSerializedData.writeInt32(this.port);
        }
    }

    public static class TL_decryptedMessageLayer extends TLObject {
        public static int constructor = 467867529;
        public int in_seq_no;
        public int layer;
        public DecryptedMessage message;
        public int out_seq_no;
        public byte[] random_bytes;

        public static TL_decryptedMessageLayer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_decryptedMessageLayer();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_decryptedMessageLayer", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.layer = abstractSerializedData.readInt32(z);
            this.in_seq_no = abstractSerializedData.readInt32(z);
            this.out_seq_no = abstractSerializedData.readInt32(z);
            this.message = DecryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.random_bytes);
            abstractSerializedData.writeInt32(this.layer);
            abstractSerializedData.writeInt32(this.in_seq_no);
            abstractSerializedData.writeInt32(this.out_seq_no);
            this.message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dialog extends TLObject {
        public static int constructor = -455150117;
        public DraftMessage draft;
        public int flags;
        public long id;
        public int last_message_date;
        public PeerNotifySettings notify_settings;
        public Peer peer;
        public boolean pinned;
        public int pinnedNum;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int top_message;
        public int unread_count;
        public int unread_mentions_count;

        public static TL_dialog TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_dialog();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_dialog", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.pinned = (this.flags & 4) != 0;
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.top_message = abstractSerializedData.readInt32(z);
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.unread_mentions_count = abstractSerializedData.readInt32(z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.pts = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.pinned ? this.flags | 4 : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.top_message);
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(this.unread_mentions_count);
            this.notify_settings.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.pts);
            }
            if ((this.flags & 2) != 0) {
                this.draft.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_error extends TLObject {
        public static int constructor = -994444869;
        public int code;
        public String text;

        public static TL_error TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_error();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_error", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.code = abstractSerializedData.readInt32(z);
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.code);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_exportedMessageLink extends TLObject {
        public static int constructor = NUM;
        public String html;
        public String link;

        public static TL_exportedMessageLink TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_exportedMessageLink();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_exportedMessageLink", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.link = abstractSerializedData.readString(z);
            this.html = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.link);
            abstractSerializedData.writeString(this.html);
        }
    }

    public static class TL_fileHash extends TLObject {
        public static int constructor = NUM;
        public byte[] hash;
        public int limit;
        public int offset;

        public static TL_fileHash TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_fileHash();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_fileHash", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.limit = abstractSerializedData.readInt32(z);
            this.hash = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeByteArray(this.hash);
        }
    }

    public static class TL_game extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public String description;
        public Document document;
        public int flags;
        public long id;
        public Photo photo;
        public String short_name;
        public String title;

        public static TL_game TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_game();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_game", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.short_name = abstractSerializedData.readString(z);
            this.title = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.description);
            this.photo.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_groupCallConnection extends TLObject {
        public static int constructor = NUM;
        public long id;
        public String ip;
        public String ipv6;
        public int port;

        public static TL_groupCallConnection TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_groupCallConnection();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallConnection", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.ip = abstractSerializedData.readString(z);
            this.ipv6 = abstractSerializedData.readString(z);
            this.port = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.ipv6);
            abstractSerializedData.writeInt32(this.port);
        }
    }

    public static class TL_help_getAppChangelog extends TLObject {
        public static int constructor = -NUM;
        public String prev_app_version;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.prev_app_version);
        }
    }

    public static class TL_help_getAppUpdate extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return help_AppUpdate.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getConfig extends TLObject {
        public static int constructor = -990308245;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_config.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getInviteText extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_inviteText.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getNearestDc extends TLObject {
        public static int constructor = 531836966;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_nearestDc.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getRecentMeUrls extends TLObject {
        public static int constructor = NUM;
        public String referer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_recentMeUrls.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.referer);
        }
    }

    public static class TL_help_getSupport extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_support.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getTermsOfService extends TLObject {
        public static int constructor = 889286899;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_termsOfService.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_inviteText extends TLObject {
        public static int constructor = 415997816;
        public String message;

        public static TL_help_inviteText TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_help_inviteText();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_inviteText", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_help_recentMeUrls extends TLObject {
        public static int constructor = 235081943;
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<RecentMeUrl> urls = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_help_recentMeUrls TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_help_recentMeUrls();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_recentMeUrls", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    RecentMeUrl TLdeserialize = RecentMeUrl.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.urls.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.urls.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((RecentMeUrl) this.urls.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_help_saveAppLog extends TLObject {
        public static int constructor = NUM;
        public ArrayList<TL_inputAppEvent> events = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.events.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_inputAppEvent) this.events.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_help_setBotUpdatesStatus extends TLObject {
        public static int constructor = -333262899;
        public String message;
        public int pending_updates_count;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pending_updates_count);
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_help_support extends TLObject {
        public static int constructor = 398898678;
        public String phone_number;
        public User user;

        public static TL_help_support TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_help_support();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_support", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_help_termsOfService extends TLObject {
        public static int constructor = -236044656;
        public String text;

        public static TL_help_termsOfService TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_help_termsOfService();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_termsOfService", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_highScore extends TLObject {
        public static int constructor = NUM;
        public int pos;
        public int score;
        public int user_id;

        public static TL_highScore TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_highScore();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_highScore", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pos = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.score = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pos);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_importedContact extends TLObject {
        public static int constructor = -805141448;
        public long client_id;
        public int user_id;

        public static TL_importedContact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_importedContact();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_importedContact", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.client_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.client_id);
        }
    }

    public static class TL_inlineBotSwitchPM extends TLObject {
        public static int constructor = NUM;
        public String start_param;
        public String text;

        public static TL_inlineBotSwitchPM TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inlineBotSwitchPM();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.start_param = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.start_param);
        }
    }

    public static class TL_inputAppEvent extends TLObject {
        public static int constructor = NUM;
        public String data;
        public long peer;
        public double time;
        public String type;

        public static TL_inputAppEvent TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputAppEvent();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputAppEvent", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.time = abstractSerializedData.readDouble(z);
            this.type = abstractSerializedData.readString(z);
            this.peer = abstractSerializedData.readInt64(z);
            this.data = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.time);
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeInt64(this.peer);
            abstractSerializedData.writeString(this.data);
        }
    }

    public static class TL_inputBotInlineMessageID extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public int dc_id;
        public long id;

        public static TL_inputBotInlineMessageID TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputBotInlineMessageID();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedChat extends TLObject {
        public static int constructor = -247351839;
        public long access_hash;
        public int chat_id;

        public static TL_inputEncryptedChat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputEncryptedChat();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputEncryptedChat", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputGroupCall extends TLObject {
        public static int constructor = -659913713;
        public long access_hash;
        public long id;

        public static TL_inputGroupCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputGroupCall();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputGroupCall", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerNotifySettings extends TLObject {
        public static int constructor = 949182130;
        public int flags;
        public int mute_until;
        public boolean show_previews;
        public boolean silent;
        public String sound;

        public static TL_inputPeerNotifySettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputPeerNotifySettings();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPeerNotifySettings", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.show_previews = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z2 = false;
            }
            this.silent = z2;
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.show_previews ? this.flags | 1 : this.flags & -2;
            this.flags = this.silent ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
        }
    }

    public static class TL_inputPhoneCall extends TLObject {
        public static int constructor = 506920429;
        public long access_hash;
        public long id;

        public static TL_inputPhoneCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputPhoneCall();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneCall", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPhoneContact extends TLObject {
        public static int constructor = -208488460;
        public long client_id;
        public String first_name;
        public String last_name;
        public String phone;

        public static TL_inputPhoneContact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputPhoneContact();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.client_id = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.client_id);
            abstractSerializedData.writeString(this.phone);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_inputSingleMedia extends TLObject {
        public static int constructor = 482797855;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public InputMedia media;
        public String message;
        public long random_id;

        public static TL_inputSingleMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputSingleMedia();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputSingleMedia", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.media = InputMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.random_id = abstractSerializedData.readInt64(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_inputWebDocument extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<DocumentAttribute> attributes = new ArrayList();
        public String mime_type;
        public int size;
        public String url;

        public static TL_inputWebDocument TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputWebDocument();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputWebDocument", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_inputWebFileLocation extends TLObject {
        public static int constructor = -NUM;
        public long access_hash;
        public String url;

        public static TL_inputWebFileLocation TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_inputWebFileLocation();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputWebFileLocation", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_invoice extends TLObject {
        public static int constructor = -NUM;
        public String currency;
        public boolean email_requested;
        public boolean email_to_provider;
        public int flags;
        public boolean flexible;
        public boolean name_requested;
        public boolean phone_requested;
        public boolean phone_to_provider;
        public ArrayList<TL_labeledPrice> prices = new ArrayList();
        public boolean shipping_address_requested;
        public boolean test;

        public static TL_invoice TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_invoice();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_invoice", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.test = (this.flags & 1) != 0;
            this.name_requested = (this.flags & 2) != 0;
            this.phone_requested = (this.flags & 4) != 0;
            this.email_requested = (this.flags & 8) != 0;
            this.shipping_address_requested = (this.flags & 16) != 0;
            this.flexible = (this.flags & 32) != 0;
            this.phone_to_provider = (this.flags & 64) != 0;
            this.email_to_provider = (this.flags & 128) != 0;
            this.currency = abstractSerializedData.readString(z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_labeledPrice TLdeserialize = TL_labeledPrice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.prices.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.test ? this.flags | 1 : this.flags & -2;
            this.flags = this.name_requested ? this.flags | 2 : this.flags & -3;
            this.flags = this.phone_requested ? this.flags | 4 : this.flags & -5;
            this.flags = this.email_requested ? this.flags | 8 : this.flags & -9;
            this.flags = this.shipping_address_requested ? this.flags | 16 : this.flags & -17;
            this.flags = this.flexible ? this.flags | 32 : this.flags & -33;
            this.flags = this.phone_to_provider ? this.flags | 64 : this.flags & -65;
            this.flags = this.email_to_provider ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt32(481674261);
            int size = this.prices.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_labeledPrice) this.prices.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_keyboardButtonRow extends TLObject {
        public static int constructor = NUM;
        public ArrayList<KeyboardButton> buttons = new ArrayList();

        public static TL_keyboardButtonRow TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_keyboardButtonRow();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    KeyboardButton TLdeserialize = KeyboardButton.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.buttons.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.buttons.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((KeyboardButton) this.buttons.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_labeledPrice extends TLObject {
        public static int constructor = -886477832;
        public long amount;
        public String label;

        public static TL_labeledPrice TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_labeledPrice();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_labeledPrice", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.label = abstractSerializedData.readString(z);
            this.amount = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.label);
            abstractSerializedData.writeInt64(this.amount);
        }
    }

    public static class TL_langPackDifference extends TLObject {
        public static int constructor = -209337866;
        public int from_version;
        public String lang_code;
        public ArrayList<LangPackString> strings = new ArrayList();
        public int version;

        public static TL_langPackDifference TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_langPackDifference();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_langPackDifference", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lang_code = abstractSerializedData.readString(z);
            this.from_version = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    LangPackString TLdeserialize = LangPackString.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.strings.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(this.from_version);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(481674261);
            int size = this.strings.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((LangPackString) this.strings.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_langPackLanguage extends TLObject {
        public static int constructor = 292985073;
        public String lang_code;
        public String name;
        public String native_name;

        public static TL_langPackLanguage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_langPackLanguage();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_langPackLanguage", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.name = abstractSerializedData.readString(z);
            this.native_name = abstractSerializedData.readString(z);
            this.lang_code = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.name);
            abstractSerializedData.writeString(this.native_name);
            abstractSerializedData.writeString(this.lang_code);
        }
    }

    public static class TL_langpack_getDifference extends TLObject {
        public static int constructor = 187583869;
        public int from_version;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_langPackDifference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.from_version);
        }
    }

    public static class TL_langpack_getLangPack extends TLObject {
        public static int constructor = -NUM;
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_langPackDifference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }

    public static class TL_langpack_getLanguages extends TLObject {
        public static int constructor = -NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_langPackLanguage TLdeserialize = TL_langPackLanguage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_langpack_getStrings extends TLObject {
        public static int constructor = 773776152;
        public ArrayList<String> keys = new ArrayList();
        public String lang_code;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                LangPackString TLdeserialize = LangPackString.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(481674261);
            int size = this.keys.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeString((String) this.keys.get(i));
            }
        }
    }

    public static class TL_maskCoords extends TLObject {
        public static int constructor = -NUM;
        /* renamed from: n */
        public int f46n;
        /* renamed from: x */
        public double f47x;
        /* renamed from: y */
        public double f48y;
        public double zoom;

        public static TL_maskCoords TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_maskCoords();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_maskCoords", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.f46n = abstractSerializedData.readInt32(z);
            this.f47x = abstractSerializedData.readDouble(z);
            this.f48y = abstractSerializedData.readDouble(z);
            this.zoom = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.f46n);
            abstractSerializedData.writeDouble(this.f47x);
            abstractSerializedData.writeDouble(this.f48y);
            abstractSerializedData.writeDouble(this.zoom);
        }
    }

    public static class TL_messageRange extends TLObject {
        public static int constructor = 182649427;
        public int max_id;
        public int min_id;

        public static TL_messageRange TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messageRange();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageRange", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.min_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.min_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_acceptEncryption extends TLObject {
        public static int constructor = NUM;
        public byte[] g_b;
        public long key_fingerprint;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_messages_addChatUser extends TLObject {
        public static int constructor = -106911223;
        public int chat_id;
        public int fwd_limit;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.fwd_limit);
        }
    }

    public static class TL_messages_affectedHistory extends TLObject {
        public static int constructor = -NUM;
        public int offset;
        public int pts;
        public int pts_count;

        public static TL_messages_affectedHistory TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_affectedHistory();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedHistory", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.offset = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_messages_affectedMessages extends TLObject {
        public static int constructor = -NUM;
        public int pts;
        public int pts_count;

        public static TL_messages_affectedMessages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_affectedMessages();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedMessages", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_messages_archivedStickers extends TLObject {
        public static int constructor = NUM;
        public int count;
        public ArrayList<StickerSetCovered> sets = new ArrayList();

        public static TL_messages_archivedStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_archivedStickers();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_archivedStickers", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_botCallbackAnswer extends TLObject {
        public static int constructor = 911761060;
        public boolean alert;
        public int cache_time;
        public int flags;
        public boolean has_url;
        public String message;
        public boolean native_ui;
        public String url;

        public static TL_messages_botCallbackAnswer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_botCallbackAnswer();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.alert = (this.flags & 2) != 0;
            this.has_url = (this.flags & 8) != 0;
            if ((this.flags & 16) != 0) {
                z2 = true;
            }
            this.native_ui = z2;
            if ((this.flags & 1) != 0) {
                this.message = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
            this.cache_time = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.alert ? this.flags | 2 : this.flags & -3;
            this.flags = this.has_url ? this.flags | 8 : this.flags & -9;
            this.flags = this.native_ui ? this.flags | 16 : this.flags & -17;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            abstractSerializedData.writeInt32(this.cache_time);
        }
    }

    public static class TL_messages_chatFull extends TLObject {
        public static int constructor = -438840932;
        public ArrayList<Chat> chats = new ArrayList();
        public ChatFull full_chat;
        public ArrayList<User> users = new ArrayList();

        public static TL_messages_chatFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_chatFull();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatFull", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.full_chat = ChatFull.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.full_chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((Chat) this.chats.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_messages_checkChatInvite extends TLObject {
        public static int constructor = NUM;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_messages_clearRecentStickers extends TLObject {
        public static int constructor = -NUM;
        public boolean attached;
        public int flags;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_messages_createChat extends TLObject {
        public static int constructor = 164303470;
        public String title;
        public ArrayList<InputUser> users = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messages_deleteChatUser extends TLObject {
        public static int constructor = -530505962;
        public int chat_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_deleteHistory extends TLObject {
        public static int constructor = 469850889;
        public int flags;
        public boolean just_clear;
        public int max_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.just_clear ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_deleteMessages extends TLObject {
        public static int constructor = -443640366;
        public int flags;
        public ArrayList<Integer> id = new ArrayList();
        public boolean revoke;

        public static TL_messages_deleteMessages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_deleteMessages();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_deleteMessages", new Object[]{Integer.valueOf(i)}));
            }
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.revoke = (this.flags & 1) != 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.id.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.revoke ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_discardEncryption extends TLObject {
        public static int constructor = -304536635;
        public int chat_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_editChatAdmin extends TLObject {
        public static int constructor = -NUM;
        public int chat_id;
        public boolean is_admin;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.is_admin);
        }
    }

    public static class TL_messages_editChatPhoto extends TLObject {
        public static int constructor = -900957736;
        public int chat_id;
        public InputChatPhoto photo;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_editChatTitle extends TLObject {
        public static int constructor = -599447467;
        public int chat_id;
        public String title;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messages_editMessage extends TLObject {
        public static int constructor = 97630429;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public InputGeoPoint geo_point;
        public int id;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public ReplyMarkup reply_markup;
        public boolean stop_geo_live;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 2 : this.flags & -3;
            this.flags = this.stop_geo_live ? this.flags | 4096 : this.flags & -4097;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                this.geo_point.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_exportChatInvite extends TLObject {
        public static int constructor = NUM;
        public int chat_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ExportedChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_faveSticker extends TLObject {
        public static int constructor = -NUM;
        public InputDocument id;
        public boolean unfave;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unfave);
        }
    }

    public static class TL_messages_forwardMessage extends TLObject {
        public static int constructor = 865483769;
        public int id;
        public InputPeer peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_messages_forwardMessages extends TLObject {
        public static int constructor = NUM;
        public boolean background;
        public int flags;
        public InputPeer from_peer;
        public boolean grouped;
        public ArrayList<Integer> id = new ArrayList();
        public ArrayList<Long> random_id = new ArrayList();
        public boolean silent;
        public InputPeer to_peer;
        public boolean with_my_score;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = this.background ? this.flags | 64 : this.flags & -65;
            this.flags = this.with_my_score ? this.flags | 256 : this.flags & -257;
            this.flags = this.grouped ? this.flags | 512 : this.flags & -513;
            abstractSerializedData.writeInt32(this.flags);
            this.from_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i2)).intValue());
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.random_id.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                abstractSerializedData.writeInt64(((Long) this.random_id.get(i)).longValue());
                i++;
            }
            this.to_peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_foundGifs extends TLObject {
        public static int constructor = NUM;
        public int next_offset;
        public ArrayList<FoundGif> results = new ArrayList();

        public static TL_messages_foundGifs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_foundGifs();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_foundGifs", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.next_offset = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    FoundGif TLdeserialize = FoundGif.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.next_offset);
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((FoundGif) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_getAllChats extends TLObject {
        public static int constructor = -341307408;
        public ArrayList<Integer> except_ids = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.except_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.except_ids.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_getAllDrafts extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_getAllStickers extends TLObject {
        public static int constructor = 479598769;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getArchivedStickers extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public int limit;
        public boolean masks;
        public long offset_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_archivedStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getAttachedStickers extends TLObject {
        public static int constructor = -866424884;
        public InputStickeredMedia media;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getBotCallbackAnswer extends TLObject {
        public static int constructor = -NUM;
        public byte[] data;
        public int flags;
        public boolean game;
        public int msg_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_botCallbackAnswer.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.game ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeByteArray(this.data);
            }
        }
    }

    public static class TL_messages_getChats extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_getCommonChats extends TLObject {
        public static int constructor = 218777796;
        public int limit;
        public int max_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getDhConfig extends TLObject {
        public static int constructor = 651135312;
        public int random_length;
        public int version;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_DhConfig.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(this.random_length);
        }
    }

    public static class TL_messages_getDialogs extends TLObject {
        public static int constructor = 421243333;
        public boolean exclude_pinned;
        public int flags;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Dialogs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.exclude_pinned ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.offset_id);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getDocumentByHash extends TLObject {
        public static int constructor = 864953444;
        public String mime_type;
        public byte[] sha256;
        public int size;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Document.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.sha256);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
        }
    }

    public static class TL_messages_getFavedStickers extends TLObject {
        public static int constructor = 567151374;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_FavedStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getFeaturedStickers extends TLObject {
        public static int constructor = 766298703;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_FeaturedStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getFullChat extends TLObject {
        public static int constructor = 998448230;
        public int chat_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_getGameHighScores extends TLObject {
        public static int constructor = -400399203;
        public int id;
        public InputPeer peer;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getHistory extends TLObject {
        public static int constructor = -NUM;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
        }
    }

    public static class TL_messages_getInlineBotResults extends TLObject {
        public static int constructor = NUM;
        public InputUser bot;
        public int flags;
        public InputGeoPoint geo_point;
        public String offset;
        public InputPeer peer;
        public String query;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_BotResults.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                this.geo_point.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.query);
            abstractSerializedData.writeString(this.offset);
        }
    }

    public static class TL_messages_getInlineGameHighScores extends TLObject {
        public static int constructor = 258170395;
        public TL_inputBotInlineMessageID id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getMaskStickers extends TLObject {
        public static int constructor = NUM;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getMessageEditData extends TLObject {
        public static int constructor = -39416522;
        public int id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_messageEditData.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_messages_getMessages extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Integer> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_getMessagesViews extends TLObject {
        public static int constructor = -993483427;
        public ArrayList<Integer> id = new ArrayList();
        public boolean increment;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                i.objects.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
            abstractSerializedData.writeBool(this.increment);
        }
    }

    public static class TL_messages_getPeerDialogs extends TLObject {
        public static int constructor = -462373635;
        public ArrayList<InputDialogPeer> peers = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_peerDialogs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputDialogPeer) this.peers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_getPeerSettings extends TLObject {
        public static int constructor = 913498268;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_peerSettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getPinnedDialogs extends TLObject {
        public static int constructor = -497756594;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_peerDialogs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_getRecentLocations extends TLObject {
        public static int constructor = -NUM;
        public int hash;
        public int limit;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getRecentStickers extends TLObject {
        public static int constructor = NUM;
        public boolean attached;
        public int flags;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_RecentStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getSavedGifs extends TLObject {
        public static int constructor = -NUM;
        public int hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SavedGifs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getStickerSet extends TLObject {
        public static int constructor = 639215886;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_stickerSet.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getStickers extends TLObject {
        public static int constructor = -NUM;
        public String emoticon;
        public boolean exclude_featured;
        public int flags;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Stickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.exclude_featured ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.emoticon);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_messages_getUnreadMentions extends TLObject {
        public static int constructor = NUM;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
        }
    }

    public static class TL_messages_getWebPage extends TLObject {
        public static int constructor = 852135825;
        public int hash;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return WebPage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getWebPagePreview extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public String message;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return MessageMedia.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_hideReportSpam extends TLObject {
        public static int constructor = -NUM;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_highScores extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<TL_highScore> scores = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_messages_highScores TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_highScores();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_highScores", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_highScore TLdeserialize = TL_highScore.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.scores.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.scores.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_highScore) this.scores.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_messages_importChatInvite extends TLObject {
        public static int constructor = NUM;
        public String hash;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_messages_installStickerSet extends TLObject {
        public static int constructor = -946871200;
        public boolean archived;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_StickerSetInstallResult.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.archived);
        }
    }

    public static class TL_messages_messageEditData extends TLObject {
        public static int constructor = 649453030;
        public boolean caption;
        public int flags;

        public static TL_messages_messageEditData TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_messageEditData();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = true;
            if ((this.flags & 1) == null) {
                z = false;
            }
            this.caption = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.caption ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_messages_messageEmpty extends TLObject {
        public static int constructor = NUM;

        public static TL_messages_messageEmpty TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_messageEmpty();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_migrateChat extends TLObject {
        public static int constructor = 363051235;
        public int chat_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_peerDialogs extends TLObject {
        public static int constructor = 863093588;
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<TL_dialog> dialogs = new ArrayList();
        public ArrayList<Message> messages = new ArrayList();
        public TL_updates_state state;
        public ArrayList<User> users = new ArrayList();

        public static TL_messages_peerDialogs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_peerDialogs();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerDialogs", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                            this.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
            this.state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_readEncryptedHistory extends TLObject {
        public static int constructor = NUM;
        public int max_date;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_date);
        }
    }

    public static class TL_messages_readFeaturedStickers extends TLObject {
        public static int constructor = NUM;
        public ArrayList<Long> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.id.get(i)).longValue());
            }
        }
    }

    public static class TL_messages_readHistory extends TLObject {
        public static int constructor = 238054714;
        public int max_id;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_readMentions extends TLObject {
        public static int constructor = 251759059;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_readMessageContents extends TLObject {
        public static int constructor = 916930423;
        public ArrayList<Integer> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_receivedMessages extends TLObject {
        public static int constructor = 94983360;
        public int max_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_receivedNotifyMessage TLdeserialize = TL_receivedNotifyMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_receivedQueue extends TLObject {
        public static int constructor = NUM;
        public int max_qts;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                i.objects.add(Long.valueOf(abstractSerializedData.readInt64(z)));
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.max_qts);
        }
    }

    public static class TL_messages_reorderPinnedDialogs extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public boolean force;
        public ArrayList<InputDialogPeer> order = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.force ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputDialogPeer) this.order.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_reorderStickerSets extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.order.get(i)).longValue());
            }
        }
    }

    public static class TL_messages_report extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Integer> id = new ArrayList();
        public InputPeer peer;
        public ReportReason reason;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
            this.reason.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_reportEncryptedSpam extends TLObject {
        public static int constructor = NUM;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_reportSpam extends TLObject {
        public static int constructor = -820669733;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_requestEncryption extends TLObject {
        public static int constructor = -162681021;
        public byte[] g_a;
        public int random_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_messages_saveDraft extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public int reply_to_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_saveGif extends TLObject {
        public static int constructor = 846868683;
        public InputDocument id;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }

    public static class TL_messages_saveRecentSticker extends TLObject {
        public static int constructor = 958863608;
        public boolean attached;
        public int flags;
        public InputDocument id;
        public boolean unsave;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }

    public static class TL_messages_search extends TLObject {
        public static int constructor = -NUM;
        public int add_offset;
        public MessagesFilter filter;
        public int flags;
        public InputUser from_id;
        public int hash;
        public int limit;
        public int max_date;
        public int max_id;
        public int min_date;
        public int min_id;
        public int offset_id;
        public InputPeer peer;
        /* renamed from: q */
        public String f49q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.f49q);
            if ((this.flags & 1) != 0) {
                this.from_id.serializeToStream(abstractSerializedData);
            }
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.min_date);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_searchGifs extends TLObject {
        public static int constructor = -NUM;
        public int offset;
        /* renamed from: q */
        public String f50q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_foundGifs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f50q);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_messages_searchGlobal extends TLObject {
        public static int constructor = -NUM;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;
        /* renamed from: q */
        public String f51q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f51q);
            abstractSerializedData.writeInt32(this.offset_date);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_searchStickerSets extends TLObject {
        public static int constructor = -NUM;
        public boolean exclude_featured;
        public int flags;
        public int hash;
        /* renamed from: q */
        public String f52q;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_FoundStickerSets.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.exclude_featured ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.f52q);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_sendBroadcast extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<InputUser> contacts = new ArrayList();
        public InputMedia media;
        public String message;
        public ArrayList<Long> random_id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((InputUser) this.contacts.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.random_id.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                abstractSerializedData.writeInt64(((Long) this.random_id.get(i)).longValue());
                i++;
            }
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_sendEncrypted extends TLObject {
        public static int constructor = -NUM;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_sendEncryptedFile extends TLObject {
        public static int constructor = -NUM;
        public NativeByteBuffer data;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
            this.file.serializeToStream(abstractSerializedData);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_sendEncryptedMultiMedia extends TLObject {
        public static int constructor = -892679478;
        public ArrayList<InputEncryptedFile> files = new ArrayList();
        public ArrayList<TL_decryptedMessage> messages = new ArrayList();

        public void freeResources() {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }
    }

    public static class TL_messages_sendEncryptedService extends TLObject {
        public static int constructor = 852769188;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }
    }

    public static class TL_messages_sendInlineBotResult extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public String id;
        public InputPeer peer;
        public long query_id;
        public long random_id;
        public int reply_to_msg_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = this.background ? this.flags | 64 : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeString(this.id);
        }
    }

    public static class TL_messages_sendMedia extends TLObject {
        public static int constructor = -NUM;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public InputMedia media;
        public String message;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = this.background ? this.flags | 64 : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_sendMessage extends TLObject {
        public static int constructor = -91733382;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 2 : this.flags & -3;
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = this.background ? this.flags | 64 : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_sendMultiMedia extends TLObject {
        public static int constructor = 546656559;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public ArrayList<TL_inputSingleMedia> multi_media = new ArrayList();
        public InputPeer peer;
        public int reply_to_msg_id;
        public boolean silent;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | 32 : this.flags & -33;
            this.flags = this.background ? this.flags | 64 : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.multi_media.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_inputSingleMedia) this.multi_media.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_sendScreenshotNotification extends TLObject {
        public static int constructor = -914493408;
        public InputPeer peer;
        public long random_id;
        public int reply_to_msg_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.reply_to_msg_id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_messages_setBotCallbackAnswer extends TLObject {
        public static int constructor = -712043766;
        public boolean alert;
        public int cache_time;
        public int flags;
        public String message;
        public long query_id;
        public String url;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.alert ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            abstractSerializedData.writeInt32(this.cache_time);
        }
    }

    public static class TL_messages_setEncryptedTyping extends TLObject {
        public static int constructor = NUM;
        public TL_inputEncryptedChat peer;
        public boolean typing;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.typing);
        }
    }

    public static class TL_messages_setGameScore extends TLObject {
        public static int constructor = -NUM;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public int id;
        public InputPeer peer;
        public int score;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.edit_message ? this.flags | 1 : this.flags & -2;
            this.flags = this.force ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messages_setInlineGameScore extends TLObject {
        public static int constructor = 363700068;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public TL_inputBotInlineMessageID id;
        public int score;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.edit_message ? this.flags | 1 : this.flags & -2;
            this.flags = this.force ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messages_setTyping extends TLObject {
        public static int constructor = -NUM;
        public SendMessageAction action;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_startBot extends TLObject {
        public static int constructor = -421563528;
        public InputUser bot;
        public InputPeer peer;
        public long random_id;
        public String start_param;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeString(this.start_param);
        }
    }

    public static class TL_messages_stickerSet extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<Document> documents = new ArrayList();
        public ArrayList<TL_stickerPack> packs = new ArrayList();
        public StickerSet set;

        public static TL_messages_stickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_messages_stickerSet();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_stickerSet", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_stickerPack TLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.packs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        Document TLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.documents.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_stickerPack) this.packs.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((Document) this.documents.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_messages_toggleChatAdmins extends TLObject {
        public static int constructor = -326379039;
        public int chat_id;
        public boolean enabled;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_messages_toggleDialogPin extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public InputDialogPeer peer;
        public boolean pinned;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.pinned ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_uninstallStickerSet extends TLObject {
        public static int constructor = -110209570;
        public InputStickerSet stickerset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_uploadEncryptedFile extends TLObject {
        public static int constructor = NUM;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return EncryptedFile.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_uploadMedia extends TLObject {
        public static int constructor = NUM;
        public InputMedia media;
        public InputPeer peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return MessageMedia.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_nearestDc extends TLObject {
        public static int constructor = -NUM;
        public String country;
        public int nearest_dc;
        public int this_dc;

        public static TL_nearestDc TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_nearestDc();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_nearestDc", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.country = abstractSerializedData.readString(z);
            this.this_dc = abstractSerializedData.readInt32(z);
            this.nearest_dc = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(this.nearest_dc);
        }
    }

    public static class TL_null extends TLObject {
        public static int constructor = NUM;

        public static TL_null TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_null();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_null", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_paymentRequestedInfo extends TLObject {
        public static int constructor = -NUM;
        public String email;
        public int flags;
        public String name;
        public String phone;
        public TL_postAddress shipping_address;

        public static TL_paymentRequestedInfo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_paymentRequestedInfo();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_paymentRequestedInfo", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.email = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.shipping_address = TL_postAddress.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.name);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.email);
            }
            if ((this.flags & 8) != 0) {
                this.shipping_address.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_paymentSavedCredentialsCard extends TLObject {
        public static int constructor = -842892769;
        public String id;
        public String title;

        public static TL_paymentSavedCredentialsCard TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_paymentSavedCredentialsCard();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_paymentSavedCredentialsCard", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readString(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_payments_clearSavedInfo extends TLObject {
        public static int constructor = -667062079;
        public boolean credentials;
        public int flags;
        public boolean info;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.credentials ? this.flags | 1 : this.flags & -2;
            this.flags = this.info ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_payments_getPaymentForm extends TLObject {
        public static int constructor = -NUM;
        public int msg_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_payments_paymentForm.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.msg_id);
        }
    }

    public static class TL_payments_getPaymentReceipt extends TLObject {
        public static int constructor = -NUM;
        public int msg_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_payments_paymentReceipt.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.msg_id);
        }
    }

    public static class TL_payments_getSavedInfo extends TLObject {
        public static int constructor = 578650699;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_payments_savedInfo.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_payments_paymentForm extends TLObject {
        public static int constructor = NUM;
        public int bot_id;
        public boolean can_save_credentials;
        public int flags;
        public TL_invoice invoice;
        public TL_dataJSON native_params;
        public String native_provider;
        public boolean password_missing;
        public int provider_id;
        public TL_paymentSavedCredentialsCard saved_credentials;
        public TL_paymentRequestedInfo saved_info;
        public String url;
        public ArrayList<User> users = new ArrayList();

        public static TL_payments_paymentForm TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_payments_paymentForm();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentForm", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_save_credentials = (this.flags & 4) != 0;
            this.password_missing = (this.flags & 8) != 0;
            this.bot_id = abstractSerializedData.readInt32(z);
            this.invoice = TL_invoice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.provider_id = abstractSerializedData.readInt32(z);
            this.url = abstractSerializedData.readString(z);
            if ((this.flags & 16) != 0) {
                this.native_provider = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.native_params = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 1) != 0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2) != 0) {
                this.saved_credentials = TL_paymentSavedCredentialsCard.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_save_credentials ? this.flags | 4 : this.flags & -5;
            this.flags = this.password_missing ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.bot_id);
            this.invoice.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.provider_id);
            abstractSerializedData.writeString(this.url);
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeString(this.native_provider);
            }
            if ((this.flags & 16) != 0) {
                this.native_params.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 1) != 0) {
                this.saved_info.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                this.saved_credentials.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_payments_paymentReceipt extends TLObject {
        public static int constructor = NUM;
        public int bot_id;
        public String credentials_title;
        public String currency;
        public int date;
        public int flags;
        public TL_paymentRequestedInfo info;
        public TL_invoice invoice;
        public int provider_id;
        public TL_shippingOption shipping;
        public long total_amount;
        public ArrayList<User> users = new ArrayList();

        public static TL_payments_paymentReceipt TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_payments_paymentReceipt();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentReceipt", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.bot_id = abstractSerializedData.readInt32(z);
            this.invoice = TL_invoice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.provider_id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2) != 0) {
                this.shipping = TL_shippingOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.currency = abstractSerializedData.readString(z);
            this.total_amount = abstractSerializedData.readInt64(z);
            this.credentials_title = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.bot_id);
            this.invoice.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.provider_id);
            if ((this.flags & 1) != 0) {
                this.info.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                this.shipping.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt64(this.total_amount);
            abstractSerializedData.writeString(this.credentials_title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_payments_savedInfo extends TLObject {
        public static int constructor = -74456004;
        public int flags;
        public boolean has_saved_credentials;
        public TL_paymentRequestedInfo saved_info;

        public static TL_payments_savedInfo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_payments_savedInfo();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_savedInfo", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.has_saved_credentials = (this.flags & 2) != 0;
            if ((this.flags & 1) != 0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.has_saved_credentials ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.saved_info.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_payments_sendPaymentForm extends TLObject {
        public static int constructor = 730364339;
        public InputPaymentCredentials credentials;
        public int flags;
        public int msg_id;
        public String requested_info_id;
        public String shipping_option_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return payments_PaymentResult.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.msg_id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.requested_info_id);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.shipping_option_id);
            }
            this.credentials.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_payments_validateRequestedInfo extends TLObject {
        public static int constructor = NUM;
        public int flags;
        public TL_paymentRequestedInfo info;
        public int msg_id;
        public boolean save;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_payments_validatedRequestedInfo.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.save ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.msg_id);
            this.info.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_payments_validatedRequestedInfo extends TLObject {
        public static int constructor = -784000893;
        public int flags;
        public String id;
        public ArrayList<TL_shippingOption> shipping_options = new ArrayList();

        public static TL_payments_validatedRequestedInfo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_payments_validatedRequestedInfo();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_payments_validatedRequestedInfo", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.id = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        TL_shippingOption TLdeserialize = TL_shippingOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.shipping_options.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.id);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.shipping_options.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((TL_shippingOption) this.shipping_options.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_peerSettings extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public boolean report_spam;

        public static TL_peerSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_peerSettings();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = true;
            if ((this.flags & 1) == null) {
                z = false;
            }
            this.report_spam = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.report_spam ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_phoneCallProtocol extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int max_layer;
        public int min_layer;
        public boolean udp_p2p;
        public boolean udp_reflector;

        public static TL_phoneCallProtocol TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_phoneCallProtocol();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phoneCallProtocol", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.udp_p2p = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z2 = false;
            }
            this.udp_reflector = z2;
            this.min_layer = abstractSerializedData.readInt32(z);
            this.max_layer = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.udp_p2p ? this.flags | 1 : this.flags & -2;
            this.flags = this.udp_reflector ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.min_layer);
            abstractSerializedData.writeInt32(this.max_layer);
        }
    }

    public static class TL_phoneConnection extends TLObject {
        public static int constructor = -NUM;
        public long id;
        public String ip;
        public String ipv6;
        public byte[] peer_tag;
        public int port;

        public static TL_phoneConnection TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_phoneConnection();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phoneConnection", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.ip = abstractSerializedData.readString(z);
            this.ipv6 = abstractSerializedData.readString(z);
            this.port = abstractSerializedData.readInt32(z);
            this.peer_tag = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.ipv6);
            abstractSerializedData.writeInt32(this.port);
            abstractSerializedData.writeByteArray(this.peer_tag);
        }
    }

    public static class TL_phone_acceptCall extends TLObject {
        public static int constructor = NUM;
        public byte[] g_b;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_b);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_confirmCall extends TLObject {
        public static int constructor = 788404002;
        public byte[] g_a;
        public long key_fingerprint;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_a);
            abstractSerializedData.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_createGroupCall extends TLObject {
        public static int constructor = -NUM;
        public InputChannel channel;
        public byte[] encryption_key;
        public int flags;
        public long key_fingerprint;
        public TL_phoneCallProtocol protocol;
        public int random_id;
        public byte[] streams;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            this.protocol.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeByteArray(this.encryption_key);
            }
            abstractSerializedData.writeInt64(this.key_fingerprint);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }

    public static class TL_phone_discardCall extends TLObject {
        public static int constructor = NUM;
        public long connection_id;
        public int duration;
        public TL_inputPhoneCall peer;
        public PhoneCallDiscardReason reason;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.duration);
            this.reason.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.connection_id);
        }
    }

    public static class TL_phone_discardGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_editGroupCallMember extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;
        public int flags;
        public boolean kicked;
        public boolean readonly;
        public byte[] streams;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.readonly ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.call.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeByteArray(this.streams);
            }
        }
    }

    public static class TL_phone_getCall extends TLObject {
        public static int constructor = -NUM;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_getCallConfig extends TLObject {
        public static int constructor = NUM;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_dataJSON.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_phone_getGroupCall extends TLObject {
        public static int constructor = 209498135;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_groupCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_groupCall extends TLObject {
        public static int constructor = NUM;
        public GroupCall call;
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<GroupCallParticipant> participants = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static TL_phone_groupCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_phone_groupCall();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCall", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.call = GroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    GroupCallParticipant TLdeserialize = GroupCallParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((GroupCallParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_phone_inviteGroupCallMembers extends TLObject {
        public static int constructor = -862804260;
        public TL_inputGroupCall call;
        public int flags;
        public boolean uninvite;
        public ArrayList<InputUser> users = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.uninvite ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_phone_joinGroupCall extends TLObject {
        public static int constructor = 165360343;
        public TL_inputGroupCall call;
        public long key_fingerprint;
        public byte[] streams;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.streams);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_phone_leaveGroupCall extends TLObject {
        public static int constructor = NUM;
        public TL_inputGroupCall call;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_phoneCall extends TLObject {
        public static int constructor = -326966976;
        public PhoneCall phone_call;
        public ArrayList<User> users = new ArrayList();

        public static TL_phone_phoneCall TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_phone_phoneCall();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_phone_phoneCall", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_call = PhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.phone_call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_phone_receivedCall extends TLObject {
        public static int constructor = 399855457;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_requestCall extends TLObject {
        public static int constructor = NUM;
        public byte[] g_a_hash;
        public TL_phoneCallProtocol protocol;
        public int random_id;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            abstractSerializedData.writeByteArray(this.g_a_hash);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_saveCallDebug extends TLObject {
        public static int constructor = 662363518;
        public TL_dataJSON debug;
        public TL_inputPhoneCall peer;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.debug.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phone_setCallRating extends TLObject {
        public static int constructor = 475228724;
        public String comment;
        public TL_inputPhoneCall peer;
        public int rating;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.rating);
            abstractSerializedData.writeString(this.comment);
        }
    }

    public static class TL_phone_upgradePhoneCall extends TLObject {
        public static int constructor = -NUM;
        public byte[] encryption_key;
        public int flags;
        public long key_fingerprint;
        public TL_inputPhoneCall peer;
        public byte[] streams;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_phone_groupCall.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeByteArray(this.encryption_key);
            }
            abstractSerializedData.writeInt64(this.key_fingerprint);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }

    public static class TL_photos_deletePhotos extends TLObject {
        public static int constructor = -NUM;
        public ArrayList<InputPhoto> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                i.objects.add(Long.valueOf(abstractSerializedData.readInt64(z)));
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputPhoto) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photos_getUserPhotos extends TLObject {
        public static int constructor = -NUM;
        public int limit;
        public long max_id;
        public int offset;
        public InputUser user_id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return photos_Photos.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt64(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_photos_photo extends TLObject {
        public static int constructor = 539045032;
        public Photo photo;
        public ArrayList<User> users = new ArrayList();

        public static TL_photos_photo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_photos_photo();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_photos_photo", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photos_updateProfilePhoto extends TLObject {
        public static int constructor = -256159406;
        public InputPhoto id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return UserProfilePhoto.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_photos_uploadProfilePhoto extends TLObject {
        public static int constructor = NUM;
        public InputFile file;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_photos_photo.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_popularContact extends TLObject {
        public static int constructor = NUM;
        public long client_id;
        public int importers;

        public static TL_popularContact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_popularContact();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_popularContact", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.client_id = abstractSerializedData.readInt64(z);
            this.importers = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.client_id);
            abstractSerializedData.writeInt32(this.importers);
        }
    }

    public static class TL_postAddress extends TLObject {
        public static int constructor = 512535275;
        public String city;
        public String country_iso2;
        public String post_code;
        public String state;
        public String street_line1;
        public String street_line2;

        public static TL_postAddress TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_postAddress();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_postAddress", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.street_line1 = abstractSerializedData.readString(z);
            this.street_line2 = abstractSerializedData.readString(z);
            this.city = abstractSerializedData.readString(z);
            this.state = abstractSerializedData.readString(z);
            this.country_iso2 = abstractSerializedData.readString(z);
            this.post_code = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.street_line1);
            abstractSerializedData.writeString(this.street_line2);
            abstractSerializedData.writeString(this.city);
            abstractSerializedData.writeString(this.state);
            abstractSerializedData.writeString(this.country_iso2);
            abstractSerializedData.writeString(this.post_code);
        }
    }

    public static class TL_receivedNotifyMessage extends TLObject {
        public static int constructor = -NUM;
        public int flags;
        public int id;

        public static TL_receivedNotifyMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_receivedNotifyMessage();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_receivedNotifyMessage", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.flags = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_shippingOption extends TLObject {
        public static int constructor = -NUM;
        public String id;
        public ArrayList<TL_labeledPrice> prices = new ArrayList();
        public String title;

        public static TL_shippingOption TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_shippingOption();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_shippingOption", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readString(z);
            this.title = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_labeledPrice TLdeserialize = TL_labeledPrice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.prices.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.prices.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_labeledPrice) this.prices.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_stickerPack extends TLObject {
        public static int constructor = 313694676;
        public ArrayList<Long> documents = new ArrayList();
        public String emoticon;

        public static TL_stickerPack TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_stickerPack();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_stickerPack", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.emoticon = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.documents.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.emoticon);
            abstractSerializedData.writeInt32(481674261);
            int size = this.documents.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.documents.get(i)).longValue());
            }
        }
    }

    public static class TL_topPeer extends TLObject {
        public static int constructor = -305282981;
        public Peer peer;
        public double rating;

        public static TL_topPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_topPeer();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeer", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.rating = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeDouble(this.rating);
        }
    }

    public static class TL_topPeerCategoryPeers extends TLObject {
        public static int constructor = -75283823;
        public TopPeerCategory category;
        public int count;
        public ArrayList<TL_topPeer> peers = new ArrayList();

        public static TL_topPeerCategoryPeers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_topPeerCategoryPeers();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeerCategoryPeers", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.category = TopPeerCategory.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_topPeer TLdeserialize = TL_topPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.peers.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.category.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_topPeer) this.peers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updates_getChannelDifference extends TLObject {
        public static int constructor = 51854712;
        public InputChannel channel;
        public ChannelMessagesFilter filter;
        public int flags;
        public boolean force;
        public int limit;
        public int pts;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return updates_ChannelDifference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.force ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_updates_getDifference extends TLObject {
        public static int constructor = 630429265;
        public int date;
        public int flags;
        public int pts;
        public int pts_total_limit;
        public int qts;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return updates_Difference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.pts_total_limit);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.qts);
        }
    }

    public static class TL_updates_getState extends TLObject {
        public static int constructor = -304838614;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_updates_state.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updates_state extends TLObject {
        public static int constructor = -NUM;
        public int date;
        public int pts;
        public int qts;
        public int seq;
        public int unread_count;

        public static TL_updates_state TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_updates_state();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_updates_state", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.qts = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.seq = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.qts);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.seq);
            abstractSerializedData.writeInt32(this.unread_count);
        }
    }

    public static class TL_upload_getCdnFile extends TLObject {
        public static int constructor = 536919235;
        public byte[] file_token;
        public int limit;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return upload_CdnFile.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_upload_getCdnFileHashes extends TLObject {
        public static int constructor = NUM;
        public byte[] file_token;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_fileHash TLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_upload_getFile extends TLObject {
        public static int constructor = -475607115;
        public int limit;
        public InputFileLocation location;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return upload_File.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_upload_getFileHashes extends TLObject {
        public static int constructor = -956147407;
        public InputFileLocation location;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_fileHash TLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_upload_getWebFile extends TLObject {
        public static int constructor = 619086221;
        public int limit;
        public TL_inputWebFileLocation location;
        public int offset;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_upload_webFile.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_upload_reuploadCdnFile extends TLObject {
        public static int constructor = -NUM;
        public byte[] file_token;
        public byte[] request_token;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                TL_fileHash TLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeByteArray(this.request_token);
        }
    }

    public static class TL_upload_saveBigFilePart extends TLObject {
        public static int constructor = -562337987;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;
        public int file_total_parts;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeInt32(this.file_total_parts);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!(this.disableFree || this.bytes == null)) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_saveFilePart extends TLObject {
        public static int constructor = -NUM;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!(this.disableFree || this.bytes == null)) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_webFile extends TLObject {
        public static int constructor = 568808380;
        public NativeByteBuffer bytes;
        public storage_FileType file_type;
        public String mime_type;
        public int mtime;
        public int size;

        public static TL_upload_webFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_upload_webFile();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_upload_webFile", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.size = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.file_type = storage_FileType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.mtime = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteBuffer(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            this.file_type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.mtime);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!(this.disableFree || this.bytes == null)) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_userFull extends TLObject {
        public static int constructor = 253890367;
        public String about;
        public boolean blocked;
        public BotInfo bot_info;
        public int common_chats_count;
        public int flags;
        public TL_contacts_link link;
        public PeerNotifySettings notify_settings;
        public boolean phone_calls_available;
        public boolean phone_calls_private;
        public Photo profile_photo;
        public User user;

        public static TL_userFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_userFull();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_userFull", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.blocked = (this.flags & 1) != 0;
            this.phone_calls_available = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.phone_calls_private = z2;
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 2) != 0) {
                this.about = abstractSerializedData.readString(z);
            }
            this.link = TL_contacts_link.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.profile_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 8) != 0) {
                this.bot_info = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.common_chats_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | 1 : this.flags & -2;
            this.flags = this.phone_calls_available ? this.flags | 16 : this.flags & -17;
            this.flags = this.phone_calls_private ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            this.user.serializeToStream(abstractSerializedData);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.about);
            }
            this.link.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.profile_photo.serializeToStream(abstractSerializedData);
            }
            this.notify_settings.serializeToStream(abstractSerializedData);
            if ((this.flags & 8) != 0) {
                this.bot_info.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.common_chats_count);
        }
    }

    public static class TL_users_getFullUser extends TLObject {
        public static int constructor = -902781519;
        public InputUser id;

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_userFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_users_getUsers extends TLObject {
        public static int constructor = 227648840;
        public ArrayList<InputUser> id = new ArrayList();

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            i = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2++) {
                User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    return i;
                }
                i.objects.add(TLdeserialize);
            }
            return i;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_webAuthorization extends TLObject {
        public static int constructor = -892779534;
        public int bot_id;
        public String browser;
        public int date_active;
        public int date_created;
        public String domain;
        public long hash;
        public String ip;
        public String platform;
        public String region;

        public static TL_webAuthorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                i = new TL_webAuthorization();
                i.readParams(abstractSerializedData, z);
                return i;
            } else if (!z) {
                return null;
            } else {
                throw new RuntimeException(String.format("can't parse magic %x in TL_webAuthorization", new Object[]{Integer.valueOf(i)}));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt64(z);
            this.bot_id = abstractSerializedData.readInt32(z);
            this.domain = abstractSerializedData.readString(z);
            this.browser = abstractSerializedData.readString(z);
            this.platform = abstractSerializedData.readString(z);
            this.date_created = abstractSerializedData.readInt32(z);
            this.date_active = abstractSerializedData.readInt32(z);
            this.ip = abstractSerializedData.readString(z);
            this.region = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
            abstractSerializedData.writeInt32(this.bot_id);
            abstractSerializedData.writeString(this.domain);
            abstractSerializedData.writeString(this.browser);
            abstractSerializedData.writeString(this.platform);
            abstractSerializedData.writeInt32(this.date_created);
            abstractSerializedData.writeInt32(this.date_active);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.region);
        }
    }

    public static abstract class TopPeerCategory extends TLObject {
        public static TopPeerCategory TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TopPeerCategory tL_topPeerCategoryBotsPM;
            switch (i) {
                case -1419371685:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryBotsPM();
                    break;
                case -1122524854:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryGroups();
                    break;
                case 104314861:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryCorrespondents();
                    break;
                case 344356834:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryBotsInline();
                    break;
                case 371037736:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryChannels();
                    break;
                case 511092620:
                    tL_topPeerCategoryBotsPM = new TL_topPeerCategoryPhoneCalls();
                    break;
                default:
                    tL_topPeerCategoryBotsPM = null;
                    break;
            }
            if (tL_topPeerCategoryBotsPM == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in TopPeerCategory", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_topPeerCategoryBotsPM != null) {
                tL_topPeerCategoryBotsPM.readParams(abstractSerializedData, z);
            }
            return tL_topPeerCategoryBotsPM;
        }
    }

    public static abstract class Update extends TLObject {
        public static Update TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Update tL_updateUserBlocked;
            switch (i) {
                case -2131957734:
                    tL_updateUserBlocked = new TL_updateUserBlocked();
                    break;
                case -2046916883:
                    tL_updateUserBlocked = new TL_updateGroupCall();
                    break;
                case -1987495099:
                    tL_updateUserBlocked = new TL_updateChannelReadMessagesContents();
                    break;
                case -1906403213:
                    tL_updateUserBlocked = new TL_updateDcOptions();
                    break;
                case -1821035490:
                    tL_updateUserBlocked = new TL_updateSavedGifs();
                    break;
                case -1791935732:
                    tL_updateUserBlocked = new TL_updateUserPhoto();
                    break;
                case -1738988427:
                    tL_updateUserBlocked = new TL_updateChannelPinnedMessage();
                    break;
                case -1734268085:
                    tL_updateUserBlocked = new TL_updateChannelMessageViews();
                    break;
                case -1721631396:
                    tL_updateUserBlocked = new TL_updateReadHistoryInbox();
                    break;
                case -1706939360:
                    tL_updateUserBlocked = new TL_updateRecentStickers();
                    break;
                case -1704596961:
                    tL_updateUserBlocked = new TL_updateChatUserTyping();
                    break;
                case -1657903163:
                    tL_updateUserBlocked = new TL_updateContactLink();
                    break;
                case -1576161051:
                    tL_updateUserBlocked = new TL_updateDeleteMessages();
                    break;
                case -1574314746:
                    tL_updateUserBlocked = new TL_updateConfig();
                    break;
                case -1489818765:
                    tL_updateUserBlocked = new TL_updateUserName();
                    break;
                case -1425052898:
                    tL_updateUserBlocked = new TL_updatePhoneCall();
                    break;
                case -1264392051:
                    tL_updateUserBlocked = new TL_updateEncryption();
                    break;
                case -1232070311:
                    tL_updateUserBlocked = new TL_updateChatParticipantAdmin();
                    break;
                case -1227598250:
                    tL_updateUserBlocked = new TL_updateChannel();
                    break;
                case -1094555409:
                    tL_updateUserBlocked = new TL_updateNotifySettings();
                    break;
                case -1015733815:
                    tL_updateUserBlocked = new TL_updateDeleteChannelMessages();
                    break;
                case -469536605:
                    tL_updateUserBlocked = new TL_updateEditMessage();
                    break;
                case -451831443:
                    tL_updateUserBlocked = new TL_updateFavedStickers();
                    break;
                case -364179876:
                    tL_updateUserBlocked = new TL_updateChatParticipantAdd();
                    break;
                case -364071333:
                    tL_updateUserBlocked = new TL_updatePinnedDialogs();
                    break;
                case -352032773:
                    tL_updateUserBlocked = new TL_updateChannelTooLong();
                    break;
                case -337352679:
                    tL_updateUserBlocked = new TL_updateServiceNotification();
                    break;
                case -299124375:
                    tL_updateUserBlocked = new TL_updateDraftMessage();
                    break;
                case -298113238:
                    tL_updateUserBlocked = new TL_updatePrivacy();
                    break;
                case 92188360:
                    tL_updateUserBlocked = new TL_updateGroupCallParticipant();
                    break;
                case 125178264:
                    tL_updateUserBlocked = new TL_updateChatParticipants();
                    break;
                case 196268545:
                    tL_updateUserBlocked = new TL_updateStickerSetsOrder();
                    break;
                case 281165899:
                    tL_updateUserBlocked = new TL_updateLangPackTooLong();
                    break;
                case 314130811:
                    tL_updateUserBlocked = new TL_updateUserPhone();
                    break;
                case 314359194:
                    tL_updateUserBlocked = new TL_updateNewEncryptedMessage();
                    break;
                case 386986326:
                    tL_updateUserBlocked = new TL_updateEncryptedChatTyping();
                    break;
                case 433225532:
                    tL_updateUserBlocked = new TL_updateDialogPinned();
                    break;
                case 457133559:
                    tL_updateUserBlocked = new TL_updateEditChannelMessage();
                    break;
                case 469489699:
                    tL_updateUserBlocked = new TL_updateUserStatus();
                    break;
                case 522914557:
                    tL_updateUserBlocked = new TL_updateNewMessage();
                    break;
                case 628472761:
                    tL_updateUserBlocked = new TL_updateContactRegistered();
                    break;
                case 634833351:
                    tL_updateUserBlocked = new TL_updateReadChannelOutbox();
                    break;
                case 791617983:
                    tL_updateUserBlocked = new TL_updateReadHistoryOutbox();
                    break;
                case 956179895:
                    tL_updateUserBlocked = new TL_updateEncryptedMessagesRead();
                    break;
                case 1081547008:
                    tL_updateUserBlocked = new TL_updateChannelWebPage();
                    break;
                case 1108669311:
                    tL_updateUserBlocked = new TL_updateReadChannelInbox();
                    break;
                case 1135492588:
                    tL_updateUserBlocked = new TL_updateStickerSets();
                    break;
                case 1318109142:
                    tL_updateUserBlocked = new TL_updateMessageID();
                    break;
                case 1442983757:
                    tL_updateUserBlocked = new TL_updateLangPack();
                    break;
                case 1461528386:
                    tL_updateUserBlocked = new TL_updateReadFeaturedStickers();
                    break;
                case 1548249383:
                    tL_updateUserBlocked = new TL_updateUserTyping();
                    break;
                case 1656358105:
                    tL_updateUserBlocked = new TL_updateNewChannelMessage();
                    break;
                case 1753886890:
                    tL_updateUserBlocked = new TL_updateNewStickerSet();
                    break;
                case 1757493555:
                    tL_updateUserBlocked = new TL_updateReadMessagesContents();
                    break;
                case 1851755554:
                    tL_updateUserBlocked = new TL_updateChatParticipantDelete();
                    break;
                case 1855224129:
                    tL_updateUserBlocked = new TL_updateChatAdmins();
                    break;
                case 1887741886:
                    tL_updateUserBlocked = new TL_updateContactsReset();
                    break;
                case 1893427255:
                    tL_updateUserBlocked = new TL_updateChannelAvailableMessages();
                    break;
                case 2139689491:
                    tL_updateUserBlocked = new TL_updateWebPage();
                    break;
                default:
                    tL_updateUserBlocked = null;
                    break;
            }
            if (tL_updateUserBlocked == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Update", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_updateUserBlocked != null) {
                tL_updateUserBlocked.readParams(abstractSerializedData, z);
            }
            return tL_updateUserBlocked;
        }
    }

    public static abstract class Updates extends TLObject {
        public int chat_id;
        public ArrayList<Chat> chats = new ArrayList();
        public int date;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public int from_id;
        public MessageFwdHeader fwd_from;
        public int id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public int pts;
        public int pts_count;
        public int reply_to_msg_id;
        public int seq;
        public int seq_start;
        public boolean silent;
        public Update update;
        public ArrayList<Update> updates = new ArrayList();
        public int user_id;
        public ArrayList<User> users = new ArrayList();
        public int via_bot_id;

        public static Updates TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Updates tL_updateShortMessage;
            switch (i) {
                case -1857044719:
                    tL_updateShortMessage = new TL_updateShortMessage();
                    break;
                case -484987010:
                    tL_updateShortMessage = new TL_updatesTooLong();
                    break;
                case 301019932:
                    tL_updateShortMessage = new TL_updateShortSentMessage();
                    break;
                case 377562760:
                    tL_updateShortMessage = new TL_updateShortChatMessage();
                    break;
                case 1918567619:
                    tL_updateShortMessage = new TL_updatesCombined();
                    break;
                case 1957577280:
                    tL_updateShortMessage = new TL_updates();
                    break;
                case 2027216577:
                    tL_updateShortMessage = new TL_updateShort();
                    break;
                default:
                    tL_updateShortMessage = null;
                    break;
            }
            if (tL_updateShortMessage == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Updates", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_updateShortMessage != null) {
                tL_updateShortMessage.readParams(abstractSerializedData, z);
            }
            return tL_updateShortMessage;
        }
    }

    public static abstract class User extends TLObject {
        public long access_hash;
        public boolean bot;
        public boolean bot_chat_history;
        public int bot_info_version;
        public boolean bot_inline_geo;
        public String bot_inline_placeholder;
        public boolean bot_nochats;
        public boolean contact;
        public boolean deleted;
        public boolean explicit_content;
        public String first_name;
        public int flags;
        public int id;
        public boolean inactive;
        public String lang_code;
        public String last_name;
        public boolean min;
        public boolean mutual_contact;
        public String phone;
        public UserProfilePhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean self;
        public UserStatus status;
        public String username;
        public boolean verified;

        public static User TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            User tL_userDeleted_old;
            switch (i) {
                case -1298475060:
                    tL_userDeleted_old = new TL_userDeleted_old();
                    break;
                case -894214632:
                    tL_userDeleted_old = new TL_userContact_old2();
                    break;
                case -787638374:
                    tL_userDeleted_old = new TL_user_layer65();
                    break;
                case -704549510:
                    tL_userDeleted_old = new TL_userDeleted_old2();
                    break;
                case -640891665:
                    tL_userDeleted_old = new TL_userRequest_old2();
                    break;
                case -218397927:
                    tL_userDeleted_old = new TL_userContact_old();
                    break;
                case 123533224:
                    tL_userDeleted_old = new TL_userForeign_old2();
                    break;
                case 476112392:
                    tL_userDeleted_old = new TL_userSelf_old3();
                    break;
                case 537022650:
                    tL_userDeleted_old = new TL_userEmpty();
                    break;
                case 585404530:
                    tL_userDeleted_old = new TL_user_old();
                    break;
                case 585682608:
                    tL_userDeleted_old = new TL_userRequest_old();
                    break;
                case 773059779:
                    tL_userDeleted_old = new TL_user();
                    break;
                case 1377093789:
                    tL_userDeleted_old = new TL_userForeign_old();
                    break;
                case 1879553105:
                    tL_userDeleted_old = new TL_userSelf_old2();
                    break;
                case 1912944108:
                    tL_userDeleted_old = new TL_userSelf_old();
                    break;
                default:
                    tL_userDeleted_old = null;
                    break;
            }
            if (tL_userDeleted_old == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in User", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_userDeleted_old != null) {
                tL_userDeleted_old.readParams(abstractSerializedData, z);
            }
            return tL_userDeleted_old;
        }
    }

    public static abstract class UserProfilePhoto extends TLObject {
        public FileLocation photo_big;
        public long photo_id;
        public FileLocation photo_small;

        public static UserProfilePhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            UserProfilePhoto tL_userProfilePhotoEmpty = i != -NUM ? i != -715532088 ? i != NUM ? null : new TL_userProfilePhotoEmpty() : new TL_userProfilePhoto() : new TL_userProfilePhoto_old();
            if (tL_userProfilePhotoEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in UserProfilePhoto", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_userProfilePhotoEmpty != null) {
                tL_userProfilePhotoEmpty.readParams(abstractSerializedData, z);
            }
            return tL_userProfilePhotoEmpty;
        }
    }

    public static abstract class UserStatus extends TLObject {
        public int expires;

        public static UserStatus TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            UserStatus tL_userStatusRecently;
            switch (i) {
                case -496024847:
                    tL_userStatusRecently = new TL_userStatusRecently();
                    break;
                case -306628279:
                    tL_userStatusRecently = new TL_userStatusOnline();
                    break;
                case 9203775:
                    tL_userStatusRecently = new TL_userStatusOffline();
                    break;
                case 129960444:
                    tL_userStatusRecently = new TL_userStatusLastWeek();
                    break;
                case 164646985:
                    tL_userStatusRecently = new TL_userStatusEmpty();
                    break;
                case 2011940674:
                    tL_userStatusRecently = new TL_userStatusLastMonth();
                    break;
                default:
                    tL_userStatusRecently = null;
                    break;
            }
            if (tL_userStatusRecently == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in UserStatus", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_userStatusRecently != null) {
                tL_userStatusRecently.readParams(abstractSerializedData, z);
            }
            return tL_userStatusRecently;
        }
    }

    public static class Vector extends TLObject {
        public static int constructor = 481674261;
        public ArrayList<Object> objects = new ArrayList();
    }

    public static abstract class Video extends TLObject {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        /* renamed from: h */
        public int f53h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public int user_id;
        /* renamed from: w */
        public int f54w;

        public static Video TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Video tL_videoEmpty_layer45;
            switch (i) {
                case -1056548696:
                    tL_videoEmpty_layer45 = new TL_videoEmpty_layer45();
                    break;
                case -291550643:
                    tL_videoEmpty_layer45 = new TL_video_old3();
                    break;
                case -148338733:
                    tL_videoEmpty_layer45 = new TL_video_layer45();
                    break;
                case 948937617:
                    tL_videoEmpty_layer45 = new TL_video_old2();
                    break;
                case 1431655763:
                    tL_videoEmpty_layer45 = new TL_videoEncrypted();
                    break;
                case 1510253727:
                    tL_videoEmpty_layer45 = new TL_video_old();
                    break;
                default:
                    tL_videoEmpty_layer45 = null;
                    break;
            }
            if (tL_videoEmpty_layer45 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in Video", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_videoEmpty_layer45 != null) {
                tL_videoEmpty_layer45.readParams(abstractSerializedData, z);
            }
            return tL_videoEmpty_layer45;
        }
    }

    public static abstract class WallPaper extends TLObject {
        public int bg_color;
        public int color;
        public int id;
        public ArrayList<PhotoSize> sizes = new ArrayList();
        public String title;

        public static WallPaper TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            WallPaper tL_wallPaperSolid = i != -860866985 ? i != NUM ? null : new TL_wallPaperSolid() : new TL_wallPaper();
            if (tL_wallPaperSolid == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in WallPaper", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_wallPaperSolid != null) {
                tL_wallPaperSolid.readParams(abstractSerializedData, z);
            }
            return tL_wallPaperSolid;
        }
    }

    public static abstract class WebDocument extends TLObject {
        public ArrayList<DocumentAttribute> attributes = new ArrayList();
        public String mime_type;
        public int size;
        public String url;

        public static WebDocument TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            WebDocument tL_webDocumentNoProxy = i != -971322408 ? i != -104284986 ? null : new TL_webDocumentNoProxy() : new TL_webDocument();
            if (tL_webDocumentNoProxy == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in WebDocument", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_webDocumentNoProxy != null) {
                tL_webDocumentNoProxy.readParams(abstractSerializedData, z);
            }
            return tL_webDocumentNoProxy;
        }
    }

    public static abstract class WebPage extends TLObject {
        public String author;
        public Page cached_page;
        public int date;
        public String description;
        public String display_url;
        public Document document;
        public int duration;
        public int embed_height;
        public String embed_type;
        public String embed_url;
        public int embed_width;
        public int flags;
        public int hash;
        public long id;
        public Photo photo;
        public String site_name;
        public String title;
        public String type;
        public String url;

        public static WebPage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            WebPage tL_webPageNotModified;
            switch (i) {
                case -2054908813:
                    tL_webPageNotModified = new TL_webPageNotModified();
                    break;
                case -1558273867:
                    tL_webPageNotModified = new TL_webPage_old();
                    break;
                case -981018084:
                    tL_webPageNotModified = new TL_webPagePending();
                    break;
                case -897446185:
                    tL_webPageNotModified = new TL_webPage_layer58();
                    break;
                case -736472729:
                    tL_webPageNotModified = new TL_webPageUrlPending();
                    break;
                case -350980120:
                    tL_webPageNotModified = new TL_webPageEmpty();
                    break;
                case 1594340540:
                    tL_webPageNotModified = new TL_webPage();
                    break;
                default:
                    tL_webPageNotModified = null;
                    break;
            }
            if (tL_webPageNotModified == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in WebPage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_webPageNotModified != null) {
                tL_webPageNotModified.readParams(abstractSerializedData, z);
            }
            return tL_webPageNotModified;
        }
    }

    public static abstract class account_Password extends TLObject {
        public byte[] current_salt;
        public String email_unconfirmed_pattern;
        public boolean has_recovery;
        public String hint;
        public byte[] new_salt;

        public static account_Password TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            account_Password tL_account_password = i != -NUM ? i != NUM ? null : new TL_account_password() : new TL_account_noPassword();
            if (tL_account_password == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in account_Password", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_account_password != null) {
                tL_account_password.readParams(abstractSerializedData, z);
            }
            return tL_account_password;
        }
    }

    public static abstract class auth_CodeType extends TLObject {
        public static auth_CodeType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            auth_CodeType tL_auth_codeTypeCall = i != 577556219 ? i != NUM ? i != NUM ? null : new TL_auth_codeTypeCall() : new TL_auth_codeTypeSms() : new TL_auth_codeTypeFlashCall();
            if (tL_auth_codeTypeCall == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_auth_codeTypeCall != null) {
                tL_auth_codeTypeCall.readParams(abstractSerializedData, z);
            }
            return tL_auth_codeTypeCall;
        }
    }

    public static abstract class auth_SentCodeType extends TLObject {
        public int length;
        public String pattern;

        public static auth_SentCodeType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            auth_SentCodeType tL_auth_sentCodeTypeCall = i != -NUM ? i != -NUM ? i != NUM ? i != NUM ? null : new TL_auth_sentCodeTypeCall() : new TL_auth_sentCodeTypeApp() : new TL_auth_sentCodeTypeSms() : new TL_auth_sentCodeTypeFlashCall();
            if (tL_auth_sentCodeTypeCall == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_auth_sentCodeTypeCall != null) {
                tL_auth_sentCodeTypeCall.readParams(abstractSerializedData, z);
            }
            return tL_auth_sentCodeTypeCall;
        }
    }

    public static abstract class channels_ChannelParticipants extends TLObject {
        public int count;
        public ArrayList<ChannelParticipant> participants = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static channels_ChannelParticipants TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            channels_ChannelParticipants tL_channels_channelParticipants = i != -266911767 ? i != -177282392 ? null : new TL_channels_channelParticipants() : new TL_channels_channelParticipantsNotModified();
            if (tL_channels_channelParticipants == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in channels_ChannelParticipants", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_channels_channelParticipants != null) {
                tL_channels_channelParticipants.readParams(abstractSerializedData, z);
            }
            return tL_channels_channelParticipants;
        }
    }

    public static abstract class contacts_Blocked extends TLObject {
        public ArrayList<TL_contactBlocked> blocked = new ArrayList();
        public int count;
        public ArrayList<User> users = new ArrayList();

        public static contacts_Blocked TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_Blocked tL_contacts_blocked = i != -NUM ? i != 471043349 ? null : new TL_contacts_blocked() : new TL_contacts_blockedSlice();
            if (tL_contacts_blocked == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Blocked", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_contacts_blocked != null) {
                tL_contacts_blocked.readParams(abstractSerializedData, z);
            }
            return tL_contacts_blocked;
        }
    }

    public static abstract class contacts_Contacts extends TLObject {
        public ArrayList<TL_contact> contacts = new ArrayList();
        public int saved_count;
        public ArrayList<User> users = new ArrayList();

        public static contacts_Contacts TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_Contacts tL_contacts_contacts = i != -NUM ? i != -353862078 ? null : new TL_contacts_contacts() : new TL_contacts_contactsNotModified();
            if (tL_contacts_contacts == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Contacts", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_contacts_contacts != null) {
                tL_contacts_contacts.readParams(abstractSerializedData, z);
            }
            return tL_contacts_contacts;
        }
    }

    public static abstract class contacts_TopPeers extends TLObject {
        public ArrayList<TL_topPeerCategoryPeers> categories = new ArrayList();
        public ArrayList<Chat> chats = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static contacts_TopPeers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_TopPeers tL_contacts_topPeers = i != -567906571 ? i != NUM ? null : new TL_contacts_topPeers() : new TL_contacts_topPeersNotModified();
            if (tL_contacts_topPeers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_TopPeers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_contacts_topPeers != null) {
                tL_contacts_topPeers.readParams(abstractSerializedData, z);
            }
            return tL_contacts_topPeers;
        }
    }

    public static abstract class help_AppUpdate extends TLObject {
        public boolean critical;
        public int id;
        public String text;
        public String url;

        public static help_AppUpdate TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            help_AppUpdate tL_help_noAppUpdate = i != -NUM ? i != -NUM ? null : new TL_help_noAppUpdate() : new TL_help_appUpdate();
            if (tL_help_noAppUpdate == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in help_AppUpdate", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_help_noAppUpdate != null) {
                tL_help_noAppUpdate.readParams(abstractSerializedData, z);
            }
            return tL_help_noAppUpdate;
        }
    }

    public static abstract class messages_AllStickers extends TLObject {
        public ArrayList<Document> documents = new ArrayList();
        public String hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList();
        public ArrayList<StickerSet> sets = new ArrayList();

        public static messages_AllStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_AllStickers tL_messages_allStickers = i != -395967805 ? i != -302170017 ? null : new TL_messages_allStickers() : new TL_messages_allStickersNotModified();
            if (tL_messages_allStickers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_allStickers != null) {
                tL_messages_allStickers.readParams(abstractSerializedData, z);
            }
            return tL_messages_allStickers;
        }
    }

    public static abstract class messages_BotResults extends TLObject {
        public int cache_time;
        public int flags;
        public boolean gallery;
        public String next_offset;
        public long query_id;
        public ArrayList<BotInlineResult> results = new ArrayList();
        public TL_inlineBotSwitchPM switch_pm;
        public ArrayList<User> users = new ArrayList();

        public static messages_BotResults TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_BotResults tL_messages_botResults_layer71 = i != -NUM ? i != -858565059 ? null : new TL_messages_botResults_layer71() : new TL_messages_botResults();
            if (tL_messages_botResults_layer71 == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_BotResults", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_botResults_layer71 != null) {
                tL_messages_botResults_layer71.readParams(abstractSerializedData, z);
            }
            return tL_messages_botResults_layer71;
        }
    }

    public static abstract class messages_Chats extends TLObject {
        public ArrayList<Chat> chats = new ArrayList();
        public int count;

        public static messages_Chats TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Chats tL_messages_chats = i != -NUM ? i != NUM ? null : new TL_messages_chats() : new TL_messages_chatsSlice();
            if (tL_messages_chats == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Chats", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_chats != null) {
                tL_messages_chats.readParams(abstractSerializedData, z);
            }
            return tL_messages_chats;
        }
    }

    public static abstract class messages_DhConfig extends TLObject {
        /* renamed from: g */
        public int f55g;
        /* renamed from: p */
        public byte[] f56p;
        public byte[] random;
        public int version;

        public static messages_DhConfig TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_DhConfig tL_messages_dhConfig = i != -NUM ? i != 740433629 ? null : new TL_messages_dhConfig() : new TL_messages_dhConfigNotModified();
            if (tL_messages_dhConfig == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_DhConfig", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_dhConfig != null) {
                tL_messages_dhConfig.readParams(abstractSerializedData, z);
            }
            return tL_messages_dhConfig;
        }
    }

    public static abstract class messages_Dialogs extends TLObject {
        public ArrayList<Chat> chats = new ArrayList();
        public int count;
        public ArrayList<TL_dialog> dialogs = new ArrayList();
        public ArrayList<Message> messages = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static messages_Dialogs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Dialogs tL_messages_dialogsSlice = i != 364538944 ? i != NUM ? null : new TL_messages_dialogsSlice() : new TL_messages_dialogs();
            if (tL_messages_dialogsSlice == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Dialogs", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_dialogsSlice != null) {
                tL_messages_dialogsSlice.readParams(abstractSerializedData, z);
            }
            return tL_messages_dialogsSlice;
        }
    }

    public static abstract class messages_FavedStickers extends TLObject {
        public int hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList();
        public ArrayList<Document> stickers = new ArrayList();

        public static messages_FavedStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_FavedStickers tL_messages_favedStickers = i != -NUM ? i != -209768682 ? null : new TL_messages_favedStickers() : new TL_messages_favedStickersNotModified();
            if (tL_messages_favedStickers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FavedStickers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_favedStickers != null) {
                tL_messages_favedStickers.readParams(abstractSerializedData, z);
            }
            return tL_messages_favedStickers;
        }
    }

    public static abstract class messages_FeaturedStickers extends TLObject {
        public int hash;
        public ArrayList<StickerSetCovered> sets = new ArrayList();
        public ArrayList<Long> unread = new ArrayList();

        public static messages_FeaturedStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_FeaturedStickers tL_messages_featuredStickersNotModified = i != -123893531 ? i != 82699215 ? null : new TL_messages_featuredStickersNotModified() : new TL_messages_featuredStickers();
            if (tL_messages_featuredStickersNotModified == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FeaturedStickers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_featuredStickersNotModified != null) {
                tL_messages_featuredStickersNotModified.readParams(abstractSerializedData, z);
            }
            return tL_messages_featuredStickersNotModified;
        }
    }

    public static abstract class messages_FoundStickerSets extends TLObject {
        public static messages_FoundStickerSets TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_FoundStickerSets tL_messages_foundStickerSets = i != 223655517 ? i != NUM ? null : new TL_messages_foundStickerSets() : new TL_messages_foundStickerSetsNotModified();
            if (tL_messages_foundStickerSets == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FoundStickerSets", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_foundStickerSets != null) {
                tL_messages_foundStickerSets.readParams(abstractSerializedData, z);
            }
            return tL_messages_foundStickerSets;
        }
    }

    public static abstract class messages_Messages extends TLObject {
        public ArrayList<Chat> chats = new ArrayList();
        public int count;
        public int flags;
        public ArrayList<Message> messages = new ArrayList();
        public int pts;
        public ArrayList<User> users = new ArrayList();

        public static messages_Messages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Messages tL_messages_messagesSlice = i != -NUM ? i != -NUM ? i != 189033187 ? null : new TL_messages_messagesSlice() : new TL_messages_channelMessages() : new TL_messages_messages();
            if (tL_messages_messagesSlice == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Messages", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_messagesSlice != null) {
                tL_messages_messagesSlice.readParams(abstractSerializedData, z);
            }
            return tL_messages_messagesSlice;
        }
    }

    public static abstract class messages_RecentStickers extends TLObject {
        public static messages_RecentStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_RecentStickers tL_messages_recentStickers = i != 186120336 ? i != 586395571 ? null : new TL_messages_recentStickers() : new TL_messages_recentStickersNotModified();
            if (tL_messages_recentStickers == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_RecentStickers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_recentStickers != null) {
                tL_messages_recentStickers.readParams(abstractSerializedData, z);
            }
            return tL_messages_recentStickers;
        }
    }

    public static abstract class messages_SavedGifs extends TLObject {
        public ArrayList<Document> gifs = new ArrayList();
        public int hash;

        public static messages_SavedGifs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_SavedGifs tL_messages_savedGifs = i != -402498398 ? i != 772213157 ? null : new TL_messages_savedGifs() : new TL_messages_savedGifsNotModified();
            if (tL_messages_savedGifs == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_SavedGifs", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_savedGifs != null) {
                tL_messages_savedGifs.readParams(abstractSerializedData, z);
            }
            return tL_messages_savedGifs;
        }
    }

    public static abstract class messages_SentEncryptedMessage extends TLObject {
        public int date;
        public EncryptedFile file;

        public static messages_SentEncryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_SentEncryptedMessage tL_messages_sentEncryptedMessage = i != -NUM ? i != NUM ? null : new TL_messages_sentEncryptedMessage() : new TL_messages_sentEncryptedFile();
            if (tL_messages_sentEncryptedMessage == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_SentEncryptedMessage", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_sentEncryptedMessage != null) {
                tL_messages_sentEncryptedMessage.readParams(abstractSerializedData, z);
            }
            return tL_messages_sentEncryptedMessage;
        }
    }

    public static abstract class messages_StickerSetInstallResult extends TLObject {
        public ArrayList<StickerSetCovered> sets = new ArrayList();

        public static messages_StickerSetInstallResult TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_StickerSetInstallResult tL_messages_stickerSetInstallResultSuccess = i != 904138920 ? i != 946083368 ? null : new TL_messages_stickerSetInstallResultSuccess() : new TL_messages_stickerSetInstallResultArchive();
            if (tL_messages_stickerSetInstallResultSuccess == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSetInstallResult", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_stickerSetInstallResultSuccess != null) {
                tL_messages_stickerSetInstallResultSuccess.readParams(abstractSerializedData, z);
            }
            return tL_messages_stickerSetInstallResultSuccess;
        }
    }

    public static abstract class messages_Stickers extends TLObject {
        public String hash;
        public ArrayList<Document> stickers = new ArrayList();

        public static messages_Stickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Stickers tL_messages_stickersNotModified = i != -NUM ? i != -244016606 ? null : new TL_messages_stickersNotModified() : new TL_messages_stickers();
            if (tL_messages_stickersNotModified == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Stickers", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_messages_stickersNotModified != null) {
                tL_messages_stickersNotModified.readParams(abstractSerializedData, z);
            }
            return tL_messages_stickersNotModified;
        }
    }

    public static abstract class payments_PaymentResult extends TLObject {
        public Updates updates;
        public String url;

        public static payments_PaymentResult TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            payments_PaymentResult tL_payments_paymentVerficationNeeded = i != NUM ? i != NUM ? null : new TL_payments_paymentVerficationNeeded() : new TL_payments_paymentResult();
            if (tL_payments_paymentVerficationNeeded == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in payments_PaymentResult", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_payments_paymentVerficationNeeded != null) {
                tL_payments_paymentVerficationNeeded.readParams(abstractSerializedData, z);
            }
            return tL_payments_paymentVerficationNeeded;
        }
    }

    public static abstract class photos_Photos extends TLObject {
        public int count;
        public ArrayList<Photo> photos = new ArrayList();
        public ArrayList<User> users = new ArrayList();

        public static photos_Photos TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            photos_Photos tL_photos_photosSlice = i != -NUM ? i != 352657236 ? null : new TL_photos_photosSlice() : new TL_photos_photos();
            if (tL_photos_photosSlice == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in photos_Photos", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_photos_photosSlice != null) {
                tL_photos_photosSlice.readParams(abstractSerializedData, z);
            }
            return tL_photos_photosSlice;
        }
    }

    public static abstract class storage_FileType extends TLObject {
        public static storage_FileType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            storage_FileType tL_storage_fileUnknown;
            switch (i) {
                case -1432995067:
                    tL_storage_fileUnknown = new TL_storage_fileUnknown();
                    break;
                case -1373745011:
                    tL_storage_fileUnknown = new TL_storage_filePdf();
                    break;
                case -1278304028:
                    tL_storage_fileUnknown = new TL_storage_fileMp4();
                    break;
                case -891180321:
                    tL_storage_fileUnknown = new TL_storage_fileGif();
                    break;
                case 8322574:
                    tL_storage_fileUnknown = new TL_storage_fileJpeg();
                    break;
                case 172975040:
                    tL_storage_fileUnknown = new TL_storage_filePng();
                    break;
                case 276907596:
                    tL_storage_fileUnknown = new TL_storage_fileWebp();
                    break;
                case 1086091090:
                    tL_storage_fileUnknown = new TL_storage_filePartial();
                    break;
                case 1258941372:
                    tL_storage_fileUnknown = new TL_storage_fileMov();
                    break;
                case 1384777335:
                    tL_storage_fileUnknown = new TL_storage_fileMp3();
                    break;
                default:
                    tL_storage_fileUnknown = null;
                    break;
            }
            if (tL_storage_fileUnknown == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in storage_FileType", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_storage_fileUnknown != null) {
                tL_storage_fileUnknown.readParams(abstractSerializedData, z);
            }
            return tL_storage_fileUnknown;
        }
    }

    public static abstract class updates_ChannelDifference extends TLObject {
        public ArrayList<Chat> chats = new ArrayList();
        public int flags;
        public boolean isFinal;
        public ArrayList<Message> messages = new ArrayList();
        public ArrayList<Message> new_messages = new ArrayList();
        public ArrayList<Update> other_updates = new ArrayList();
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int timeout;
        public int top_message;
        public int unread_count;
        public int unread_mentions_count;
        public ArrayList<User> users = new ArrayList();

        public static updates_ChannelDifference TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            updates_ChannelDifference tL_updates_channelDifferenceTooLong = i != 543450958 ? i != NUM ? i != NUM ? null : new TL_updates_channelDifferenceTooLong() : new TL_updates_channelDifferenceEmpty() : new TL_updates_channelDifference();
            if (tL_updates_channelDifferenceTooLong == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in updates_ChannelDifference", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_updates_channelDifferenceTooLong != null) {
                tL_updates_channelDifferenceTooLong.readParams(abstractSerializedData, z);
            }
            return tL_updates_channelDifferenceTooLong;
        }
    }

    public static abstract class updates_Difference extends TLObject {
        public ArrayList<Chat> chats = new ArrayList();
        public int date;
        public TL_updates_state intermediate_state;
        public ArrayList<EncryptedMessage> new_encrypted_messages = new ArrayList();
        public ArrayList<Message> new_messages = new ArrayList();
        public ArrayList<Update> other_updates = new ArrayList();
        public int pts;
        public int seq;
        public TL_updates_state state;
        public ArrayList<User> users = new ArrayList();

        public static updates_Difference TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            updates_Difference tL_updates_differenceEmpty = i != -NUM ? i != 16030880 ? i != NUM ? i != NUM ? null : new TL_updates_differenceEmpty() : new TL_updates_differenceTooLong() : new TL_updates_difference() : new TL_updates_differenceSlice();
            if (tL_updates_differenceEmpty == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in updates_Difference", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_updates_differenceEmpty != null) {
                tL_updates_differenceEmpty.readParams(abstractSerializedData, z);
            }
            return tL_updates_differenceEmpty;
        }
    }

    public static abstract class upload_CdnFile extends TLObject {
        public NativeByteBuffer bytes;
        public byte[] request_token;

        public static upload_CdnFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            upload_CdnFile tL_upload_cdnFileReuploadNeeded = i != -NUM ? i != -290921362 ? null : new TL_upload_cdnFileReuploadNeeded() : new TL_upload_cdnFile();
            if (tL_upload_cdnFileReuploadNeeded == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in upload_CdnFile", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_upload_cdnFileReuploadNeeded != null) {
                tL_upload_cdnFileReuploadNeeded.readParams(abstractSerializedData, z);
            }
            return tL_upload_cdnFileReuploadNeeded;
        }
    }

    public static abstract class upload_File extends TLObject {
        public NativeByteBuffer bytes;
        public int dc_id;
        public byte[] encryption_iv;
        public byte[] encryption_key;
        public ArrayList<TL_fileHash> file_hashes = new ArrayList();
        public byte[] file_token;
        public int mtime;
        public storage_FileType type;

        public static upload_File TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            upload_File tL_upload_file = i != -242427324 ? i != 157948117 ? null : new TL_upload_file() : new TL_upload_fileCdnRedirect();
            if (tL_upload_file == null && z) {
                throw new RuntimeException(String.format("can't parse magic %x in upload_File", new Object[]{Integer.valueOf(i)}));
            }
            if (tL_upload_file != null) {
                tL_upload_file.readParams(abstractSerializedData, z);
            }
            return tL_upload_file;
        }
    }

    public static class TL_account_noPassword extends account_Password {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.new_salt = abstractSerializedData.readByteArray(z);
            this.email_unconfirmed_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.new_salt);
            abstractSerializedData.writeString(this.email_unconfirmed_pattern);
        }
    }

    public static class TL_account_password extends account_Password {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.current_salt = abstractSerializedData.readByteArray(z);
            this.new_salt = abstractSerializedData.readByteArray(z);
            this.hint = abstractSerializedData.readString(z);
            this.has_recovery = abstractSerializedData.readBool(z);
            this.email_unconfirmed_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_salt);
            abstractSerializedData.writeByteArray(this.new_salt);
            abstractSerializedData.writeString(this.hint);
            abstractSerializedData.writeBool(this.has_recovery);
            abstractSerializedData.writeString(this.email_unconfirmed_pattern);
        }
    }

    public static class TL_audioEmpty_layer45 extends Audio {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_audio_layer45 extends Audio {
        public static int constructor = -102543275;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_auth_codeTypeCall extends auth_CodeType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeFlashCall extends auth_CodeType {
        public static int constructor = 577556219;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeSms extends auth_CodeType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_sentCodeTypeApp extends auth_SentCodeType {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeCall extends auth_SentCodeType {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeFlashCall extends auth_SentCodeType {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.pattern);
        }
    }

    public static class TL_auth_sentCodeTypeSms extends auth_SentCodeType {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_boolFalse extends Bool {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_boolTrue extends Bool {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_botInfo extends BotInfo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.description = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_botCommand TLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.commands.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.description);
            abstractSerializedData.writeInt32(481674261);
            int size = this.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_botCommand) this.commands.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMediaResult extends BotInlineResult {
        public static int constructor = 400266251;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readString(z);
            this.type = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 4) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            this.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.type);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            this.send_message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_botInlineMessageMediaAuto extends BotInlineMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 2) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaContact extends BotInlineMessage {
        public static int constructor = 904770772;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo extends BotInlineMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.period = abstractSerializedData.readInt32(z);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.period);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaVenue extends BotInlineMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageText extends BotInlineMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.no_webpage = (this.flags & 1) != 0;
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 2) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineResult extends BotInlineResult {
        public static int constructor = 295067450;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readString(z);
            this.type = abstractSerializedData.readString(z);
            if ((this.flags & 2) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.thumb = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32) != 0) {
                this.content = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.type);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 16) != 0) {
                this.thumb.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32) != 0) {
                this.content.serializeToStream(abstractSerializedData);
            }
            this.send_message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channel extends Chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.democracy = (this.flags & 1024) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z2 = false;
            }
            this.min = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & 64) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & 512) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.admin_rights = TL_channelAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights = TL_channelBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 131072) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.democracy ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.admin_rights.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 131072) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
        }
    }

    public static class TL_channelAdminLogEventActionChangeAbout extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public String new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_value = abstractSerializedData.readString(z);
            this.new_value = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionChangePhoto extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.new_photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.prev_photo.serializeToStream(abstractSerializedData);
            this.new_photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionChangeStickerSet extends ChannelAdminLogEventAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.new_stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.prev_stickerset.serializeToStream(abstractSerializedData);
            this.new_stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionChangeTitle extends ChannelAdminLogEventAction {
        public static int constructor = -421545947;
        public String new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_value = abstractSerializedData.readString(z);
            this.new_value = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionChangeUsername extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public String new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_value = abstractSerializedData.readString(z);
            this.new_value = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionDeleteMessage extends ChannelAdminLogEventAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionEditMessage extends ChannelAdminLogEventAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.new_message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.prev_message.serializeToStream(abstractSerializedData);
            this.new_message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantInvite extends ChannelAdminLogEventAction {
        public static int constructor = -484690728;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.participant.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantJoin extends ChannelAdminLogEventAction {
        public static int constructor = 405815507;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantLeave extends ChannelAdminLogEventAction {
        public static int constructor = -124291086;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantToggleAdmin extends ChannelAdminLogEventAction {
        public static int constructor = -714643696;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.new_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.prev_participant.serializeToStream(abstractSerializedData);
            this.new_participant.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionParticipantToggleBan extends ChannelAdminLogEventAction {
        public static int constructor = -422036098;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.prev_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.new_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.prev_participant.serializeToStream(abstractSerializedData);
            this.new_participant.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelAdminLogEventActionToggleInvites extends ChannelAdminLogEventAction {
        public static int constructor = 460916654;
        public boolean new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.new_value = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionTogglePreHistoryHidden extends ChannelAdminLogEventAction {
        public static int constructor = NUM;
        public boolean new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.new_value = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionToggleSignatures extends ChannelAdminLogEventAction {
        public static int constructor = 648939889;
        public boolean new_value;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.new_value = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }

    public static class TL_channelAdminLogEventActionUpdatePinned extends ChannelAdminLogEventAction {
        public static int constructor = -370660328;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelForbidden extends Chat {
        public static int constructor = 681420594;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.broadcast = (this.flags & 32) != 0;
            if ((this.flags & 256) != 0) {
                z2 = true;
            }
            this.megagroup = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                this.until_date = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                abstractSerializedData.writeInt32(this.until_date);
            }
        }
    }

    public static class TL_channelFull extends ChatFull {
        public static int constructor = -877254512;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 2048) != 0) {
                    this.call_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.banned_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeInt32(this.available_min_id);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeInt32(this.call_msg_id);
            }
        }
    }

    public static class TL_channelMessagesFilter extends ChannelMessagesFilter {
        public static int constructor = -847783593;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.exclude_new_messages = (this.flags & 2) != 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_messageRange TLdeserialize = TL_messageRange.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.ranges.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.exclude_new_messages ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.ranges.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_messageRange) this.ranges.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channelMessagesFilterEmpty extends ChannelMessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipant extends ChannelParticipant {
        public static int constructor = 367766557;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantAdmin extends ChannelParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.can_edit = z2;
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.promoted_by = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_rights = TL_channelAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_edit ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.promoted_by);
            abstractSerializedData.writeInt32(this.date);
            this.admin_rights.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelParticipantBanned extends ChannelParticipant {
        public static int constructor = 573315206;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.left = z2;
            this.user_id = abstractSerializedData.readInt32(z);
            this.kicked_by = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.banned_rights = TL_channelBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.left ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.kicked_by);
            abstractSerializedData.writeInt32(this.date);
            this.banned_rights.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelParticipantCreator extends ChannelParticipant {
        public static int constructor = -471670279;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_channelParticipantKicked_layer67 extends ChannelParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.kicked_by = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.kicked_by);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantSelf extends ChannelParticipant {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantsAdmins extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsBanned extends ChannelParticipantsFilter {
        public static int constructor = 338142689;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.q = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsBots extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsKicked extends ChannelParticipantsFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.q = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.q);
        }
    }

    public static class TL_channelParticipantsRecent extends ChannelParticipantsFilter {
        public static int constructor = -566281095;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsSearch extends ChannelParticipantsFilter {
        public static int constructor = 106343499;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.q = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.q);
        }
    }

    public static class TL_channels_channelParticipants extends channels_ChannelParticipants {
        public static int constructor = -177282392;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    ChannelParticipant TLdeserialize = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((ChannelParticipant) this.participants.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_channels_channelParticipantsNotModified extends channels_ChannelParticipants {
        public static int constructor = -266911767;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_chat extends Chat {
        public static int constructor = -652419756;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.admins_enabled = (this.flags & 8) != 0;
            this.admin = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.deactivated = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & 64) != 0) {
                this.migrated_to = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.admins_enabled ? this.flags | 8 : this.flags & -9;
            this.flags = this.admin ? this.flags | 16 : this.flags & -17;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & 64) != 0) {
                this.migrated_to.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatChannelParticipant extends ChatParticipant {
        public static int constructor = -925415106;
        public ChannelParticipant channelParticipant;
    }

    public static class TL_chatEmpty extends Chat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = "DELETED";
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_chatForbidden extends Chat {
        public static int constructor = 120753115;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_chatFull extends ChatFull {
        public static int constructor = 771925524;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            this.participants.serializeToStream(abstractSerializedData);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatInvite extends ChatInvite {
        public static int constructor = -613092008;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.channel = (this.flags & 1) != 0;
            this.broadcast = (this.flags & 2) != 0;
            this.isPublic = (this.flags & 4) != 0;
            this.megagroup = (this.flags & 8) != 0;
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            if ((this.flags & 16) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.participants.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.channel ? this.flags | 1 : this.flags & -2;
            this.flags = this.broadcast ? this.flags | 2 : this.flags & -3;
            this.flags = this.isPublic ? this.flags | 4 : this.flags & -5;
            this.flags = this.megagroup ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.participants.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((User) this.participants.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_chatInviteAlready extends ChatInvite {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.chat.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_chatInviteEmpty extends ExportedChatInvite {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_chatInviteExported extends ExportedChatInvite {
        public static int constructor = -64092740;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.link = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.link);
        }
    }

    public static class TL_chatParticipant extends ChatParticipant {
        public static int constructor = -925415106;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantAdmin extends ChatParticipant {
        public static int constructor = -489233354;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantCreator extends ChatParticipant {
        public static int constructor = -636267638;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_chatParticipants extends ChatParticipants {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    ChatParticipant TLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.version = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((ChatParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chatParticipantsForbidden extends ChatParticipants {
        public static int constructor = -57668565;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.self_participant = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.chat_id);
            if ((this.flags & 1) != 0) {
                this.self_participant.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatPhoto extends ChatPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_chatPhotoEmpty extends ChatPhoto {
        public static int constructor = 935395612;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkContact extends ContactLink {
        public static int constructor = -721239344;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkHasPhone extends ContactLink {
        public static int constructor = 646922073;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkNone extends ContactLink {
        public static int constructor = -17968211;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkUnknown extends ContactLink {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_blocked extends contacts_Blocked {
        public static int constructor = 471043349;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_contactBlocked TLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocked.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocked.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_contactBlocked) this.blocked.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_contacts_blockedSlice extends contacts_Blocked {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_contactBlocked TLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocked.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocked.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_contactBlocked) this.blocked.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_contacts_contacts extends contacts_Contacts {
        public static int constructor = -353862078;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_contact TLdeserialize = TL_contact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.contacts.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                this.saved_count = abstractSerializedData.readInt32(z);
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_contact) this.contacts.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.saved_count);
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_contacts_contactsNotModified extends contacts_Contacts {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_topPeers extends contacts_TopPeers {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_topPeerCategoryPeers TLdeserialize = TL_topPeerCategoryPeers.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.categories.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.categories.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_topPeerCategoryPeers) this.categories.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_contacts_topPeersNotModified extends contacts_TopPeers {
        public static int constructor = -567906571;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessage extends DecryptedMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.random_id = abstractSerializedData.readInt64(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_random_id = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = abstractSerializedData.readInt64(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
            if ((this.flags & 131072) != 0) {
                abstractSerializedData.writeInt64(this.grouped_id);
            }
        }
    }

    public static class TL_decryptedMessageActionAbortKey extends DecryptedMessageAction {
        public static int constructor = -586814357;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
        }
    }

    public static class TL_decryptedMessageActionAcceptKey extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.g_b = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeByteArray(this.g_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionCommitKey extends DecryptedMessageAction {
        public static int constructor = -332526693;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionDeleteMessages extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionFlushHistory extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageActionNoop extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageActionNotifyLayer extends DecryptedMessageAction {
        public static int constructor = -217806717;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.layer = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.layer);
        }
    }

    public static class TL_decryptedMessageActionReadMessages extends DecryptedMessageAction {
        public static int constructor = 206520510;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionRequestKey extends DecryptedMessageAction {
        public static int constructor = -204906213;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.g_a = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_decryptedMessageActionResend extends DecryptedMessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.start_seq_no = abstractSerializedData.readInt32(z);
            this.end_seq_no = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.start_seq_no);
            abstractSerializedData.writeInt32(this.end_seq_no);
        }
    }

    public static class TL_decryptedMessageActionScreenshotMessages extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionSetMessageTTL extends DecryptedMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.ttl_seconds = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.ttl_seconds);
        }
    }

    public static class TL_decryptedMessageActionTyping extends DecryptedMessageAction {
        public static int constructor = -860719551;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessageMediaAudio extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaContact extends DecryptedMessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_decryptedMessageMediaDocument extends DecryptedMessageMedia {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.caption = abstractSerializedData.readString(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaEmpty extends DecryptedMessageMedia {
        public static int constructor = 144661578;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageMediaExternalDocument extends DecryptedMessageMedia {
        public static int constructor = -90853155;
        public PhotoSize thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_decryptedMessageMediaGeoPoint extends DecryptedMessageMedia {
        public static int constructor = 893913689;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
        }
    }

    public static class TL_decryptedMessageMediaPhoto extends DecryptedMessageMedia {
        public static int constructor = -235238024;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaVenue extends DecryptedMessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
        }
    }

    public static class TL_decryptedMessageMediaVideo extends DecryptedMessageMedia {
        public static int constructor = -NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaWebPage extends DecryptedMessageMedia {
        public static int constructor = -452652584;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_decryptedMessageService extends DecryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dialogPeer extends DialogPeer {
        public static int constructor = -445792507;
        public Peer peer;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dialogPeerFeed extends DialogPeer {
        public static int constructor = -633170927;
        public int feed_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.feed_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.feed_id);
        }
    }

    public static class TL_document extends Document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_documentAttributeAnimated extends DocumentAttribute {
        public static int constructor = 297109817;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeAudio extends DocumentAttribute {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.voice = (this.flags & 1024) != 0;
            this.duration = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.performer = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.waveform = abstractSerializedData.readByteArray(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.voice ? this.flags | 1024 : this.flags & -1025;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.duration);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.performer);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeByteArray(this.waveform);
            }
        }
    }

    public static class TL_documentAttributeFilename extends DocumentAttribute {
        public static int constructor = 358154344;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.file_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.file_name);
        }
    }

    public static class TL_documentAttributeHasStickers extends DocumentAttribute {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeImageSize extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_documentAttributeSticker extends DocumentAttribute {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.mask = (this.flags & 2) != 0;
            this.alt = abstractSerializedData.readString(z);
            this.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.mask_coords = TL_maskCoords.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.mask ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.alt);
            this.stickerset.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                this.mask_coords.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_documentAttributeVideo extends DocumentAttribute {
        public static int constructor = 250621158;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.round_message = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z2 = false;
            }
            this.supports_streaming = z2;
            this.duration = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.round_message ? this.flags | 1 : this.flags & -2;
            this.flags = this.supports_streaming ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_documentEmpty extends Document {
        public static int constructor = 922273905;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_documentEncrypted extends Document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.key = abstractSerializedData.readByteArray(z);
                this.iv = abstractSerializedData.readByteArray(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_draftMessage extends DraftMessage {
        public static int constructor = -40996577;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.no_webpage = (this.flags & 2) != 0;
            if ((this.flags & 1) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 8) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_draftMessageEmpty extends DraftMessage {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_encryptedChat extends EncryptedChat {
        public static int constructor = -94974410;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_or_b = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_or_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedChatDiscarded extends EncryptedChat {
        public static int constructor = 332848423;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatEmpty extends EncryptedChat {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatRequested extends EncryptedChat {
        public static int constructor = -931638658;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_encryptedChatWaiting extends EncryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
        }
    }

    public static class TL_encryptedFile extends EncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_encryptedFileEmpty extends EncryptedFile {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_encryptedMessage extends EncryptedMessage {
        public static int constructor = -317144808;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
            this.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.bytes);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_encryptedMessageService extends EncryptedMessage {
        public static int constructor = 594758406;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_fileEncryptedLocation extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_fileLocation extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_fileLocationUnavailable extends FileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_foundGif extends FoundGif {
        public static int constructor = 372165663;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.thumb_url = abstractSerializedData.readString(z);
            this.content_url = abstractSerializedData.readString(z);
            this.content_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.thumb_url);
            abstractSerializedData.writeString(this.content_url);
            abstractSerializedData.writeString(this.content_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_foundGifCached extends FoundGif {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            this.photo.serializeToStream(abstractSerializedData);
            this.document.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geoPoint extends GeoPoint {
        public static int constructor = 541710092;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this._long = abstractSerializedData.readDouble(z);
            this.lat = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this._long);
            abstractSerializedData.writeDouble(this.lat);
        }
    }

    public static class TL_geoPointEmpty extends GeoPoint {
        public static int constructor = 286776671;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_groupCall extends GroupCall {
        public static int constructor = 177149476;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            if ((this.flags & 1) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            this.admin_id = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.encryption_key = abstractSerializedData.readByteArray(z);
            }
            this.key_fingerprint = abstractSerializedData.readInt64(z);
            this.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.connection = TL_groupCallConnection.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.reflector_group_tag = abstractSerializedData.readByteArray(z);
            this.reflector_self_tag = abstractSerializedData.readByteArray(z);
            this.reflector_self_secret = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            abstractSerializedData.writeInt32(this.admin_id);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeByteArray(this.encryption_key);
            }
            abstractSerializedData.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(abstractSerializedData);
            this.connection.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.reflector_group_tag);
            abstractSerializedData.writeByteArray(this.reflector_self_tag);
            abstractSerializedData.writeByteArray(this.reflector_self_secret);
        }
    }

    public static class TL_groupCallDiscarded extends GroupCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.duration = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.duration);
        }
    }

    public static class TL_groupCallParticipant extends GroupCallParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.readonly = z2;
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.member_tag_hash = abstractSerializedData.readByteArray(z);
            this.streams = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.readonly ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.member_tag_hash);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }

    public static class TL_groupCallParticipantAdmin extends GroupCallParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.member_tag_hash = abstractSerializedData.readByteArray(z);
            this.streams = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeByteArray(this.member_tag_hash);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }

    public static class TL_groupCallParticipantInvited extends GroupCallParticipant {
        public static int constructor = 930387696;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.phone_call = TL_inputPhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
            if ((this.flags & 1) != 0) {
                this.phone_call.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_groupCallParticipantLeft extends GroupCallParticipant {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_groupCallPrivate extends GroupCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            if ((this.flags & 1) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            this.participants_count = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.admin_id);
        }
    }

    public static class TL_help_appUpdate extends help_AppUpdate {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.critical = abstractSerializedData.readBool(z);
            this.url = abstractSerializedData.readString(z);
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeBool(this.critical);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_help_noAppUpdate extends help_AppUpdate {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputChannel extends InputChannel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputChannelEmpty extends InputChannel {
        public static int constructor = -292807034;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputChatPhoto extends InputChatPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputChatPhotoEmpty extends InputChatPhoto {
        public static int constructor = 480546647;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputChatUploadedPhoto extends InputChatPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputDialogPeer extends InputDialogPeer {
        public static int constructor = -55902537;
        public InputPeer peer;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputDialogPeerFeed extends InputDialogPeer {
        public static int constructor = 741914831;
        public int feed_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.feed_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.feed_id);
        }
    }

    public static class TL_inputDocument extends InputDocument {
        public static int constructor = 410618194;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputDocumentEmpty extends InputDocument {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputDocumentFileLocation extends InputFileLocation {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFile extends InputEncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFileBigUploaded extends InputEncryptedFile {
        public static int constructor = 767652808;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_inputEncryptedFileEmpty extends InputEncryptedFile {
        public static int constructor = 406307684;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputEncryptedFileLocation extends InputFileLocation {
        public static int constructor = -182231723;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFileUploaded extends InputEncryptedFile {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.md5_checksum = abstractSerializedData.readString(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.md5_checksum);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_inputFile extends InputFile {
        public static int constructor = -181407105;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.name = abstractSerializedData.readString(z);
            this.md5_checksum = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.name);
            abstractSerializedData.writeString(this.md5_checksum);
        }
    }

    public static class TL_inputFileBig extends InputFile {
        public static int constructor = -95482955;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.name);
        }
    }

    public static class TL_inputFileLocation extends InputFileLocation {
        public static int constructor = 342061462;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_inputGameID extends InputGame {
        public static int constructor = 53231223;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputGameShortName extends InputGame {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.bot_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.bot_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class TL_inputGeoPoint extends InputGeoPoint {
        public static int constructor = -206066487;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
        }
    }

    public static class TL_inputGeoPointEmpty extends InputGeoPoint {
        public static int constructor = -457104426;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMediaContact extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_inputMediaDocument extends InputMedia {
        public static int constructor = 598418386;
        public InputDocument id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaDocumentExternal extends InputMedia {
        public static int constructor = -78455655;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.url = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.url);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaEmpty extends InputMedia {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMediaGame extends InputMedia {
        public static int constructor = -750828557;
        public InputGame id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputGame.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMediaGeoLive extends InputMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.period = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.period);
        }
    }

    public static class TL_inputMediaGeoPoint extends InputMedia {
        public static int constructor = -104578748;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMediaGifExternal extends InputMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.q = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.q);
        }
    }

    public static class TL_inputMediaPhoto extends InputMedia {
        public static int constructor = -NUM;
        public InputPhoto id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaPhotoExternal extends InputMedia {
        public static int constructor = -440664550;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.url = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.url);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaUploadedDocument extends InputMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.nosound_video = (this.flags & 8) != 0;
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.thumb = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.mime_type = abstractSerializedData.readString(z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 1) != 0) {
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            InputDocument TLdeserialize2 = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize2 != null) {
                                this.stickers.add(TLdeserialize2);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2) != 0) {
                    this.ttl_seconds = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.nosound_video ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            this.file.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.thumb.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((DocumentAttribute) this.attributes.get(i2)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size2 = this.stickers.size();
                abstractSerializedData.writeInt32(size2);
                while (i < size2) {
                    ((InputDocument) this.stickers.get(i)).serializeToStream(abstractSerializedData);
                    i++;
                }
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaUploadedPhoto extends InputMedia {
        public static int constructor = 505969924;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        InputDocument TLdeserialize = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.stickers.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.file.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.stickers.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((InputDocument) this.stickers.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_inputMediaVenue extends InputMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
            this.venue_type = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
            abstractSerializedData.writeString(this.venue_type);
        }
    }

    public static class TL_inputMessageEntityMentionName extends MessageEntity {
        public static int constructor = 546203849;
        public InputUser user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.user_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMessagesFilterChatPhotos extends MessagesFilter {
        public static int constructor = 975236280;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterContacts extends MessagesFilter {
        public static int constructor = -530392189;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterDocument extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterEmpty extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterGeo extends MessagesFilter {
        public static int constructor = -419271411;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterGif extends MessagesFilter {
        public static int constructor = -3644025;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterMusic extends MessagesFilter {
        public static int constructor = 928101534;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterMyMentions extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhoneCalls extends MessagesFilter {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = true;
            if ((this.flags & 1) == null) {
                z = false;
            }
            this.missed = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.missed ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideo extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideoDocuments extends MessagesFilter {
        public static int constructor = -648121413;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotos extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterRoundVideo extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterRoundVoice extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterUrl extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVideo extends MessagesFilter {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVoice extends MessagesFilter {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyAll extends InputNotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyChats extends InputNotifyPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyPeer extends InputNotifyPeer {
        public static int constructor = -NUM;
        public InputPeer peer;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputNotifyUsers extends InputNotifyPeer {
        public static int constructor = 423314455;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPaymentCredentials extends InputPaymentCredentials {
        public static int constructor = 873977640;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.save = z2;
            this.data = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.save ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.data.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputPaymentCredentialsAndroidPay extends InputPaymentCredentials {
        public static int constructor = -905587442;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.payment_token = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.google_transaction_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.payment_token.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.google_transaction_id);
        }
    }

    public static class TL_inputPaymentCredentialsSaved extends InputPaymentCredentials {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readString(z);
            this.tmp_password = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeByteArray(this.tmp_password);
        }
    }

    public static class TL_inputPeerChannel extends InputPeer {
        public static int constructor = 548253432;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerChat extends InputPeer {
        public static int constructor = 396093539;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_inputPeerEmpty extends InputPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerNotifyEventsAll extends InputPeerNotifyEvents {
        public static int constructor = -395694988;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerNotifyEventsEmpty extends InputPeerNotifyEvents {
        public static int constructor = -265263912;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerSelf extends InputPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerUser extends InputPeer {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPhoto extends InputPhoto {
        public static int constructor = -74070332;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPhotoEmpty extends InputPhoto {
        public static int constructor = 483901197;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyChatInvite extends InputPrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyPhoneCall extends InputPrivacyKey {
        public static int constructor = -88417185;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyStatusTimestamp extends InputPrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowAll extends InputPrivacyRule {
        public static int constructor = 407582158;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowContacts extends InputPrivacyRule {
        public static int constructor = 218751099;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowUsers extends InputPrivacyRule {
        public static int constructor = 320652927;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    InputUser TLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_inputPrivacyValueDisallowAll extends InputPrivacyRule {
        public static int constructor = -697604407;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueDisallowContacts extends InputPrivacyRule {
        public static int constructor = 195371015;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueDisallowUsers extends InputPrivacyRule {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    InputUser TLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_inputReportReasonOther extends ReportReason {
        public static int constructor = -512463606;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_inputReportReasonPornography extends ReportReason {
        public static int constructor = 777640226;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonSpam extends ReportReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonViolence extends ReportReason {
        public static int constructor = 505595789;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputStickerSetEmpty extends InputStickerSet {
        public static int constructor = -4838507;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputStickerSetID extends InputStickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputStickerSetShortName extends InputStickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class TL_inputStickeredMediaDocument extends InputStickeredMedia {
        public static int constructor = 70813275;
        public InputDocument id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputStickeredMediaPhoto extends InputStickeredMedia {
        public static int constructor = NUM;
        public InputPhoto id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputUser extends InputUser {
        public static int constructor = -668391402;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputUserEmpty extends InputUser {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputUserSelf extends InputUser {
        public static int constructor = -138301121;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_keyboardButton extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonBuy extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonCallback extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.data = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeByteArray(this.data);
        }
    }

    public static class TL_keyboardButtonGame extends KeyboardButton {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonRequestGeoLocation extends KeyboardButton {
        public static int constructor = -59151553;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonRequestPhone extends KeyboardButton {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonSwitchInline extends KeyboardButton {
        public static int constructor = 90744648;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.same_peer = z2;
            this.text = abstractSerializedData.readString(z);
            this.query = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.same_peer ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.query);
        }
    }

    public static class TL_keyboardButtonUrl extends KeyboardButton {
        public static int constructor = 629866245;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_langPackString extends LangPackString {
        public static int constructor = -892239370;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.key = abstractSerializedData.readString(z);
            this.value = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.key);
            abstractSerializedData.writeString(this.value);
        }
    }

    public static class TL_langPackStringDeleted extends LangPackString {
        public static int constructor = 695856818;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.key = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.key);
        }
    }

    public static class TL_langPackStringPluralized extends LangPackString {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.zero_value = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.one_value = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.two_value = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.few_value = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.many_value = abstractSerializedData.readString(z);
            }
            this.other_value = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.key);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.zero_value);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.one_value);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.two_value);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.few_value);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeString(this.many_value);
            }
            abstractSerializedData.writeString(this.other_value);
        }
    }

    public static class TL_message extends Message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.post = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                this.post_author = abstractSerializedData.readString(z);
            }
            if ((this.flags & 131072) != 0) {
                this.grouped_id = abstractSerializedData.readInt64(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 1024) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                abstractSerializedData.writeInt32(this.edit_date);
            }
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                abstractSerializedData.writeString(this.post_author);
            }
            if ((this.flags & 131072) != 0) {
                abstractSerializedData.writeInt64(this.grouped_id);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_messageActionBotAllowed extends MessageAction {
        public static int constructor = -NUM;
        public String domain;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.domain = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.domain);
        }
    }

    public static class TL_messageActionChannelCreate extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messageActionChannelMigrateFrom extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messageActionChatAddUser extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_messageActionChatCreate extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_messageActionChatDeletePhoto extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatDeleteUser extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageActionChatEditPhoto extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageActionChatEditTitle extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messageActionChatJoinedByLink extends MessageAction {
        public static int constructor = -123931160;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.inviter_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.inviter_id);
        }
    }

    public static class TL_messageActionChatMigrateTo extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_messageActionCreatedBroadcastList extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionCustomAction extends MessageAction {
        public static int constructor = -85549226;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_messageActionEmpty extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionGameScore extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.game_id = abstractSerializedData.readInt64(z);
            this.score = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.game_id);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messageActionGroupCall extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.call = TL_inputGroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.call.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
        }
    }

    public static class TL_messageActionHistoryClear extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionLoginUnknownLocation extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
        }
    }

    public static class TL_messageActionPaymentSent extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.currency = abstractSerializedData.readString(z);
            this.total_amount = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt64(this.total_amount);
        }
    }

    public static class TL_messageActionPhoneCall extends MessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.call_id = abstractSerializedData.readInt64(z);
            if ((this.flags & 1) != 0) {
                this.reason = PhoneCallDiscardReason.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.call_id);
            if ((this.flags & 1) != 0) {
                this.reason.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
        }
    }

    public static class TL_messageActionPinMessage extends MessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionScreenshotTaken extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionTTLChange extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.ttl = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.ttl);
        }
    }

    public static class TL_messageActionUserJoined extends MessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionUserUpdatedPhoto extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.newUserPhoto = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.newUserPhoto.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageEmpty extends Message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.to_id = new TL_peerUser();
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_messageEncryptedAction extends MessageAction {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.encryptedAction = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.encryptedAction.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageEntityBold extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityBotCommand extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityCashtag extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityCode extends MessageEntity {
        public static int constructor = 681706865;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityEmail extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityHashtag extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityItalic extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMention extends MessageEntity {
        public static int constructor = -100378723;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMentionName extends MessageEntity {
        public static int constructor = 892193368;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageEntityPhone extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityPre extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.language = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeString(this.language);
        }
    }

    public static class TL_messageEntityTextUrl extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_messageEntityUnknown extends MessageEntity {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityUrl extends MessageEntity {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageForwarded_old2 extends Message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z2 = true;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = abstractSerializedData.readInt32(z);
            MessageFwdHeader messageFwdHeader = this.fwd_from;
            messageFwdHeader.flags = 1 | messageFwdHeader.flags;
            this.fwd_from.date = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.flags |= 772;
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.fwd_from.from_id);
            abstractSerializedData.writeInt32(this.fwd_from.date);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageFwdHeader extends MessageFwdHeader {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            abstractSerializedData.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.post_author);
            }
            if ((this.flags & 16) != 0) {
                this.saved_from_peer.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.saved_from_msg_id);
            }
        }
    }

    public static class TL_messageMediaAudio_layer45 extends MessageMedia {
        public static int constructor = -961117440;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.audio_unused = Audio.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.audio_unused.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaContact extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageMediaDocument extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.document = new TL_documentEmpty();
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaEmpty extends MessageMedia {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaGame extends MessageMedia {
        public static int constructor = -38694904;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.game = TL_game.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.game.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaGeo extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaGeoLive extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.period = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.period);
        }
    }

    public static class TL_messageMediaInvoice extends MessageMedia {
        public static int constructor = -NUM;
        public WebDocument photo;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.shipping_address_requested = (this.flags & 2) != 0;
            if ((this.flags & 8) != 0) {
                z2 = true;
            }
            this.test = z2;
            this.title = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.photo = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 4) != 0) {
                this.receipt_msg_id = abstractSerializedData.readInt32(z);
            }
            this.currency = abstractSerializedData.readString(z);
            this.total_amount = abstractSerializedData.readInt64(z);
            this.start_param = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.shipping_address_requested ? this.flags | 2 : this.flags & -3;
            this.flags = this.test ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.description);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.receipt_msg_id);
            }
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt64(this.total_amount);
            abstractSerializedData.writeString(this.start_param);
        }
    }

    public static class TL_messageMediaPhoto extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.photo = new TL_photoEmpty();
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaUnsupported extends MessageMedia {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaVenue extends MessageMedia {
        public static int constructor = 784356159;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
            this.venue_type = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
            abstractSerializedData.writeString(this.venue_type);
        }
    }

    public static class TL_messageMediaVenue_layer71 extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
        }
    }

    public static class TL_messageMediaVideo_layer45 extends MessageMedia {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.captionLegacy = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.video_unused.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaWebPage extends MessageMedia {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.webpage.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService extends Message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) == 0) {
                z2 = false;
            }
            this.post = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_allStickers extends messages_AllStickers {
        public static int constructor = -302170017;
        public int hash;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSet TLdeserialize = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((StickerSet) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_allStickersNotModified extends messages_AllStickers {
        public static int constructor = -395967805;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_botResults extends messages_BotResults {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.gallery = (this.flags & 1) != 0;
            this.query_id = abstractSerializedData.readInt64(z);
            if ((this.flags & 2) != 0) {
                this.next_offset = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    BotInlineResult TLdeserialize = BotInlineResult.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                this.cache_time = abstractSerializedData.readInt32(z);
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.gallery ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.next_offset);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((BotInlineResult) this.results.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.cache_time);
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_messages_channelMessages extends messages_Messages {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_messages_chats extends messages_Chats {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_chatsSlice extends messages_Chats {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_dhConfig extends messages_DhConfig {
        public static int constructor = 740433629;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.g = abstractSerializedData.readInt32(z);
            this.p = abstractSerializedData.readByteArray(z);
            this.version = abstractSerializedData.readInt32(z);
            this.random = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.g);
            abstractSerializedData.writeByteArray(this.p);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeByteArray(this.random);
        }
    }

    public static class TL_messages_dhConfigNotModified extends messages_DhConfig {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.random);
        }
    }

    public static class TL_messages_dialogs extends messages_Dialogs {
        public static int constructor = 364538944;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_messages_dialogsSlice extends messages_Dialogs {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_messages_favedStickers extends messages_FavedStickers {
        public static int constructor = -209768682;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_stickerPack TLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.packs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        Document TLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.stickers.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((TL_stickerPack) this.packs.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.stickers.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((Document) this.stickers.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_messages_favedStickersNotModified extends messages_FavedStickers {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_featuredStickers extends messages_FeaturedStickers {
        public static int constructor = -123893531;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        this.unread.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                        i++;
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((StickerSetCovered) this.sets.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.unread.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                abstractSerializedData.writeInt64(((Long) this.unread.get(i)).longValue());
                i++;
            }
        }
    }

    public static class TL_messages_featuredStickersNotModified extends messages_FeaturedStickers {
        public static int constructor = 82699215;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_foundStickerSets extends messages_FoundStickerSets {
        public static int constructor = NUM;
        public int hash;
        public ArrayList<StickerSetCovered> sets = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_foundStickerSetsNotModified extends messages_FoundStickerSets {
        public static int constructor = 223655517;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_messages extends messages_Messages {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_messages_messagesSlice extends messages_Messages {
        public static int constructor = 189033187;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_messages_recentStickers extends messages_RecentStickers {
        public static int constructor = 586395571;
        public ArrayList<Integer> dates = new ArrayList();
        public int hash;
        public ArrayList<TL_stickerPack> packs = new ArrayList();
        public ArrayList<Document> stickers = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    TL_stickerPack TLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.packs.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Document TLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.stickers.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            this.dates.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                            i++;
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((TL_stickerPack) this.packs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.stickers.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Document) this.stickers.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.dates.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                abstractSerializedData.writeInt32(((Integer) this.dates.get(i2)).intValue());
                i2++;
            }
        }
    }

    public static class TL_messages_recentStickersNotModified extends messages_RecentStickers {
        public static int constructor = 186120336;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_savedGifs extends messages_SavedGifs {
        public static int constructor = 772213157;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.gifs.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.gifs.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((Document) this.gifs.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_savedGifsNotModified extends messages_SavedGifs {
        public static int constructor = -402498398;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_sentEncryptedFile extends messages_SentEncryptedMessage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
            this.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_sentEncryptedMessage extends messages_SentEncryptedMessage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_messages_stickerSetInstallResultArchive extends messages_StickerSetInstallResult {
        public static int constructor = 904138920;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_stickerSetInstallResultSuccess extends messages_StickerSetInstallResult {
        public static int constructor = 946083368;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_stickers extends messages_Stickers {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.stickers.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.stickers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((Document) this.stickers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_stickersNotModified extends messages_Stickers {
        public static int constructor = -244016606;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_notifyAll extends NotifyPeer {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_notifyChats extends NotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_notifyPeer extends NotifyPeer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_notifyUsers extends NotifyPeer {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_pageBlockAnchor extends PageBlock {
        public static int constructor = -837994576;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.name);
        }
    }

    public static class TL_pageBlockAudio extends PageBlock {
        public static int constructor = 834148991;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.audio_id = abstractSerializedData.readInt64(z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.audio_id);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockAuthorDate extends PageBlock {
        public static int constructor = -NUM;
        public RichText author;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.author = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.published_date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.author.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.published_date);
        }
    }

    public static class TL_pageBlockBlockquote extends PageBlock {
        public static int constructor = 641563686;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockChannel extends PageBlock {
        public static int constructor = -283684427;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockCollage extends PageBlock {
        public static int constructor = 145955919;
        public ArrayList<PageBlock> items = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.items.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PageBlock) this.items.get(i)).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockCover extends PageBlock {
        public static int constructor = 972174080;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.cover = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.cover.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockDivider extends PageBlock {
        public static int constructor = -618614392;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_pageBlockEmbed extends PageBlock {
        public static int constructor = -840826671;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.full_width = (this.flags & 1) != 0;
            if ((this.flags & 8) == 0) {
                z2 = false;
            }
            this.allow_scrolling = z2;
            if ((this.flags & 2) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.html = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.poster_photo_id = abstractSerializedData.readInt64(z);
            }
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.full_width ? this.flags | 1 : this.flags & -2;
            this.flags = this.allow_scrolling ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.html);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt64(this.poster_photo_id);
            }
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockEmbedPost extends PageBlock {
        public static int constructor = 690781161;
        public String author;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.webpage_id = abstractSerializedData.readInt64(z);
            this.author_photo_id = abstractSerializedData.readInt64(z);
            this.author = abstractSerializedData.readString(z);
            this.date = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocks.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.webpage_id);
            abstractSerializedData.writeInt64(this.author_photo_id);
            abstractSerializedData.writeString(this.author);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PageBlock) this.blocks.get(i)).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockFooter extends PageBlock {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockHeader extends PageBlock {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockList extends PageBlock {
        public static int constructor = 978896884;
        public ArrayList<RichText> items = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.ordered = abstractSerializedData.readBool(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    RichText TLdeserialize = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.items.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.ordered);
            abstractSerializedData.writeInt32(481674261);
            int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((RichText) this.items.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_pageBlockParagraph extends PageBlock {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockPhoto extends PageBlock {
        public static int constructor = -372860542;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_id = abstractSerializedData.readInt64(z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.photo_id);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockPreformatted extends PageBlock {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.language = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.language);
        }
    }

    public static class TL_pageBlockPullquote extends PageBlock {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockSlideshow extends PageBlock {
        public static int constructor = 319588707;
        public ArrayList<PageBlock> items = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.items.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PageBlock) this.items.get(i)).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockSubheader extends PageBlock {
        public static int constructor = -248793375;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockSubtitle extends PageBlock {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockTitle extends PageBlock {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageBlockUnsupported extends PageBlock {
        public static int constructor = 324435594;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_pageBlockVideo extends PageBlock {
        public static int constructor = -640214938;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.autoplay = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z2 = false;
            }
            this.loop = z2;
            this.video_id = abstractSerializedData.readInt64(z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.autoplay ? this.flags | 1 : this.flags & -2;
            this.flags = this.loop ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.video_id);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageFull extends Page {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocks.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Photo TLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.photos.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Document TLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.documents.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((PageBlock) this.blocks.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((Document) this.documents.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_pagePart extends Page {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocks.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Photo TLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.photos.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Document TLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.documents.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((PageBlock) this.blocks.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((Document) this.documents.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_payments_paymentResult extends payments_PaymentResult {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.updates = Updates.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.updates.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_payments_paymentVerficationNeeded extends payments_PaymentResult {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_peerChannel extends Peer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_peerChat extends Peer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_peerNotifyEventsAll extends PeerNotifyEvents {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerNotifyEventsEmpty extends PeerNotifyEvents {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerNotifySettings extends PeerNotifySettings {
        public static int constructor = -NUM;
        public boolean show_previews;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.show_previews = (this.flags & 1) != 0;
            if ((this.flags & 2) == 0) {
                z2 = false;
            }
            this.silent = z2;
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.show_previews ? this.flags | 1 : this.flags & -2;
            this.flags = this.silent ? this.flags | 2 : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
        }
    }

    public static class TL_peerNotifySettingsEmpty extends PeerNotifySettings {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerUser extends Peer {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_phoneCall extends PhoneCall {
        public static int constructor = -1660057;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_or_b = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
            this.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.connection = TL_phoneConnection.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_phoneConnection TLdeserialize = TL_phoneConnection.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.alternative_connections.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.start_date = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_or_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(abstractSerializedData);
            this.connection.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.alternative_connections.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_phoneConnection) this.alternative_connections.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.start_date);
        }
    }

    public static class TL_phoneCallAccepted extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_b = abstractSerializedData.readByteArray(z);
            this.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_b);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phoneCallDiscardReasonAllowGroupCall extends PhoneCallDiscardReason {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.encrypted_key = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.encrypted_key);
        }
    }

    public static class TL_phoneCallDiscardReasonBusy extends PhoneCallDiscardReason {
        public static int constructor = -84416311;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonDisconnect extends PhoneCallDiscardReason {
        public static int constructor = -527056480;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonHangup extends PhoneCallDiscardReason {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscardReasonMissed extends PhoneCallDiscardReason {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_phoneCallDiscarded extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.need_rating = (this.flags & 4) != 0;
            if ((this.flags & 8) != 0) {
                z2 = true;
            }
            this.need_debug = z2;
            this.id = abstractSerializedData.readInt64(z);
            if ((this.flags & 1) != 0) {
                this.reason = PhoneCallDiscardReason.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.need_rating ? this.flags | 4 : this.flags & -5;
            this.flags = this.need_debug ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            if ((this.flags & 1) != 0) {
                this.reason.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
        }
    }

    public static class TL_phoneCallEmpty extends PhoneCall {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_phoneCallRequested extends PhoneCall {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_hash = abstractSerializedData.readByteArray(z);
            this.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_hash);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_phoneCallWaiting extends PhoneCall {
        public static int constructor = 462375633;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 1) != 0) {
                this.receive_date = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            this.protocol.serializeToStream(abstractSerializedData);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.receive_date);
            }
        }
    }

    public static class TL_photo extends Photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.has_stickers = (this.flags & 1) != 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photoCachedSize extends PhotoSize {
        public static int constructor = -374917894;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
            this.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_photoEmpty extends Photo {
        public static int constructor = 590459437;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_photoSize extends PhotoSize {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
            this.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
        }
    }

    public static class TL_photoSizeEmpty extends PhotoSize {
        public static int constructor = 236446268;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
        }
    }

    public static class TL_photos_photos extends photos_Photos {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Photo TLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.photos.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((Photo) this.photos.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_photos_photosSlice extends photos_Photos {
        public static int constructor = 352657236;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.count = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Photo TLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.photos.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            int i = 0;
            for (int i2 = 0; i2 < size; i2++) {
                ((Photo) this.photos.get(i2)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i < size2) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
                i++;
            }
        }
    }

    public static class TL_privacyKeyChatInvite extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyPhoneCall extends PrivacyKey {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyStatusTimestamp extends PrivacyKey {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowAll extends PrivacyRule {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowContacts extends PrivacyRule {
        public static int constructor = -123988;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowUsers extends PrivacyRule {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_privacyValueDisallowAll extends PrivacyRule {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowContacts extends PrivacyRule {
        public static int constructor = -125240806;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowUsers extends PrivacyRule {
        public static int constructor = 209668535;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_recentMeUrlChat extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_recentMeUrlChatInvite extends RecentMeUrl {
        public static int constructor = -347535331;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.chat_invite = ChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            this.chat_invite.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_recentMeUrlStickerSet extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.set = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            this.set.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_recentMeUrlUnknown extends RecentMeUrl {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_recentMeUrlUser extends RecentMeUrl {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_replyInlineMarkup extends ReplyMarkup {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_keyboardButtonRow TLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rows.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_keyboardButtonRow) this.rows.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_replyKeyboardForceReply extends ReplyMarkup {
        public static int constructor = -200242528;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            z = false;
            this.single_use = (this.flags & 2) != null ? 1 : null;
            if ((this.flags & 4) != null) {
                z = true;
            }
            this.selective = z;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_replyKeyboardHide extends ReplyMarkup {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.selective = (this.flags & 4) != null ? true : null;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_replyKeyboardMarkup extends ReplyMarkup {
        public static int constructor = 889353612;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.resize = (this.flags & 1) != 0;
            this.single_use = (this.flags & 2) != 0;
            this.selective = (this.flags & 4) != 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_keyboardButtonRow TLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rows.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.resize ? this.flags | 1 : this.flags & -2;
            this.flags = this.single_use ? this.flags | 2 : this.flags & -3;
            this.flags = this.selective ? this.flags | 4 : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_keyboardButtonRow) this.rows.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_sendMessageCancelAction extends SendMessageAction {
        public static int constructor = -44119819;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageChooseContactAction extends SendMessageAction {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGamePlayAction extends SendMessageAction {
        public static int constructor = -580219064;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGeoLocationAction extends SendMessageAction {
        public static int constructor = 393186209;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordAudioAction extends SendMessageAction {
        public static int constructor = -718310409;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordRoundAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordVideoAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageTypingAction extends SendMessageAction {
        public static int constructor = 381645902;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadAudioAction extends SendMessageAction {
        public static int constructor = -212740181;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadDocumentAction extends SendMessageAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadPhotoAction extends SendMessageAction {
        public static int constructor = -774682074;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadRoundAction extends SendMessageAction {
        public static int constructor = 608050278;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadVideoAction extends SendMessageAction {
        public static int constructor = -378127636;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_stickerSet extends StickerSet {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            if ((this.flags & 8) != 0) {
                z2 = true;
            }
            this.masks = z2;
            if ((this.flags & 1) != 0) {
                this.installed_date = abstractSerializedData.readInt32(z);
            }
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.short_name = abstractSerializedData.readString(z);
            this.count = abstractSerializedData.readInt32(z);
            this.hash = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.installed_date);
            }
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSetCovered extends StickerSetCovered {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.cover = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            this.cover.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_stickerSetMultiCovered extends StickerSetCovered {
        public static int constructor = 872932635;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.covers.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.covers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((Document) this.covers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_storage_fileGif extends storage_FileType {
        public static int constructor = -891180321;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileJpeg extends storage_FileType {
        public static int constructor = 8322574;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMov extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp3 extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp4 extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePartial extends storage_FileType {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePdf extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePng extends storage_FileType {
        public static int constructor = 172975040;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileUnknown extends storage_FileType {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileWebp extends storage_FileType {
        public static int constructor = 276907596;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_textBold extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_textConcat extends RichText {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    RichText TLdeserialize = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.texts.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.texts.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((RichText) this.texts.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_textEmail extends RichText {
        public static int constructor = -564523562;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.email = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.email);
        }
    }

    public static class TL_textEmpty extends RichText {
        public static int constructor = -599948721;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_textFixed extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_textItalic extends RichText {
        public static int constructor = -653089380;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_textPlain extends RichText {
        public static int constructor = NUM;
        public String text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_textStrike extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_textUnderline extends RichText {
        public static int constructor = -NUM;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_textUrl extends RichText {
        public static int constructor = NUM;
        public RichText text;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.url = abstractSerializedData.readString(z);
            this.webpage_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.webpage_id);
        }
    }

    public static class TL_topPeerCategoryBotsInline extends TopPeerCategory {
        public static int constructor = 344356834;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryBotsPM extends TopPeerCategory {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryChannels extends TopPeerCategory {
        public static int constructor = 371037736;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryCorrespondents extends TopPeerCategory {
        public static int constructor = 104314861;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryGroups extends TopPeerCategory {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryPhoneCalls extends TopPeerCategory {
        public static int constructor = 511092620;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateChannel extends Update {
        public static int constructor = -NUM;
        public int channel_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_updateChannelAvailableMessages extends Update {
        public static int constructor = NUM;
        public int available_min_id;
        public int channel_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.available_min_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.available_min_id);
        }
    }

    public static class TL_updateChannelMessageViews extends Update {
        public static int constructor = -NUM;
        public int channel_id;
        public int id;
        public int views;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
            this.views = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.views);
        }
    }

    public static class TL_updateChannelPinnedMessage extends Update {
        public static int constructor = -NUM;
        public int channel_id;
        public int id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_updateChannelReadMessagesContents extends Update {
        public static int constructor = -NUM;
        public int channel_id;
        public ArrayList<Integer> messages = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
        }
    }

    public static class TL_updateChannelTooLong extends Update {
        public static int constructor = -352032773;
        public int channel_id;
        public int flags;
        public int pts;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.channel_id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.pts = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.channel_id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.pts);
            }
        }
    }

    public static class TL_updateChannelWebPage extends Update {
        public static int constructor = NUM;
        public int channel_id;
        public int pts;
        public int pts_count;
        public WebPage webpage;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            this.webpage.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateChatAdmins extends Update {
        public static int constructor = NUM;
        public int chat_id;
        public boolean enabled;
        public int version;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.enabled = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeBool(this.enabled);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantAdd extends Update {
        public static int constructor = -364179876;
        public int chat_id;
        public int date;
        public int inviter_id;
        public int user_id;
        public int version;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantAdmin extends Update {
        public static int constructor = -NUM;
        public int chat_id;
        public boolean is_admin;
        public int user_id;
        public int version;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.is_admin = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.is_admin);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantDelete extends Update {
        public static int constructor = NUM;
        public int chat_id;
        public int user_id;
        public int version;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipants extends Update {
        public static int constructor = 125178264;
        public ChatParticipants participants;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.participants.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateChatUserTyping extends Update {
        public static int constructor = -NUM;
        public SendMessageAction action;
        public int chat_id;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateConfig extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateContactLink extends Update {
        public static int constructor = -NUM;
        public ContactLink foreign_link;
        public ContactLink my_link;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateContactRegistered extends Update {
        public static int constructor = 628472761;
        public int date;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateContactsReset extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateDcOptions extends Update {
        public static int constructor = -NUM;
        public ArrayList<TL_dcOption> dc_options = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_dcOption TLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dc_options.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_dcOption) this.dc_options.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updateDeleteChannelMessages extends Update {
        public static int constructor = -NUM;
        public int channel_id;
        public ArrayList<Integer> messages = new ArrayList();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDeleteMessages extends Update {
        public static int constructor = -NUM;
        public ArrayList<Integer> messages = new ArrayList();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDialogPinned extends Update {
        public static int constructor = 433225532;
        public int flags;
        public DialogPeer peer;
        public boolean pinned;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.pinned = z2;
            this.peer = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.pinned ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateDraftMessage extends Update {
        public static int constructor = -299124375;
        public DraftMessage draft;
        public Peer peer;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.draft.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateEditChannelMessage extends Update {
        public static int constructor = 457133559;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateEditMessage extends Update {
        public static int constructor = -469536605;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateEncryptedChatTyping extends Update {
        public static int constructor = 386986326;
        public int chat_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_updateEncryptedMessagesRead extends Update {
        public static int constructor = 956179895;
        public int chat_id;
        public int date;
        public int max_date;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.max_date = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateEncryption extends Update {
        public static int constructor = -NUM;
        public EncryptedChat chat;
        public int date;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat = EncryptedChat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateFavedStickers extends Update {
        public static int constructor = -451831443;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateGroupCall extends Update {
        public static int constructor = -NUM;
        public GroupCall call;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.call = GroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateGroupCallParticipant extends Update {
        public static int constructor = 92188360;
        public TL_inputGroupCall call;
        public GroupCallParticipant participant;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.call = TL_inputGroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participant = GroupCallParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.call.serializeToStream(abstractSerializedData);
            this.participant.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateLangPack extends Update {
        public static int constructor = NUM;
        public TL_langPackDifference difference;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.difference = TL_langPackDifference.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.difference.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateLangPackTooLong extends Update {
        public static int constructor = 281165899;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateMessageID extends Update {
        public static int constructor = NUM;
        public int id;
        public long random_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.random_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_updateNewChannelMessage extends Update {
        public static int constructor = NUM;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewEncryptedMessage extends Update {
        public static int constructor = 314359194;
        public EncryptedMessage message;
        public int qts;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.qts = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.qts);
        }
    }

    public static class TL_updateNewMessage extends Update {
        public static int constructor = 522914557;
        public Message message;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewStickerSet extends Update {
        public static int constructor = NUM;
        public TL_messages_stickerSet stickerset;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.stickerset = TL_messages_stickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateNotifySettings extends Update {
        public static int constructor = -NUM;
        public PeerNotifySettings notify_settings;
        public NotifyPeer peer;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = NotifyPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updatePhoneCall extends Update {
        public static int constructor = -NUM;
        public PhoneCall phone_call;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_call = PhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.phone_call.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updatePinnedDialogs extends Update {
        public static int constructor = -364071333;
        public int flags;
        public ArrayList<DialogPeer> order = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        DialogPeer TLdeserialize = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.order.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.order.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((DialogPeer) this.order.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_updatePrivacy extends Update {
        public static int constructor = -298113238;
        public PrivacyKey key;
        public ArrayList<PrivacyRule> rules = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.key = PrivacyKey.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PrivacyRule TLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rules.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PrivacyRule) this.rules.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updateReadChannelInbox extends Update {
        public static int constructor = NUM;
        public int channel_id;
        public int max_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_updateReadChannelOutbox extends Update {
        public static int constructor = 634833351;
        public int channel_id;
        public int max_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_updateReadFeaturedStickers extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateReadHistoryInbox extends Update {
        public static int constructor = -NUM;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.max_id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateReadHistoryOutbox extends Update {
        public static int constructor = 791617983;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.max_id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateReadMessagesContents extends Update {
        public static int constructor = NUM;
        public ArrayList<Integer> messages = new ArrayList();
        public int pts;
        public int pts_count;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i++;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateRecentStickers extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateSavedGifs extends Update {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateServiceNotification extends Update {
        public static int constructor = -337352679;
        public ArrayList<MessageEntity> entities = new ArrayList();
        public int flags;
        public int inbox_date;
        public MessageMedia media;
        public String message;
        public boolean popup;
        public String type;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.popup = (this.flags & 1) != 0;
            if ((this.flags & 2) != 0) {
                this.inbox_date = abstractSerializedData.readInt32(z);
            }
            this.type = abstractSerializedData.readString(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.entities.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.popup ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.inbox_date);
            }
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updateShort extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.update = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
        }
    }

    public static class TL_updateShortChatMessage extends Updates {
        public static int constructor = 377562760;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }
    }

    public static class TL_updateShortMessage extends Updates {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }
    }

    public static class TL_updateShortSentMessage extends Updates {
        public static int constructor = 301019932;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.out = (this.flags & 2) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }
    }

    public static class TL_updateStickerSets extends Update {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateStickerSetsOrder extends Update {
        public static int constructor = 196268545;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order = new ArrayList();

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.masks = (this.flags & 1) != 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.order.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i++;
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                abstractSerializedData.writeInt64(((Long) this.order.get(i)).longValue());
            }
        }
    }

    public static class TL_updateUserBlocked extends Update {
        public static int constructor = -NUM;
        public boolean blocked;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.blocked = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.blocked);
        }
    }

    public static class TL_updateUserName extends Update {
        public static int constructor = -NUM;
        public String first_name;
        public String last_name;
        public int user_id;
        public String username;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_updateUserPhone extends Update {
        public static int constructor = 314130811;
        public String phone;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.phone = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.phone);
        }
    }

    public static class TL_updateUserPhoto extends Update {
        public static int constructor = -NUM;
        public int date;
        public UserProfilePhoto photo;
        public boolean previous;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.previous = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.previous);
        }
    }

    public static class TL_updateUserStatus extends Update {
        public static int constructor = 469489699;
        public UserStatus status;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateUserTyping extends Update {
        public static int constructor = NUM;
        public SendMessageAction action;
        public int user_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateWebPage extends Update {
        public static int constructor = NUM;
        public int pts;
        public int pts_count;
        public WebPage webpage;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.webpage.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updates extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Update TLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.updates.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                        this.date = abstractSerializedData.readInt32(z);
                        this.seq = abstractSerializedData.readInt32(z);
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }
    }

    public static class TL_updatesCombined extends Updates {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Update TLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.updates.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                        this.date = abstractSerializedData.readInt32(z);
                        this.seq_start = abstractSerializedData.readInt32(z);
                        this.seq = abstractSerializedData.readInt32(z);
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }
    }

    public static class TL_updatesTooLong extends Updates {
        public static int constructor = -484987010;
    }

    public static class TL_updates_channelDifference extends updates_ChannelDifference {
        public static int constructor = 543450958;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.isFinal = (this.flags & 1) != 0;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Update TLdeserialize2 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.other_updates.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i++;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_updates_channelDifferenceEmpty extends updates_ChannelDifference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            if ((this.flags & 1) == 0) {
                z2 = false;
            }
            this.isFinal = z2;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
        }
    }

    public static class TL_updates_channelDifferenceTooLong extends updates_ChannelDifference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.isFinal = (this.flags & 1) != 0;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
            this.top_message = abstractSerializedData.readInt32(z);
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.unread_mentions_count = abstractSerializedData.readInt32(z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
            abstractSerializedData.writeInt32(this.top_message);
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(this.unread_mentions_count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_updates_difference extends updates_Difference {
        public static int constructor = 16030880;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        EncryptedMessage TLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.new_encrypted_messages.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Update TLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.other_updates.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            i2 = 0;
                            while (i2 < readInt32) {
                                Chat TLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.chats.add(TLdeserialize4);
                                    i2++;
                                } else {
                                    return;
                                }
                            }
                            if (abstractSerializedData.readInt32(z) == 481674261) {
                                readInt32 = abstractSerializedData.readInt32(z);
                                while (i < readInt32) {
                                    User TLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                    if (TLdeserialize5 != null) {
                                        this.users.add(TLdeserialize5);
                                        i++;
                                    } else {
                                        return;
                                    }
                                }
                                this.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            } else if (z) {
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((EncryptedMessage) this.new_encrypted_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
            this.state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updates_differenceEmpty extends updates_Difference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
            this.seq = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.seq);
        }
    }

    public static class TL_updates_differenceSlice extends updates_Difference {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        EncryptedMessage TLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.new_encrypted_messages.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        i2 = 0;
                        while (i2 < readInt32) {
                            Update TLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.other_updates.add(TLdeserialize3);
                                i2++;
                            } else {
                                return;
                            }
                        }
                        if (abstractSerializedData.readInt32(z) == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            i2 = 0;
                            while (i2 < readInt32) {
                                Chat TLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.chats.add(TLdeserialize4);
                                    i2++;
                                } else {
                                    return;
                                }
                            }
                            if (abstractSerializedData.readInt32(z) == 481674261) {
                                readInt32 = abstractSerializedData.readInt32(z);
                                while (i < readInt32) {
                                    User TLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                    if (TLdeserialize5 != null) {
                                        this.users.add(TLdeserialize5);
                                        i++;
                                    } else {
                                        return;
                                    }
                                }
                                this.intermediate_state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            } else if (z) {
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                            }
                        } else if (z) {
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((EncryptedMessage) this.new_encrypted_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
            this.intermediate_state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updates_differenceTooLong extends updates_Difference {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
        }
    }

    public static class TL_upload_cdnFile extends upload_CdnFile {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.bytes = abstractSerializedData.readByteBuffer(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!(this.disableFree || this.bytes == null)) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_cdnFileReuploadNeeded extends upload_CdnFile {
        public static int constructor = -290921362;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.request_token = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.request_token);
        }
    }

    public static class TL_upload_file extends upload_File {
        public static int constructor = 157948117;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = storage_FileType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.mtime = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteBuffer(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.mtime);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }

        public void freeResources() {
            if (!(this.disableFree || this.bytes == null)) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }
    }

    public static class TL_upload_fileCdnRedirect extends upload_File {
        public static int constructor = -242427324;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.file_token = abstractSerializedData.readByteArray(z);
            this.encryption_key = abstractSerializedData.readByteArray(z);
            this.encryption_iv = abstractSerializedData.readByteArray(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_fileHash TLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.file_hashes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeByteArray(this.encryption_key);
            abstractSerializedData.writeByteArray(this.encryption_iv);
            abstractSerializedData.writeInt32(481674261);
            int size = this.file_hashes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_fileHash) this.file_hashes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_user extends User {
        public static int constructor = 773059779;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.bot = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES) != 0;
            if ((this.flags & 2097152) != 0) {
                z2 = true;
            }
            this.bot_inline_geo = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.bot_info_version = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 262144) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4194304) != 0) {
                this.lang_code = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.bot ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | C0542C.DEFAULT_BUFFER_SEGMENT_SIZE : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                abstractSerializedData.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
            if ((this.flags & 524288) != 0) {
                abstractSerializedData.writeString(this.bot_inline_placeholder);
            }
            if ((this.flags & 4194304) != 0) {
                abstractSerializedData.writeString(this.lang_code);
            }
        }
    }

    public static class TL_userContact_old2 extends User {
        public static int constructor = -894214632;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userDeleted_old2 extends User {
        public static int constructor = -704549510;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_userEmpty extends User {
        public static int constructor = 537022650;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_userForeign_old2 extends User {
        public static int constructor = 123533224;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userProfilePhoto extends UserProfilePhoto {
        public static int constructor = -715532088;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_id = abstractSerializedData.readInt64(z);
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userProfilePhotoEmpty extends UserProfilePhoto {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userRequest_old2 extends User {
        public static int constructor = -640891665;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userSelf_old3 extends User {
        public static int constructor = 476112392;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userStatusEmpty extends UserStatus {
        public static int constructor = 164646985;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusLastMonth extends UserStatus {
        public static int constructor = NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusLastWeek extends UserStatus {
        public static int constructor = 129960444;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusOffline extends UserStatus {
        public static int constructor = 9203775;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.expires = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusOnline extends UserStatus {
        public static int constructor = -306628279;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.expires = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusRecently extends UserStatus {
        public static int constructor = -496024847;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_videoEmpty_layer45 extends Video {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_video_layer45 extends Video {
        public static int constructor = -148338733;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_wallPaper extends WallPaper {
        public static int constructor = -860866985;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.color = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.color);
        }
    }

    public static class TL_wallPaperSolid extends WallPaper {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.bg_color = abstractSerializedData.readInt32(z);
            this.color = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.bg_color);
            abstractSerializedData.writeInt32(this.color);
        }
    }

    public static class TL_webDocument extends WebDocument {
        public static int constructor = -971322408;
        public long access_hash;
        public int dc_id;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.size = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.dc_id = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_webDocumentNoProxy extends WebDocument {
        public static int constructor = -104284986;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_webPage extends WebPage {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.url = abstractSerializedData.readString(z);
            this.display_url = abstractSerializedData.readString(z);
            this.hash = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 128) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 256) != 0) {
                this.author = abstractSerializedData.readString(z);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page = Page.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.display_url);
            abstractSerializedData.writeInt32(this.hash);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 1024) != 0) {
                this.cached_page.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_webPageEmpty extends WebPage {
        public static int constructor = -350980120;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_webPageNotModified extends WebPage {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_webPagePending extends WebPage {
        public static int constructor = -981018084;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_webPageUrlPending extends WebPage {
        public static int constructor = -736472729;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_audioEncrypted extends TL_audio_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_audio_old2 extends TL_audio_layer45 {
        public static int constructor = -945003370;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_audio_old extends TL_audio_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_botInfoEmpty_layer48 extends TL_botInfo {
        public static int constructor = -NUM;

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_botInfo_layer48 extends TL_botInfo {
        public static int constructor = 164583517;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_botCommand TLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.commands.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeString(TtmlNode.ANONYMOUS_REGION_ID);
            abstractSerializedData.writeString(this.description);
            abstractSerializedData.writeInt32(481674261);
            int size = this.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((TL_botCommand) this.commands.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaAuto_layer74 extends TL_botInlineMessageMediaAuto {
        public static int constructor = 175419739;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo_layer71 extends TL_botInlineMessageMediaGeo {
        public static int constructor = 982505656;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.geo.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channelForbidden_layer52 extends TL_channelForbidden {
        public static int constructor = 763724588;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channelForbidden_layer67 extends TL_channelForbidden {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.broadcast = (this.flags & 32) != 0;
            if ((this.flags & 256) != 0) {
                z2 = true;
            }
            this.megagroup = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channelFull_layer48 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.unread_important_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
        }
    }

    public static class TL_channelFull_layer52 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.unread_important_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer67 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer70 extends TL_channelFull {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.banned_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer71 extends TL_channelFull {
        public static int constructor = 401891279;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.banned_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channelFull_layer72 extends TL_channelFull {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.can_view_participants = (this.flags & 8) != 0;
            this.can_set_username = (this.flags & 64) != 0;
            this.can_set_stickers = (this.flags & 128) != 0;
            this.hidden_prehistory = (this.flags & 1024) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.banned_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 16) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 32) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & 256) != 0) {
                    this.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                }
                if ((this.flags & 512) != 0) {
                    this.available_min_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | 64 : this.flags & -65;
            this.flags = this.can_set_stickers ? this.flags | 128 : this.flags & -129;
            this.flags = this.hidden_prehistory ? this.flags | 1024 : this.flags & -1025;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.banned_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
            if ((this.flags & 256) != 0) {
                this.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeInt32(this.available_min_id);
            }
        }
    }

    public static class TL_channelFull_old extends TL_channelFull {
        public static int constructor = -88925533;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.can_view_participants = (this.flags & 8) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.unread_important_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(this.unread_important_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelParticipantEditor_layer67 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantModerator_layer67 extends TL_channelParticipantAdmin {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channel_layer48 extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.democracy = (this.flags & 1024) != 0;
            if ((this.flags & 2048) == 0) {
                z2 = false;
            }
            this.signatures = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & 64) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & 512) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.democracy ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
        }
    }

    public static class TL_channel_layer67 extends TL_channel {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.democracy = (this.flags & 1024) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z2 = false;
            }
            this.min = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & 64) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & 512) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.democracy ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
        }
    }

    public static class TL_channel_layer72 extends TL_channel {
        public static int constructor = 213142300;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.left = (this.flags & 4) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            this.restricted = (this.flags & 512) != 0;
            this.democracy = (this.flags & 1024) != 0;
            this.signatures = (this.flags & 2048) != 0;
            if ((this.flags & 4096) == 0) {
                z2 = false;
            }
            this.min = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & 64) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & 512) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.admin_rights = TL_channelAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights = TL_channelBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.restricted ? this.flags | 512 : this.flags & -513;
            this.flags = this.democracy ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.signatures ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.min ? this.flags | 4096 : this.flags & -4097;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & 512) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.admin_rights.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32768) != 0) {
                this.banned_rights.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channel_old extends TL_channel {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.moderator = (this.flags & 16) != 0;
            this.broadcast = (this.flags & 32) != 0;
            this.verified = (this.flags & 128) != 0;
            this.megagroup = (this.flags & 256) != 0;
            if ((this.flags & 512) == 0) {
                z2 = false;
            }
            this.explicit_content = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & 64) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.moderator ? this.flags | 16 : this.flags & -17;
            this.flags = this.broadcast ? this.flags | 32 : this.flags & -33;
            this.flags = this.verified ? this.flags | 128 : this.flags & -129;
            this.flags = this.megagroup ? this.flags | 256 : this.flags & -257;
            this.flags = this.explicit_content ? this.flags | 512 : this.flags & -513;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chatForbidden_old extends TL_chatForbidden {
        public static int constructor = -83047359;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantsForbidden_old extends TL_chatParticipantsForbidden {
        public static int constructor = 265468810;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_chatParticipants_old extends TL_chatParticipants {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    ChatParticipant TLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.version = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((ChatParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chat_old2 extends TL_chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.creator = (this.flags & 1) != 0;
            this.kicked = (this.flags & 2) != 0;
            this.left = (this.flags & 4) != 0;
            this.admins_enabled = (this.flags & 8) != 0;
            this.admin = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.deactivated = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | 1 : this.flags & -2;
            this.flags = this.kicked ? this.flags | 2 : this.flags & -3;
            this.flags = this.left ? this.flags | 4 : this.flags & -5;
            this.flags = this.admins_enabled ? this.flags | 8 : this.flags & -9;
            this.flags = this.admin ? this.flags | 16 : this.flags & -17;
            this.flags = this.deactivated ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chat_old extends TL_chat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.left = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeBool(this.left);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_decryptedMessageMediaAudio_layer8 extends TL_decryptedMessageMediaAudio {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaDocument_layer8 extends TL_decryptedMessageMediaDocument {
        public static int constructor = -NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaPhoto_layer8 extends TL_decryptedMessageMediaPhoto {
        public static int constructor = 846826124;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer17 extends TL_decryptedMessageMediaVideo {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer8 extends TL_decryptedMessageMediaVideo {
        public static int constructor = NUM;
        public byte[] thumb;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageService_layer8 extends TL_decryptedMessageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteArray(this.random_bytes);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessage_layer17 extends TL_decryptedMessage {
        public static int constructor = 541931640;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessage_layer45 extends TL_decryptedMessage {
        public static int constructor = 917541342;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.random_id = abstractSerializedData.readInt64(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int i = 0;
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_random_id = abstractSerializedData.readInt64(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
        }
    }

    public static class TL_decryptedMessage_layer8 extends TL_decryptedMessage {
        public static int constructor = 528568095;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.message = abstractSerializedData.readString(z);
            this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteArray(this.random_bytes);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_documentAttributeAudio_layer45 extends TL_documentAttributeAudio {
        public static int constructor = -556656416;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.performer = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.performer);
        }
    }

    public static class TL_documentAttributeAudio_old extends TL_documentAttributeAudio {
        public static int constructor = 85215461;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
        }
    }

    public static class TL_documentAttributeSticker_layer55 extends TL_documentAttributeSticker {
        public static int constructor = 978674434;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.alt = abstractSerializedData.readString(z);
            this.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.alt);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_documentAttributeSticker_old2 extends TL_documentAttributeSticker {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.alt = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.alt);
        }
    }

    public static class TL_documentAttributeSticker_old extends TL_documentAttributeSticker {
        public static int constructor = -83208409;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeVideo_layer65 extends TL_documentAttributeVideo {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_documentEncrypted_old extends TL_document {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_document_layer53 extends TL_document {
        public static int constructor = -106717361;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_document_old extends TL_document {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_encryptedChatRequested_old extends TL_encryptedChatRequested {
        public static int constructor = -39213129;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a = abstractSerializedData.readByteArray(z);
            this.nonce = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a);
            abstractSerializedData.writeByteArray(this.nonce);
        }
    }

    public static class TL_encryptedChat_old extends TL_encryptedChat {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_or_b = abstractSerializedData.readByteArray(z);
            this.nonce = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_or_b);
            abstractSerializedData.writeByteArray(this.nonce);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_messageActionChatAddUser_old extends TL_messageActionChatAddUser {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageForwarded_old extends TL_messageForwarded_old2 {
        public static int constructor = 99903492;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = abstractSerializedData.readInt32(z);
            MessageFwdHeader messageFwdHeader = this.fwd_from;
            messageFwdHeader.flags |= 1;
            this.fwd_from.date = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= 772;
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.fwd_from.from_id);
            abstractSerializedData.writeInt32(this.fwd_from.date);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_messageFwdHeader_layer68 extends TL_messageFwdHeader {
        public static int constructor = -947462709;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            abstractSerializedData.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.channel_post);
            }
        }
    }

    public static class TL_messageFwdHeader_layer72 extends TL_messageFwdHeader {
        public static int constructor = -85986132;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & 2) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 4) != 0) {
                this.channel_post = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.post_author = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            abstractSerializedData.writeInt32(this.date);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.channel_post);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.post_author);
            }
        }
    }

    public static class TL_messageMediaDocument_layer68 extends TL_messageMediaDocument {
        public static int constructor = -203411800;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.captionLegacy = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.document.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaDocument_layer74 extends TL_messageMediaDocument {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.document = new TL_documentEmpty();
            }
            if ((this.flags & 2) != 0) {
                this.captionLegacy = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.captionLegacy);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaDocument_old extends TL_messageMediaDocument {
        public static int constructor = 802824708;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.document.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaPhoto_layer68 extends TL_messageMediaPhoto {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.captionLegacy = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.captionLegacy);
        }
    }

    public static class TL_messageMediaPhoto_layer74 extends TL_messageMediaPhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.photo = new TL_photoEmpty();
            }
            if ((this.flags & 2) != 0) {
                this.captionLegacy = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.ttl_seconds = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 1) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.captionLegacy);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.ttl_seconds);
            }
        }
    }

    public static class TL_messageMediaPhoto_old extends TL_messageMediaPhoto {
        public static int constructor = -926655958;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaUnsupported_old extends TL_messageMediaUnsupported {
        public static int constructor = 694364726;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_messageMediaVideo_old extends TL_messageMediaVideo_layer45 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.video_unused.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_layer48 extends TL_messageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) == 0) {
                z2 = false;
            }
            this.post = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_old2 extends TL_messageService {
        public static int constructor = 495384334;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.flags |= 256;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_old extends TL_messageService {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= 256;
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_message_layer47 extends TL_message {
        public static int constructor = -913120932;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                MessageFwdHeader messageFwdHeader;
                if (TLdeserialize instanceof TL_peerChannel) {
                    this.fwd_from.channel_id = TLdeserialize.channel_id;
                    messageFwdHeader = this.fwd_from;
                    messageFwdHeader.flags |= 2;
                } else if (TLdeserialize instanceof TL_peerUser) {
                    this.fwd_from.from_id = TLdeserialize.user_id;
                    messageFwdHeader = this.fwd_from;
                    messageFwdHeader.flags |= 1;
                }
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.entities.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                if (this.fwd_from.from_id != 0) {
                    TL_peerUser tL_peerUser = new TL_peerUser();
                    tL_peerUser.user_id = this.fwd_from.from_id;
                    tL_peerUser.serializeToStream(abstractSerializedData);
                } else {
                    TL_peerChannel tL_peerChannel = new TL_peerChannel();
                    tL_peerChannel.channel_id = this.fwd_from.channel_id;
                    tL_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 1024) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_layer68 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.post = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.with_my_score = (this.flags & NUM) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.with_my_score ? this.flags | NUM : this.flags & -NUM;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 1024) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                abstractSerializedData.writeInt32(this.edit_date);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_layer72 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.post = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 2048) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (this.media != null) {
                    this.ttl = this.media.ttl_seconds;
                }
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 32768) != 0) {
                this.edit_date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                this.post_author = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                this.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 1024) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            if ((this.flags & 32768) != 0) {
                abstractSerializedData.writeInt32(this.edit_date);
            }
            if ((this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0) {
                abstractSerializedData.writeString(this.post_author);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old2 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = (abstractSerializedData.readInt32(z) | 256) | 512;
            boolean z2 = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old3 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = (abstractSerializedData.readInt32(z) | 256) | 512;
            boolean z2 = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z2 = true;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags = 1 | messageFwdHeader.flags;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old4 extends TL_message {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = (abstractSerializedData.readInt32(z) | 256) | 512;
            boolean z2 = false;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) != 0) {
                z2 = true;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags = 1 | messageFwdHeader.flags;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                this.message = this.media.captionLegacy;
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old5 extends TL_message {
        public static int constructor = -260565816;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = (abstractSerializedData.readInt32(z) | 256) | 512;
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags |= 1;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                this.message = this.media.captionLegacy;
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old6 extends TL_message {
        public static int constructor = 736885382;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z) | 256;
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                MessageFwdHeader messageFwdHeader = this.fwd_from;
                messageFwdHeader.flags |= 1;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old7 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 256) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & 4) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                MessageFwdHeader messageFwdHeader;
                if (TLdeserialize instanceof TL_peerChannel) {
                    this.fwd_from.channel_id = TLdeserialize.channel_id;
                    messageFwdHeader = this.fwd_from;
                    messageFwdHeader.flags |= 2;
                } else if (TLdeserialize instanceof TL_peerUser) {
                    this.fwd_from.from_id = TLdeserialize.user_id;
                    messageFwdHeader = this.fwd_from;
                    messageFwdHeader.flags |= 1;
                }
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 8) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & 512) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                    this.message = this.media.captionLegacy;
                }
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 128) != 0) {
                int readInt32;
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.entities.add(TLdeserialize2);
                            i++;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                } else {
                    return;
                }
            }
            if ((this.flags & 1024) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 4) != 0) {
                if (this.fwd_from.from_id != 0) {
                    TL_peerUser tL_peerUser = new TL_peerUser();
                    tL_peerUser.user_id = this.fwd_from.from_id;
                    tL_peerUser.serializeToStream(abstractSerializedData);
                } else {
                    TL_peerChannel tL_peerChannel = new TL_peerChannel();
                    tL_peerChannel.channel_id = this.fwd_from.channel_id;
                    tL_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 512) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i++) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 1024) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_old extends TL_message {
        public static int constructor = 585853626;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= 768;
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_secret extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                this.message = this.media.captionLegacy;
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.entities.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2048) != 0) {
                    this.via_bot_name = abstractSerializedData.readString(z);
                }
                if ((this.flags & 8) != 0) {
                    this.reply_to_random_id = abstractSerializedData.readInt64(z);
                }
                if ((this.flags & 131072) != 0) {
                    this.grouped_id = abstractSerializedData.readInt64(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
            if ((this.flags & 131072) != 0) {
                abstractSerializedData.writeInt64(this.grouped_id);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_message_secret_layer72 extends TL_message {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            this.media_unread = (this.flags & 32) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (!(this.media == null || TextUtils.isEmpty(this.media.captionLegacy))) {
                this.message = this.media.captionLegacy;
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.entities.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                if ((this.flags & 2048) != 0) {
                    this.via_bot_name = abstractSerializedData.readString(z);
                }
                if ((this.flags & 8) != 0) {
                    this.reply_to_random_id = abstractSerializedData.readInt64(z);
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 2048) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
            writeAttachPath(abstractSerializedData);
        }
    }

    public static class TL_messages_botResults_layer71 extends TL_messages_botResults {
        public static int constructor = -858565059;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            int i = 0;
            this.gallery = (this.flags & 1) != 0;
            this.query_id = abstractSerializedData.readInt64(z);
            if ((this.flags & 2) != 0) {
                this.next_offset = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInlineResult TLdeserialize = BotInlineResult.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
                this.cache_time = abstractSerializedData.readInt32(z);
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.gallery ? this.flags | 1 : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.next_offset);
            }
            if ((this.flags & 4) != 0) {
                this.switch_pm.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((BotInlineResult) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.cache_time);
        }
    }

    public static class TL_pageBlockAuthorDate_layer60 extends TL_pageBlockAuthorDate {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            String readString = abstractSerializedData.readString(z);
            this.author = new TL_textPlain();
            ((TL_textPlain) this.author).text = readString;
            this.published_date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(((TL_textPlain) this.author).text);
            abstractSerializedData.writeInt32(this.published_date);
        }
    }

    public static class TL_pageBlockEmbed_layer60 extends TL_pageBlockEmbed {
        public static int constructor = -650782469;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.full_width = (this.flags & 1) != 0;
            if ((this.flags & 8) == 0) {
                z2 = false;
            }
            this.allow_scrolling = z2;
            if ((this.flags & 2) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.html = abstractSerializedData.readString(z);
            }
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.full_width ? this.flags | 1 : this.flags & -2;
            this.flags = this.allow_scrolling ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.html);
            }
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_pageFull_layer67 extends TL_pageFull {
        public static int constructor = -677274263;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocks.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Photo TLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.photos.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Document TLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.documents.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((PageBlock) this.blocks.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((Document) this.documents.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_pagePart_layer67 extends TL_pagePart {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                int i2 = 0;
                while (i2 < readInt32) {
                    PageBlock TLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocks.add(TLdeserialize);
                        i2++;
                    } else {
                        return;
                    }
                }
                if (abstractSerializedData.readInt32(z) == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    i2 = 0;
                    while (i2 < readInt32) {
                        Photo TLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.photos.add(TLdeserialize2);
                            i2++;
                        } else {
                            return;
                        }
                    }
                    if (abstractSerializedData.readInt32(z) == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Document TLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.documents.add(TLdeserialize3);
                                i++;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                    }
                } else if (z) {
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            int i2 = 0;
            for (i = 0; i < size; i++) {
                ((PageBlock) this.blocks.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i++) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            while (i2 < size2) {
                ((Document) this.documents.get(i2)).serializeToStream(abstractSerializedData);
                i2++;
            }
        }
    }

    public static class TL_peerNotifySettings_layer47 extends TL_peerNotifySettings {
        public static int constructor = -NUM;
        public boolean show_previews;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
            this.show_previews = abstractSerializedData.readBool(z);
            this.events_mask = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
            abstractSerializedData.writeBool(this.show_previews);
            abstractSerializedData.writeInt32(this.events_mask);
        }
    }

    public static class TL_photo_layer55 extends TL_photo {
        public static int constructor = -840088834;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photo_old2 extends TL_photo {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photo_old extends TL_photo {
        public static int constructor = 582313809;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            abstractSerializedData.readString(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int i = 0;
            int readInt32;
            if (abstractSerializedData.readInt32(z) == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i++;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                throw new RuntimeException(String.format("wrong Vector magic, got %x", new Object[]{Integer.valueOf(readInt32)}));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(TtmlNode.ANONYMOUS_REGION_ID);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i++) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_sendMessageUploadAudioAction_old extends TL_sendMessageUploadAudioAction {
        public static int constructor = -424899985;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadDocumentAction_old extends TL_sendMessageUploadDocumentAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadPhotoAction_old extends TL_sendMessageUploadPhotoAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadVideoAction_old extends TL_sendMessageUploadVideoAction {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_stickerSet_layer75 extends TL_stickerSet {
        public static int constructor = -852477119;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = true;
            this.installed = (this.flags & 1) != 0;
            this.archived = (this.flags & 2) != 0;
            this.official = (this.flags & 4) != 0;
            if ((this.flags & 8) == 0) {
                z2 = false;
            }
            this.masks = z2;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.short_name = abstractSerializedData.readString(z);
            this.count = abstractSerializedData.readInt32(z);
            this.hash = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.installed ? this.flags | 1 : this.flags & -2;
            this.flags = this.archived ? this.flags | 2 : this.flags & -3;
            this.flags = this.official ? this.flags | 4 : this.flags & -5;
            this.flags = this.masks ? this.flags | 8 : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSet_old extends TL_stickerSet {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class TL_userContact_old extends TL_userContact_old2 {
        public static int constructor = -218397927;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userDeleted_old extends TL_userDeleted_old2 {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_userForeign_old extends TL_userForeign_old2 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userProfilePhoto_old extends TL_userProfilePhoto {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userRequest_old extends TL_userRequest_old2 {
        public static int constructor = 585682608;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userSelf_old2 extends TL_userSelf_old3 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.inactive = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.inactive);
        }
    }

    public static class TL_userSelf_old extends TL_userSelf_old3 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.inactive = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.inactive);
        }
    }

    public static class TL_user_layer65 extends TL_user {
        public static int constructor = -787638374;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.bot = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0;
            this.verified = (this.flags & 131072) != 0;
            this.restricted = (this.flags & 262144) != 0;
            this.min = (this.flags & ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES) != 0;
            if ((this.flags & 2097152) != 0) {
                z2 = true;
            }
            this.bot_inline_geo = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.bot_info_version = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 262144) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
            if ((this.flags & 524288) != 0) {
                this.bot_inline_placeholder = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.bot ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | C0542C.DEFAULT_BUFFER_SEGMENT_SIZE : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.restricted ? this.flags | 262144 : this.flags & -262145;
            this.flags = this.min ? this.flags | ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | 2097152 : this.flags & -2097153;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                abstractSerializedData.writeInt32(this.bot_info_version);
            }
            if ((this.flags & 262144) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
            if ((this.flags & 524288) != 0) {
                abstractSerializedData.writeString(this.bot_inline_placeholder);
            }
        }
    }

    public static class TL_user_old extends TL_user {
        public static int constructor = 585404530;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            boolean z2 = false;
            this.self = (this.flags & 1024) != 0;
            this.contact = (this.flags & 2048) != 0;
            this.mutual_contact = (this.flags & 4096) != 0;
            this.deleted = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.bot = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.bot_chat_history = (this.flags & 32768) != 0;
            this.bot_nochats = (this.flags & C0542C.DEFAULT_BUFFER_SEGMENT_SIZE) != 0;
            this.verified = (this.flags & 131072) != 0;
            if ((this.flags & 262144) != 0) {
                z2 = true;
            }
            this.explicit_content = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & 1) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & 2) != 0) {
                this.first_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.last_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 64) != 0) {
                this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.bot_info_version = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.self ? this.flags | 1024 : this.flags & -1025;
            this.flags = this.contact ? this.flags | 2048 : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | 4096 : this.flags & -4097;
            this.flags = this.deleted ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.bot ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | 32768 : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | C0542C.DEFAULT_BUFFER_SEGMENT_SIZE : this.flags & -65537;
            this.flags = this.verified ? this.flags | 131072 : this.flags & -131073;
            this.flags = this.explicit_content ? this.flags | 262144 : this.flags & -262145;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            if ((this.flags & 16) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & 32) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 64) != 0) {
                this.status.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                abstractSerializedData.writeInt32(this.bot_info_version);
            }
        }
    }

    public static class TL_videoEncrypted extends TL_video_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_video_old2 extends TL_video_layer45 {
        public static int constructor = 948937617;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_video_old3 extends TL_video_layer45 {
        public static int constructor = -291550643;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_video_old extends TL_video_layer45 {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_webPage_layer58 extends TL_webPage {
        public static int constructor = -897446185;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.url = abstractSerializedData.readString(z);
            this.display_url = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 128) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 256) != 0) {
                this.author = abstractSerializedData.readString(z);
            }
            if ((this.flags & 512) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.display_url);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeString(this.author);
            }
            if ((this.flags & 512) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_webPage_old extends TL_webPage {
        public static int constructor = -NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.url = abstractSerializedData.readString(z);
            this.display_url = abstractSerializedData.readString(z);
            if ((this.flags & 1) != 0) {
                this.type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 2) != 0) {
                this.site_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & 4) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & 8) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & 16) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & 32) != 0) {
                this.embed_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_width = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 64) != 0) {
                this.embed_height = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 128) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & 256) != 0) {
                this.author = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.display_url);
            if ((this.flags & 1) != 0) {
                abstractSerializedData.writeString(this.type);
            }
            if ((this.flags & 2) != 0) {
                abstractSerializedData.writeString(this.site_name);
            }
            if ((this.flags & 4) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 8) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & 16) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_url);
            }
            if ((this.flags & 32) != 0) {
                abstractSerializedData.writeString(this.embed_type);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_width);
            }
            if ((this.flags & 64) != 0) {
                abstractSerializedData.writeInt32(this.embed_height);
            }
            if ((this.flags & 128) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            if ((this.flags & 256) != 0) {
                abstractSerializedData.writeString(this.author);
            }
        }
    }

    public static class TL_message_secret_old extends TL_message_secret {
        public static int constructor = NUM;

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = (abstractSerializedData.readInt32(z) | 256) | 512;
            boolean z2 = true;
            this.unread = (this.flags & 1) != 0;
            this.out = (this.flags & 2) != 0;
            this.mentioned = (this.flags & 16) != 0;
            if ((this.flags & 32) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.media != null && TextUtils.isEmpty(this.media.captionLegacy) == null) {
                this.message = this.media.captionLegacy;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | 1 : this.flags & -2;
            this.flags = this.out ? this.flags | 2 : this.flags & -3;
            this.flags = this.mentioned ? this.flags | 16 : this.flags & -17;
            this.flags = this.media_unread ? this.flags | 32 : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            writeAttachPath(abstractSerializedData);
        }
    }
}
